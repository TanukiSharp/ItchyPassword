{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/VisualFeedback.ts","webpack:///./src/ui.ts","webpack:///./src/components/privatePartComponent.ts","webpack:///./src/TimedAction.ts","webpack:///./src/arrayUtils.ts","webpack:///./src/crypto.ts","webpack:///./src/stringUtils.ts","webpack:///./src/components/storageOutputComponent.ts","webpack:///./src/components/passwordComponent.ts","webpack:///./src/passwordGenerators/v1.ts","webpack:///./src/ciphers/v2.ts","webpack:///./src/components/cipherComponent.ts","webpack:///./src/ciphers/v1.ts","webpack:///./src/components/reEncryptComponent.ts","webpack:///./src/index.ts","webpack:///./src/TabControl.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","VisualFeedback","element","this","text","duration","innerHTML","timeout","clearTimeout","setTimeout","getElementById","elementName","document","Error","setupCopyButton","txt","button","feedback","visualFeedback","addEventListener","async","navigator","clipboard","writeText","error","console","stack","writeToClipboard","setText","SUCCESS_COLOR","ERROR_COLOR","btnProtectTitleForProtect","btnProtectTitleForClear","txtPrivatePart","txtPrivatePartConfirmation","btnProtect","spnProtectedConfirmation","spnPrivatePartSize","spnPrivatePartSizeConfirmation","onChangedHandlers","getPrivatePart","undefined","protectAndLockPrivatePart","length","disabled","title","updatePrivatePartsMatching","togglePrivatePartProtection","onProtectButtonClick","protectPrivatePartAction","action","delay","overrideDelay","onPrivatePartTextInput","onChangedHandler","toString","reset","style","setProperty","onPrivatePartConfirmationTextInput","arrayBufferToUnsignedBigInt","arrayBuffer","buffer","byteLength","headeredBuffer","Uint8Array","set","createHeaderedBuffer","arrayView","DataView","result","multiplier","BigInt","getUint8","toCustomBaseOneWay","bytes","alphabet","alphabetLength","number","arrayBufferToUnsignedBigIntWithoutHeader","remainder","asUintN","fromCustomBase","input","indexOf","byteValue","Number","push","totalLength","diff","slice","unsignedBigIntToArrayBuffer","BASE62_ALPHABET","getDerivedBytes","password","salt","baseKey","crypto","subtle","importKey","algorithm","hash","iterations","deriveKey","exportKey","generateRandomString","byteCount","array","getRandomValues","generateRandomBytes","stringToArray","str","TextEncoder","encode","divStorageOutput","txtPath","txtParameters","txtCustomKeys","onPathTextInput","update","onCustomKeysTextInput","_parameterKeys","_parameterPath","_reservedKeys","chainInfo","pathToObjectChain","path","separatorIndex","tail","firstPath","substr","remainingPath","node","head","tailParent","leaf","entries","customKeys","obj","JSON","parse","constructor","parseCustomKeys","removeProperty","resultParameters","source","target","reservedKeys","includes","shallowMerge","keys","stringify","clearOutputs","setParameters","parameterKeys","parameterPath","show","hide","btnTabPasswords","divTabPasswords","passwordGenerator","hkdfPurpose","_description","privatePart","publicPart","derivedKey","hkdfKey","sign","txtPublicPart","btnGeneratePublicPart","btnClearPublicPart","btnCopyPublicPart","spnCopyPublicPartFeedback","numOutputSizeRange","numOutputSizeNum","txtAlphabet","spnAlphabetSize","btnResetAlphabet","txtResultPassword","spnResultPasswordLength","btnCopyResultPassword","spnCopyResultPasswordFeedback","DEFAULT_LENGTH","DEFAULT_ALPHABET","RESERVED_KEYS","passwordPublicPartLastChange","onClearPublicPartButtonClick","prompt","updatePasswordPublicPartLastUpdate","updatePasswordGenerationParameters","onGeneratePublicPartButtonClick","randomString","run","Date","toISOString","updateResultPasswordLength","padStart","sortedAlphabet","split","sort","canRun","passwordParamters","public","datetime","numericValue","updateOutputSizeRangeToNum","onOutputSizeRangeInput","onOutputSizeNumInput","min","parseInt","val","max","isNaN","Math","updateOutputSizeNumToRange","updateAlphabetSize","updateAlphabetValidityDisplay","isAlphabetValid","onAlphabetTextInput","isAlphabetValidResult","onResetAlphabetButtonClick","resetAlphabet","privatePartString","publicPartString","privatePrivateBytes","publicPartBytes","keyString","generatePassword","onPublicPartTextInput","output","ArrayBuffer","nonce","passwordSalt","aesGcmParams","iv","passwordKey","encrypt","payload","decrypt","btnTabCiphers","divTabCiphers","cipher","txtCipherName","txtCipherSource","txtCipherTarget","btnEncrypt","btnDecrypt","btnClearCipherSource","spnCopyCipherTargetFeedback","btnCopyCipherTarget","btnClearCipherTarget","clearSourceVisualCue","setSourceVisualCueError","clearAllVisualCues","setCipherTargetValue","updateCipherParameters","version","onEncryptButtonClick","focus","warn","onDecryptButtonClick","decrypted","TextDecoder","decode","message","encryptionKeyDerivationSalt","ciphers","btnTabReEncrypt","divTabReEncrypt","txtReEncryptSource","txtReEncryptTarget","cboReEncryptFrom","cboReEncryptTo","btnReEncrypt","btnClearReEncryptSource","spnCopyReEncryptTargetFeedback","btnCopyReEncryptTarget","btnClearReEncryptTarget","fillCipherComboBox","cbo","initialValue","item","createElement","childNodes","description","add","onReEncryptButtonClick","sourceCipherIndex","targetCipherIndex","reEncrypted","Array","map","x","join","getTabButton","getTabContent","onChanged","buttonName","btn","type","setupViewButton","tabs","filter","e","components","init","_activeTabIndex","setActiveTab","index","activeTabIndex","tabInfo","onTabSelected","component"],"mappings":"aACE,IAAIA,EAAmB,GAGvB,SAASC,EAAoBC,GAG5B,GAAGF,EAAiBE,GACnB,OAAOF,EAAiBE,GAAUC,QAGnC,IAAIC,EAASJ,EAAiBE,GAAY,CACzCG,EAAGH,EACHI,GAAG,EACHH,QAAS,IAUV,OANAI,EAAQL,GAAUM,KAAKJ,EAAOD,QAASC,EAAQA,EAAOD,QAASF,GAG/DG,EAAOE,GAAI,EAGJF,EAAOD,QAKfF,EAAoBQ,EAAIF,EAGxBN,EAAoBS,EAAIV,EAGxBC,EAAoBU,EAAI,SAASR,EAASS,EAAMC,GAC3CZ,EAAoBa,EAAEX,EAASS,IAClCG,OAAOC,eAAeb,EAASS,EAAM,CAAEK,YAAY,EAAMC,IAAKL,KAKhEZ,EAAoBkB,EAAI,SAAShB,GACX,oBAAXiB,QAA0BA,OAAOC,aAC1CN,OAAOC,eAAeb,EAASiB,OAAOC,YAAa,CAAEC,MAAO,WAE7DP,OAAOC,eAAeb,EAAS,aAAc,CAAEmB,OAAO,KAQvDrB,EAAoBsB,EAAI,SAASD,EAAOE,GAEvC,GADU,EAAPA,IAAUF,EAAQrB,EAAoBqB,IAC/B,EAAPE,EAAU,OAAOF,EACpB,GAAW,EAAPE,GAA8B,iBAAVF,GAAsBA,GAASA,EAAMG,WAAY,OAAOH,EAChF,IAAII,EAAKX,OAAOY,OAAO,MAGvB,GAFA1B,EAAoBkB,EAAEO,GACtBX,OAAOC,eAAeU,EAAI,UAAW,CAAET,YAAY,EAAMK,MAAOA,IACtD,EAAPE,GAA4B,iBAATF,EAAmB,IAAI,IAAIM,KAAON,EAAOrB,EAAoBU,EAAEe,EAAIE,EAAK,SAASA,GAAO,OAAON,EAAMM,IAAQC,KAAK,KAAMD,IAC9I,OAAOF,GAIRzB,EAAoB6B,EAAI,SAAS1B,GAChC,IAAIS,EAAST,GAAUA,EAAOqB,WAC7B,WAAwB,OAAOrB,EAAgB,SAC/C,WAA8B,OAAOA,GAEtC,OADAH,EAAoBU,EAAEE,EAAQ,IAAKA,GAC5BA,GAIRZ,EAAoBa,EAAI,SAASiB,EAAQC,GAAY,OAAOjB,OAAOkB,UAAUC,eAAe1B,KAAKuB,EAAQC,IAGzG/B,EAAoBkC,EAAI,GAIjBlC,EAAoBA,EAAoBmC,EAAI,G,sCClF9C,MAAMC,EAIT,YAAmBC,GACfC,KAAKD,QAAUA,EAGZ,QAAQE,EAAcC,GACzBF,KAAKD,QAAQI,UAAYF,EACrBD,KAAKI,SACLC,aAAaL,KAAKI,SAEtBJ,KAAKI,QAAUE,WAAW,IAAMN,KAAKD,QAAQI,UAAY,GAAID,ICX9D,SAASK,EAAeC,GAC3B,MAAMT,EAA4BU,SAASF,eAAeC,GAE1D,GAAoB,OAAhBA,EACA,MAAM,IAAIE,MAAM,gBAAgBF,iBAGpC,OAAOT,EAaJ,SAASY,EAAgBC,EAAuBC,EAA0BC,GAC7E,MAAMC,EAAiC,IAAIjB,EAAegB,GAC1DD,EAAOG,iBAAiB,QAASC,gBAZrCA,eAAgChB,GAC5B,IAEI,aADMiB,UAAUC,UAAUC,UAAUnB,IAC7B,EACT,MAAOoB,GAEL,OADAC,QAAQD,MAAMA,EAAME,OAASF,IACtB,GAOGG,CAAiBZ,EAAI7B,OAC3BgC,EAAeU,QAAQ,SAAU,KAEjCV,EAAeU,QAAQ,iDAAkD,OAK9E,MAAMC,EAAwB,UACxBC,EAAsB,UC7BnC,MAAMC,EAA4B,8HAC5BC,EAA0B,kEAE1BC,EAAmCvB,EAAe,kBAClDwB,EAA+CxB,EAAe,8BAC9DyB,EAA+BzB,EAAe,cAC9C0B,EAA6C1B,EAAe,4BAE5D2B,EAAuC3B,EAAe,sBACtD4B,EAAmD5B,EAAe,kCAIxE,IAAI,EAEJ,MAAM6B,EAAoC,GAMnC,SAASC,IACZ,YAAoBC,IAAhB,EACO,EAEJR,EAAe/C,MAG1B,SAASwD,IAC+B,IAAhCT,EAAe/C,MAAMyD,SAIzB,EAAcV,EAAe/C,MAC7BkD,EAAyB9B,UAAY,YAErC2B,EAAe/C,MAAQ,GACvBgD,EAA2BhD,MAAQ,GACnCmD,EAAmB/B,UAAY,IAC/BgC,EAA+BhC,UAAY,IAE3C2B,EAAeW,UAAW,EAC1BV,EAA2BU,UAAW,EAEtCT,EAAW7B,UAAY,mBACvB6B,EAAWU,MAAQb,EAEnBc,KAeJ,SAASC,SACeN,IAAhB,EACAC,KAbJ,OAAcD,EACdL,EAAyB9B,UAAY,GAErC2B,EAAeW,UAAW,EAC1BV,EAA2BU,UAAW,EAEtCT,EAAW7B,UAAY,mBACvB6B,EAAWU,MAAQd,EACnBI,EAAWS,UAAW,GAW1B,SAASI,IACLD,IAGJ,MAAME,EAAwC,IC/EvC,MAEH,YAA2BC,EAA0BC,GAA1B,KAAAD,SAA0B,KAAAC,QAG9C,MAAMC,QACYX,IAAjBtC,KAAKI,SACLC,aAAaL,KAAKI,SAGtB,MAAM4C,OAA0BV,IAAlBW,EAA8BA,EAAgBjD,KAAKgD,MAEjEhD,KAAKI,QAAUE,WAAW,KACtBN,KAAK+C,SACL/C,KAAKI,aAAUkC,GAChBU,KDgEmDT,EA/Dd,KAiEhD,SAASW,IAML,IAAIC,EACJ,IAAKA,KANLnB,EAAWS,SAA2C,IAAhCX,EAAe/C,MAAMyD,OAE3CN,EAAmB/B,UAAY2B,EAAe/C,MAAMyD,OAAOY,WAC3DT,IAGyBP,GACrBe,IAGJL,EAAyBO,QAG7B,SAASV,IACDZ,EAA2BhD,QAAU+C,EAAe/C,MACpDgD,EAA2BuB,MAAMC,YAAY,aAAc7B,GAE3DK,EAA2BuB,MAAMC,YAAY,aAAc5B,GAInE,SAAS6B,IACLrB,EAA+BhC,UAAY4B,EAA2BhD,MAAMyD,OAAOY,WACnFN,EAAyBO,QACzBV,IE9DJ,SAASc,EAA4BC,GAGjC,MAAMlB,GAFNkB,EAlCJ,SAA8BC,GAC1B,GAAIA,EAAOC,WAAa,MACpB,MAAM,IAAIlD,MAAM,qBAAqBiD,EAAOC,oBAGhD,IAAIpB,EAASmB,EAAOC,WACpB,MAAMC,EAA6B,IAAIC,WAAW,EAAIH,EAAOC,YAE7D,IAAK,IAAI9F,EAAY,EAAGA,EAAI,EAAGA,GAAK,EAChC+F,EAAe/F,GAAK0E,EAAS,IAC7BA,GAAU,IAKd,OAFAqB,EAAeE,IAAI,IAAID,WAAWH,GAAS,GAEpCE,EAAeF,OAmBRK,CAAqBN,IAEAE,WAC7BK,EAAsB,IAAIC,SAASR,EAAa,GAEtD,IAAIS,EAAiB,GACjBC,EAAqB,GAEzB,IAAK,IAAItG,EAAY,EAAGA,EAAI0E,EAAQ1E,GAAK,EACrCqG,GAAUE,OAAOJ,EAAUK,SAASxG,IAAMsG,EAC1CA,GAAc,KAGlB,OAAOD,EAiCJ,SAASI,EAAmBC,EAAoBC,GACnD,MAAMC,EAAyBL,OAAOI,EAASjC,QAE/C,IAAI2B,EAAiB,GACjBQ,EAlER,SAAkDjB,GAC9C,MAAMlB,EAAiBkB,EAAYE,WAC7BK,EAAsB,IAAIC,SAASR,EAAa,GAEtD,IAAIS,EAAiB,GACjBC,EAAqB,GAEzB,IAAK,IAAItG,EAAY,EAAGA,EAAI0E,EAAQ1E,GAAK,EACrCqG,GAAUE,OAAOJ,EAAUK,SAASxG,IAAMsG,EAC1CA,GAAc,KAGlB,OAAOD,EAsDcS,CAAyCJ,GAE9D,KAAOG,EAAS,IAChB,CACI,MAAME,EAAoBF,EAASD,EACnCC,GAAUD,EAIVP,GAAUM,EAFyBJ,OAAOS,QAAQ,EAAGD,IAKzD,OAAOV,EAsBJ,SAASY,EAAeC,EAAeP,GAC1C,MAAMC,EAAyBL,OAAOI,EAASjC,QAE/C,IAAImC,EAAiB,GACjBP,EAAqB,GAEzB,IAAK,IAAItG,EAAY,EAAGA,EAAIkH,EAAMxC,OAAQ1E,GAAK,EAAG,CAG9C6G,GAFsBN,OAAOI,EAASQ,QAAQD,EAAMlH,KAElCsG,EAClBA,GAAcM,EAGlB,OAjFG,SAAqCC,GACxC,MAAMR,EAAwB,GAE9B,KAAOQ,EAAS,IAChB,CACI,MAAME,EAAoBF,EAAS,KACnCA,GAAU,KAEV,MAAMO,EAAoBC,OAAYd,OAAOS,QAAQ,EAAGD,IAExDV,EAAOiB,KAAKF,GAGhB,IAAIG,EAAsBlB,EAAO,GAC7BA,EAAO3B,OAAS,IAChB6C,GAA2B,IAAZlB,EAAO,IAI1B,MAAMmB,EAAOD,GAAelB,EAAO3B,OAAS,GAE5C,IAAK,IAAI1E,EAAY,EAAGA,EAAIwH,EAAMxH,GAAK,EACnCqG,EAAOiB,KAAK,GAGhB,OAAO,IAAItB,WAAWK,EAAOoB,MAAM,IAAI5B,OAwDhC6B,CAA4Bb,GC5IhC,MAAMc,EAA0B,iEAehCxE,eAAeyE,EAAgBC,EAAuBC,GACzD,MAAMC,QAA2BC,OAAOC,OAAOC,UAC3C,MACAL,EACA,UACA,EACA,CAAC,cAGCM,EAA0B,CAC5B5H,KAAM,SACN6H,KAAM,UACNC,WAAY,IACZP,QAQEzB,QAA0B2B,OAAOC,OAAOK,UAC1CH,EACAJ,EAPwC,CACxCxH,KAAM,UACNmE,OAAQ,MAOR,EACA,CAAC,YAKL,aAF+BsD,OAAOC,OAAOM,UAAU,MAAOlC,GAU3D,SAASmC,EAAqBC,EAAoB,GAAI9B,EAAmBgB,GAE5E,OAAO,EAPJ,SAA6Bc,EAAoB,IACpD,MAAMC,EAAoB,IAAI1C,WAAWyC,GACzC,OAAOT,OAAOW,gBAAgBD,GAAO7C,OAIV+C,CAAoBH,GACH9B,GClDzC,SAASkC,EAAcC,GAE1B,OADgB,IAAIC,aACLC,OAAOF,GAAKjD,OCN/B,MAAMoD,EAAqCxG,EAAe,oBAEpDyG,EAA4BzG,EAAe,WAE3C0G,EAAkC1G,EAAe,iBACjD2G,EAAkC3G,EAAe,iBA2DvD,SAAS4G,IACLC,IAGJ,SAASC,IACLD,IA4BJ,SAASA,IACL,QAAuB9E,IAAnBgF,QAAmDhF,IAAnBiF,QAAkDjF,IAAlBkF,EAChE,OAGJ,MAAMC,EAnEV,SAASC,EAAkBC,EAAcF,GACrC,MAAMG,EAAyBD,EAAK1C,QAAQ,KAEtC4C,EAAoB,GAEpBC,EAAoBF,GAAkB,EAAID,EAAKI,OAAO,EAAGH,GAAkBD,EAC3EK,EAAoCJ,GAAkB,EAAID,EAAKI,OAAOH,EAAiB,QAAKtF,EAElG,QAAkBA,IAAdmF,EAAyB,CACzB,MAAMQ,EAAoB,GAC1BA,EAAKH,GAAaD,EAClBJ,EAAY,CACRS,KAAMD,EACNE,WAAYF,EACZJ,aAGJJ,EAAUI,KAAKC,GAAaD,EAC5BJ,EAAUU,WAAaV,EAAUI,KACjCJ,EAAUI,KAAOA,EAGrB,OAAIG,EACON,EAAkBM,EAAeP,GAGrCA,EAyCuBC,CAAkB,GAAGV,EAAQjI,SAASwI,KAC9Da,EAAoBX,EAAUI,KAEpC,IAAK,MAAOxI,EAAKN,KAAUP,OAAO6J,QAAQf,GACtCc,EAAK/I,GAAON,EAGhB,MAAMuJ,EA5BV,WACI,GAA4B,KAAxBpB,EAAcnI,MACd,MAAO,GAGX,IACI,MAAMwJ,EAAWC,KAAKC,MAAMvB,EAAcnI,OAC1C,OAAY,OAARwJ,GAAyC,WAAzBA,EAAIG,YAAYrK,KACzB,KAEJkK,EACT,MACE,OAAO,MAgB4BI,GACA,OAAfL,EApCpBpB,EAAc5D,MAAMsF,eAAe,cAIvC1B,EAAc5D,MAAMC,YAAY,aAAc5B,GAiC9C,MAAMkH,EAxGV,SAAsBC,EAA4BC,EAA4BC,GAC1E,MAAM7E,EAAsB,GAE5B,GAAe,OAAX2E,EACA,IAAK,MAAOzJ,EAAKN,KAAUP,OAAO6J,QAAQS,IACH,IAA/BE,EAAaC,SAAS5J,KACtB8E,EAAO9E,GAAON,GAK1B,GAAe,OAAXgK,EACA,IAAK,MAAO1J,EAAKN,KAAUP,OAAO6J,QAAQU,GACtC5E,EAAO9E,GAAON,EAItB,OAAOoF,EAuF+B+E,CAAaZ,EAAYF,EAAMZ,GAExB,IAAzChJ,OAAO2K,KAAKN,GAAkBrG,OAE9BiF,EAAUU,WAAW3J,OAAO2K,KAAK1B,EAAUU,YAAY,IAAM,KAE7DV,EAAUU,WAAW3J,OAAO2K,KAAK1B,EAAUU,YAAY,IAAMU,EAGjE5B,EAAclI,MAAQyJ,KAAKY,UAAU3B,EAAUS,UAAM5F,EAAW,GAG7D,SAAS+G,IACZ/B,OAAiBhF,EACjBiF,OAAiBjF,EACjBkF,OAAgBlF,EAChB2E,EAAclI,MAAQ,GAG1B,IAAIuI,EACAC,EACAC,EAEG,SAAS8B,EAAcC,EAA4BC,EAAuBR,GAC7E1B,EAAiBiC,EACjBhC,EAAiBiC,EACjBhC,EAAgBwB,EAChB5B,IAGG,SAASqC,IACZ1C,EAAiBzD,MAAMC,YAAY,UAAW,WAG3C,SAASmG,IACZ3C,EAAiBzD,MAAMC,YAAY,UAAW,QCxIlD,MAAMoG,EAAoCpJ,EAAe,mBACnDqJ,EAAoCrJ,EAAe,mBAEnDsJ,EAA+C,ICd9C,MAIH,YAAmBC,GACf9J,KAAK8J,YAAcnD,EAAcmD,GACjC9J,KAAK+J,aAAe,mCAAmCD,KAG3D,cACI,OAAO,EAGX,kBACI,OAAO9J,KAAK+J,aAGT,uBAAuBC,EAA0BC,GACpD,MAAMC,QAAgCxE,EAAgBsE,EAAaC,GAO7DE,QAA2BrE,OAAOC,OAAOC,UAC3C,MACAkE,EAPqC,CACrC7L,KAAM,OACN6H,KAAM,CAAE7H,KAAM,aAOd,EACA,CAAC,SAGL,aAAayH,OAAOC,OAAOqE,KAAK,OAAQD,EAASnK,KAAK8J,eDnBe,YAEvEO,EAAkC9J,EAAe,iBACjD+J,EAA0C/J,EAAe,yBACzDgK,EAAuChK,EAAe,sBACtDiK,EAAsCjK,EAAe,qBACrDkK,GAA8ClK,EAAe,6BAE7DmK,GAAuCnK,EAAe,sBACtDoK,GAAqCpK,EAAe,oBAEpDqK,GAAgCrK,EAAe,eAC/CsK,GAAoCtK,EAAe,mBACnDuK,GAAqCvK,EAAe,oBAEpDwK,GAAsCxK,EAAe,qBACrDyK,GAA4CzK,EAAe,2BAC3D0K,GAA0C1K,EAAe,yBACzD2K,GAAkD3K,EAAe,iCAEjE4K,GAAyB,GACzBC,GAA2B,iGAE3BC,GAA0B,CAAC,WAAY,SAAU,SAAU,YAEjE,IAAIC,GAEJ,SAASC,KACDlB,EAActL,MAAMyD,OAAS,GACgE,MAAzFgJ,OAAO,uEAA0E,MAKzFnB,EAActL,MAAQ,GAEtB0M,KACAC,MAGJ,SAASC,KACL,GAAItB,EAActL,MAAMyD,OAAS,GACqE,MAA9FgJ,OAAO,4EAA+E,IACtF,OAIR,MAAMI,EAAuB,IAC7BvB,EAActL,MAAQ6M,EAEtBH,KAEAI,KAGJ,SAASJ,KAEDH,GADAjB,EAActL,MAAMyD,OAAS,GACE,IAAIsJ,MAAOC,mBAEXzJ,EAkCvC,SAAS0J,KACLhB,GAAwB7K,UAAY4K,GAAkBhM,MAAMyD,OAAOY,WAAW6I,SAAS,EAAG,KAG9F,SAAS,GAAgBxH,GACrB,MAAMyH,EAA2BzH,EAAS0H,MAAM,IAChDD,EAAeE,OAEf,IAAK,IAAItO,EAAY,EAAGA,EAAIoO,EAAe1J,OAAQ1E,GAAK,EACpD,GAAIoO,EAAepO,EAAI,KAAOoO,EAAepO,GACzC,OAAO,EAIf,OAAO,EAGX,SAAS4N,KACL,IAAiB,IAAbW,KAEA,YADA,KAIJ,MAAMC,EAAiC,CACnCC,OAAQlC,EAActL,MACtByN,SAAUlB,IAGRmB,EAAuB1B,GAAkBhM,MAAMyD,OACjDiK,IAAiBtB,KACjBmB,EAAkB9J,OAASiK,GAG/B,MAAMhI,EAAmBmG,GAAY7L,MACjC0F,IAAa2G,KACbkB,EAAkB7H,SAAWA,GAGjC,EAAqC6H,EAAmB,WAAYjB,IAGxE,SAASqB,KACL/B,GAAiB5L,MAAQ2L,GAAmB3L,MAgBhDkC,eAAe0L,KACXD,WACMb,KAGV5K,eAAe2L,MAlBf,WACI,MAAMC,EAAcC,SAASpC,GAAmBmC,IAAK,IAC/CE,EAAcD,SAASnC,GAAiB5L,MAAO,IAC/CiO,EAAcF,SAASpC,GAAmBsC,IAAK,IAErD,OAAmB,IAAfC,MAAMF,KACNrC,GAAmB3L,MAAQmO,KAAKF,IAAIH,EAAKK,KAAKL,IAAIE,EAAKC,IAAM5J,YACtD,IAYP+J,IACAT,WAEEb,KAGV,SAASuB,KACLvC,GAAgB1K,UAAYyK,GAAY7L,MAAMyD,OAAOY,WAEdwH,GAAY7L,MAAMyD,OAAOY,WAAWZ,OAC9C,IAEzBqI,GAAgB1K,UAAY0K,GAAgB1K,UAAU8L,SAAS,EAAG,MAI1E,SAASoB,GAA8BC,GAC/BA,EACA1C,GAAYtH,MAAMsF,eAAe,cAEjCgC,GAAYtH,MAAMC,YAAY,aAAc5B,GAIpDV,eAAesM,KACX,MAAMC,EAAiC,GAAgB5C,GAAY7L,OAEnEsO,GAA8BG,IAEA,IAA1BA,IAIJJ,WACMvB,MAGV5K,eAAewM,KACXC,KACAN,WACMvB,KAGV,SAAS,KACLd,GAAkBhM,MAAQ,GAC1B,IACAiN,KAGJ,SAASK,KACL,MAAM5H,EAAmBmG,GAAY7L,MAErC,OAAkC,IAA9B,GAAgB0F,MAIhB,IAA6BjC,QAAU,GAAK6H,EAActL,MAAMyD,OAAS,GAAKiC,EAASjC,OAAS,GAOxGvB,eAAe4K,KACX,IAAiB,IAAbQ,KAEA,YADA,KAIJ,MAAMsB,EAA4B,IAC5BC,EAAmBvD,EAActL,MAEjC8O,EAAmC,EAA0BF,GAC7DG,EAA+B,EAA0BF,GAIzDG,EAAoB,QAFUlE,EAAkBmE,iBAAiBH,EAAqBC,GAE1BlD,GAAY7L,OF3P3E,IAAkBiG,EAAexC,EE4PpCuI,GAAkBhM,OF5PGiG,EE4P0B+I,EF5PXvL,EE4PsB0K,KAAKF,IAAI,EAAGF,SAASpC,GAAmB3L,MAAO,KF3PrGiG,EAAMxC,QAAUA,EACTwC,EAGJA,EAAM+C,OAAO,EAAGvF,IEyPvBwJ,KAEAN,KAGJzK,eAAeyM,KACX9C,GAAY7L,MAAQqM,GACpBgC,KAEA,MAAMI,EAAiC,GAAgB5C,GAAY7L,OAEnEsO,GAA8BG,GAE1BA,SACM3B,KAId5K,eAAegN,KACXxC,WACMI,KEhRH,MAAM,GACT,cACI,OAAO,EAGX,kBACI,MAAO,mBAGX,cAAc7G,EAAoBW,GAC9B,MAAMuI,EAAsB,IAAIC,YAAY,GAAenJ,EAAMpB,YAE3DwK,EAAoBtI,OAAOW,gBAAgB,IAAI3C,WAAWoK,EAAQ,EAAG,KACrEG,EAA2BvI,OAAOW,gBAAgB,IAAI3C,WAAWoK,EAAQ,GAAI,KAE7EI,EAA6B,CAC/BjQ,KAAM,UACNkQ,GAAIH,GAQFI,QAA+B1I,OAAOC,OAAOC,UAC/C,YACMN,EAAgBC,EAAU0I,GAPK,CACrChQ,KAAM,UACNmE,OAAQ,MAOR,EACA,CAAC,YAGC2B,QAA4B2B,OAAOC,OAAO0I,QAAQH,EAAcE,EAAaxJ,GAInF,OAFA,IAAIlB,WAAWoK,GAAQnK,IAAI,IAAID,WAAWK,GAAS,IAE5C+J,EAGX,cAAclJ,EAAoBW,GAC9B,MAAMyI,EAAoB,IAAItK,WAAWkB,EAAO,EAAG,IAC7CqJ,EAA2B,IAAIvK,WAAWkB,EAAO,GAAI,IACrD0J,EAAsB,IAAI5K,WAAWkB,EAAO,IAE5CsJ,EAA6B,CAC/BjQ,KAAM,UACNkQ,GAAIH,GAQFlE,QAAgCxE,EAAgBC,EAAU0I,GAE1DG,QAA+B1I,OAAOC,OAAOC,UAC/C,MACAkE,EATqC,CACrC7L,KAAM,UACNmE,OAAQ,MASR,EACA,CAAC,YAGL,aAAasD,OAAOC,OAAO4I,QAAQL,EAAcE,EAAaE,ICtDtE,MAAM,GAA0B,CAAC,UAAW,SAEtCE,GAAkCrO,EAAe,iBACjDsO,GAAkCtO,EAAe,iBAEjDuO,GAAyB,IAAI,GAE7BC,GAAkCxO,EAAe,iBACjDyO,GAAoCzO,EAAe,mBACnD0O,GAAoC1O,EAAe,mBACnD2O,GAA+B3O,EAAe,cAC9C4O,GAA+B5O,EAAe,cAE9C6O,GAAyC7O,EAAe,wBACxD8O,GAAgD9O,EAAe,+BAC/D+O,GAAwC/O,EAAe,uBACvDgP,GAAyChP,EAAe,wBAE9D,SAASiP,KACLR,GAAgB1L,MAAMsF,eAAe,oBAOzC,SAAS6G,KACLT,GAAgB1L,MAAMC,YAAY,mBAAoB5B,GAO1D,SAAS+N,KACLF,KAZAP,GAAgB3L,MAAMsF,eAAe,oBAgBzC,SAAS+G,GAAqB5Q,GAC1BkQ,GAAgBlQ,MAAQA,EAKxB6Q,KAGJ,SAASA,KACL,GAA8B,KAA1BX,GAAgBlQ,OAAwC,KAAxBgQ,GAAchQ,MAE9C,YADA,IAWJ,EAPyB,CACrB8Q,QAASf,GAAOe,QAChB9Q,MAAOkQ,GAAgBlQ,OAGd,WAAWgQ,GAAchQ,QAEuB,IAGjEkC,eAAe6O,KAKX,GAJAd,GAAgBe,QAChBJ,GAAqB,IACrBD,KAEqC,IAAjCV,GAAgBjQ,MAAMyD,OAEtB,YADAiN,KAIJ,MAAMzF,EAAsB3H,IAC5B,GAA2B,IAAvB2H,EAAYxH,OAEZ,YADAlB,QAAQ0O,KAAK,yBAIjB,MAAMhL,EAAqB,EAA0BgK,GAAgBjQ,OAC/D4G,EAAwB,EAA0BqE,GAIxD2F,GPYG,SAAsBnL,EAAoBC,GAC7C,MAAMC,EAAyBL,OAAOI,EAASjC,QAE/C,IAAI2B,EAAiB,GACjBQ,EAAiBlB,EAA4Be,GAEjD,KAAOG,EAAS,IAChB,CACI,MAAME,EAAoBF,EAASD,EACnCC,GAAUD,EAIVP,GAAUM,EAFyBJ,OAAOS,QAAQ,EAAGD,IAKzD,OAAOV,EO5Bc,OAFgB2K,GAAOL,QAAQzJ,EAAOW,GAEH,IAG5D1E,eAAegP,KAKX,GAJAjB,GAAgBe,QAChBJ,GAAqB,IACrBD,KAEqC,IAAjCV,GAAgBjQ,MAAMyD,OAEtB,YADAiN,KAIJ,MAAMzF,EAAsB3H,IP/GzB,IAAuBmE,EOgH1B,GAA2B,IAAvBwD,EAAYxH,OAKhB,IACI,MAAMwC,EAAqB,EAA0BgK,GAAgBjQ,MAAO,GACtE4G,EAAwB,EAA0BqE,GAElDkG,QAA+BpB,GAAOH,QAAQ3J,EAAOW,GAE3DgK,IP3HsBnJ,EO2HwB0J,GP1HlC,IAAIC,aACLC,OAAO5J,KO0HpB,MAAOnF,GACLC,QAAQ0O,KAAK,oBAAoB3O,EAAMgP,QAAU,YAAYhP,EAAMgP,UAAY,wBAjFnFpB,GAAgB3L,MAAMC,YAAY,mBAAoB5B,QAqElDL,QAAQ0O,KAAK,yBC/GrB,MAAMM,GAA2C,IAAIxM,WAAW,CAAE,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,GAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,GAAM,MAAQH,OCWpK,MAAM4M,GAAqB,CACvB,IDVG,MACH,cACI,OAAO,EAGX,kBACI,MAAO,mBAGX,cAAcvL,EAAoBW,GAC9B,MAAMuI,EAAsB,IAAIC,YAAY,GAAUnJ,EAAMpB,YAEtDwK,EAAkB,IAAIlK,SAASgK,EAAQ,EAAG,IAChDpI,OAAOW,gBAAgB,IAAI3C,WAAWoK,EAAQ,EAAG,KAEjD,MAAMI,EAA6B,CAC/BjQ,KAAM,UACNkQ,GAAIH,GAQFI,QAA+B1I,OAAOC,OAAOC,UAC/C,YACMN,EAAgBC,EAAU2K,IAPK,CACrCjS,KAAM,UACNmE,OAAQ,MAOR,EACA,CAAC,YAGC2B,QAA4B2B,OAAOC,OAAO0I,QAAQH,EAAcE,EAAaxJ,GAInF,OAFA,IAAIlB,WAAWoK,GAAQnK,IAAI,IAAID,WAAWK,GAAS,IAE5C+J,EAGX,cAAclJ,EAAoBW,GAC9B,MAAMyI,EAAkB,IAAIlK,SAASc,EAAO,EAAG,IACzC0J,EAAoB,IAAIxK,SAASc,EAAO,IAExCsJ,EAA6B,CAC/BjQ,KAAM,UACNkQ,GAAIH,GAQFlE,QAAgCxE,EAAgBC,EAAU2K,IAE1D9B,QAA+B1I,OAAOC,OAAOC,UAC/C,MACAkE,EATqC,CACrC7L,KAAM,UACNmE,OAAQ,MASR,EACA,CAAC,YAGL,aAAasD,OAAOC,OAAO4I,QAAQL,EAAcE,EAAaE,KCrDlE,IAAI,IAGF8B,GAAoCjQ,EAAe,mBACnDkQ,GAAoClQ,EAAe,mBAEnDmQ,GAAuCnQ,EAAe,sBACtDoQ,GAAuCpQ,EAAe,sBAEtDqQ,GAAqCrQ,EAAe,oBACpDsQ,GAAmCtQ,EAAe,kBAClDuQ,GAAiCvQ,EAAe,gBAEhDwQ,GAA4CxQ,EAAe,2BAC3DyQ,GAAmDzQ,EAAe,kCAClE0Q,GAA2C1Q,EAAe,0BAC1D2Q,GAA4C3Q,EAAe,2BAEjE,SAAS4Q,GAAmBC,EAAwBC,GAChD,IAAIvC,EAEJ,IAAKA,KAAUyB,GAAS,CACpB,MAAMe,EAA0B7Q,SAAS8Q,cAAc,UACvDD,EAAKvS,MAAQqS,EAAII,WAAWhP,OAAOY,WACnCkO,EAAKrR,KAAO,GAAG6O,EAAO2C,iBAAiB3C,EAAOe,WAC9CuB,EAAIM,IAAIJ,GAGZF,EAAIrS,MAAQsS,EAAajO,WAG7B,SAAS,KACLsN,GAAmBpN,MAAMsF,eAAe,oBAe5C,SAAS,KACL,KAZA+H,GAAmBrN,MAAMsF,eAAe,oBAgB5C3H,eAAe0Q,KAIX,GAHAhB,GAAmB5R,MAAQ,GAC3B,KAEwC,IAApC2R,GAAmB3R,MAAMyD,OAEzB,YAlBJkO,GAAmBpN,MAAMC,YAAY,mBAAoB5B,GAqBzD,GAAIiP,GAAiB7R,QAAU8R,GAAe9R,MAE1C,YAnBJ4R,GAAmBrN,MAAMC,YAAY,mBAAoB5B,GAsBzD,MAAMqI,EAAsB3H,IAC5B,GAA2B,IAAvB2H,EAAYxH,OAEZ,YADAlB,QAAQ0O,KAAK,yBAIjB,MAAM4B,EAAoB9E,SAAS8D,GAAiB7R,MAAO,IACrD8S,EAAoB/E,SAAS+D,GAAe9R,MAAO,IAEnD4G,EAAwB,EAA0BqE,GAElDhF,EP/EH,SAAoB4B,GACnBA,EAAIpE,OAAS,GAAM,IACnBoE,EAAM,IAAMA,GAGhB,MAAMzC,EAAqB,IAAIL,WAAW8C,EAAIpE,OAAS,GAEvD,IAAK,IAAI1E,EAAI,EAAGA,EAAIqG,EAAOP,WAAY9F,GAAK,EACxCqG,EAAOrG,GAAKgP,SAASlG,EAAImB,OAAW,EAAJjK,EAAO,GAAI,IAG/C,OAAOqG,EAAOR,OOoEa,CAAuB+M,GAAmB3R,OAC/DmR,QAA+BK,GAAQqB,GAAmBjD,QAAQ3J,EAAOW,GACzEmM,QAAiCvB,GAAQsB,GAAmBpD,QAAQyB,EAAWvK,GTmDlF,IAAkBhC,ESjDrBgN,GAAmB5R,OTiDE4E,ESjD0BmO,ETkDxCC,MAAMrS,UAAUsS,IAAI/T,KACvB,IAAI6F,WAAWH,GACfsO,IAAM,KAAOA,EAAE7O,SAAS,KAAKmC,OAAO,IACtC2M,KAAK,KU1IX,MAYM,GAAkB,CAZS,CAC7BC,aAAY,IACD5R,EAAe,iBAE1B6R,cAAa,IACF7R,EAAe,iBAE1B,gBACI,MAMJ,IZoFG,MACH,OACIyB,EAAWhB,iBAAiB,QAAS6B,GACrCf,EAAed,iBAAiB,QAASkC,GACzCnB,EAA2Bf,iBAAiB,QAASwC,GAErDb,IACAX,EAAWU,MAAQd,IY1FvB,IN2PG,MACH,eACI,OAAO+H,EAEX,gBACI,OAAOC,EAEX,gBACI,IACA8B,KAGJ,ON3QG,IAA2B2G,IM4QIxG,GN3QlCzJ,EAAkBgD,KAAKiN,GM8QnB3H,GAAmBsC,IAAM7B,GAAe/H,WACxCsH,GAAmB3L,MAAQoM,GAAe/H,WAE1CmH,EAAmBvJ,iBAAiB,QAASuK,IAC7CjB,EAAsBtJ,iBAAiB,QAAS2K,IAxMxD,SAAyB/K,EAAuB0R,GAC5C,MAAMC,EAAwBhS,EAAe+R,GAC7CC,EAAIvR,iBAAiB,QAAS,KACT,aAAbJ,EAAI4R,MACJ5R,EAAI4R,KAAO,QACXD,EAAIpS,UAAY,SAEhBS,EAAI4R,KAAO,WACXD,EAAIpS,UAAY,UAkMpBsS,CAAgB1H,GAAmB,yBAEnCpK,EAAgB0J,EAAeG,EAAmBC,IAClD9J,EAAgBoK,GAAmBE,GAAuBC,IAE1DR,GAAmB1J,iBAAiB,QAAS2L,IAC7ChC,GAAiB3J,iBAAiB,QAAS4L,IAE3ChC,GAAY5J,iBAAiB,QAASuM,IACtCzC,GAAiB9J,iBAAiB,QAASyM,IAE3CpD,EAAcrJ,iBAAiB,QAASiN,IAExCvB,KACAgB,OM9RJ,IHuGG,MACH,eACI,OAAOkB,GAEX,gBACI,OAAOC,GAEX,gBACI,IACAe,KAGJ,OACIjP,EAAgBsO,GAAiBK,GAAqBD,IAEtDH,GAAWlO,iBAAiB,QAAS8O,IACrCX,GAAWnO,iBAAiB,QAASiP,IAErClB,GAAc/N,iBAAiB,QAAS,KACpC4O,OAGJZ,GAAgBhO,iBAAiB,QAAS,KAClCgO,GAAgBjQ,MAAMyD,OAAS,GAC/BgN,OAIRJ,GAAqBpO,iBAAiB,QAAS,KAC3CgO,GAAgBjQ,MAAQ,KAG5BwQ,GAAqBvO,iBAAiB,QAAS,KAC3C2O,GAAqB,QGvI7B,IDuEG,MACH,eACI,OAAOa,GAEX,gBACI,OAAOC,GAEX,gBACI,IAGJ,OACI9P,EAAgBgQ,GAAoBM,GAAwBD,IAG5DG,GAA2CP,GAAkBL,GAAQ/N,OAAS,GAC9E2O,GAA2CN,GAAgBN,GAAQ/N,OAAS,GAE5EkO,GAAmB1P,iBAAiB,QAAS,KACrC0P,GAAmB3R,MAAMyD,OAAS,GAClC,OAIRuO,GAAwB/P,iBAAiB,QAAS,KAC9C0P,GAAmB3R,MAAQ,KAG/BmS,GAAwBlQ,iBAAiB,QAAS,KAC9C2P,GAAmB5R,MAAQ,KAG/B+R,GAAa9P,iBAAiB,QAAS2Q,MCtG3C,IP4HG,MACH,OACIzK,EAAclG,iBAAiB,QAASqG,GACxCL,EAAQhG,iBAAiB,QAASmG,MO5HpCuL,GAAmB,GAASC,OAAOC,QAAsCtQ,IAAhCsQ,EAAeT,cACxDU,GAA2B,GAASF,OAAOC,QAAgCtQ,IAA1BsQ,EAAiBE,MAExE,IC7BO,MAaH,YAA2BJ,GAAA,KAAAA,OAZnB,KAAAK,iBAA2B,EAa/B,IAAK,IAAIjV,EAAI,EAAGA,EAAIkC,KAAK0S,KAAKlQ,OAAQ1E,GAAK,EACvC4U,EAAK5U,GAAGqU,eAAenR,iBAAiB,QAAS,KAC7ChB,KAAKgT,aAAalV,KAI1BkC,KAAKgT,aAAa,GAjBtB,qBACI,OAAOhT,KAAK+S,gBAEhB,mBAA0BE,GACtB,GAAIA,EAAQ,GAAKA,GAASjT,KAAK0S,KAAKlQ,OAChC,MAAM,IAAI9B,MAAM,sDAAsDV,KAAK0S,KAAKlQ,OAAS,OAE7FxC,KAAKgT,aAAaC,GAad,aAAaC,GACjB,GAAIA,IAAmBlT,KAAK+S,gBACxB,OAGJ,IAAII,EAEJ,IAAKA,KAAWnT,KAAK0S,KAAM,CACvB,MAAM7R,EAASsS,EAAQhB,eACvBtR,EAAOyC,MAAMsF,eAAe,eAC5B/H,EAAOyC,MAAMC,YAAY,QAAS,WAElC4P,EAAQf,gBAAgB9O,MAAMC,YAAY,UAAW,QAGzD,MAAM1C,EAASb,KAAK0S,KAAKQ,GAAgBf,eACzCtR,EAAOyC,MAAMC,YAAY,cAAe,QACxC1C,EAAOyC,MAAMsF,eAAe,SAE5B5I,KAAK0S,KAAKQ,GAAgBd,gBAAgB9O,MAAMsF,eAAe,WAE/D5I,KAAK+S,gBAAkBG,EAEvBlT,KAAK0S,KAAKQ,GAAgBE,kBDjBnBV,IAIf,MAAM7C,GAAU,2CAAW9H,OAAO,EAAG,IAKrC,IAAIsL,GACJ,IAAKA,MAHL9S,EAAe,WAAWJ,UAAY,GAAG0P,2FAGvBgD,IACdQ,GAAUP","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","export class VisualFeedback {\n    private element: HTMLElement;\n    private timeout: number | undefined;\n\n    public constructor(element: HTMLElement) {\n        this.element = element;\n    }\n\n    public setText(text: string, duration: number) {\n        this.element.innerHTML = text;\n        if (this.timeout) {\n            clearTimeout(this.timeout);\n        }\n        this.timeout = setTimeout(() => this.element.innerHTML = '', duration);\n    }\n}\n","import { VisualFeedback } from './VisualFeedback';\n\nexport function getElementById(elementName: string): HTMLInputElement {\n    const element: HTMLElement|null = document.getElementById(elementName);\n\n    if (elementName === null) {\n        throw new Error(`DOM element '${elementName}' not found.`);\n    }\n\n    return element as HTMLInputElement;\n}\n\nasync function writeToClipboard(text: string): Promise<boolean> {\n    try {\n        await navigator.clipboard.writeText(text);\n        return true;\n    } catch (error) {\n        console.error(error.stack || error);\n        return false;\n    }\n}\n\nexport function setupCopyButton(txt: HTMLInputElement, button: HTMLInputElement, feedback: HTMLInputElement): void {\n    const visualFeedback: VisualFeedback = new VisualFeedback(feedback);\n    button.addEventListener('click', async () => {\n        if (await writeToClipboard(txt.value)) {\n            visualFeedback.setText('Copied', 3000);\n        } else {\n            visualFeedback.setText('<span style=\"color: red\">Failed to copy</span>', 3000);\n        }\n    });\n}\n\nexport const SUCCESS_COLOR: string = '#D0FFD0';\nexport const ERROR_COLOR: string = '#FFD0D0';\n","import { getElementById, SUCCESS_COLOR, ERROR_COLOR } from '../ui';\n\nimport { TimedAction } from '../TimedAction';\nimport { IComponent } from './IComponent';\n\nconst btnProtectTitleForProtect = 'Stores the string in memory and removes it from the UI component. Prevents a physical intruder from copy/pasting the value.';\nconst btnProtectTitleForClear = 'Removes the string form memory and re-enables the UI component.';\n\nconst txtPrivatePart: HTMLInputElement = getElementById('txtPrivatePart');\nconst txtPrivatePartConfirmation: HTMLInputElement = getElementById('txtPrivatePartConfirmation');\nconst btnProtect: HTMLInputElement = getElementById('btnProtect');\nconst spnProtectedConfirmation: HTMLInputElement = getElementById('spnProtectedConfirmation');\n\nconst spnPrivatePartSize: HTMLInputElement = getElementById('spnPrivatePartSize');\nconst spnPrivatePartSizeConfirmation: HTMLInputElement = getElementById('spnPrivatePartSizeConfirmation');\n\nconst PRIVATE_PART_PROTECTION_TIMEOUT: number = 60 * 1000;\n\nlet privatePart: string | undefined;\n\nconst onChangedHandlers: (() => void)[] = [];\n\nexport function registerOnChanged(onChanged: () => void) {\n    onChangedHandlers.push(onChanged);\n}\n\nexport function getPrivatePart(): string {\n    if (privatePart !== undefined) {\n        return privatePart;\n    }\n    return txtPrivatePart.value;\n}\n\nfunction protectAndLockPrivatePart(): void {\n    if (txtPrivatePart.value.length === 0) {\n        return;\n    }\n\n    privatePart = txtPrivatePart.value;\n    spnProtectedConfirmation.innerHTML = 'Protected';\n\n    txtPrivatePart.value = '';\n    txtPrivatePartConfirmation.value = '';\n    spnPrivatePartSize.innerHTML = '0';\n    spnPrivatePartSizeConfirmation.innerHTML = '0';\n\n    txtPrivatePart.disabled = true;\n    txtPrivatePartConfirmation.disabled = true;\n\n    btnProtect.innerHTML = 'Clear and unlock';\n    btnProtect.title = btnProtectTitleForClear;\n\n    updatePrivatePartsMatching();\n}\n\nfunction clearAndUnLockPrivatePart(): void {\n    privatePart = undefined;\n    spnProtectedConfirmation.innerHTML = '';\n\n    txtPrivatePart.disabled = false;\n    txtPrivatePartConfirmation.disabled = false;\n\n    btnProtect.innerHTML = 'Protect and lock';\n    btnProtect.title = btnProtectTitleForProtect;\n    btnProtect.disabled = true;\n}\n\nfunction togglePrivatePartProtection(): void {\n    if (privatePart === undefined) {\n        protectAndLockPrivatePart();\n    } else {\n        clearAndUnLockPrivatePart();\n    }\n}\n\nfunction onProtectButtonClick() {\n    togglePrivatePartProtection();\n}\n\nconst protectPrivatePartAction: TimedAction = new TimedAction(protectAndLockPrivatePart, PRIVATE_PART_PROTECTION_TIMEOUT);\n\nfunction onPrivatePartTextInput(): void {\n    btnProtect.disabled = txtPrivatePart.value.length === 0;\n\n    spnPrivatePartSize.innerHTML = txtPrivatePart.value.length.toString();\n    updatePrivatePartsMatching();\n\n    let onChangedHandler: () => void;\n    for (onChangedHandler of onChangedHandlers) {\n        onChangedHandler();\n    }\n\n    protectPrivatePartAction.reset();\n}\n\nfunction updatePrivatePartsMatching(): void {\n    if (txtPrivatePartConfirmation.value === txtPrivatePart.value) {\n        txtPrivatePartConfirmation.style.setProperty('background', SUCCESS_COLOR);\n    } else {\n        txtPrivatePartConfirmation.style.setProperty('background', ERROR_COLOR);\n    }\n};\n\nfunction onPrivatePartConfirmationTextInput(): void {\n    spnPrivatePartSizeConfirmation.innerHTML = txtPrivatePartConfirmation.value.length.toString();\n    protectPrivatePartAction.reset();\n    updatePrivatePartsMatching();\n}\n\nexport class PrivatePartComponent implements IComponent {\n    init(): void {\n        btnProtect.addEventListener('click', onProtectButtonClick);\n        txtPrivatePart.addEventListener('input', onPrivatePartTextInput);\n        txtPrivatePartConfirmation.addEventListener('input', onPrivatePartConfirmationTextInput);\n\n        updatePrivatePartsMatching();\n        btnProtect.title = btnProtectTitleForProtect;\n    }\n}\n","export class TimedAction {\n    private timeout: number | undefined;\n    public constructor(private action: Function, private delay: number) {\n    }\n\n    public reset(overrideDelay: number | undefined = undefined): void {\n        if (this.timeout !== undefined) {\n            clearTimeout(this.timeout);\n        }\n\n        const delay = overrideDelay !== undefined ? overrideDelay : this.delay;\n\n        this.timeout = setTimeout(() => {\n            this.action();\n            this.timeout = undefined;\n        }, delay);\n    }\n}\n","export function arrayToString(array: ArrayBuffer): string {\n    const decoder = new TextDecoder(/*'utf-8'*/);\n    return decoder.decode(array);\n};\n\nexport function copy(source: Uint8Array, sourceIndex: number, target: Uint8Array, targetIndex: number, length: number): void {\n    for (let i: number = 0; i < length; i += 1) {\n        target[i + targetIndex] = source[i + sourceIndex];\n    }\n}\n\nfunction createHeaderedBuffer(buffer: ArrayBuffer): ArrayBuffer {\n    if (buffer.byteLength > 0xFFFF) {\n        throw new Error(`Buffer too large: ${buffer.byteLength} bytes`);\n    }\n\n    let length = buffer.byteLength;\n    const headeredBuffer: Uint8Array = new Uint8Array(2 + buffer.byteLength);\n\n    for (let i: number = 0; i < 2; i += 1) {\n        headeredBuffer[i] = length % 256;\n        length /= 256;\n    }\n\n    headeredBuffer.set(new Uint8Array(buffer), 2);\n\n    return headeredBuffer.buffer;\n}\n\nfunction arrayBufferToUnsignedBigIntWithoutHeader(arrayBuffer: ArrayBuffer): bigint {\n    const length: number = arrayBuffer.byteLength;\n    const arrayView: DataView = new DataView(arrayBuffer, 0);\n\n    let result: bigint = 0n;\n    let multiplier: bigint = 1n;\n\n    for (let i: number = 0; i < length; i += 1) {\n        result += BigInt(arrayView.getUint8(i)) * multiplier;\n        multiplier *= 256n;\n    }\n\n    return result;\n}\n\nfunction arrayBufferToUnsignedBigInt(arrayBuffer: ArrayBuffer): bigint {\n    arrayBuffer = createHeaderedBuffer(arrayBuffer);\n\n    const length: number = arrayBuffer.byteLength;\n    const arrayView: DataView = new DataView(arrayBuffer, 0);\n\n    let result: bigint = 0n;\n    let multiplier: bigint = 1n;\n\n    for (let i: number = 0; i < length; i += 1) {\n        result += BigInt(arrayView.getUint8(i)) * multiplier;\n        multiplier *= 256n;\n    }\n\n    return result;\n}\n\nexport function unsignedBigIntToArrayBuffer(number: bigint): ArrayBuffer {\n    const result: Array<number> = [];\n\n    while (number > 0n)\n    {\n        const remainder: bigint = number % 256n;\n        number /= 256n;\n\n        const byteValue: number = Number(<any>BigInt.asUintN(8, remainder));\n\n        result.push(byteValue);\n    }\n\n    let totalLength: number = result[0];\n    if (result.length > 1) { // For case where original buffer is of length 1 and contains 0.\n        totalLength += result[1] * 256;\n    }\n\n    // The varable 'result' contains 2 bytes of size header.\n    const diff = totalLength - (result.length - 2);\n\n    for (let i: number = 0; i < diff; i += 1) {\n        result.push(0);\n    }\n\n    return new Uint8Array(result.slice(2)).buffer;\n}\n\n// This is a one way encoding in the sense that decoding is not always deterministic.\n// This can be used to generate strings where decoding it doesn't matter.\nexport function toCustomBaseOneWay(bytes: ArrayBuffer, alphabet: string): string {\n    const alphabetLength: bigint = BigInt(alphabet.length);\n\n    let result: string = '';\n    let number: bigint = arrayBufferToUnsignedBigIntWithoutHeader(bytes);\n\n    while (number > 0n)\n    {\n        const remainder: bigint = number % alphabetLength;\n        number /= alphabetLength;\n\n        const index: number = <number><any>BigInt.asUintN(8, remainder);\n\n        result += alphabet[index];\n    }\n\n    return result;\n}\n\nexport function toCustomBase(bytes: ArrayBuffer, alphabet: string): string {\n    const alphabetLength: bigint = BigInt(alphabet.length);\n\n    let result: string = '';\n    let number: bigint = arrayBufferToUnsignedBigInt(bytes);\n\n    while (number > 0n)\n    {\n        const remainder: bigint = number % alphabetLength;\n        number /= alphabetLength;\n\n        const index: number = <number><any>BigInt.asUintN(8, remainder);\n\n        result += alphabet[index];\n    }\n\n    return result;\n}\n\nexport function fromCustomBase(input: string, alphabet: string): ArrayBuffer {\n    const alphabetLength: bigint = BigInt(alphabet.length);\n\n    let number: bigint = 0n;\n    let multiplier: bigint = 1n;\n\n    for (let i: number = 0; i < input.length; i += 1) {\n        const value: bigint = BigInt(alphabet.indexOf(input[i]));\n\n        number += value * multiplier;\n        multiplier *= alphabetLength;\n    }\n\n    return unsignedBigIntToArrayBuffer(number);\n}\n\nexport function toBase16(buffer: ArrayBuffer): string {\n    return Array.prototype.map.call(\n        new Uint8Array(buffer),\n        x => ('00' + x.toString(16)).slice(-2)\n    ).join('');\n}\n","import * as arrayUtils from './arrayUtils';\n\nexport const BASE62_ALPHABET: string = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\n\nexport interface IPasswordGenerator {\n    readonly version: number;\n    readonly description: string;\n    generatePassword(privatePart: ArrayBuffer, publicPart: ArrayBuffer): Promise<ArrayBuffer>;\n}\n\nexport interface ICipher {\n    readonly version: number;\n    readonly description: string;\n    encrypt(input: ArrayBuffer, password: ArrayBuffer): Promise<ArrayBuffer>;\n    decrypt(input: ArrayBuffer, password: ArrayBuffer): Promise<ArrayBuffer>;\n}\n\nexport async function getDerivedBytes(password: ArrayBuffer, salt: ArrayBuffer): Promise<ArrayBuffer> {\n    const baseKey: CryptoKey = await crypto.subtle.importKey(\n        'raw',\n        password,\n        'PBKDF2',\n        false,\n        ['deriveKey']\n    );\n\n    const algorithm: Pbkdf2Params = {\n        name: 'PBKDF2',\n        hash: 'SHA-512',\n        iterations: 100000,\n        salt\n    };\n\n    const derivedKeyType: AesDerivedKeyParams = {\n        name: 'AES-CBC',\n        length: 256\n    };\n\n    const result: CryptoKey = await crypto.subtle.deriveKey(\n        algorithm,\n        baseKey,\n        derivedKeyType,\n        true,\n        ['encrypt']\n    );\n\n    const key: ArrayBuffer = await crypto.subtle.exportKey('raw', result);\n\n    return key;\n}\n\nexport function generateRandomBytes(byteCount: number = 64): ArrayBuffer {\n    const array: Uint8Array = new Uint8Array(byteCount);\n    return crypto.getRandomValues(array).buffer;\n}\n\nexport function generateRandomString(byteCount: number = 64, alphabet: string = BASE62_ALPHABET): string {\n    const array: ArrayBuffer = generateRandomBytes(byteCount);\n    return arrayUtils.toCustomBaseOneWay(array, alphabet);\n}\n","export function truncate(input: string, length: number): string {\n    if (input.length <= length) {\n        return input;\n    }\n\n    return input.substr(0, length);\n}\n\nexport function stringToArray(str: string): ArrayBuffer {\n    const encoder = new TextEncoder(/*'utf-8'*/);\n    return encoder.encode(str).buffer;\n}\n\nexport function fromBase16(str: string): ArrayBuffer {\n    if (str.length % 2 !== 0) {\n        str = '0' + str;\n    }\n\n    const result: Uint8Array = new Uint8Array(str.length / 2);\n\n    for (let i = 0; i < result.byteLength; i += 1) {\n        result[i] = parseInt(str.substr(i * 2, 2), 16);\n    }\n\n    return result.buffer;\n}\n","import { getElementById, ERROR_COLOR } from '../ui';\nimport { PlainObject } from '../PlainObject';\nimport { IComponent } from './IComponent';\n\nconst divStorageOutput: HTMLInputElement = getElementById('divStorageOutput');\n\nconst txtPath: HTMLInputElement = getElementById('txtPath');\n\nconst txtParameters: HTMLInputElement = getElementById('txtParameters');\nconst txtCustomKeys: HTMLInputElement = getElementById('txtCustomKeys');\n\nfunction shallowMerge(source: PlainObject | null, target: PlainObject | null, reservedKeys: string[]): PlainObject {\n    const result: PlainObject = {};\n\n    if (source !== null) {\n        for (const [key, value] of Object.entries(source)) {\n            if (reservedKeys.includes(key) === false) {\n                result[key] = value;\n            }\n        }\n    }\n\n    if (target !== null) {\n        for (const [key, value] of Object.entries(target)) {\n            result[key] = value;\n        }\n    }\n\n    return result;\n}\n\ntype IChainInfo = {\n    head: PlainObject,\n    tailParent: PlainObject,\n    tail: PlainObject\n};\n\n// Transforms a path like \"a/b/c/d\" into a hierarchy of objects like { \"a\": { \"b\": { \"c\": { \"d\": {} } } } }\n// From the result object, head is the root object that contains \"a\", tail is the value of \"d\", and tailParent is the value of \"c\"\nfunction pathToObjectChain(path: string, chainInfo: IChainInfo | undefined = undefined): IChainInfo {\n    const separatorIndex: number = path.indexOf('/');\n\n    const tail: PlainObject = {};\n\n    const firstPath: string = separatorIndex >= 0 ? path.substr(0, separatorIndex) : path;\n    const remainingPath: string | undefined = separatorIndex >= 0 ? path.substr(separatorIndex + 1) : undefined;\n\n    if (chainInfo === undefined) {\n        const node: PlainObject = {};\n        node[firstPath] = tail;\n        chainInfo = {\n            head: node,\n            tailParent: node,\n            tail\n        };\n    } else {\n        chainInfo.tail[firstPath] = tail;\n        chainInfo.tailParent = chainInfo.tail;\n        chainInfo.tail = tail;\n    }\n\n    if (remainingPath) {\n        return pathToObjectChain(remainingPath, chainInfo);\n    }\n\n    return chainInfo;\n}\n\nfunction onPathTextInput() {\n    update();\n}\n\nfunction onCustomKeysTextInput(): void {\n    update();\n}\n\nfunction updateCustomKeysDisplay(isValid: boolean): void {\n    if (isValid) {\n        txtCustomKeys.style.removeProperty('background');\n        return;\n    }\n\n    txtCustomKeys.style.setProperty('background', ERROR_COLOR);\n}\n\nfunction parseCustomKeys(): PlainObject | null {\n    if (txtCustomKeys.value === '') {\n        return {};\n    }\n\n    try {\n        const obj: any = JSON.parse(txtCustomKeys.value);\n        if (obj === null || obj.constructor.name !== 'Object') {\n            return null;\n        }\n        return obj as PlainObject;\n    } catch {\n        return null;\n    }\n}\n\nfunction update(): void {\n    if (_parameterKeys === undefined || _parameterPath === undefined || _reservedKeys === undefined) {\n        return;\n    }\n\n    const chainInfo: IChainInfo = pathToObjectChain(`${txtPath.value}/${_parameterPath}`);\n    const leaf: PlainObject = chainInfo.tail;\n\n    for (const [key, value] of Object.entries(_parameterKeys)) {\n        leaf[key] = value;\n    }\n\n    const customKeys: PlainObject | null = parseCustomKeys();\n    updateCustomKeysDisplay(customKeys !== null);\n    const resultParameters: PlainObject = shallowMerge(customKeys, leaf, _reservedKeys);\n\n    if (Object.keys(resultParameters).length === 0) {\n        // Set the value of the first (single) property of the object to null.\n        chainInfo.tailParent[Object.keys(chainInfo.tailParent)[0]] = null;\n    } else {\n        chainInfo.tailParent[Object.keys(chainInfo.tailParent)[0]] = resultParameters;\n    }\n\n    txtParameters.value = JSON.stringify(chainInfo.head, undefined, 4);\n}\n\nexport function clearOutputs(): void {\n    _parameterKeys = undefined;\n    _parameterPath = undefined;\n    _reservedKeys = undefined;\n    txtParameters.value = '';\n}\n\nlet _parameterKeys: PlainObject | undefined;\nlet _parameterPath: string | undefined;\nlet _reservedKeys: string[] | undefined;\n\nexport function setParameters(parameterKeys: PlainObject, parameterPath: string, reservedKeys: string[]) {\n    _parameterKeys = parameterKeys;\n    _parameterPath = parameterPath;\n    _reservedKeys = reservedKeys;\n    update();\n}\n\nexport function show(): void {\n    divStorageOutput.style.setProperty('display', 'initial');\n}\n\nexport function hide(): void {\n    divStorageOutput.style.setProperty('display', 'none');\n}\n\nexport class StorageOutputComponent implements IComponent {\n    init(): void {\n        txtCustomKeys.addEventListener('input', onCustomKeysTextInput);\n        txtPath.addEventListener('input', onPathTextInput);\n    }\n}\n","import { getElementById, setupCopyButton, ERROR_COLOR } from '../ui';\nimport * as privatePart from './privatePartComponent';\n\nimport * as crypto from '../crypto';\nimport * as stringUtils from '../stringUtils';\nimport * as arrayUtils from '../arrayUtils';\n\nimport { PlainObject } from '../PlainObject';\nimport { PasswordGeneratorV1 } from '../passwordGenerators/v1';\nimport { ITabInfo } from '../TabControl';\nimport { IComponent } from './IComponent';\n\nimport * as storageOutputComponent from './storageOutputComponent';\n\nconst btnTabPasswords: HTMLInputElement = getElementById('btnTabPasswords');\nconst divTabPasswords: HTMLInputElement = getElementById('divTabPasswords');\n\nconst passwordGenerator: crypto.IPasswordGenerator = new PasswordGeneratorV1('Password');\n\nconst txtPublicPart: HTMLInputElement = getElementById('txtPublicPart');\nconst btnGeneratePublicPart: HTMLInputElement = getElementById('btnGeneratePublicPart');\nconst btnClearPublicPart: HTMLInputElement = getElementById('btnClearPublicPart');\nconst btnCopyPublicPart: HTMLInputElement = getElementById('btnCopyPublicPart');\nconst spnCopyPublicPartFeedback: HTMLInputElement = getElementById('spnCopyPublicPartFeedback');\n\nconst numOutputSizeRange: HTMLInputElement = getElementById('numOutputSizeRange');\nconst numOutputSizeNum: HTMLInputElement = getElementById('numOutputSizeNum');\n\nconst txtAlphabet: HTMLInputElement = getElementById('txtAlphabet');\nconst spnAlphabetSize: HTMLInputElement = getElementById('spnAlphabetSize');\nconst btnResetAlphabet: HTMLInputElement = getElementById('btnResetAlphabet');\n\nconst txtResultPassword: HTMLInputElement = getElementById('txtResultPassword');\nconst spnResultPasswordLength: HTMLInputElement = getElementById('spnResultPasswordLength');\nconst btnCopyResultPassword: HTMLInputElement = getElementById('btnCopyResultPassword');\nconst spnCopyResultPasswordFeedback: HTMLInputElement = getElementById('spnCopyResultPasswordFeedback');\n\nconst DEFAULT_LENGTH: number = 64;\nconst DEFAULT_ALPHABET: string = '!\"#$%&\\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[]^_`abcdefghijklmnopqrstuvwxyz{|}~';\n\nconst RESERVED_KEYS: string[] = ['alphabet', 'length', 'public', 'datetime'];\n\nlet passwordPublicPartLastChange: string | undefined;\n\nfunction onClearPublicPartButtonClick(): void {\n    if (txtPublicPart.value.length > 0) {\n        if (prompt('Are you sure you want to clear the public part ?\\nType \\'y\\' to accept', '') !== 'y') {\n            return;\n        }\n    }\n\n    txtPublicPart.value = '';\n\n    updatePasswordPublicPartLastUpdate();\n    updatePasswordGenerationParameters();\n}\n\nfunction onGeneratePublicPartButtonClick(): void {\n    if (txtPublicPart.value.length > 0) {\n        if (prompt('Are you sure you want to generate a new public part ?\\nType \\'y\\' to accept', '') !== 'y') {\n            return;\n        }\n    }\n\n    const randomString: string = crypto.generateRandomString();\n    txtPublicPart.value = randomString;\n\n    updatePasswordPublicPartLastUpdate();\n\n    run();\n}\n\nfunction updatePasswordPublicPartLastUpdate(): void {\n    if (txtPublicPart.value.length > 0) {\n        passwordPublicPartLastChange = new Date().toISOString();\n    } else {\n        passwordPublicPartLastChange = undefined;\n    }\n}\n\nfunction deepMerge(source: PlainObject, target: PlainObject): void {\n    for (const sourceKey of Object.keys(source)) {\n        const targetValue: any = target[sourceKey];\n        const sourceValue: any = source[sourceKey];\n\n        if (targetValue === undefined ||\n            targetValue === null ||\n            targetValue.constructor.name !== 'Object' ||\n            sourceValue.constructor.name !== 'Object') {\n            target[sourceKey] = sourceValue;\n            continue;\n        }\n\n        deepMerge(sourceValue, targetValue);\n    }\n}\n\nfunction setupViewButton(txt: HTMLInputElement, buttonName: string): void {\n    const btn: HTMLInputElement = getElementById(buttonName);\n    btn.addEventListener('click', () => {\n        if (txt.type === 'password') {\n            txt.type = 'input';\n            btn.innerHTML = 'Hide';\n        } else {\n            txt.type = 'password';\n            btn.innerHTML = 'View';\n        }\n    });\n}\n\nfunction updateResultPasswordLength() {\n    spnResultPasswordLength.innerHTML = txtResultPassword.value.length.toString().padStart(2, ' ');\n}\n\nfunction isAlphabetValid(alphabet: string): boolean {\n    const sortedAlphabet: string[] = alphabet.split('');\n    sortedAlphabet.sort();\n\n    for (let i: number = 1; i < sortedAlphabet.length; i += 1) {\n        if (sortedAlphabet[i - 1] === sortedAlphabet[i]) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nfunction updatePasswordGenerationParameters(): void {\n    if (canRun() === false) {\n        clearOutputs();\n        return;\n    }\n\n    const passwordParamters: PlainObject = {\n        public: txtPublicPart.value,\n        datetime: passwordPublicPartLastChange\n    };\n\n    const numericValue: number = txtResultPassword.value.length;\n    if (numericValue !== DEFAULT_LENGTH) {\n        passwordParamters.length = numericValue;\n    }\n\n    const alphabet: string = txtAlphabet.value;\n    if (alphabet !== DEFAULT_ALPHABET) {\n        passwordParamters.alphabet = alphabet;\n    }\n\n    storageOutputComponent.setParameters(passwordParamters, 'password', RESERVED_KEYS);\n}\n\nfunction updateOutputSizeRangeToNum(): void {\n    numOutputSizeNum.value = numOutputSizeRange.value;\n}\n\nfunction updateOutputSizeNumToRange(): boolean {\n    const min: number = parseInt(numOutputSizeRange.min, 10);\n    const val: number = parseInt(numOutputSizeNum.value, 10);\n    const max: number = parseInt(numOutputSizeRange.max, 10);\n\n    if (isNaN(val) === false) {\n        numOutputSizeRange.value = Math.max(min, Math.min(val, max)).toString();\n        return true;\n    }\n\n    return false;\n}\n\nasync function onOutputSizeRangeInput(): Promise<void> {\n    updateOutputSizeRangeToNum();\n    await run();\n}\n\nasync function onOutputSizeNumInput(): Promise<void> {\n    if (updateOutputSizeNumToRange()) {\n        updateOutputSizeRangeToNum();\n    }\n    await run();\n}\n\nfunction updateAlphabetSize(): void {\n    spnAlphabetSize.innerHTML = txtAlphabet.value.length.toString();\n\n    const alphabetSizeDigitCount: number = txtAlphabet.value.length.toString().length;\n    if (alphabetSizeDigitCount < 2) {\n        // Add a space to keep a nice visual alignment.\n        spnAlphabetSize.innerHTML = spnAlphabetSize.innerHTML.padStart(2, ' ');\n    }\n}\n\nfunction updateAlphabetValidityDisplay(isAlphabetValid: boolean): void {\n    if (isAlphabetValid) {\n        txtAlphabet.style.removeProperty('background');\n    } else {\n        txtAlphabet.style.setProperty('background', ERROR_COLOR);\n    }\n}\n\nasync function onAlphabetTextInput(): Promise<void> {\n    const isAlphabetValidResult: boolean = isAlphabetValid(txtAlphabet.value);\n\n    updateAlphabetValidityDisplay(isAlphabetValidResult);\n\n    if (isAlphabetValidResult === false) {\n        return;\n    }\n\n    updateAlphabetSize();\n    await run();\n}\n\nasync function onResetAlphabetButtonClick(): Promise<void> {\n    resetAlphabet();\n    updateAlphabetSize();\n    await run();\n}\n\nfunction clearOutputs(): void {\n    txtResultPassword.value = '';\n    storageOutputComponent.clearOutputs();\n    updateResultPasswordLength();\n}\n\nfunction canRun(): boolean {\n    const alphabet: string = txtAlphabet.value;\n\n    if (isAlphabetValid(alphabet) === false) {\n        return false;\n    }\n\n    if (privatePart.getPrivatePart().length <= 0 || txtPublicPart.value.length < 8 || alphabet.length < 2) {\n        return false;\n    }\n\n    return true;\n}\n\nasync function run() {\n    if (canRun() === false) {\n        clearOutputs();\n        return;\n    }\n\n    const privatePartString: string = privatePart.getPrivatePart();\n    const publicPartString = txtPublicPart.value;\n\n    const privatePrivateBytes: ArrayBuffer = stringUtils.stringToArray(privatePartString);\n    const publicPartBytes: ArrayBuffer = stringUtils.stringToArray(publicPartString);\n\n    const keyBytes: ArrayBuffer = await passwordGenerator.generatePassword(privatePrivateBytes, publicPartBytes);\n\n    const keyString: string = arrayUtils.toCustomBaseOneWay(keyBytes, txtAlphabet.value);\n    txtResultPassword.value = stringUtils.truncate(keyString, Math.max(4, parseInt(numOutputSizeRange.value, 10)));\n\n    updateResultPasswordLength();\n\n    updatePasswordGenerationParameters();\n}\n\nasync function resetAlphabet() {\n    txtAlphabet.value = DEFAULT_ALPHABET;\n    updateAlphabetSize();\n\n    const isAlphabetValidResult: boolean = isAlphabetValid(txtAlphabet.value);\n\n    updateAlphabetValidityDisplay(isAlphabetValidResult);\n\n    if (isAlphabetValidResult) {\n        await run();\n    }\n}\n\nasync function onPublicPartTextInput(): Promise<void> {\n    updatePasswordPublicPartLastUpdate();\n    await run();\n}\n\nexport class PasswordComponent implements IComponent, ITabInfo {\n    getTabButton(): HTMLInputElement {\n        return btnTabPasswords;\n    }\n    getTabContent(): HTMLInputElement {\n        return divTabPasswords;\n    }\n    onTabSelected(): void {\n        storageOutputComponent.show();\n        updatePasswordGenerationParameters();\n    }\n\n    init(): void {\n        privatePart.registerOnChanged(run);\n\n        // dafuq!?\n        numOutputSizeRange.max = DEFAULT_LENGTH.toString();\n        numOutputSizeRange.value = DEFAULT_LENGTH.toString();\n\n        btnClearPublicPart.addEventListener('click', onClearPublicPartButtonClick);\n        btnGeneratePublicPart.addEventListener('click', onGeneratePublicPartButtonClick);\n\n        setupViewButton(txtResultPassword, 'btnViewResultPassword');\n\n        setupCopyButton(txtPublicPart, btnCopyPublicPart, spnCopyPublicPartFeedback);\n        setupCopyButton(txtResultPassword, btnCopyResultPassword, spnCopyResultPasswordFeedback);\n\n        numOutputSizeRange.addEventListener('input', onOutputSizeRangeInput);\n        numOutputSizeNum.addEventListener('input', onOutputSizeNumInput);\n\n        txtAlphabet.addEventListener('input', onAlphabetTextInput);\n        btnResetAlphabet.addEventListener('click', onResetAlphabetButtonClick);\n\n        txtPublicPart.addEventListener('input', onPublicPartTextInput);\n\n        updateOutputSizeRangeToNum();\n        resetAlphabet();\n    }\n};\n","import { stringToArray } from '../stringUtils';\nimport { IPasswordGenerator, getDerivedBytes } from '../crypto';\n\nexport class PasswordGeneratorV1 implements IPasswordGenerator {\n    private hkdfPurpose: ArrayBuffer;\n    private _description: string;\n\n    public constructor(hkdfPurpose: string) {\n        this.hkdfPurpose = stringToArray(hkdfPurpose);\n        this._description = `HKDF(PBKDF2, HMAC512) [purpose: ${hkdfPurpose}]`;\n    }\n\n    public get version(): number {\n        return 1;\n    }\n\n    public get description(): string {\n        return this._description;\n    }\n\n    public async generatePassword(privatePart: ArrayBuffer, publicPart: ArrayBuffer): Promise<ArrayBuffer> {\n        const derivedKey: ArrayBuffer = await getDerivedBytes(privatePart, publicPart);\n\n        const hmacParameters: HmacImportParams = {\n            name: 'HMAC',\n            hash: { name: 'SHA-512' }\n        };\n\n        const hkdfKey: CryptoKey = await crypto.subtle.importKey(\n            'raw',\n            derivedKey,\n            hmacParameters,\n            false,\n            ['sign']\n        );\n\n        return await crypto.subtle.sign('HMAC', hkdfKey, this.hkdfPurpose);\n    }\n}\n","import { ICipher, getDerivedBytes } from '../crypto';\n\nexport class CipherV2 implements ICipher {\n    public get version(): number {\n        return 2;\n    }\n\n    public get description(): string {\n        return 'PBKDF2 + AES-GCM';\n    }\n\n    async encrypt(input: ArrayBuffer, password: ArrayBuffer): Promise<ArrayBuffer> {\n        const output: ArrayBuffer = new ArrayBuffer(12 + 16 + 16 + input.byteLength);\n\n        const nonce: Uint8Array = crypto.getRandomValues(new Uint8Array(output, 0, 12));\n        const passwordSalt: Uint8Array = crypto.getRandomValues(new Uint8Array(output, 12, 16));\n\n        const aesGcmParams: AesGcmParams = {\n            name: 'AES-GCM',\n            iv: nonce\n        };\n\n        const aesKeyAlgorithm: AesKeyAlgorithm = {\n            name: 'AES-GCM',\n            length: 256\n        };\n\n        const passwordKey: CryptoKey = await crypto.subtle.importKey(\n            'raw',\n            await getDerivedBytes(password, passwordSalt),\n            aesKeyAlgorithm,\n            false,\n            ['encrypt']\n        );\n\n        const result: ArrayBuffer = await crypto.subtle.encrypt(aesGcmParams, passwordKey, input);\n\n        new Uint8Array(output).set(new Uint8Array(result), 12 + 16);\n\n        return output;\n    }\n\n    async decrypt(input: ArrayBuffer, password: ArrayBuffer): Promise<ArrayBuffer> {\n        const nonce: Uint8Array = new Uint8Array(input, 0, 12);\n        const passwordSalt: Uint8Array = new Uint8Array(input, 12, 16);\n        const payload: Uint8Array = new Uint8Array(input, 12 + 16);\n\n        const aesGcmParams: AesGcmParams = {\n            name: 'AES-GCM',\n            iv: nonce\n        };\n\n        const aesKeyAlgorithm: AesKeyAlgorithm = {\n            name: 'AES-GCM',\n            length: 256\n        };\n\n        const derivedKey: ArrayBuffer = await getDerivedBytes(password, passwordSalt);\n\n        const passwordKey: CryptoKey = await crypto.subtle.importKey(\n            'raw',\n            derivedKey,\n            aesKeyAlgorithm,\n            false,\n            ['decrypt']\n        );\n\n        return await crypto.subtle.decrypt(aesGcmParams, passwordKey, payload);\n    }\n}\n","import * as crypto from '../crypto';\nimport * as stringUtils from '../stringUtils';\nimport * as arrayUtils from '../arrayUtils';\n\nimport { getElementById, setupCopyButton, ERROR_COLOR } from '../ui';\nimport { getPrivatePart } from './privatePartComponent';\n\nimport { CipherV2 } from '../ciphers/v2';\nimport { ITabInfo } from '../TabControl';\nimport { IComponent } from './IComponent';\n\nimport * as storageOutputComponent from './storageOutputComponent';\n\nconst RESERVED_KEYS: string[] = ['version', 'value'];\n\nconst btnTabCiphers: HTMLInputElement = getElementById('btnTabCiphers');\nconst divTabCiphers: HTMLInputElement = getElementById('divTabCiphers');\n\nconst cipher: crypto.ICipher = new CipherV2();\n\nconst txtCipherName: HTMLInputElement = getElementById('txtCipherName');\nconst txtCipherSource: HTMLInputElement = getElementById('txtCipherSource');\nconst txtCipherTarget: HTMLInputElement = getElementById('txtCipherTarget');\nconst btnEncrypt: HTMLInputElement = getElementById('btnEncrypt');\nconst btnDecrypt: HTMLInputElement = getElementById('btnDecrypt');\n\nconst btnClearCipherSource: HTMLInputElement = getElementById('btnClearCipherSource');\nconst spnCopyCipherTargetFeedback: HTMLInputElement = getElementById('spnCopyCipherTargetFeedback');\nconst btnCopyCipherTarget: HTMLInputElement = getElementById('btnCopyCipherTarget');\nconst btnClearCipherTarget: HTMLInputElement = getElementById('btnClearCipherTarget');\n\nfunction clearSourceVisualCue(): void {\n    txtCipherSource.style.removeProperty('background-color');\n}\n\nfunction clearTargetVisualCue(): void {\n    txtCipherTarget.style.removeProperty('background-color');\n}\n\nfunction setSourceVisualCueError() {\n    txtCipherSource.style.setProperty('background-color', ERROR_COLOR);\n}\n\nfunction setTargetVisualCueError() {\n    txtCipherTarget.style.setProperty('background-color', ERROR_COLOR);\n}\n\nfunction clearAllVisualCues(): void {\n    clearSourceVisualCue();\n    clearTargetVisualCue();\n}\n\nfunction setCipherTargetValue(value: string): void {\n    txtCipherTarget.value = value;\n    onCipherTargetChanged();\n}\n\nfunction onCipherTargetChanged(): void {\n    updateCipherParameters();\n}\n\nfunction updateCipherParameters(): void {\n    if (txtCipherTarget.value === '' || txtCipherName.value === '') {\n        storageOutputComponent.clearOutputs();\n        return;\n    }\n\n    const cipherParameters = {\n        version: cipher.version,\n        value: txtCipherTarget.value\n    }\n\n    const path = `ciphers/${txtCipherName.value}`;\n\n    storageOutputComponent.setParameters(cipherParameters, path, RESERVED_KEYS);\n}\n\nasync function onEncryptButtonClick(): Promise<void> {\n    txtCipherSource.focus();\n    setCipherTargetValue('');\n    clearAllVisualCues();\n\n    if (txtCipherSource.value.length === 0) {\n        setSourceVisualCueError();\n        return;\n    }\n\n    const privatePart: string = getPrivatePart();\n    if (privatePart.length === 0) {\n        console.warn('Private part is empty');\n        return;\n    }\n\n    const input: ArrayBuffer = stringUtils.stringToArray(txtCipherSource.value);\n    const password: ArrayBuffer = stringUtils.stringToArray(privatePart);\n\n    const encrypted: ArrayBuffer = await cipher.encrypt(input, password);\n\n    setCipherTargetValue(arrayUtils.toCustomBase(encrypted, crypto.BASE62_ALPHABET));\n}\n\nasync function onDecryptButtonClick(): Promise<void> {\n    txtCipherSource.focus();\n    setCipherTargetValue('');\n    clearAllVisualCues();\n\n    if (txtCipherSource.value.length === 0) {\n        setSourceVisualCueError();\n        return;\n    }\n\n    const privatePart: string = getPrivatePart();\n    if (privatePart.length === 0) {\n        console.warn('Private part is empty');\n        return;\n    }\n\n    try {\n        const input: ArrayBuffer = arrayUtils.fromCustomBase(txtCipherSource.value, crypto.BASE62_ALPHABET);\n        const password: ArrayBuffer = stringUtils.stringToArray(privatePart);\n\n        const decrypted: ArrayBuffer = await cipher.decrypt(input, password);\n\n        setCipherTargetValue(arrayUtils.arrayToString(decrypted));\n    } catch (error) {\n        console.warn(`Failed to decrypt${error.message ? `, error: ${error.message}` : ', no error message'}`);\n        setTargetVisualCueError();\n    }\n}\n\nexport class CipherComponent implements IComponent, ITabInfo {\n    getTabButton(): HTMLInputElement {\n        return btnTabCiphers;\n    }\n    getTabContent(): HTMLInputElement {\n        return divTabCiphers;\n    }\n    onTabSelected(): void {\n        storageOutputComponent.show();\n        updateCipherParameters();\n    }\n\n    init(): void {\n        setupCopyButton(txtCipherTarget, btnCopyCipherTarget, spnCopyCipherTargetFeedback);\n\n        btnEncrypt.addEventListener('click', onEncryptButtonClick);\n        btnDecrypt.addEventListener('click', onDecryptButtonClick);\n\n        txtCipherName.addEventListener('input', () => {\n            updateCipherParameters();\n        });\n\n        txtCipherSource.addEventListener('input', () => {\n            if (txtCipherSource.value.length > 0) {\n                clearSourceVisualCue();\n            }\n        });\n\n        btnClearCipherSource.addEventListener('click', () => {\n            txtCipherSource.value = '';\n        });\n\n        btnClearCipherTarget.addEventListener('click', () => {\n            setCipherTargetValue('');\n        });\n    }\n}\n","import { ICipher, getDerivedBytes } from '../crypto';\n\nconst encryptionKeyDerivationSalt: ArrayBuffer = new Uint8Array([ 0xf2, 0xcf, 0xef, 0x8e, 0x13, 0x40, 0x46, 0x49, 0x92, 0x2a, 0xde, 0x5c, 0xbc, 0x88, 0x38, 0xa8 ]).buffer;\n\nexport class CipherV1 implements ICipher {\n    public get version(): number {\n        return 1;\n    }\n\n    public get description(): string {\n        return 'PBKDF2 + AES-GCM';\n    }\n\n    async encrypt(input: ArrayBuffer, password: ArrayBuffer): Promise<ArrayBuffer> {\n        const output: ArrayBuffer = new ArrayBuffer(12 + 16 + input.byteLength);\n\n        const nonce: DataView = new DataView(output, 0, 12);\n        crypto.getRandomValues(new Uint8Array(output, 0, 12));\n\n        const aesGcmParams: AesGcmParams = {\n            name: 'AES-GCM',\n            iv: nonce\n        };\n\n        const aesKeyAlgorithm: AesKeyAlgorithm = {\n            name: 'AES-GCM',\n            length: 256\n        };\n\n        const passwordKey: CryptoKey = await crypto.subtle.importKey(\n            'raw',\n            await getDerivedBytes(password, encryptionKeyDerivationSalt),\n            aesKeyAlgorithm,\n            false,\n            ['encrypt']\n        );\n\n        const result: ArrayBuffer = await crypto.subtle.encrypt(aesGcmParams, passwordKey, input);\n\n        new Uint8Array(output).set(new Uint8Array(result), 12);\n\n        return output;\n    }\n\n    async decrypt(input: ArrayBuffer, password: ArrayBuffer): Promise<ArrayBuffer> {\n        const nonce: DataView = new DataView(input, 0, 12);\n        const payload: DataView = new DataView(input, 12);\n\n        const aesGcmParams: AesGcmParams = {\n            name: 'AES-GCM',\n            iv: nonce\n        };\n\n        const aesKeyAlgorithm: AesKeyAlgorithm = {\n            name: 'AES-GCM',\n            length: 256\n        };\n\n        const derivedKey: ArrayBuffer = await getDerivedBytes(password, encryptionKeyDerivationSalt);\n\n        const passwordKey: CryptoKey = await crypto.subtle.importKey(\n            'raw',\n            derivedKey,\n            aesKeyAlgorithm,\n            false,\n            ['decrypt']\n        );\n\n        return await crypto.subtle.decrypt(aesGcmParams, passwordKey, payload);\n    }\n}\n","import { ICipher } from '../crypto';\nimport * as stringUtils from '../stringUtils';\nimport * as arrayUtils from '../arrayUtils';\nimport { ITabInfo } from '../TabControl';\nimport { getElementById, setupCopyButton, ERROR_COLOR } from '../ui';\nimport { getPrivatePart } from './privatePartComponent';\n\nimport { CipherV1 } from '../ciphers/v1';\nimport { CipherV2 } from '../ciphers/v2';\nimport { IComponent } from './IComponent';\n\nimport * as storageOutputComponent from './storageOutputComponent';\n\nconst ciphers: ICipher[] = [\n    new CipherV1(),\n    new CipherV2()\n];\n\nconst btnTabReEncrypt: HTMLInputElement = getElementById('btnTabReEncrypt');\nconst divTabReEncrypt: HTMLInputElement = getElementById('divTabReEncrypt');\n\nconst txtReEncryptSource: HTMLInputElement = getElementById('txtReEncryptSource');\nconst txtReEncryptTarget: HTMLInputElement = getElementById('txtReEncryptTarget');\n\nconst cboReEncryptFrom: HTMLInputElement = getElementById('cboReEncryptFrom');\nconst cboReEncryptTo: HTMLInputElement = getElementById('cboReEncryptTo');\nconst btnReEncrypt: HTMLInputElement = getElementById('btnReEncrypt');\n\nconst btnClearReEncryptSource: HTMLInputElement = getElementById('btnClearReEncryptSource');\nconst spnCopyReEncryptTargetFeedback: HTMLInputElement = getElementById('spnCopyReEncryptTargetFeedback');\nconst btnCopyReEncryptTarget: HTMLInputElement = getElementById('btnCopyReEncryptTarget');\nconst btnClearReEncryptTarget: HTMLInputElement = getElementById('btnClearReEncryptTarget');\n\nfunction fillCipherComboBox(cbo: HTMLSelectElement, initialValue: number): void {\n    let cipher: ICipher;\n\n    for (cipher of ciphers) {\n        const item: HTMLOptionElement = document.createElement('option');\n        item.value = cbo.childNodes.length.toString();\n        item.text = `${cipher.description} (v${cipher.version})`;\n        cbo.add(item);\n    }\n\n    cbo.value = initialValue.toString();\n}\n\nfunction clearSourceVisualCue(): void {\n    txtReEncryptSource.style.removeProperty('background-color');\n}\n\nfunction clearTargetVisualCue(): void {\n    txtReEncryptTarget.style.removeProperty('background-color');\n}\n\nfunction setSourceVisualCueError() {\n    txtReEncryptSource.style.setProperty('background-color', ERROR_COLOR);\n}\n\nfunction setTargetVisualCueError() {\n    txtReEncryptTarget.style.setProperty('background-color', ERROR_COLOR);\n}\n\nfunction clearAllVisualCues(): void {\n    clearSourceVisualCue();\n    clearTargetVisualCue();\n}\n\nasync function onReEncryptButtonClick(): Promise<void> {\n    txtReEncryptTarget.value = '';\n    clearAllVisualCues();\n\n    if (txtReEncryptSource.value.length === 0) {\n        setSourceVisualCueError();\n        return;\n    }\n\n    if (cboReEncryptFrom.value === cboReEncryptTo.value) {\n        setTargetVisualCueError();\n        return;\n    }\n\n    const privatePart: string = getPrivatePart();\n    if (privatePart.length === 0) {\n        console.warn('Private part is empty');\n        return;\n    }\n\n    const sourceCipherIndex = parseInt(cboReEncryptFrom.value, 10);\n    const targetCipherIndex = parseInt(cboReEncryptTo.value, 10);\n\n    const password: ArrayBuffer = stringUtils.stringToArray(privatePart);\n\n    const input: ArrayBuffer = stringUtils.fromBase16(txtReEncryptSource.value);\n    const decrypted: ArrayBuffer = await ciphers[sourceCipherIndex].decrypt(input, password);\n    const reEncrypted: ArrayBuffer = await ciphers[targetCipherIndex].encrypt(decrypted, password);\n\n    txtReEncryptTarget.value = arrayUtils.toBase16(reEncrypted);\n}\n\nexport class ReEncryptComponent implements IComponent, ITabInfo {\n    getTabButton(): HTMLInputElement {\n        return btnTabReEncrypt;\n    }\n    getTabContent(): HTMLInputElement {\n        return divTabReEncrypt;\n    }\n    onTabSelected() {\n        storageOutputComponent.hide();\n    }\n\n    init(): void {\n        setupCopyButton(txtReEncryptTarget, btnCopyReEncryptTarget, spnCopyReEncryptTargetFeedback);\n\n        // Mais est-ce que ce monde est serieux?\n        fillCipherComboBox(<HTMLSelectElement><any>cboReEncryptFrom, ciphers.length - 2);\n        fillCipherComboBox(<HTMLSelectElement><any>cboReEncryptTo, ciphers.length - 1);\n\n        txtReEncryptSource.addEventListener('input', () => {\n            if (txtReEncryptSource.value.length > 0) {\n                clearSourceVisualCue();\n            }\n        });\n\n        btnClearReEncryptSource.addEventListener('click', () => {\n            txtReEncryptSource.value = '';\n        });\n\n        btnClearReEncryptTarget.addEventListener('click', () => {\n            txtReEncryptTarget.value = '';\n        });\n\n        btnReEncrypt.addEventListener('click', onReEncryptButtonClick);\n    }\n}\n","import { getElementById } from './ui';\nimport { TabControl, ITabInfo } from './TabControl';\nimport { IComponent } from './components/IComponent';\n\nimport { PrivatePartComponent } from './components/privatePartComponent';\nimport { PasswordComponent } from './components/passwordComponent';\nimport { CipherComponent } from './components/cipherComponent';\nimport { ReEncryptComponent } from './components/reEncryptComponent';\n\nimport * as storageOutputComponent from './components/storageOutputComponent';\n\nconst nothingTabInfo: ITabInfo = {\n    getTabButton(): HTMLInputElement {\n        return getElementById('btnTabNothing');\n    },\n    getTabContent(): HTMLInputElement {\n        return getElementById('divTabNothing');\n    },\n    onTabSelected(): void {\n        storageOutputComponent.hide();\n    }\n}\n\nconst elements: any[] = [\n    nothingTabInfo,\n    new PrivatePartComponent(),\n    new PasswordComponent(),\n    new CipherComponent(),\n    new ReEncryptComponent(),\n    new storageOutputComponent.StorageOutputComponent(),\n];\n\nconst tabs: ITabInfo[] = elements.filter(e => (e as ITabInfo).getTabButton !== undefined);\nconst components: IComponent[] = elements.filter(e => (e as IComponent).init !== undefined);\n\nnew TabControl(tabs);\n\ndeclare const COMMITHASH: string;\n\nconst version = COMMITHASH.substr(0, 11);\nconst githubLink = '<a href=\"https://github.com/TanukiSharp/ItchyPassword\" target=\"_blank\">github</a>';\n\ngetElementById('divInfo').innerHTML = `${version}<br/>${githubLink}`;\n\nlet component: IComponent;\nfor (component of components) {\n    component.init();\n}\n","export interface ITabInfo {\n    getTabButton(): HTMLInputElement;\n    getTabContent(): HTMLInputElement;\n    onTabSelected: Function;\n}\n\nexport class TabControl {\n    private _activeTabIndex: number = -1;\n\n    public get activeTabIndex(): number {\n        return this._activeTabIndex;\n    }\n    public set activeTabIndex(index: number) {\n        if (index < 0 || index >= this.tabs.length) {\n            throw new Error(`Argument 'index' out of range. Must be in range [0;${this.tabs.length - 1}].`);\n        }\n        this.setActiveTab(index);\n    }\n\n    public constructor(private tabs: ITabInfo[]) {\n        for (let i = 0; i < this.tabs.length; i += 1) {\n            tabs[i].getTabButton().addEventListener('click', () => {\n                this.setActiveTab(i);\n            });\n        }\n\n        this.setActiveTab(0);\n    }\n\n    private setActiveTab(activeTabIndex: number) {\n        if (activeTabIndex === this._activeTabIndex) {\n            return;\n        }\n\n        let tabInfo: ITabInfo;\n\n        for (tabInfo of this.tabs) {\n            const button = tabInfo.getTabButton();\n            button.style.removeProperty('font-weight');\n            button.style.setProperty('color', '#C0C0C0');\n\n            tabInfo.getTabContent().style.setProperty('display', 'none');\n        }\n\n        const button = this.tabs[activeTabIndex].getTabButton();\n        button.style.setProperty('font-weight', 'bold');\n        button.style.removeProperty('color');\n\n        this.tabs[activeTabIndex].getTabContent().style.removeProperty('display');\n\n        this._activeTabIndex = activeTabIndex;\n\n        this.tabs[activeTabIndex].onTabSelected();\n    }\n}\n"],"sourceRoot":""}