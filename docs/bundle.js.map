{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/ui.ts","webpack:///./src/components/privatePartComponent.ts","webpack:///./src/TimedAction.ts","webpack:///./src/arrayUtils.ts","webpack:///./src/crypto.ts","webpack:///./src/stringUtils.ts","webpack:///./src/components/storageOutputComponent.ts","webpack:///./src/components/passwordComponent.ts","webpack:///./src/passwordGenerators/v1.ts","webpack:///./src/ciphers/v2.ts","webpack:///./src/components/cipherComponent.ts","webpack:///./src/ciphers/v1.ts","webpack:///./src/components/reEncryptComponent.ts","webpack:///./src/storages/GitHubVaultStorage.ts","webpack:///./src/components/vaultComponent.ts","webpack:///./src/storages/SecureLocalStorage.ts","webpack:///./src/index.ts","webpack:///./src/TabControl.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","getElementById","elementName","element","document","Error","setupFeedbackButton","button","action","setupStopAnimationTimer","f","duration","timeout","clearTimeout","setTimeout","createSafeTimeout","classList","remove","addEventListener","async","disabled","actionResult","result","Promise","undefined","add","error","console","message","setupCopyButton","txt","text","navigator","clipboard","writeText","stack","writeToClipboard","showHide","isVisible","style","removeProperty","setProperty","showHideMany","elements","SUCCESS_COLOR","ERROR_COLOR","btnProtectTitleForProtect","btnProtectTitleForClear","txtPrivatePart","txtPrivatePartConfirmation","btnProtect","spnProtectedConfirmation","spnPrivatePartSize","spnPrivatePartSizeConfirmation","onChangedHandlers","getPrivatePart","protectAndLockPrivatePart","length","innerHTML","title","updatePrivatePartsMatching","togglePrivatePartProtection","onProtectButtonClick","protectPrivatePartAction","delay","overrideDelay","this","onPrivatePartTextInput","onChangedHandler","toString","reset","onPrivatePartConfirmationTextInput","arrayBufferToUnsignedBigInt","arrayBuffer","buffer","byteLength","headeredBuffer","Uint8Array","set","createHeaderedBuffer","arrayView","DataView","multiplier","BigInt","getUint8","toCustomBaseOneWay","bytes","alphabet","alphabetLength","number","arrayBufferToUnsignedBigIntWithoutHeader","remainder","asUintN","fromCustomBase","input","indexOf","byteValue","Number","push","totalLength","diff","slice","unsignedBigIntToArrayBuffer","BASE62_ALPHABET","getDerivedBytes","password","salt","baseKey","window","crypto","subtle","importKey","algorithm","hash","iterations","deriveKey","exportKey","generateRandomString","byteCount","array","getRandomValues","generateRandomBytes","stringToArray","str","TextEncoder","encode","divStorageOutput","txtPath","txtParameters","txtCustomKeys","isPlainObject","constructor","onPathTextInput","update","onCustomKeysTextInput","_parameterKeys","_parameterPath","_reservedKeys","chainInfo","pathToObjectChain","path","separatorIndex","tail","firstPath","substr","remainingPath","node","head","tailParent","leaf","entries","customKeys","obj","JSON","parse","parseCustomKeys","resultParameters","source","target","reservedKeys","includes","shallowMerge","keys","stringify","objectDeepSort","output","sort","a","b","localeCompare","clearOutputs","setParameters","parameterKeys","parameterPath","show","hide","btnTabPasswords","divTabPasswords","passwordGenerator","hkdfPurpose","_description","privatePart","publicPart","derivedKey","hkdfKey","sign","txtPublicPart","spnPublicPartSize","btnGeneratePublicPart","btnClearPublicPart","btnCopyPublicPart","btnShowHidePasswordOptionalFeatures","lblAlphabetLength","numOutputSizeRange","numOutputSizeNum","lblAlphabet","txtAlphabet","spnAlphabetSize","divPasswordAlphabetActions","btnResetAlphabet","txtResultPassword","spnResultPasswordLength","btnViewResultPassword","btnCopyResultPassword","DEFAULT_LENGTH","DEFAULT_ALPHABET","RESERVED_KEYS","passwordPublicPartLastChange","onClearPublicPartButtonClick","prompt","updatePublicPartSize","updatePasswordPublicPartLastUpdate","updatePasswordGenerationParameters","onGeneratePublicPartButtonClick","randomString","run","Date","toISOString","updateResultPasswordLength","sortedAlphabet","split","canRun","passwordParamters","public","datetime","numericValue","updateOutputSizeRangeToNum","onOutputSizeRangeInput","onOutputSizeNumInput","min","parseInt","val","max","isNaN","Math","updateOutputSizeNumToRange","updateAlphabetSize","updateAlphabetValidityDisplay","isAlphabetValid","onAlphabetTextInput","isAlphabetValidResult","onResetAlphabetButtonClick","resetAlphabet","generatePasswordString","privatePrivateBytes","publicPartBytes","generatePassword","keyString","onPublicPartTextInput","ArrayBuffer","nonce","passwordSalt","aesGcmParams","iv","passwordKey","encrypt","payload","decrypt","btnTabCiphers","divTabCiphers","cipher","txtCipherName","txtCipherSource","txtCipherTarget","btnEncrypt","btnDecrypt","btnClearCipherSource","btnCopyCipherTarget","btnClearCipherTarget","clearSourceVisualCue","setSourceVisualCueError","clearAllVisualCues","setCipherTargetValue","updateCipherParameters","version","encryptString","warn","decryptString","decrypted","TextDecoder","decode","onEncryptButtonClick","focus","encryptedString","onDecryptButtonClick","decryptedString","encryptionKeyDerivationSalt","ciphers","btnTabReEncrypt","divTabReEncrypt","txtReEncryptSource","txtReEncryptTarget","cboReEncryptFrom","cboReEncryptTo","btnReEncrypt","btnClearReEncryptSource","btnCopyReEncryptTarget","btnClearReEncryptTarget","fillCipherComboBox","cbo","initialValue","item","createElement","childNodes","description","onReEncryptButtonClick","sourceCipherIndex","targetCipherIndex","reEncrypted","Array","map","x","join","GitHubVaultStorageBase","secureLocalStorage","token","oneTimePassword","currentVaultContentHash","username","repositoryName","vaultFilename","removeItem","LOCAL_STORAGE_KEY_USERNAME","LOCAL_STORAGE_KEY_REPO","LOCAL_STORAGE_KEY_FILENAME","AUTH_TOKEN_KEY_NAME","method","authHeader","body","headers","relativeUrl","BASE_URL","retryOnUnauthorized","url","constructUrl","requestInfo","constructFetchRequest","response","fetch","status","request","promptText","localStorage","getItem","setItem","getSetVaultParameter","resolve","getToken","ensureVaultParameters","ensureToken","constructVaultFileUrl","constructTokenAuthString","ok","getVaultContent","responseContent","json","sha","atob","content","newContent","updateMessage","btoa","super","basicAuthHeader","authorizationName","clear","LOCAL_STORAGE_KEY_PASSWORD_PUBLIC","LOCAL_STORAGE_KEY_PASSWORD_LENGTH","LOCAL_STORAGE_KEY_BROWSER_NAME","log","authorization","id","scopes","note","authorizations","app","getUsername","passwordPublicPart","passwordLengthString","passwordLength","isSafeInteger","constructBasicAuthString","browserName","AUTHORIZATION_NAME","listAuthorizations","findAuthorization","deleteAuthorization","createAuthorization","divTabVault","btnTabVault","txtVault","btnRefreshVault","btnClearVaultSettings","vaultStorage","authToken","index","encryptedItem","encrypted","onRefreshVaultButtonClick","alert","reloadVault","onClearVaultSettingsButtonClick","getTabButton","getTabContent","onChanged","type","startVisible","tabs","filter","e","components","init","_activeTabIndex","setActiveTab","activeTabIndex","tabInfo","onTabSelected","component"],"mappings":"aACE,IAAIA,EAAmB,GAGvB,SAASC,EAAoBC,GAG5B,GAAGF,EAAiBE,GACnB,OAAOF,EAAiBE,GAAUC,QAGnC,IAAIC,EAASJ,EAAiBE,GAAY,CACzCG,EAAGH,EACHI,GAAG,EACHH,QAAS,IAUV,OANAI,EAAQL,GAAUM,KAAKJ,EAAOD,QAASC,EAAQA,EAAOD,QAASF,GAG/DG,EAAOE,GAAI,EAGJF,EAAOD,QAKfF,EAAoBQ,EAAIF,EAGxBN,EAAoBS,EAAIV,EAGxBC,EAAoBU,EAAI,SAASR,EAASS,EAAMC,GAC3CZ,EAAoBa,EAAEX,EAASS,IAClCG,OAAOC,eAAeb,EAASS,EAAM,CAAEK,YAAY,EAAMC,IAAKL,KAKhEZ,EAAoBkB,EAAI,SAAShB,GACX,oBAAXiB,QAA0BA,OAAOC,aAC1CN,OAAOC,eAAeb,EAASiB,OAAOC,YAAa,CAAEC,MAAO,WAE7DP,OAAOC,eAAeb,EAAS,aAAc,CAAEmB,OAAO,KAQvDrB,EAAoBsB,EAAI,SAASD,EAAOE,GAEvC,GADU,EAAPA,IAAUF,EAAQrB,EAAoBqB,IAC/B,EAAPE,EAAU,OAAOF,EACpB,GAAW,EAAPE,GAA8B,iBAAVF,GAAsBA,GAASA,EAAMG,WAAY,OAAOH,EAChF,IAAII,EAAKX,OAAOY,OAAO,MAGvB,GAFA1B,EAAoBkB,EAAEO,GACtBX,OAAOC,eAAeU,EAAI,UAAW,CAAET,YAAY,EAAMK,MAAOA,IACtD,EAAPE,GAA4B,iBAATF,EAAmB,IAAI,IAAIM,KAAON,EAAOrB,EAAoBU,EAAEe,EAAIE,EAAK,SAASA,GAAO,OAAON,EAAMM,IAAQC,KAAK,KAAMD,IAC9I,OAAOF,GAIRzB,EAAoB6B,EAAI,SAAS1B,GAChC,IAAIS,EAAST,GAAUA,EAAOqB,WAC7B,WAAwB,OAAOrB,EAAgB,SAC/C,WAA8B,OAAOA,GAEtC,OADAH,EAAoBU,EAAEE,EAAQ,IAAKA,GAC5BA,GAIRZ,EAAoBa,EAAI,SAASiB,EAAQC,GAAY,OAAOjB,OAAOkB,UAAUC,eAAe1B,KAAKuB,EAAQC,IAGzG/B,EAAoBkC,EAAI,GAIjBlC,EAAoBA,EAAoBmC,EAAI,G,+BClF9C,SAASC,EAAeC,GAC3B,MAAMC,EAA4BC,SAASH,eAAeC,GAE1D,GAAoB,OAAhBA,EACA,MAAM,IAAIG,MAAM,gBAAgBH,iBAGpC,OAAOC,EAyBJ,SAASG,EAAoBC,EAA0BC,GAC1D,MAAMC,EAbV,SAA2BC,EAAaC,GACpC,IAAIC,EACJ,MAAO,KACCA,GACAC,aAAaD,GAEjBA,EAAUE,WAAWJ,EAAGC,IAOII,CAAkB,KAC9CR,EAAOS,UAAUC,OAAO,cACxBV,EAAOS,UAAUC,OAAO,cACzB,KAEHV,EAAOW,iBAAiB,QAASC,UAC7BZ,EAAOa,UAAW,EAElB,IACI,MAAMC,EAAeb,IAErB,IAAIc,EAEAA,EADAD,aAAwBE,cACTF,EAENA,OAGEG,IAAXF,IAAmC,IAAXA,EACxBf,EAAOS,UAAUS,IAAI,cAErBlB,EAAOS,UAAUS,IAAI,aAE3B,MAAOC,GACLnB,EAAOS,UAAUS,IAAI,aACrBE,QAAQD,MAAMA,EAAME,SAAWF,G,QAE/BjB,IACAF,EAAOa,UAAW,KAKvB,SAASS,EAAgBC,EAAuBvB,GACnDD,EAAoBC,EAAQ,KAzDhCY,eAAgCY,GAC5B,IAEI,aADMC,UAAUC,UAAUC,UAAUH,IAC7B,EACT,MAAOL,GAEL,OADAC,QAAQD,MAAMA,EAAMS,OAAST,IACtB,IAmDuBU,CAAiBN,EAAI5C,QAepD,SAASmD,EAASlC,EAAsBmC,GACvCA,EACAnC,EAAQoC,MAAMC,eAAe,WAE7BrC,EAAQoC,MAAME,YAAY,UAAW,QAItC,SAASC,EAAaC,EAAyBL,GAClD,IAAK,MAAMnC,KAAWwC,EAClBN,EAASlC,EAASmC,G,OAcnB,MAAMM,EAAwB,UACxBC,EAAsB,UCtGnC,MAAMC,EAA4B,8HAC5BC,EAA0B,kEAE1BC,EAAmC/C,EAAe,kBAClDgD,EAA+ChD,EAAe,8BAC9DiD,EAA+BjD,EAAe,cAC9CkD,EAA6ClD,EAAe,4BAE5DmD,EAAuCnD,EAAe,sBACtDoD,EAAmDpD,EAAe,kCAIxE,IAAI,EAEJ,MAAMqD,EAAoC,GAUnC,SAASC,IACZ,YAAoB/B,IAAhB,EACO,EAEJwB,EAAe9D,MAG1B,SAASsE,IAC+B,IAAhCR,EAAe9D,MAAMuE,SAIzB,EAAcT,EAAe9D,MAC7BiE,EAAyBO,UAAY,YAErCV,EAAe9D,MAAQ,GACvB+D,EAA2B/D,MAAQ,GACnCkE,EAAmBM,UAAY,IAC/BL,EAA+BK,UAAY,IAE3CV,EAAe5B,UAAW,EAC1B6B,EAA2B7B,UAAW,EAEtC8B,EAAWQ,UAAY,mBACvBR,EAAWS,MAAQZ,EAEnBa,KAeJ,SAASC,SACerC,IAAhB,EACAgC,KAbJ,OAAchC,EACd2B,EAAyBO,UAAY,GAErCV,EAAe5B,UAAW,EAC1B6B,EAA2B7B,UAAW,EAEtC8B,EAAWQ,UAAY,mBACvBR,EAAWS,MAAQb,EACnBI,EAAW9B,UAAW,GAW1B,SAAS0C,IACLD,IAGJ,MAAME,EAAwC,ICnFvC,MAEH,YAA2BvD,EAA0BwD,GAA1B,KAAAxD,SAA0B,KAAAwD,QAG9C,MAAMC,QACYzC,IAAjB0C,KAAKtD,SACLC,aAAaqD,KAAKtD,SAGtB,MAAMoD,OAA0BxC,IAAlByC,EAA8BA,EAAgBC,KAAKF,MAEjEE,KAAKtD,QAAUE,WAAW,KACtBoD,KAAK1D,SACL0D,KAAKtD,aAAUY,GAChBwC,KDoEmDR,EAnEd,KAqEhD,SAASW,IAML,IAAIC,EACJ,IAAKA,KANLlB,EAAW9B,SAA2C,IAAhC4B,EAAe9D,MAAMuE,OAE3CL,EAAmBM,UAAYV,EAAe9D,MAAMuE,OAAOY,WAC3DT,IAGyBN,GACrBc,IAGJL,EAAyBO,QAG7B,SAASV,IACDX,EAA2B/D,QAAU8D,EAAe9D,MACpD+D,EAA2BV,MAAME,YAAY,aAAcG,GAE3DK,EAA2BV,MAAME,YAAY,aAAcI,GAInE,SAAS0B,IACLlB,EAA+BK,UAAYT,EAA2B/D,MAAMuE,OAAOY,WACnFN,EAAyBO,QACzBV,IElEJ,SAASY,EAA4BC,GAGjC,MAAMhB,GAFNgB,EAlCJ,SAA8BC,GAC1B,GAAIA,EAAOC,WAAa,MACpB,MAAM,IAAItE,MAAM,qBAAqBqE,EAAOC,oBAGhD,IAAIlB,EAASiB,EAAOC,WACpB,MAAMC,EAA6B,IAAIC,WAAW,EAAIH,EAAOC,YAE7D,IAAK,IAAI1G,EAAY,EAAGA,EAAI,EAAGA,GAAK,EAChC2G,EAAe3G,GAAKwF,EAAS,IAC7BA,GAAU,IAKd,OAFAmB,EAAeE,IAAI,IAAID,WAAWH,GAAS,GAEpCE,EAAeF,OAmBRK,CAAqBN,IAEAE,WAC7BK,EAAsB,IAAIC,SAASR,EAAa,GAEtD,IAAInD,EAAiB,GACjB4D,EAAqB,GAEzB,IAAK,IAAIjH,EAAY,EAAGA,EAAIwF,EAAQxF,GAAK,EACrCqD,GAAU6D,OAAOH,EAAUI,SAASnH,IAAMiH,EAC1CA,GAAc,KAGlB,OAAO5D,EAiCJ,SAAS+D,EAAmBC,EAAoBC,GACnD,MAAMC,EAAyBL,OAAOI,EAAS9B,QAE/C,IAAInC,EAAiB,GACjBmE,EAlER,SAAkDhB,GAC9C,MAAMhB,EAAiBgB,EAAYE,WAC7BK,EAAsB,IAAIC,SAASR,EAAa,GAEtD,IAAInD,EAAiB,GACjB4D,EAAqB,GAEzB,IAAK,IAAIjH,EAAY,EAAGA,EAAIwF,EAAQxF,GAAK,EACrCqD,GAAU6D,OAAOH,EAAUI,SAASnH,IAAMiH,EAC1CA,GAAc,KAGlB,OAAO5D,EAsDcoE,CAAyCJ,GAE9D,KAAOG,EAAS,IAChB,CACI,MAAME,EAAoBF,EAASD,EACnCC,GAAUD,EAIVlE,GAAUiE,EAFyBJ,OAAOS,QAAQ,EAAGD,IAKzD,OAAOrE,EAsBJ,SAASuE,EAAeC,EAAeP,GAC1C,MAAMC,EAAyBL,OAAOI,EAAS9B,QAE/C,IAAIgC,EAAiB,GACjBP,EAAqB,GAEzB,IAAK,IAAIjH,EAAY,EAAGA,EAAI6H,EAAMrC,OAAQxF,GAAK,EAAG,CAG9CwH,GAFsBN,OAAOI,EAASQ,QAAQD,EAAM7H,KAElCiH,EAClBA,GAAcM,EAGlB,OAjFG,SAAqCC,GACxC,MAAMnE,EAAwB,GAE9B,KAAOmE,EAAS,IAChB,CACI,MAAME,EAAoBF,EAAS,KACnCA,GAAU,KAEV,MAAMO,EAAoBC,OAAYd,OAAOS,QAAQ,EAAGD,IAExDrE,EAAO4E,KAAKF,GAGhB,IAAIG,EAAsB7E,EAAO,GAC7BA,EAAOmC,OAAS,IAChB0C,GAA2B,IAAZ7E,EAAO,IAI1B,MAAM8E,EAAOD,GAAe7E,EAAOmC,OAAS,GAE5C,IAAK,IAAIxF,EAAY,EAAGA,EAAImI,EAAMnI,GAAK,EACnCqD,EAAO4E,KAAK,GAGhB,OAAO,IAAIrB,WAAWvD,EAAO+E,MAAM,IAAI3B,OAwDhC4B,CAA4Bb,GC5IhC,MAAMc,EAA0B,iEAehCpF,eAAeqF,EAAgBC,EAAuBC,GACzD,MAAMC,QAA2BC,OAAOC,OAAOC,OAAOC,UAClD,MACAN,EACA,UACA,EACA,CAAC,cAGCO,EAA0B,CAC5BxI,KAAM,SACNyI,KAAM,UACNC,WAAY,IACZR,QAQEpF,QAA0BsF,OAAOC,OAAOC,OAAOK,UACjDH,EACAL,EAPwC,CACxCnI,KAAM,UACNiF,OAAQ,MAOR,EACA,CAAC,YAKL,aAF+BmD,OAAOC,OAAOC,OAAOM,UAAU,MAAO9F,GAUlE,SAAS+F,EAAqBC,EAAoB,GAAI/B,EAAmBgB,GAE5E,OAAO,EAPJ,SAA6Be,EAAoB,IACpD,MAAMC,EAAoB,IAAI1C,WAAWyC,GACzC,OAAOT,OAAOW,gBAAgBD,GAAO7C,OAIV+C,CAAoBH,GACH/B,GClDzC,SAASmC,EAAcC,GAE1B,OADgB,IAAIC,aACLC,OAAOF,GAAKjD,OCN/B,MAAMoD,EAAqC7H,EAAe,oBAEpD8H,EAA4B9H,EAAe,WAE3C+H,EAAkC/H,EAAe,iBACjDgI,EAAkChI,EAAe,iBAEvD,SAASiI,EAAchJ,GACnB,OAAOA,SAAoE,WAA3BA,EAAMiJ,YAAY3J,KAsEtE,SAAS4J,IACLC,IAGJ,SAASC,IACLD,IA4BJ,SAASA,IACL,QAAuB7G,IAAnB+G,QAAmD/G,IAAnBgH,QAAkDhH,IAAlBiH,EAChE,OAGJ,MAAMC,EAnEV,SAASC,EAAkBC,EAAcF,GACrC,MAAMG,EAAyBD,EAAK7C,QAAQ,KAEtC+C,EAAoB,GAEpBC,EAAoBF,GAAkB,EAAID,EAAKI,OAAO,EAAGH,GAAkBD,EAC3EK,EAAoCJ,GAAkB,EAAID,EAAKI,OAAOH,EAAiB,QAAKrH,EAElG,QAAkBA,IAAdkH,EAAyB,CACzB,MAAMQ,EAAoB,GAC1BA,EAAKH,GAAaD,EAClBJ,EAAY,CACRS,KAAMD,EACNE,WAAYF,EACZJ,aAGJJ,EAAUI,KAAKC,GAAaD,EAC5BJ,EAAUU,WAAaV,EAAUI,KACjCJ,EAAUI,KAAOA,EAGrB,OAAIG,EACON,EAAkBM,EAAeP,GAGrCA,EAyCuBC,CAAkB,GAAGZ,EAAQ7I,SAASsJ,KAC9Da,EAAoBX,EAAUI,KAEpC,IAAK,MAAOtJ,EAAKN,KAAUP,OAAO2K,QAAQf,GACtCc,EAAK7J,GAAON,EAGhB,MAAMqK,EA5BV,WACI,GAA4B,KAAxBtB,EAAc/I,MACd,MAAO,GAGX,IACI,MAAMsK,EAAWC,KAAKC,MAAMzB,EAAc/I,OAC1C,OAAY,OAARsK,GAAyC,WAAzBA,EAAIrB,YAAY3J,KACzB,KAEJgL,EACT,MACE,OAAO,MAgB4BG,GACA,OAAfJ,EApCpBtB,EAAc1F,MAAMC,eAAe,cAIvCyF,EAAc1F,MAAME,YAAY,aAAcI,GAiC9C,MAAM+G,EAxGV,SAAsBC,EAA4BC,EAA4BC,GAC1E,MAAMzI,EAAsB,GAE5B,GAAe,OAAXuI,EACA,IAAK,MAAOrK,EAAKN,KAAUP,OAAO2K,QAAQO,IACH,IAA/BE,EAAaC,SAASxK,KACtB8B,EAAO9B,GAAON,GAK1B,GAAe,OAAX4K,EACA,IAAK,MAAOtK,EAAKN,KAAUP,OAAO2K,QAAQQ,GACtCxI,EAAO9B,GAAON,EAItB,OAAOoC,EAuF+B2I,CAAaV,EAAYF,EAAMZ,GAExB,IAAzC9J,OAAOuL,KAAKN,GAAkBnG,OAE9BiF,EAAUU,WAAWzK,OAAOuL,KAAKxB,EAAUU,YAAY,IAAM,KAE7DV,EAAUU,WAAWzK,OAAOuL,KAAKxB,EAAUU,YAAY,IAAMQ,EAGjE5B,EAAc9I,MAAQuK,KAAKU,UA3H/B,SAASC,EAAezK,GACpB,MAAM0K,EAAsB,GAE5B,IAAK,MAAO7K,EAAKN,KAAUP,OAAO2K,QAAQ3J,GAAQ2K,KAAK,CAACC,EAAGC,IAAMD,EAAE,GAAGE,cAAcD,EAAE,KAClFH,EAAO7K,GAAO0I,EAAchJ,GAASkL,EAAelL,GAASA,EAGjE,OAAOmL,EAoH8BD,CAAe1B,EAAUS,WAAO3H,EAAW,GAG7E,SAASkJ,IACZnC,OAAiB/G,EACjBgH,OAAiBhH,EACjBiH,OAAgBjH,EAChBwG,EAAc9I,MAAQ,GAG1B,IAAIqJ,EACAC,EACAC,EAEG,SAASkC,EAAcC,EAA4BC,EAAuBd,GAC7ExB,EAAiBqC,EACjBpC,EAAiBqC,EACjBpC,EAAgBsB,EAChB1B,IAGG,SAASyC,IACZhD,EAAiBvF,MAAME,YAAY,UAAW,WAG3C,SAASsI,IACZjD,EAAiBvF,MAAME,YAAY,UAAW,QCtJlD,MAAMuI,EAAoC,EAAkB,mBACtDC,EAAoC,EAAkB,mBAEtDC,EAA+C,ICd9C,MAIH,YAAmBC,GACfjH,KAAKiH,YAAczD,EAAcyD,GACjCjH,KAAKkH,aAAe,mCAAmCD,KAG3D,cACI,OAAO,EAGX,kBACI,OAAOjH,KAAKkH,aAGT,uBAAuBC,EAA0BC,GACpD,MAAMC,QAAgC/E,EAAgB6E,EAAaC,GAO7DE,QAA2B5E,OAAOC,OAAOC,OAAOC,UAClD,MACAwE,EAPqC,CACrC/M,KAAM,OACNyI,KAAM,CAAEzI,KAAM,aAOd,EACA,CAAC,SAGL,aAAaoI,OAAOC,OAAOC,OAAO2E,KAAK,OAAQD,EAAStH,KAAKiH,eDnBQ,YAEvEO,EAAkC,EAAkB,iBACpDC,GAAsC,EAAkB,qBACxDC,GAA0C,EAAkB,yBAC5DC,GAAuC,EAAkB,sBACzDC,GAAsC,EAAkB,qBACxDC,GAAwD,EAAkB,uCAE1EC,GAAsC,EAAkB,qBACxDC,GAAuC,EAAkB,sBACzDC,GAAqC,EAAkB,oBAEvDC,GAAgC,EAAkB,eAClDC,GAAgC,EAAkB,eAClDC,GAAoC,EAAkB,mBACtDC,GAA+C,EAAkB,8BACjEC,GAAqC,EAAkB,oBAEvDC,GAAsC,EAAkB,qBACxDC,GAA4C,EAAkB,2BAC9DC,GAA0C,EAAkB,yBAC5DC,GAA0C,EAAkB,yBAE5DC,GAAyB,GACzBC,GAA2B,iGAE3BC,GAA0B,CAAC,WAAY,SAAU,SAAU,YAEjE,IAAIC,GAEJ,SAASC,KACL,QAAItB,EAAcxM,MAAMuE,OAAS,GACgE,MAAzFwJ,OAAO,uEAA0E,OAKzFvB,EAAcxM,MAAQ,GACtBgO,KAEAC,KACAC,MAEO,GAGX,SAASC,KACL,GAAI3B,EAAcxM,MAAMuE,OAAS,GACqE,MAA9FwJ,OAAO,4EAA+E,IACtF,OAAO,EAIf,MAAMK,EAAuB,IAQ7B,OAPA5B,EAAcxM,MAAQoO,EACtBJ,KAEAC,KAEAI,MAEO,EAGX,SAASJ,KAEDJ,GADArB,EAAcxM,MAAMuE,OAAS,GACE,IAAI+J,MAAOC,mBAEXjM,EAqBvC,SAASkM,KACLjB,GAAwB/I,UAAY8I,GAAkBtN,MAAMuE,OAAOY,WAGvE,SAAS,GAAgBkB,GACrB,MAAMoI,EAA2BpI,EAASqI,MAAM,IAChDD,EAAerD,OAEf,IAAK,IAAIrM,EAAY,EAAGA,EAAI0P,EAAelK,OAAQxF,GAAK,EACpD,GAAI0P,EAAe1P,EAAI,KAAO0P,EAAe1P,GACzC,OAAO,EAIf,OAAO,EAGX,SAASmP,KACL,IAAiB,IAAbS,KAEA,YADA,KAIJ,MAAMC,EAAiC,CACnCC,OAAQrC,EAAcxM,MACtB8O,SAAUjB,IAGRkB,EAAuBzB,GAAkBtN,MAAMuE,OACjDwK,IAAiBrB,KACjBkB,EAAkBrK,OAASwK,GAG/B,MAAM1I,EAAmB6G,GAAYlN,MACjCqG,IAAasH,KACbiB,EAAkBvI,SAAWA,GAGjC,EAAqCuI,EAAmB,WAAYhB,IAGxE,SAASoB,KACLhC,GAAiBhN,MAAQ+M,GAAmB/M,MAgBhDiC,eAAegN,KACXD,WACMX,KAGVpM,eAAeiN,MAlBf,WACI,MAAMC,EAAcC,SAASrC,GAAmBoC,IAAK,IAC/CE,EAAcD,SAASpC,GAAiBhN,MAAO,IAC/CsP,EAAcF,SAASrC,GAAmBuC,IAAK,IAErD,OAAmB,IAAfC,MAAMF,KACNtC,GAAmB/M,MAAQwP,KAAKF,IAAIH,EAAKK,KAAKL,IAAIE,EAAKC,IAAMnK,YACtD,IAYPsK,IACAT,WAEEX,KAGV,SAASL,KACLvB,GAAkBjI,UAAYgI,EAAcxM,MAAMuE,OAAOY,WAG7D,SAASuK,KACLvC,GAAgB3I,UAAY0I,GAAYlN,MAAMuE,OAAOY,WAGzD,SAASwK,GAA8BC,GAC/BA,EACA1C,GAAY7J,MAAMC,eAAe,cAEjC4J,GAAY7J,MAAME,YAAY,aAAc,GAIpDtB,eAAe4N,KACX,MAAMC,EAAiC,GAAgB5C,GAAYlN,OAEnE2P,GAA8BG,IAEA,IAA1BA,IAIJJ,WACMrB,MAGVpM,eAAe8N,KACX,OAAwB,IAApBC,aAIE3B,MAEC,GAGX,SAAS,KACLf,GAAkBtN,MAAQ,GAC1B,IACAwO,KAGJ,SAASG,GAAOvC,GACZ,MAAM/F,EAAmB6G,GAAYlN,MAErC,OAAkC,IAA9B,GAAgBqG,KAIpB+F,EAAaA,GAAcI,EAAcxM,QAErC,IAAsCuE,QAAU,GAAK6H,EAAW7H,OAAS,GAAK8B,EAAS9B,OAAS,IAOjGtC,eAAegO,GAAuB7D,GACzC,IAA2B,IAAvBuC,GAAOvC,GACP,OAAO,KAGX,MACM8D,EAAmC,EADP,KAE5BC,EAA+B,EAA0B/D,GAG/D,OAAO,QAF6BJ,EAAkBoE,iBAAiBF,EAAqBC,GAE7CjD,GAAYlN,OAG/DiC,eAAeoM,KACX,IAAiB,IAAbM,KAEA,YADA,KAIJ,MAAM0B,QAAiCJ,GAAuBzD,EAAcxM,OFjQzE,IAAkB4G,EAAerC,EEkQlB,OAAd8L,IAIJ/C,GAAkBtN,OFtQG4G,EEsQ0ByJ,EFtQX9L,EEsQsBiL,KAAKF,IAAI,EAAGF,SAASrC,GAAmB/M,MAAO,KFrQrG4G,EAAMrC,QAAUA,EACTqC,EAGJA,EAAMkD,OAAO,EAAGvF,IEmQvBiK,KAEAN,MAGJ,SAAS8B,KACL9C,GAAYlN,MAAQ2N,GACpB+B,KAEA,MAAMI,EAAiC,GAAgB5C,GAAYlN,OAInE,OAFA2P,GAA8BG,GAEvBA,EAGX7N,eAAeqO,KACXtC,KACAC,WACMI,KEzRH,MAAM,GACT,cACI,OAAO,EAGX,kBACI,MAAO,mBAGX,cAAczH,EAAoBW,GAC9B,MAAM4D,EAAsB,IAAIoF,YAAY,GAAe3J,EAAMnB,YAE3D+K,EAAoB7I,OAAOW,gBAAgB,IAAI3C,WAAWwF,EAAQ,EAAG,KACrEsF,EAA2B9I,OAAOW,gBAAgB,IAAI3C,WAAWwF,EAAQ,GAAI,KAE7EuF,EAA6B,CAC/BpR,KAAM,UACNqR,GAAIH,GAQFI,QAA+BlJ,OAAOC,OAAOC,OAAOC,UACtD,YACMP,EAAgBC,EAAUkJ,GAPK,CACrCnR,KAAM,UACNiF,OAAQ,MAOR,EACA,CAAC,YAGCnC,QAA4BsF,OAAOC,OAAOC,OAAOiJ,QAAQH,EAAcE,EAAahK,GAI1F,OAFA,IAAIjB,WAAWwF,GAAQvF,IAAI,IAAID,WAAWvD,GAAS,IAE5C+I,EAGX,cAAcvE,EAAoBW,GAC9B,MAAMiJ,EAAoB,IAAI7K,WAAWiB,EAAO,EAAG,IAC7C6J,EAA2B,IAAI9K,WAAWiB,EAAO,GAAI,IACrDkK,EAAsB,IAAInL,WAAWiB,EAAO,IAE5C8J,EAA6B,CAC/BpR,KAAM,UACNqR,GAAIH,GAQFnE,QAAgC/E,EAAgBC,EAAUkJ,GAE1DG,QAA+BlJ,OAAOC,OAAOC,OAAOC,UACtD,MACAwE,EATqC,CACrC/M,KAAM,UACNiF,OAAQ,MASR,EACA,CAAC,YAGL,aAAamD,OAAOC,OAAOC,OAAOmJ,QAAQL,EAAcE,EAAaE,ICtD7E,MAAM,GAA0B,CAAC,UAAW,SAEtCE,GAAkC,EAAkB,iBACpDC,GAAkC,EAAkB,iBAEpDC,GAAyB,IAAI,GAE7BC,GAAkC,EAAkB,iBACpDC,GAAoC,EAAkB,mBACtDC,GAAoC,EAAkB,mBACtDC,GAA+B,EAAkB,cACjDC,GAA+B,EAAkB,cAEjDC,GAAyC,EAAkB,wBAC3DC,GAAwC,EAAkB,uBAC1DC,GAAyC,EAAkB,wBAEjE,SAASC,KACLP,GAAgB/N,MAAMC,eAAe,oBAOzC,SAASsO,KACLR,GAAgB/N,MAAME,YAAY,mBAAoB,GAO1D,SAASsO,KACLF,KAZAN,GAAgBhO,MAAMC,eAAe,oBAgBzC,SAASwO,GAAqB9R,GAC1BqR,GAAgBrR,MAAQA,EAKxB+R,KAGJ,SAASA,KACL,GAA8B,KAA1BV,GAAgBrR,OAAwC,KAAxBmR,GAAcnR,MAE9C,YADA,IAWJ,EAPyB,CACrBgS,QAASd,GAAOc,QAChBhS,MAAOqR,GAAgBrR,OAGd,WAAWmR,GAAcnR,QAEuB,IAG1DiC,eAAegQ,GAAcjS,GAChC,MAAMmM,EAAsB9H,IAC5B,GAA2B,IAAvB8H,EAAY5H,OAEZ,OADA9B,QAAQyP,KAAK,yBACN,KAGX,MAAMtL,EAAqB,EAA0B5G,GAC/CuH,EAAwB,EAA0B4E,GAIxD,OPsBG,SAAsB/F,EAAoBC,GAC7C,MAAMC,EAAyBL,OAAOI,EAAS9B,QAE/C,IAAInC,EAAiB,GACjBmE,EAAiBjB,EAA4Bc,GAEjD,KAAOG,EAAS,IAChB,CACI,MAAME,EAAoBF,EAASD,EACnCC,GAAUD,EAIVlE,GAAUiE,EAFyBJ,OAAOS,QAAQ,EAAGD,IAKzD,OAAOrE,EOtCA,OAF8B8O,GAAOL,QAAQjK,EAAOW,GAEjB,GAGvCtF,eAAekQ,GAAcnS,GAChC,MAAMmM,EAAsB9H,IAC5B,GAA2B,IAAvB8H,EAAY5H,OAEZ,OADA9B,QAAQyP,KAAK,yBACN,KAGX,IACI,MAAMtL,EAAqB,EAA0B5G,EAAO,GACtDuH,EAAwB,EAA0B4E,GAElDiG,QAA+BlB,GAAOH,QAAQnK,EAAOW,GAE3D,OPxGsBc,EOwGU+J,GPvGpB,IAAIC,aACLC,OAAOjK,GOuGpB,MAAO7F,GAEL,OADAC,QAAQyP,KAAK,oBAAoB1P,EAAME,QAAU,YAAYF,EAAME,UAAY,wBACxE,KP3GR,IAAuB2F,EO+G9BpG,eAAesQ,KAKX,GAJAnB,GAAgBoB,QAChBV,GAAqB,IACrBD,KAEqC,IAAjCT,GAAgBpR,MAAMuE,OAEtB,OADAqN,MACO,EAGX,MAAMa,QAAuCR,GAAcb,GAAgBpR,OAE3E,OAAwB,OAApByS,IAIJX,GAAqBW,IAEd,GAGXxQ,eAAeyQ,KAKX,GAJAtB,GAAgBoB,QAChBV,GAAqB,IACrBD,KAEqC,IAAjCT,GAAgBpR,MAAMuE,OAEtB,OADAqN,MACO,EAGX,MAAMe,QAAuCR,GAAcf,GAAgBpR,OAE3E,OAAwB,OAApB2S,GArGJtB,GAAgBhO,MAAME,YAAY,mBAAoB,IAuG3C,IAGXuO,GAAqBa,IAEd,GCrJX,MAAMC,GAA2C,IAAIjN,WAAW,CAAE,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,GAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,GAAM,MAAQH,OCWpK,MAAMqN,GAAqB,CACvB,IDVG,MACH,cACI,OAAO,EAGX,kBACI,MAAO,mBAGX,cAAcjM,EAAoBW,GAC9B,MAAM4D,EAAsB,IAAIoF,YAAY,GAAU3J,EAAMnB,YAEtD+K,EAAkB,IAAIzK,SAASoF,EAAQ,EAAG,IAChDxD,OAAOW,gBAAgB,IAAI3C,WAAWwF,EAAQ,EAAG,KAEjD,MAAMuF,EAA6B,CAC/BpR,KAAM,UACNqR,GAAIH,GAQFI,QAA+BlJ,OAAOC,OAAOC,OAAOC,UACtD,YACMP,EAAgBC,EAAUqL,IAPK,CACrCtT,KAAM,UACNiF,OAAQ,MAOR,EACA,CAAC,YAGCnC,QAA4BsF,OAAOC,OAAOC,OAAOiJ,QAAQH,EAAcE,EAAahK,GAI1F,OAFA,IAAIjB,WAAWwF,GAAQvF,IAAI,IAAID,WAAWvD,GAAS,IAE5C+I,EAGX,cAAcvE,EAAoBW,GAC9B,MAAMiJ,EAAkB,IAAIzK,SAASa,EAAO,EAAG,IACzCkK,EAAoB,IAAI/K,SAASa,EAAO,IAExC8J,EAA6B,CAC/BpR,KAAM,UACNqR,GAAIH,GAQFnE,QAAgC/E,EAAgBC,EAAUqL,IAE1DhC,QAA+BlJ,OAAOC,OAAOC,OAAOC,UACtD,MACAwE,EATqC,CACrC/M,KAAM,UACNiF,OAAQ,MASR,EACA,CAAC,YAGL,aAAamD,OAAOC,OAAOC,OAAOmJ,QAAQL,EAAcE,EAAaE,KCrDzE,IAAI,IAGFgC,GAAoC,EAAkB,mBACtDC,GAAoC,EAAkB,mBAEtDC,GAAuC,EAAkB,sBACzDC,GAAuC,EAAkB,sBAEzDC,GAAqC,EAAkB,oBACvDC,GAAmC,EAAkB,kBACrDC,GAAiC,EAAkB,gBAEnDC,GAA4C,EAAkB,2BAC9DC,GAA2C,EAAkB,0BAC7DC,GAA4C,EAAkB,2BAEpE,SAASC,GAAmBC,EAAwBC,GAChD,IAAIxC,EAEJ,IAAKA,KAAU2B,GAAS,CACpB,MAAMc,EAA0BzS,SAAS0S,cAAc,UACvDD,EAAK3T,MAAQyT,EAAII,WAAWtP,OAAOY,WACnCwO,EAAK9Q,KAAO,GAAGqO,EAAO4C,iBAAiB5C,EAAOc,WAC9CyB,EAAIlR,IAAIoR,GAGZF,EAAIzT,MAAQ0T,EAAavO,WAG7B,SAAS,KACL6N,GAAmB3P,MAAMC,eAAe,oBAe5C,SAAS,KACL,KAZA2P,GAAmB5P,MAAMC,eAAe,oBAgB5CrB,eAAe8R,KAIX,GAHAd,GAAmBjT,MAAQ,GAC3B,KAEwC,IAApCgT,GAAmBhT,MAAMuE,OAEzB,OAlBJyO,GAAmB3P,MAAME,YAAY,mBAAoB,IAkB9C,EAGX,GAAI2P,GAAiBlT,QAAUmT,GAAenT,MAE1C,OAnBJiT,GAAmB5P,MAAME,YAAY,mBAAoB,IAmB9C,EAGX,MAAM4I,EAAsB9H,IAC5B,GAA2B,IAAvB8H,EAAY5H,OAEZ,OADA9B,QAAQyP,KAAK,0BACN,EAGX,MAAM8B,EAAoB5E,SAAS8D,GAAiBlT,MAAO,IACrDiU,EAAoB7E,SAAS+D,GAAenT,MAAO,IAEnDuH,EAAwB,EAA0B4E,GAElDvF,EP9EH,SAAoB6B,GACnBA,EAAIlE,OAAS,GAAM,IACnBkE,EAAM,IAAMA,GAGhB,MAAMrG,EAAqB,IAAIuD,WAAW8C,EAAIlE,OAAS,GAEvD,IAAK,IAAIxF,EAAI,EAAGA,EAAIqD,EAAOqD,WAAY1G,GAAK,EACxCqD,EAAOrD,GAAKqQ,SAAS3G,EAAIqB,OAAW,EAAJ/K,EAAO,GAAI,IAG/C,OAAOqD,EAAOoD,OOmEa,CAAuBwN,GAAmBhT,OAC/DoS,QAA+BS,GAAQmB,GAAmBjD,QAAQnK,EAAOW,GACzE2M,QAAiCrB,GAAQoB,GAAmBpD,QAAQuB,EAAW7K,GToDlF,IAAkB/B,EShDrB,OAFAyN,GAAmBjT,OTkDEwF,ESlD0B0O,ETmDxCC,MAAMxT,UAAUyT,IAAIlV,KACvB,IAAIyG,WAAWH,GACf6O,IAAM,KAAOA,EAAElP,SAAS,KAAKgC,OAAO,IACtCmN,KAAK,MSpDA,EC7EJ,MAAeC,GA4BlB,YAA6BC,GAAA,KAAAA,qBAxBrB,KAAAC,MAAuB,KACvB,KAAAC,gBAAiC,KACjC,KAAAC,wBAAyC,KAEzC,KAAAC,SAA0B,KAC1B,KAAAC,eAAgC,KAChC,KAAAC,cAA+B,KAM7B,cACN,OAAO9P,KAAK4P,SAGN,oBACN,OAAO5P,KAAK6P,eAGN,mBACN,OAAO7P,KAAK8P,cAMT,QACH9P,KAAKwP,mBAAmBO,WAAW,GAAsBC,4BACzDhQ,KAAKwP,mBAAmBO,WAAW,GAAsBE,wBACzDjQ,KAAKwP,mBAAmBO,WAAW,GAAsBG,4BAEzDlQ,KAAKwP,mBAAmBO,WAAWR,GAAuBY,qBAGtD,2BACJ,MAAO,SAASnQ,KAAKyP,QAGjB,sBAAsBW,EAAgBC,EAAoBC,GAC9D,MAAMC,EAAuB,CACzB,OAAU,iCACV,eAAgB,mBAChB,cAAiBF,GAOrB,OAJIrQ,KAAK0P,kBACLa,EAAQ,gBAAkBvQ,KAAK0P,iBAG5B,CACHU,SACAG,UACAD,KAAMA,EAAO/K,KAAKU,UAAUqK,QAAQhT,GAIpC,aAAakT,GACjB,MAAO,GAAGjB,GAAuBkB,WAAWD,IAGtC,cAAcE,EAA8BN,EAAgBI,EAAqBH,EAAoBC,GAC3G,MAAMK,EAAc3Q,KAAK4Q,aAAaJ,GAChCK,EAA2B7Q,KAAK8Q,sBAAsBV,EAAQC,EAAYC,GAEhF,IAAIS,QAA2BC,MAAML,EAAKE,GAE1C,OAAwB,MAApBE,EAASE,QAAkBP,GAC3B1Q,KAAK0P,gBAAkB3G,OAAO,wBAEzB/I,KAAK0P,sBAIG1P,KAAKkR,QAAQR,EAAqBN,EAAQI,EAAaH,EAAYC,GAHrE,MAMRS,EAGD,qBAAqBzV,EAAa6V,GACxC,IAAInW,EAAuB0H,OAAO0O,aAAaC,QAAQ/V,GAEvD,OAAIN,IAIJA,EAAQ+N,OAAOoI,GAEVnW,GAIL0H,OAAO0O,aAAaE,QAAQhW,EAAKN,GAE1BA,GALI,MAQL,wBACN,MAAM4U,EAAW5P,KAAKuR,qBAAqBhC,GAAuBS,2BAA4B,4BAC9F,IAAKJ,EACD,OAAOvS,QAAQmU,SAAQ,GAE3BxR,KAAK4P,SAAWA,EAEhB,MAAMC,EAAgC7P,KAAKuR,qBAAqBhC,GAAuBU,uBAAwB,iCAC/G,IAAKJ,EACD,OAAOxS,QAAQmU,SAAQ,GAE3BxR,KAAK6P,eAAiBA,EAEtB,MAAMC,EAA+B9P,KAAKuR,qBAAqBhC,GAAuBW,2BAA4B,mBAClH,OAAKJ,GAGL9P,KAAK8P,cAAgBA,EAEdzS,QAAQmU,SAAQ,IAJZnU,QAAQmU,SAAQ,GASvB,oBACJ,IAAI/B,QAA6BzP,KAAKwP,mBAAmB6B,QAAQ9B,GAAuBY,qBAMxF,OAJc,OAAVV,IACAA,QAAczP,KAAKyR,cAGlBhC,UAICzP,KAAKwP,mBAAmB8B,QAAQ/B,GAAuBY,oBAAqBV,GAElFzP,KAAKyP,MAAQA,GAEN,GAGH,wBACJ,MAAO,UAAUzP,KAAK4P,YAAY5P,KAAK6P,2BAA2B7P,KAAK8P,gBAGpE,wBACH,IAA2C,UAAjC9P,KAAK0R,wBACX,OAAO,KAEX,IAAiC,UAAvB1R,KAAK2R,cACX,OAAO,KAGX,MAAMhB,EAAc3Q,KAAK4R,wBACnBb,QAAkC/Q,KAAKkR,SAAQ,EAAO,MAAOP,EAAK3Q,KAAK6R,4BAE7E,GAAiB,OAAbd,EAEA,OADAtT,QAAQyP,KAAK,mCACN,KAGX,IAAoB,IAAhB6D,EAASe,GACT,OAAwB,MAApBf,EAASE,QACTjR,KAAKwP,mBAAmBO,WAAWR,GAAuBY,qBAC1DnQ,KAAKyP,MAAQ,KACbzP,KAAK0P,gBAAkB,WAEV1P,KAAK+R,oBAGtBtU,QAAQD,MAAM,+BAA+BwC,KAAK8P,kBAAmBiB,GAE9D,MAGX,MAAMiB,QAAwCjB,EAASkB,OAIvD,OAFAjS,KAAK2P,wBAA0BqC,EAAgBE,IAExCC,KAAKH,EAAgBI,SAGhC,sBAAsBC,EAAoBC,GACtC,IAA2C,UAAjCtS,KAAK0R,wBACX,OAAO,EAEX,IAAiC,UAAvB1R,KAAK2R,cACX,OAAO,EAGX,MAAMrB,EAAO,CACT5S,QAAS4U,EACTF,QAASG,KAAKF,GACdH,IAAKlS,KAAK2P,yBAGRgB,EAAc3Q,KAAK4R,wBACnBb,QAAkC/Q,KAAKkR,SAAQ,EAAO,MAAOP,EAAK3Q,KAAK6R,2BAA4BvB,GAEzG,GAAiB,OAAbS,EAEA,OADAtT,QAAQyP,KAAK,oCACN,EAGX,MAAM8E,QAA6BjB,EAASkB,OAE5C,OAAoB,IAAhBlB,EAASe,IACTrU,QAAQD,MAAM,uCAAuCwC,KAAK8P,kBAAmBiB,EAAUiB,IAChF,IAGXhS,KAAK2P,wBAA2BqC,EAAgBI,QAA2BF,KAEpE,IAvNJ,GAAAzB,SAAmB,yBACnB,GAAAN,oBAA8B,mCAU9B,GAAAH,2BAAqC,kCACrC,GAAAC,uBAAiC,oCACjC,GAAAC,2BAAqC,kCAyNzC,MAAM,WAA8BX,GAUvC,YAAmBC,GACfgD,MAAMhD,GAJF,KAAAiD,gBAAiC,KACjC,KAAAC,kBAAmC,KAMpC,QACHF,MAAMG,QAEN3S,KAAKwP,mBAAmBO,WAAW,GAAsB6C,mCACzD5S,KAAKwP,mBAAmBO,WAAW,GAAsB8C,mCACzD7S,KAAKwP,mBAAmBO,WAAW,GAAsB+C,gCAGrD,yBAAyBlD,EAAkBrN,GAK/C,OAJA9E,QAAQsV,IAAI,YAAanD,GACzBnS,QAAQsV,IAAI,YAAaxQ,GAGlB,SADYgQ,KAAK,GAAG3C,KAAYrN,OAInC,2BACJ,IAAKvC,KAAKyS,gBACN,OAAO,KAGX,MAAM1B,QAAkC/Q,KAAKkR,SAAQ,EAAM,MAAO,kBAAmBlR,KAAKyS,iBAE1F,OAAiB,OAAb1B,GACAtT,QAAQyP,KAAK,gCACN,OAGS,IAAhB6D,EAASe,IACTrU,QAAQD,MAAM,iCAAkCuT,GACzC,YAGEA,EAASkB,OAGlB,0BAA0Be,GAC9B,IAAKhT,KAAKyS,gBACN,OAAO,EAGX,MAAM1B,QAAkC/Q,KAAKkR,SAAQ,EAAM,SAAU,mBAAmB8B,EAAcC,KAAMjT,KAAKyS,iBAEjH,OAAiB,OAAb1B,GACAtT,QAAQyP,KAAK,kCACN,KAGS,IAAhB6D,EAASe,IACTrU,QAAQD,MAAM,mCAAmCwV,EAAcC,OAAQlC,GAGpEA,EAASe,IAGZ,4BACJ,IAAK9R,KAAK0S,kBACN,OAAO,KAGX,IAAK1S,KAAKyS,gBACN,OAAO,KAGX,MAAMnC,EAAoB,CACtB4C,OAAQ,CAAC,QACTC,KAAMnT,KAAK0S,mBAGT3B,QAAkC/Q,KAAKkR,SAAQ,EAAM,OAAQ,kBAAmBlR,KAAKyS,gBAAiBnC,GAE5G,OAAiB,OAAbS,GACAtT,QAAQyP,KAAK,qCACN,OAGS,IAAhB6D,EAASe,IACTrU,QAAQD,MAAM,sCAAuCuT,GAC9C,aAGGA,EAASkB,QAAQxC,MAG3B,kBAAkB2D,GACtB,IAAKpT,KAAK0S,kBACN,OAAO,KAGX,IAAK,MAAMM,KAAiBI,EACxB,GAAIJ,EAAcK,KAAOL,EAAcK,IAAI/Y,OAAS0F,KAAK0S,kBACrD,OAAOM,EAIf,OAAO,KAGD,8BACN,IAA4C,UAAlCR,MAAMd,wBACZ,OAAO,EAGX,MAAM9B,EAA0B5P,KAAKsT,cACrC,IAAK1D,EACD,OAAO,EAGX,MAAM2D,EAAoCvT,KAAKuR,qBAAqB,GAAsBqB,kCAAmC,wCAC7H,IAAKW,EACD,OAAO,EAGX,MAAMC,EAAsCxT,KAAKuR,qBAAqB,GAAsBsB,kCAAmC,mCAC/H,IAAKW,EACD,OAAO,EAGX,MAAMC,EAAyBrJ,SAASoJ,EAAsB,IAC9D,IAA6C,IAAzCzR,OAAO2R,cAAcD,IAA6BA,GAAkB,EACpE,OAAO,EAGX,IAAIlR,QAAgC,GAAyCgR,GAC7E,IAAKhR,EACD,OAAO,EAGXvC,KAAKyS,gBAAkBzS,KAAK2T,yBAAyB/D,EAAUrN,EAASuC,OAAO,EAAG2O,IAElF,MAAMG,EAA6B5T,KAAKuR,qBAAqB,GAAsBuB,+BAAgC,gCACnH,QAAKc,IAIL5T,KAAK0S,kBAAoB,GAAG,GAAsBmB,uBAAuBD,MAGlE,GAGD,iBACN,MAAMR,QAAgDpT,KAAK8T,qBAE3D,GAAuB,OAAnBV,EACA,OAAO,KAGX,MAAMJ,EAAuChT,KAAK+T,kBAAkBX,GAEpE,OAAsB,OAAlBJ,IACsD,UAA5ChT,KAAKgU,oBAAoBhB,GACxB,WAIFhT,KAAKiU,uBAzKf,GAAAJ,mBAA6B,uCAE7B,GAAAjB,kCAA4C,2CAC5C,GAAAC,kCAA4C,uCAC5C,GAAAC,+BAAyC,oCCpPpD,MAAMoB,GAAgCnY,EAAe,eAC/CoY,GAAgCpY,EAAe,eAE/CqY,GAA6BrY,EAAe,YAC5CsY,GAAoCtY,EAAe,mBACnDuY,GAA0CvY,EAAe,yBAE/D,IAAIwY,GAA8B,ID+N3B,cAAoDhF,GAC7C,WACN,MAAMiF,EAA2BzL,OAAO,0BACxC,OAAO1L,QAAQmU,QAAQgD,KClO6C,ICRrE,MACH,aACI,OAAO9R,OAAO0O,aAAa7R,OAG/B,QACImD,OAAO0O,aAAauB,QAGxB,IAAI8B,GACA,OAAO/R,OAAO0O,aAAa9V,IAAImZ,GAGnC,WAAWnZ,GACPoH,OAAO0O,aAAarB,WAAWzU,GAGnC,cAAcA,GACV,MAAMoZ,EAA+BhS,OAAO0O,aAAaC,QAAQ/V,GAEjE,OAAsB,OAAlBoZ,EACO,WAGE,GAA8BA,GAG/C,cAAcpZ,EAAaN,GACvB,MAAM2Z,QAAiC,GAA8B3Z,GAEnD,OAAd2Z,EAKJjS,OAAO0O,aAAaE,QAAQhW,EAAKqZ,GAJ7BlX,QAAQD,MAAM,gDDjB1BP,eAAe2X,KACX,ObCOvV,IAAiBE,OAAS,IaDR,GACrBsV,MAAM,uCACC,UAPf5X,iBACImX,GAASpZ,YAAeuZ,GAAaxC,mBAAsB,UASrD+C,IAEC,GAGX,SAASC,KAC2F,MAA5FhM,OAAO,0EAA6E,KAIxFwL,GAAa5B,QE7BjB,MAYM,GAAkB,CAZS,CAC7BqC,aAAY,IACDjZ,EAAe,iBAE1BkZ,cAAa,IACFlZ,EAAe,iBAE1B,gBACI,MAMJ,IfuFG,MACH,OACIiD,EAAWhC,iBAAiB,QAAS4C,GACrCd,EAAe9B,iBAAiB,QAASiD,GACzClB,EAA2B/B,iBAAiB,QAASqD,GAErDX,IACAV,EAAWS,MAAQb,Ie7FvB,ITmQG,MACH,eACI,OAAOkI,EAEX,gBACI,OAAOC,EAEX,gBACI,IACAmC,KAGJ,ONpRG,IAA2BgM,EDgDFtX,EAAuBvB,EChDrB6Y,EMqRa7L,GNpR3CjK,EAAkB4C,KAAKkT,GMuRnBnN,GAAmBuC,IAAM5B,GAAevI,WACxC4H,GAAmB/M,MAAQ0N,GAAevI,WAE1C,EAAuBwH,GAAoBmB,IAC3C,EAAuBpB,GAAuByB,IP5OtBvL,EO8OL0K,IP9O4BjM,EO8OTmM,IP7OnCxL,iBAAiB,QAAS,KACZ,aAAbY,EAAIuX,MACJvX,EAAIuX,KAAO,QACX9Y,EAAOmD,UAAY,SAEnB5B,EAAIuX,KAAO,WACX9Y,EAAOmD,UAAY,UOyOvB,EAAmBgI,EAAeI,IAClC,EAAmBU,GAAmBG,IAEtCV,GAAmB/K,iBAAiB,QAASiN,IAC7CjC,GAAiBhL,iBAAiB,QAASkN,IAE3ChC,GAAYlL,iBAAiB,QAAS6N,IACtC,EAAuBxC,GAAkB0C,IAEzCvD,EAAcxK,iBAAiB,QAASsO,IP/NzC,SAA6BjP,EAA0B+Y,EAAuB3W,GACjF,IAAIL,EAAYgX,EAChB/Y,EAAOW,iBAAiB,SAAS,WAC7BoB,GAAaA,EACbI,EAAaC,EAAUL,MAE3BI,EAAaC,EAAUL,GO2NnB,CAAuByJ,IAAqC,EAAO,CAC/DI,GACAC,GACAC,GACAC,GACAN,GACAC,GACAC,KAGJgB,KACAgB,KACAgB,OSjTJ,IN8HG,MACH,eACI,OAAOgB,GAEX,gBACI,OAAOC,GAEX,gBACI,IACAc,KAGJ,OACI,EAAmBV,GAAiBI,IAEpC,EAAuBH,GAAYiB,IACnC,EAAuBhB,GAAYmB,IAEnCvB,GAAcnP,iBAAiB,QAAS,KACpC+P,OAGJX,GAAgBpP,iBAAiB,QAAS,KAClCoP,GAAgBpR,MAAMuE,OAAS,GAC/BoN,OAIRH,GAAqBxP,iBAAiB,QAAS,KAC3CoP,GAAgBpR,MAAQ,KAG5B0R,GAAqB1P,iBAAiB,QAAS,KAC3C8P,GAAqB,QM9J7B,IJuEG,MACH,eACI,OAAOgB,GAEX,gBACI,OAAOC,GAEX,gBACI,IAGJ,OACI,EAAmBE,GAAoBK,IAGvCE,GAA2CN,GAAkBL,GAAQtO,OAAS,GAC9EiP,GAA2CL,GAAgBN,GAAQtO,OAAS,GAE5EyO,GAAmBhR,iBAAiB,QAAS,KACrCgR,GAAmBhT,MAAMuE,OAAS,GAClC,OAIR8O,GAAwBrR,iBAAiB,QAAS,KAC9CgR,GAAmBhT,MAAQ,KAG/BuT,GAAwBvR,iBAAiB,QAAS,KAC9CiR,GAAmBjT,MAAQ,KAG/B,EAAuBoT,GAAcW,MItGzC,IVyIG,MACH,OACIhL,EAAc/G,iBAAiB,QAASoH,GACxCP,EAAQ7G,iBAAiB,QAASkH,KU3ItC,IFaG,MACH,eACI,OAAOiQ,GAEX,gBACI,OAAOD,GAEX,gBACI,IAGJ,OACI9X,EAAoBiY,GAAiBO,IACrCN,GAAsBtX,iBAAiB,QAAS+X,OEvBlDM,GAAmB,GAASC,OAAOC,QAAsCjY,IAAhCiY,EAAeP,cACxDQ,GAA2B,GAASF,OAAOC,QAAgCjY,IAA1BiY,EAAiBE,MAExE,IC/BO,MAaH,YAA2BJ,GAAA,KAAAA,OAZnB,KAAAK,iBAA2B,EAa/B,IAAK,IAAI3b,EAAI,EAAGA,EAAIiG,KAAKqV,KAAK9V,OAAQxF,GAAK,EACvCsb,EAAKtb,GAAGib,eAAehY,iBAAiB,QAAS,KAC7CgD,KAAK2V,aAAa5b,KAI1BiG,KAAK2V,aAAa,GAjBtB,qBACI,OAAO3V,KAAK0V,gBAEhB,mBAA0BjB,GACtB,GAAIA,EAAQ,GAAKA,GAASzU,KAAKqV,KAAK9V,OAChC,MAAM,IAAIpD,MAAM,sDAAsD6D,KAAKqV,KAAK9V,OAAS,OAE7FS,KAAK2V,aAAalB,GAad,aAAamB,GACjB,GAAIA,IAAmB5V,KAAK0V,gBACxB,OAGJ,IAAIG,EAEJ,IAAKA,KAAW7V,KAAKqV,KAAM,CACvB,MAAMhZ,EAASwZ,EAAQb,eACvB3Y,EAAOgC,MAAMC,eAAe,eAC5BjC,EAAOgC,MAAME,YAAY,QAAS,WAElCsX,EAAQZ,gBAAgB5W,MAAME,YAAY,UAAW,QAGzD,MAAMlC,EAAS2D,KAAKqV,KAAKO,GAAgBZ,eACzC3Y,EAAOgC,MAAME,YAAY,cAAe,QACxClC,EAAOgC,MAAMC,eAAe,SAE5B0B,KAAKqV,KAAKO,GAAgBX,gBAAgB5W,MAAMC,eAAe,WAE/D0B,KAAK0V,gBAAkBE,EAEvB5V,KAAKqV,KAAKO,GAAgBE,kBDfnBT,IAIf,MAAMrI,GAAU,2CAAWlI,OAAO,EAAG,IAKrC,IAAIiR,GACJ,IAAKA,MAHLha,EAAe,WAAWyD,UAAY,GAAGwN,2FAGvBwI,IACdO,GAAUN","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","export function getElementById(elementName: string): HTMLInputElement {\n    const element: HTMLElement|null = document.getElementById(elementName);\n\n    if (elementName === null) {\n        throw new Error(`DOM element '${elementName}' not found.`);\n    }\n\n    return element as HTMLInputElement;\n}\n\nasync function writeToClipboard(text: string): Promise<boolean> {\n    try {\n        await navigator.clipboard.writeText(text);\n        return true;\n    } catch (error) {\n        console.error(error.stack || error);\n        return false;\n    }\n}\n\nfunction createSafeTimeout(f: Function, duration: number): Function {\n    let timeout: number | undefined;\n    return () => {\n        if (timeout) {\n            clearTimeout(timeout);\n        }\n        timeout = setTimeout(f, duration);\n    };\n}\n\nexport type FeedbackButtonAsyncFunction = () => Promise<boolean> | boolean | Promise<void> | void;\n\nexport function setupFeedbackButton(button: HTMLInputElement, action: FeedbackButtonAsyncFunction): void {\n    const setupStopAnimationTimer = createSafeTimeout(() => {\n        button.classList.remove('good-flash');\n        button.classList.remove('bad-flash');\n    }, 1000);\n\n    button.addEventListener('click', async () => {\n        button.disabled = true;\n\n        try {\n            const actionResult = action();\n\n            let result;\n            if (actionResult instanceof Promise) {\n                result = await actionResult;\n            } else {\n                result = actionResult;\n            }\n\n            if (result === undefined || result === true) {\n                button.classList.add('good-flash');\n            } else {\n                button.classList.add('bad-flash');\n            }\n        } catch (error) {\n            button.classList.add('bad-flash');\n            console.error(error.message || error);\n        } finally {\n            setupStopAnimationTimer();\n            button.disabled = false;\n        }\n    });\n}\n\nexport function setupCopyButton(txt: HTMLInputElement, button: HTMLInputElement): void {\n    setupFeedbackButton(button, () => writeToClipboard(txt.value));\n}\n\nexport function setupViewButton(txt: HTMLInputElement, button: HTMLInputElement): void {\n    button.addEventListener('click', () => {\n        if (txt.type === 'password') {\n            txt.type = 'input';\n            button.innerHTML = 'Hide';\n        } else {\n            txt.type = 'password';\n            button.innerHTML = 'View';\n        }\n    });\n}\n\nexport function showHide(element: HTMLElement, isVisible: boolean): void {\n    if (isVisible) {\n        element.style.removeProperty('display');\n    } else {\n        element.style.setProperty('display', 'none');\n    }\n}\n\nexport function showHideMany(elements: HTMLElement[], isVisible: boolean): void {\n    for (const element of elements) {\n        showHide(element, isVisible);\n    }\n}\n\nexport function setupShowHideButton(button: HTMLInputElement, startVisible: boolean, elements: HTMLElement[]): void {\n    let isVisible = startVisible;\n    button.addEventListener('click', function () {\n        isVisible = !isVisible;\n        showHideMany(elements, isVisible);\n    });\n    showHideMany(elements, isVisible);\n\n}\n\nexport const SUCCESS_COLOR: string = '#D0FFD0';\nexport const ERROR_COLOR: string = '#FFD0D0';\n","import { getElementById, SUCCESS_COLOR, ERROR_COLOR } from '../ui';\n\nimport { TimedAction } from '../TimedAction';\nimport { IComponent } from './IComponent';\n\nconst btnProtectTitleForProtect = 'Stores the string in memory and removes it from the UI component. Prevents a physical intruder from copy/pasting the value.';\nconst btnProtectTitleForClear = 'Removes the string form memory and re-enables the UI component.';\n\nconst txtPrivatePart: HTMLInputElement = getElementById('txtPrivatePart');\nconst txtPrivatePartConfirmation: HTMLInputElement = getElementById('txtPrivatePartConfirmation');\nconst btnProtect: HTMLInputElement = getElementById('btnProtect');\nconst spnProtectedConfirmation: HTMLInputElement = getElementById('spnProtectedConfirmation');\n\nconst spnPrivatePartSize: HTMLInputElement = getElementById('spnPrivatePartSize');\nconst spnPrivatePartSizeConfirmation: HTMLInputElement = getElementById('spnPrivatePartSizeConfirmation');\n\nconst PRIVATE_PART_PROTECTION_TIMEOUT: number = 60 * 1000;\n\nlet privatePart: string | undefined;\n\nconst onChangedHandlers: (() => void)[] = [];\n\nexport function registerOnChanged(onChanged: () => void) {\n    onChangedHandlers.push(onChanged);\n}\n\nexport function hasPrivatePart(): boolean {\n    return getPrivatePart().length > 0;\n}\n\nexport function getPrivatePart(): string {\n    if (privatePart !== undefined) {\n        return privatePart;\n    }\n    return txtPrivatePart.value;\n}\n\nfunction protectAndLockPrivatePart(): void {\n    if (txtPrivatePart.value.length === 0) {\n        return;\n    }\n\n    privatePart = txtPrivatePart.value;\n    spnProtectedConfirmation.innerHTML = 'Protected';\n\n    txtPrivatePart.value = '';\n    txtPrivatePartConfirmation.value = '';\n    spnPrivatePartSize.innerHTML = '0';\n    spnPrivatePartSizeConfirmation.innerHTML = '0';\n\n    txtPrivatePart.disabled = true;\n    txtPrivatePartConfirmation.disabled = true;\n\n    btnProtect.innerHTML = 'Clear and unlock';\n    btnProtect.title = btnProtectTitleForClear;\n\n    updatePrivatePartsMatching();\n}\n\nfunction clearAndUnLockPrivatePart(): void {\n    privatePart = undefined;\n    spnProtectedConfirmation.innerHTML = '';\n\n    txtPrivatePart.disabled = false;\n    txtPrivatePartConfirmation.disabled = false;\n\n    btnProtect.innerHTML = 'Protect and lock';\n    btnProtect.title = btnProtectTitleForProtect;\n    btnProtect.disabled = true;\n}\n\nfunction togglePrivatePartProtection(): void {\n    if (privatePart === undefined) {\n        protectAndLockPrivatePart();\n    } else {\n        clearAndUnLockPrivatePart();\n    }\n}\n\nfunction onProtectButtonClick() {\n    togglePrivatePartProtection();\n}\n\nconst protectPrivatePartAction: TimedAction = new TimedAction(protectAndLockPrivatePart, PRIVATE_PART_PROTECTION_TIMEOUT);\n\nfunction onPrivatePartTextInput(): void {\n    btnProtect.disabled = txtPrivatePart.value.length === 0;\n\n    spnPrivatePartSize.innerHTML = txtPrivatePart.value.length.toString();\n    updatePrivatePartsMatching();\n\n    let onChangedHandler: () => void;\n    for (onChangedHandler of onChangedHandlers) {\n        onChangedHandler();\n    }\n\n    protectPrivatePartAction.reset();\n}\n\nfunction updatePrivatePartsMatching(): void {\n    if (txtPrivatePartConfirmation.value === txtPrivatePart.value) {\n        txtPrivatePartConfirmation.style.setProperty('background', SUCCESS_COLOR);\n    } else {\n        txtPrivatePartConfirmation.style.setProperty('background', ERROR_COLOR);\n    }\n};\n\nfunction onPrivatePartConfirmationTextInput(): void {\n    spnPrivatePartSizeConfirmation.innerHTML = txtPrivatePartConfirmation.value.length.toString();\n    protectPrivatePartAction.reset();\n    updatePrivatePartsMatching();\n}\n\nexport class PrivatePartComponent implements IComponent {\n    init(): void {\n        btnProtect.addEventListener('click', onProtectButtonClick);\n        txtPrivatePart.addEventListener('input', onPrivatePartTextInput);\n        txtPrivatePartConfirmation.addEventListener('input', onPrivatePartConfirmationTextInput);\n\n        updatePrivatePartsMatching();\n        btnProtect.title = btnProtectTitleForProtect;\n    }\n}\n","export class TimedAction {\n    private timeout: number | undefined;\n    public constructor(private action: Function, private delay: number) {\n    }\n\n    public reset(overrideDelay: number | undefined = undefined): void {\n        if (this.timeout !== undefined) {\n            clearTimeout(this.timeout);\n        }\n\n        const delay = overrideDelay !== undefined ? overrideDelay : this.delay;\n\n        this.timeout = setTimeout(() => {\n            this.action();\n            this.timeout = undefined;\n        }, delay);\n    }\n}\n","export function arrayToString(array: ArrayBuffer): string {\n    const decoder = new TextDecoder(/*'utf-8'*/);\n    return decoder.decode(array);\n};\n\nexport function copy(source: Uint8Array, sourceIndex: number, target: Uint8Array, targetIndex: number, length: number): void {\n    for (let i: number = 0; i < length; i += 1) {\n        target[i + targetIndex] = source[i + sourceIndex];\n    }\n}\n\nfunction createHeaderedBuffer(buffer: ArrayBuffer): ArrayBuffer {\n    if (buffer.byteLength > 0xFFFF) {\n        throw new Error(`Buffer too large: ${buffer.byteLength} bytes`);\n    }\n\n    let length = buffer.byteLength;\n    const headeredBuffer: Uint8Array = new Uint8Array(2 + buffer.byteLength);\n\n    for (let i: number = 0; i < 2; i += 1) {\n        headeredBuffer[i] = length % 256;\n        length /= 256;\n    }\n\n    headeredBuffer.set(new Uint8Array(buffer), 2);\n\n    return headeredBuffer.buffer;\n}\n\nfunction arrayBufferToUnsignedBigIntWithoutHeader(arrayBuffer: ArrayBuffer): bigint {\n    const length: number = arrayBuffer.byteLength;\n    const arrayView: DataView = new DataView(arrayBuffer, 0);\n\n    let result: bigint = 0n;\n    let multiplier: bigint = 1n;\n\n    for (let i: number = 0; i < length; i += 1) {\n        result += BigInt(arrayView.getUint8(i)) * multiplier;\n        multiplier *= 256n;\n    }\n\n    return result;\n}\n\nfunction arrayBufferToUnsignedBigInt(arrayBuffer: ArrayBuffer): bigint {\n    arrayBuffer = createHeaderedBuffer(arrayBuffer);\n\n    const length: number = arrayBuffer.byteLength;\n    const arrayView: DataView = new DataView(arrayBuffer, 0);\n\n    let result: bigint = 0n;\n    let multiplier: bigint = 1n;\n\n    for (let i: number = 0; i < length; i += 1) {\n        result += BigInt(arrayView.getUint8(i)) * multiplier;\n        multiplier *= 256n;\n    }\n\n    return result;\n}\n\nexport function unsignedBigIntToArrayBuffer(number: bigint): ArrayBuffer {\n    const result: Array<number> = [];\n\n    while (number > 0n)\n    {\n        const remainder: bigint = number % 256n;\n        number /= 256n;\n\n        const byteValue: number = Number(<any>BigInt.asUintN(8, remainder));\n\n        result.push(byteValue);\n    }\n\n    let totalLength: number = result[0];\n    if (result.length > 1) { // For case where original buffer is of length 1 and contains 0.\n        totalLength += result[1] * 256;\n    }\n\n    // The varable 'result' contains 2 bytes of size header.\n    const diff = totalLength - (result.length - 2);\n\n    for (let i: number = 0; i < diff; i += 1) {\n        result.push(0);\n    }\n\n    return new Uint8Array(result.slice(2)).buffer;\n}\n\n// This is a one way encoding in the sense that decoding is not always deterministic.\n// This can be used to generate strings where decoding it doesn't matter.\nexport function toCustomBaseOneWay(bytes: ArrayBuffer, alphabet: string): string {\n    const alphabetLength: bigint = BigInt(alphabet.length);\n\n    let result: string = '';\n    let number: bigint = arrayBufferToUnsignedBigIntWithoutHeader(bytes);\n\n    while (number > 0n)\n    {\n        const remainder: bigint = number % alphabetLength;\n        number /= alphabetLength;\n\n        const index: number = <number><any>BigInt.asUintN(8, remainder);\n\n        result += alphabet[index];\n    }\n\n    return result;\n}\n\nexport function toCustomBase(bytes: ArrayBuffer, alphabet: string): string {\n    const alphabetLength: bigint = BigInt(alphabet.length);\n\n    let result: string = '';\n    let number: bigint = arrayBufferToUnsignedBigInt(bytes);\n\n    while (number > 0n)\n    {\n        const remainder: bigint = number % alphabetLength;\n        number /= alphabetLength;\n\n        const index: number = <number><any>BigInt.asUintN(8, remainder);\n\n        result += alphabet[index];\n    }\n\n    return result;\n}\n\nexport function fromCustomBase(input: string, alphabet: string): ArrayBuffer {\n    const alphabetLength: bigint = BigInt(alphabet.length);\n\n    let number: bigint = 0n;\n    let multiplier: bigint = 1n;\n\n    for (let i: number = 0; i < input.length; i += 1) {\n        const value: bigint = BigInt(alphabet.indexOf(input[i]));\n\n        number += value * multiplier;\n        multiplier *= alphabetLength;\n    }\n\n    return unsignedBigIntToArrayBuffer(number);\n}\n\nexport function toBase16(buffer: ArrayBuffer): string {\n    return Array.prototype.map.call(\n        new Uint8Array(buffer),\n        x => ('00' + x.toString(16)).slice(-2)\n    ).join('');\n}\n","import * as arrayUtils from './arrayUtils';\n\nexport const BASE62_ALPHABET: string = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\n\nexport interface IPasswordGenerator {\n    readonly version: number;\n    readonly description: string;\n    generatePassword(privatePart: ArrayBuffer, publicPart: ArrayBuffer): Promise<ArrayBuffer>;\n}\n\nexport interface ICipher {\n    readonly version: number;\n    readonly description: string;\n    encrypt(input: ArrayBuffer, password: ArrayBuffer): Promise<ArrayBuffer>;\n    decrypt(input: ArrayBuffer, password: ArrayBuffer): Promise<ArrayBuffer>;\n}\n\nexport async function getDerivedBytes(password: ArrayBuffer, salt: ArrayBuffer): Promise<ArrayBuffer> {\n    const baseKey: CryptoKey = await window.crypto.subtle.importKey(\n        'raw',\n        password,\n        'PBKDF2',\n        false,\n        ['deriveKey']\n    );\n\n    const algorithm: Pbkdf2Params = {\n        name: 'PBKDF2',\n        hash: 'SHA-512',\n        iterations: 100000,\n        salt\n    };\n\n    const derivedKeyType: AesDerivedKeyParams = {\n        name: 'AES-CBC',\n        length: 256\n    };\n\n    const result: CryptoKey = await window.crypto.subtle.deriveKey(\n        algorithm,\n        baseKey,\n        derivedKeyType,\n        true,\n        ['encrypt']\n    );\n\n    const key: ArrayBuffer = await window.crypto.subtle.exportKey('raw', result);\n\n    return key;\n}\n\nexport function generateRandomBytes(byteCount: number = 64): ArrayBuffer {\n    const array: Uint8Array = new Uint8Array(byteCount);\n    return crypto.getRandomValues(array).buffer;\n}\n\nexport function generateRandomString(byteCount: number = 64, alphabet: string = BASE62_ALPHABET): string {\n    const array: ArrayBuffer = generateRandomBytes(byteCount);\n    return arrayUtils.toCustomBaseOneWay(array, alphabet);\n}\n","export function truncate(input: string, length: number): string {\n    if (input.length <= length) {\n        return input;\n    }\n\n    return input.substr(0, length);\n}\n\nexport function stringToArray(str: string): ArrayBuffer {\n    const encoder = new TextEncoder(/*'utf-8'*/);\n    return encoder.encode(str).buffer;\n}\n\nexport function fromBase16(str: string): ArrayBuffer {\n    if (str.length % 2 !== 0) {\n        str = '0' + str;\n    }\n\n    const result: Uint8Array = new Uint8Array(str.length / 2);\n\n    for (let i = 0; i < result.byteLength; i += 1) {\n        result[i] = parseInt(str.substr(i * 2, 2), 16);\n    }\n\n    return result.buffer;\n}\n","import { getElementById, ERROR_COLOR } from '../ui';\nimport { PlainObject } from '../PlainObject';\nimport { IComponent } from './IComponent';\n\nconst divStorageOutput: HTMLInputElement = getElementById('divStorageOutput');\n\nconst txtPath: HTMLInputElement = getElementById('txtPath');\n\nconst txtParameters: HTMLInputElement = getElementById('txtParameters');\nconst txtCustomKeys: HTMLInputElement = getElementById('txtCustomKeys');\n\nfunction isPlainObject(value: any): boolean {\n    return value !== undefined && value !== null && value.constructor.name === 'Object';\n}\n\nfunction objectDeepSort(object: PlainObject): PlainObject {\n    const output: PlainObject = {};\n\n    for (const [key, value] of Object.entries(object).sort((a, b) => a[0].localeCompare(b[0]))) {\n        output[key] = isPlainObject(value) ? objectDeepSort(value) : value;\n    }\n\n    return output;\n}\n\nfunction shallowMerge(source: PlainObject | null, target: PlainObject | null, reservedKeys: string[]): PlainObject {\n    const result: PlainObject = {};\n\n    if (source !== null) {\n        for (const [key, value] of Object.entries(source)) {\n            if (reservedKeys.includes(key) === false) {\n                result[key] = value;\n            }\n        }\n    }\n\n    if (target !== null) {\n        for (const [key, value] of Object.entries(target)) {\n            result[key] = value;\n        }\n    }\n\n    return result;\n}\n\ntype IChainInfo = {\n    head: PlainObject,\n    tailParent: PlainObject,\n    tail: PlainObject\n};\n\n// Transforms a path like \"a/b/c/d\" into a hierarchy of objects like { \"a\": { \"b\": { \"c\": { \"d\": {} } } } }\n// From the result object, head is the root object that contains \"a\", tail is the value of \"d\", and tailParent is the value of \"c\"\nfunction pathToObjectChain(path: string, chainInfo: IChainInfo | undefined = undefined): IChainInfo {\n    const separatorIndex: number = path.indexOf('/');\n\n    const tail: PlainObject = {};\n\n    const firstPath: string = separatorIndex >= 0 ? path.substr(0, separatorIndex) : path;\n    const remainingPath: string | undefined = separatorIndex >= 0 ? path.substr(separatorIndex + 1) : undefined;\n\n    if (chainInfo === undefined) {\n        const node: PlainObject = {};\n        node[firstPath] = tail;\n        chainInfo = {\n            head: node,\n            tailParent: node,\n            tail\n        };\n    } else {\n        chainInfo.tail[firstPath] = tail;\n        chainInfo.tailParent = chainInfo.tail;\n        chainInfo.tail = tail;\n    }\n\n    if (remainingPath) {\n        return pathToObjectChain(remainingPath, chainInfo);\n    }\n\n    return chainInfo;\n}\n\nfunction onPathTextInput() {\n    update();\n}\n\nfunction onCustomKeysTextInput(): void {\n    update();\n}\n\nfunction updateCustomKeysDisplay(isValid: boolean): void {\n    if (isValid) {\n        txtCustomKeys.style.removeProperty('background');\n        return;\n    }\n\n    txtCustomKeys.style.setProperty('background', ERROR_COLOR);\n}\n\nfunction parseCustomKeys(): PlainObject | null {\n    if (txtCustomKeys.value === '') {\n        return {};\n    }\n\n    try {\n        const obj: any = JSON.parse(txtCustomKeys.value);\n        if (obj === null || obj.constructor.name !== 'Object') {\n            return null;\n        }\n        return obj as PlainObject;\n    } catch {\n        return null;\n    }\n}\n\nfunction update(): void {\n    if (_parameterKeys === undefined || _parameterPath === undefined || _reservedKeys === undefined) {\n        return;\n    }\n\n    const chainInfo: IChainInfo = pathToObjectChain(`${txtPath.value}/${_parameterPath}`);\n    const leaf: PlainObject = chainInfo.tail;\n\n    for (const [key, value] of Object.entries(_parameterKeys)) {\n        leaf[key] = value;\n    }\n\n    const customKeys: PlainObject | null = parseCustomKeys();\n    updateCustomKeysDisplay(customKeys !== null);\n    const resultParameters: PlainObject = shallowMerge(customKeys, leaf, _reservedKeys);\n\n    if (Object.keys(resultParameters).length === 0) {\n        // Set the value of the first (single) property of the object to null.\n        chainInfo.tailParent[Object.keys(chainInfo.tailParent)[0]] = null;\n    } else {\n        chainInfo.tailParent[Object.keys(chainInfo.tailParent)[0]] = resultParameters;\n    }\n\n    txtParameters.value = JSON.stringify(objectDeepSort(chainInfo.head), undefined, 4);\n}\n\nexport function clearOutputs(): void {\n    _parameterKeys = undefined;\n    _parameterPath = undefined;\n    _reservedKeys = undefined;\n    txtParameters.value = '';\n}\n\nlet _parameterKeys: PlainObject | undefined;\nlet _parameterPath: string | undefined;\nlet _reservedKeys: string[] | undefined;\n\nexport function setParameters(parameterKeys: PlainObject, parameterPath: string, reservedKeys: string[]) {\n    _parameterKeys = parameterKeys;\n    _parameterPath = parameterPath;\n    _reservedKeys = reservedKeys;\n    update();\n}\n\nexport function show(): void {\n    divStorageOutput.style.setProperty('display', 'initial');\n}\n\nexport function hide(): void {\n    divStorageOutput.style.setProperty('display', 'none');\n}\n\nexport class StorageOutputComponent implements IComponent {\n    init(): void {\n        txtCustomKeys.addEventListener('input', onCustomKeysTextInput);\n        txtPath.addEventListener('input', onPathTextInput);\n    }\n}\n","import * as ui from '../ui';\nimport * as privatePartComponent from './privatePartComponent';\n\nimport * as crypto from '../crypto';\nimport * as stringUtils from '../stringUtils';\nimport * as arrayUtils from '../arrayUtils';\n\nimport { PlainObject } from '../PlainObject';\nimport { PasswordGeneratorV1 } from '../passwordGenerators/v1';\nimport { ITabInfo } from '../TabControl';\nimport { IComponent } from './IComponent';\n\nimport * as storageOutputComponent from './storageOutputComponent';\n\nconst btnTabPasswords: HTMLInputElement = ui.getElementById('btnTabPasswords');\nconst divTabPasswords: HTMLInputElement = ui.getElementById('divTabPasswords');\n\nconst passwordGenerator: crypto.IPasswordGenerator = new PasswordGeneratorV1('Password');\n\nconst txtPublicPart: HTMLInputElement = ui.getElementById('txtPublicPart');\nconst spnPublicPartSize: HTMLInputElement = ui.getElementById('spnPublicPartSize');\nconst btnGeneratePublicPart: HTMLInputElement = ui.getElementById('btnGeneratePublicPart');\nconst btnClearPublicPart: HTMLInputElement = ui.getElementById('btnClearPublicPart');\nconst btnCopyPublicPart: HTMLInputElement = ui.getElementById('btnCopyPublicPart');\nconst btnShowHidePasswordOptionalFeatures: HTMLInputElement = ui.getElementById('btnShowHidePasswordOptionalFeatures');\n\nconst lblAlphabetLength: HTMLInputElement = ui.getElementById('lblAlphabetLength');\nconst numOutputSizeRange: HTMLInputElement = ui.getElementById('numOutputSizeRange');\nconst numOutputSizeNum: HTMLInputElement = ui.getElementById('numOutputSizeNum');\n\nconst lblAlphabet: HTMLInputElement = ui.getElementById('lblAlphabet');\nconst txtAlphabet: HTMLInputElement = ui.getElementById('txtAlphabet');\nconst spnAlphabetSize: HTMLInputElement = ui.getElementById('spnAlphabetSize');\nconst divPasswordAlphabetActions: HTMLInputElement = ui.getElementById('divPasswordAlphabetActions');\nconst btnResetAlphabet: HTMLInputElement = ui.getElementById('btnResetAlphabet');\n\nconst txtResultPassword: HTMLInputElement = ui.getElementById('txtResultPassword');\nconst spnResultPasswordLength: HTMLInputElement = ui.getElementById('spnResultPasswordLength');\nconst btnViewResultPassword: HTMLInputElement = ui.getElementById('btnViewResultPassword');\nconst btnCopyResultPassword: HTMLInputElement = ui.getElementById('btnCopyResultPassword');\n\nconst DEFAULT_LENGTH: number = 64;\nconst DEFAULT_ALPHABET: string = '!\"#$%&\\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[]^_`abcdefghijklmnopqrstuvwxyz{|}~';\n\nconst RESERVED_KEYS: string[] = ['alphabet', 'length', 'public', 'datetime'];\n\nlet passwordPublicPartLastChange: string | undefined;\n\nfunction onClearPublicPartButtonClick(): boolean {\n    if (txtPublicPart.value.length > 0) {\n        if (prompt('Are you sure you want to clear the public part ?\\nType \\'y\\' to accept', '') !== 'y') {\n            return false;\n        }\n    }\n\n    txtPublicPart.value = '';\n    updatePublicPartSize();\n\n    updatePasswordPublicPartLastUpdate();\n    updatePasswordGenerationParameters();\n\n    return true;\n}\n\nfunction onGeneratePublicPartButtonClick(): boolean {\n    if (txtPublicPart.value.length > 0) {\n        if (prompt('Are you sure you want to generate a new public part ?\\nType \\'y\\' to accept', '') !== 'y') {\n            return false;\n        }\n    }\n\n    const randomString: string = crypto.generateRandomString();\n    txtPublicPart.value = randomString;\n    updatePublicPartSize();\n\n    updatePasswordPublicPartLastUpdate();\n\n    run();\n\n    return true;\n}\n\nfunction updatePasswordPublicPartLastUpdate(): void {\n    if (txtPublicPart.value.length > 0) {\n        passwordPublicPartLastChange = new Date().toISOString();\n    } else {\n        passwordPublicPartLastChange = undefined;\n    }\n}\n\nfunction deepMerge(source: PlainObject, target: PlainObject): void {\n    for (const sourceKey of Object.keys(source)) {\n        const targetValue: any = target[sourceKey];\n        const sourceValue: any = source[sourceKey];\n\n        if (targetValue === undefined ||\n            targetValue === null ||\n            targetValue.constructor.name !== 'Object' ||\n            sourceValue.constructor.name !== 'Object') {\n            target[sourceKey] = sourceValue;\n            continue;\n        }\n\n        deepMerge(sourceValue, targetValue);\n    }\n}\n\nfunction updateResultPasswordLength(): void {\n    spnResultPasswordLength.innerHTML = txtResultPassword.value.length.toString();\n}\n\nfunction isAlphabetValid(alphabet: string): boolean {\n    const sortedAlphabet: string[] = alphabet.split('');\n    sortedAlphabet.sort();\n\n    for (let i: number = 1; i < sortedAlphabet.length; i += 1) {\n        if (sortedAlphabet[i - 1] === sortedAlphabet[i]) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nfunction updatePasswordGenerationParameters(): void {\n    if (canRun() === false) {\n        clearOutputs();\n        return;\n    }\n\n    const passwordParamters: PlainObject = {\n        public: txtPublicPart.value,\n        datetime: passwordPublicPartLastChange\n    };\n\n    const numericValue: number = txtResultPassword.value.length;\n    if (numericValue !== DEFAULT_LENGTH) {\n        passwordParamters.length = numericValue;\n    }\n\n    const alphabet: string = txtAlphabet.value;\n    if (alphabet !== DEFAULT_ALPHABET) {\n        passwordParamters.alphabet = alphabet;\n    }\n\n    storageOutputComponent.setParameters(passwordParamters, 'password', RESERVED_KEYS);\n}\n\nfunction updateOutputSizeRangeToNum(): void {\n    numOutputSizeNum.value = numOutputSizeRange.value;\n}\n\nfunction updateOutputSizeNumToRange(): boolean {\n    const min: number = parseInt(numOutputSizeRange.min, 10);\n    const val: number = parseInt(numOutputSizeNum.value, 10);\n    const max: number = parseInt(numOutputSizeRange.max, 10);\n\n    if (isNaN(val) === false) {\n        numOutputSizeRange.value = Math.max(min, Math.min(val, max)).toString();\n        return true;\n    }\n\n    return false;\n}\n\nasync function onOutputSizeRangeInput(): Promise<void> {\n    updateOutputSizeRangeToNum();\n    await run();\n}\n\nasync function onOutputSizeNumInput(): Promise<void> {\n    if (updateOutputSizeNumToRange()) {\n        updateOutputSizeRangeToNum();\n    }\n    await run();\n}\n\nfunction updatePublicPartSize(): void {\n    spnPublicPartSize.innerHTML = txtPublicPart.value.length.toString();\n}\n\nfunction updateAlphabetSize(): void {\n    spnAlphabetSize.innerHTML = txtAlphabet.value.length.toString();\n}\n\nfunction updateAlphabetValidityDisplay(isAlphabetValid: boolean): void {\n    if (isAlphabetValid) {\n        txtAlphabet.style.removeProperty('background');\n    } else {\n        txtAlphabet.style.setProperty('background', ui.ERROR_COLOR);\n    }\n}\n\nasync function onAlphabetTextInput(): Promise<void> {\n    const isAlphabetValidResult: boolean = isAlphabetValid(txtAlphabet.value);\n\n    updateAlphabetValidityDisplay(isAlphabetValidResult);\n\n    if (isAlphabetValidResult === false) {\n        return;\n    }\n\n    updateAlphabetSize();\n    await run();\n}\n\nasync function onResetAlphabetButtonClick(): Promise<boolean> {\n    if (resetAlphabet() === false) {\n        return false;\n    }\n\n    await run();\n\n    return true;\n}\n\nfunction clearOutputs(): void {\n    txtResultPassword.value = '';\n    storageOutputComponent.clearOutputs();\n    updateResultPasswordLength();\n}\n\nfunction canRun(publicPart?: string): boolean {\n    const alphabet: string = txtAlphabet.value;\n\n    if (isAlphabetValid(alphabet) === false) {\n        return false;\n    }\n\n    publicPart = publicPart || txtPublicPart.value;\n\n    if (privatePartComponent.getPrivatePart().length <= 0 || publicPart.length < 8 || alphabet.length < 2) {\n        return false;\n    }\n\n    return true;\n}\n\nexport async function generatePasswordString(publicPart: string): Promise<string | null> {\n    if (canRun(publicPart) === false) {\n        return null;\n    }\n\n    const privatePartString: string = privatePartComponent.getPrivatePart();\n    const privatePrivateBytes: ArrayBuffer = stringUtils.stringToArray(privatePartString);\n    const publicPartBytes: ArrayBuffer = stringUtils.stringToArray(publicPart);\n    const keyBytes: ArrayBuffer = await passwordGenerator.generatePassword(privatePrivateBytes, publicPartBytes);\n\n    return arrayUtils.toCustomBaseOneWay(keyBytes, txtAlphabet.value);\n}\n\nasync function run(): Promise<void> {\n    if (canRun() === false) {\n        clearOutputs();\n        return;\n    }\n\n    const keyString: string | null = await generatePasswordString(txtPublicPart.value);\n    if (keyString === null) {\n        return;\n    }\n\n    txtResultPassword.value = stringUtils.truncate(keyString, Math.max(4, parseInt(numOutputSizeRange.value, 10)));\n\n    updateResultPasswordLength();\n\n    updatePasswordGenerationParameters();\n}\n\nfunction resetAlphabet(): boolean {\n    txtAlphabet.value = DEFAULT_ALPHABET;\n    updateAlphabetSize();\n\n    const isAlphabetValidResult: boolean = isAlphabetValid(txtAlphabet.value);\n\n    updateAlphabetValidityDisplay(isAlphabetValidResult);\n\n    return isAlphabetValidResult;\n}\n\nasync function onPublicPartTextInput(): Promise<void> {\n    updatePublicPartSize();\n    updatePasswordPublicPartLastUpdate();\n    await run();\n}\n\nexport class PasswordComponent implements IComponent, ITabInfo {\n    getTabButton(): HTMLInputElement {\n        return btnTabPasswords;\n    }\n    getTabContent(): HTMLInputElement {\n        return divTabPasswords;\n    }\n    onTabSelected(): void {\n        storageOutputComponent.show();\n        updatePasswordGenerationParameters();\n    }\n\n    init(): void {\n        privatePartComponent.registerOnChanged(run);\n\n        // dafuq!?\n        numOutputSizeRange.max = DEFAULT_LENGTH.toString();\n        numOutputSizeRange.value = DEFAULT_LENGTH.toString();\n\n        ui.setupFeedbackButton(btnClearPublicPart, onClearPublicPartButtonClick);\n        ui.setupFeedbackButton(btnGeneratePublicPart, onGeneratePublicPartButtonClick);\n\n        ui.setupViewButton(txtResultPassword, btnViewResultPassword);\n\n        ui.setupCopyButton(txtPublicPart, btnCopyPublicPart);\n        ui.setupCopyButton(txtResultPassword, btnCopyResultPassword);\n\n        numOutputSizeRange.addEventListener('input', onOutputSizeRangeInput);\n        numOutputSizeNum.addEventListener('input', onOutputSizeNumInput);\n\n        txtAlphabet.addEventListener('input', onAlphabetTextInput);\n        ui.setupFeedbackButton(btnResetAlphabet, onResetAlphabetButtonClick);\n\n        txtPublicPart.addEventListener('input', onPublicPartTextInput);\n\n        ui.setupShowHideButton(btnShowHidePasswordOptionalFeatures, false, [\n            lblAlphabet,\n            txtAlphabet,\n            spnAlphabetSize,\n            divPasswordAlphabetActions,\n            lblAlphabetLength,\n            numOutputSizeRange,\n            numOutputSizeNum\n        ]);\n\n        updatePublicPartSize();\n        updateOutputSizeRangeToNum();\n        resetAlphabet();\n    }\n};\n","import { stringToArray } from '../stringUtils';\nimport { IPasswordGenerator, getDerivedBytes } from '../crypto';\n\nexport class PasswordGeneratorV1 implements IPasswordGenerator {\n    private hkdfPurpose: ArrayBuffer;\n    private _description: string;\n\n    public constructor(hkdfPurpose: string) {\n        this.hkdfPurpose = stringToArray(hkdfPurpose);\n        this._description = `HKDF(PBKDF2, HMAC512) [purpose: ${hkdfPurpose}]`;\n    }\n\n    public get version(): number {\n        return 1;\n    }\n\n    public get description(): string {\n        return this._description;\n    }\n\n    public async generatePassword(privatePart: ArrayBuffer, publicPart: ArrayBuffer): Promise<ArrayBuffer> {\n        const derivedKey: ArrayBuffer = await getDerivedBytes(privatePart, publicPart);\n\n        const hmacParameters: HmacImportParams = {\n            name: 'HMAC',\n            hash: { name: 'SHA-512' }\n        };\n\n        const hkdfKey: CryptoKey = await window.crypto.subtle.importKey(\n            'raw',\n            derivedKey,\n            hmacParameters,\n            false,\n            ['sign']\n        );\n\n        return await window.crypto.subtle.sign('HMAC', hkdfKey, this.hkdfPurpose);\n    }\n}\n","import { ICipher, getDerivedBytes } from '../crypto';\n\nexport class CipherV2 implements ICipher {\n    public get version(): number {\n        return 2;\n    }\n\n    public get description(): string {\n        return 'PBKDF2 + AES-GCM';\n    }\n\n    async encrypt(input: ArrayBuffer, password: ArrayBuffer): Promise<ArrayBuffer> {\n        const output: ArrayBuffer = new ArrayBuffer(12 + 16 + 16 + input.byteLength);\n\n        const nonce: Uint8Array = crypto.getRandomValues(new Uint8Array(output, 0, 12));\n        const passwordSalt: Uint8Array = crypto.getRandomValues(new Uint8Array(output, 12, 16));\n\n        const aesGcmParams: AesGcmParams = {\n            name: 'AES-GCM',\n            iv: nonce\n        };\n\n        const aesKeyAlgorithm: AesKeyAlgorithm = {\n            name: 'AES-GCM',\n            length: 256\n        };\n\n        const passwordKey: CryptoKey = await window.crypto.subtle.importKey(\n            'raw',\n            await getDerivedBytes(password, passwordSalt),\n            aesKeyAlgorithm,\n            false,\n            ['encrypt']\n        );\n\n        const result: ArrayBuffer = await window.crypto.subtle.encrypt(aesGcmParams, passwordKey, input);\n\n        new Uint8Array(output).set(new Uint8Array(result), 12 + 16);\n\n        return output;\n    }\n\n    async decrypt(input: ArrayBuffer, password: ArrayBuffer): Promise<ArrayBuffer> {\n        const nonce: Uint8Array = new Uint8Array(input, 0, 12);\n        const passwordSalt: Uint8Array = new Uint8Array(input, 12, 16);\n        const payload: Uint8Array = new Uint8Array(input, 12 + 16);\n\n        const aesGcmParams: AesGcmParams = {\n            name: 'AES-GCM',\n            iv: nonce\n        };\n\n        const aesKeyAlgorithm: AesKeyAlgorithm = {\n            name: 'AES-GCM',\n            length: 256\n        };\n\n        const derivedKey: ArrayBuffer = await getDerivedBytes(password, passwordSalt);\n\n        const passwordKey: CryptoKey = await window.crypto.subtle.importKey(\n            'raw',\n            derivedKey,\n            aesKeyAlgorithm,\n            false,\n            ['decrypt']\n        );\n\n        return await window.crypto.subtle.decrypt(aesGcmParams, passwordKey, payload);\n    }\n}\n","import * as crypto from '../crypto';\nimport * as stringUtils from '../stringUtils';\nimport * as arrayUtils from '../arrayUtils';\n\nimport * as ui from '../ui';\nimport { getPrivatePart } from './privatePartComponent';\n\nimport { CipherV2 } from '../ciphers/v2';\nimport { ITabInfo } from '../TabControl';\nimport { IComponent } from './IComponent';\n\nimport * as storageOutputComponent from './storageOutputComponent';\n\nconst RESERVED_KEYS: string[] = ['version', 'value'];\n\nconst btnTabCiphers: HTMLInputElement = ui.getElementById('btnTabCiphers');\nconst divTabCiphers: HTMLInputElement = ui.getElementById('divTabCiphers');\n\nconst cipher: crypto.ICipher = new CipherV2();\n\nconst txtCipherName: HTMLInputElement = ui.getElementById('txtCipherName');\nconst txtCipherSource: HTMLInputElement = ui.getElementById('txtCipherSource');\nconst txtCipherTarget: HTMLInputElement = ui.getElementById('txtCipherTarget');\nconst btnEncrypt: HTMLInputElement = ui.getElementById('btnEncrypt');\nconst btnDecrypt: HTMLInputElement = ui.getElementById('btnDecrypt');\n\nconst btnClearCipherSource: HTMLInputElement = ui.getElementById('btnClearCipherSource');\nconst btnCopyCipherTarget: HTMLInputElement = ui.getElementById('btnCopyCipherTarget');\nconst btnClearCipherTarget: HTMLInputElement = ui.getElementById('btnClearCipherTarget');\n\nfunction clearSourceVisualCue(): void {\n    txtCipherSource.style.removeProperty('background-color');\n}\n\nfunction clearTargetVisualCue(): void {\n    txtCipherTarget.style.removeProperty('background-color');\n}\n\nfunction setSourceVisualCueError() {\n    txtCipherSource.style.setProperty('background-color', ui.ERROR_COLOR);\n}\n\nfunction setTargetVisualCueError() {\n    txtCipherTarget.style.setProperty('background-color', ui.ERROR_COLOR);\n}\n\nfunction clearAllVisualCues(): void {\n    clearSourceVisualCue();\n    clearTargetVisualCue();\n}\n\nfunction setCipherTargetValue(value: string): void {\n    txtCipherTarget.value = value;\n    onCipherTargetChanged();\n}\n\nfunction onCipherTargetChanged(): void {\n    updateCipherParameters();\n}\n\nfunction updateCipherParameters(): void {\n    if (txtCipherTarget.value === '' || txtCipherName.value === '') {\n        storageOutputComponent.clearOutputs();\n        return;\n    }\n\n    const cipherParameters = {\n        version: cipher.version,\n        value: txtCipherTarget.value\n    }\n\n    const path = `ciphers/${txtCipherName.value}`;\n\n    storageOutputComponent.setParameters(cipherParameters, path, RESERVED_KEYS);\n}\n\nexport async function encryptString(value: string): Promise<string | null> {\n    const privatePart: string = getPrivatePart();\n    if (privatePart.length === 0) {\n        console.warn('Private part is empty');\n        return null;\n    }\n\n    const input: ArrayBuffer = stringUtils.stringToArray(value);\n    const password: ArrayBuffer = stringUtils.stringToArray(privatePart);\n\n    const encrypted: ArrayBuffer = await cipher.encrypt(input, password);\n\n    return arrayUtils.toCustomBase(encrypted, crypto.BASE62_ALPHABET);\n}\n\nexport async function decryptString(value: string): Promise<string | null> {\n    const privatePart: string = getPrivatePart();\n    if (privatePart.length === 0) {\n        console.warn('Private part is empty');\n        return null;\n    }\n\n    try {\n        const input: ArrayBuffer = arrayUtils.fromCustomBase(value, crypto.BASE62_ALPHABET);\n        const password: ArrayBuffer = stringUtils.stringToArray(privatePart);\n\n        const decrypted: ArrayBuffer = await cipher.decrypt(input, password);\n\n        return arrayUtils.arrayToString(decrypted);\n    } catch (error) {\n        console.warn(`Failed to decrypt${error.message ? `, error: ${error.message}` : ', no error message'}`);\n        return null;\n    }\n}\n\nasync function onEncryptButtonClick(): Promise<boolean> {\n    txtCipherSource.focus();\n    setCipherTargetValue('');\n    clearAllVisualCues();\n\n    if (txtCipherSource.value.length === 0) {\n        setSourceVisualCueError();\n        return false;\n    }\n\n    const encryptedString: string | null = await encryptString(txtCipherSource.value);\n\n    if (encryptedString === null) {\n        return false;\n    }\n\n    setCipherTargetValue(encryptedString);\n\n    return true;\n}\n\nasync function onDecryptButtonClick(): Promise<boolean> {\n    txtCipherSource.focus();\n    setCipherTargetValue('');\n    clearAllVisualCues();\n\n    if (txtCipherSource.value.length === 0) {\n        setSourceVisualCueError();\n        return false;\n    }\n\n    const decryptedString: string | null = await decryptString(txtCipherSource.value);\n\n    if (decryptedString === null) {\n        setTargetVisualCueError();\n        return false;\n    }\n\n    setCipherTargetValue(decryptedString);\n\n    return true;\n}\n\nexport class CipherComponent implements IComponent, ITabInfo {\n    getTabButton(): HTMLInputElement {\n        return btnTabCiphers;\n    }\n    getTabContent(): HTMLInputElement {\n        return divTabCiphers;\n    }\n    onTabSelected(): void {\n        storageOutputComponent.show();\n        updateCipherParameters();\n    }\n\n    init(): void {\n        ui.setupCopyButton(txtCipherTarget, btnCopyCipherTarget);\n\n        ui.setupFeedbackButton(btnEncrypt, onEncryptButtonClick);\n        ui.setupFeedbackButton(btnDecrypt, onDecryptButtonClick);\n\n        txtCipherName.addEventListener('input', () => {\n            updateCipherParameters();\n        });\n\n        txtCipherSource.addEventListener('input', () => {\n            if (txtCipherSource.value.length > 0) {\n                clearSourceVisualCue();\n            }\n        });\n\n        btnClearCipherSource.addEventListener('click', () => {\n            txtCipherSource.value = '';\n        });\n\n        btnClearCipherTarget.addEventListener('click', () => {\n            setCipherTargetValue('');\n        });\n    }\n}\n","import { ICipher, getDerivedBytes } from '../crypto';\n\nconst encryptionKeyDerivationSalt: ArrayBuffer = new Uint8Array([ 0xf2, 0xcf, 0xef, 0x8e, 0x13, 0x40, 0x46, 0x49, 0x92, 0x2a, 0xde, 0x5c, 0xbc, 0x88, 0x38, 0xa8 ]).buffer;\n\nexport class CipherV1 implements ICipher {\n    public get version(): number {\n        return 1;\n    }\n\n    public get description(): string {\n        return 'PBKDF2 + AES-GCM';\n    }\n\n    async encrypt(input: ArrayBuffer, password: ArrayBuffer): Promise<ArrayBuffer> {\n        const output: ArrayBuffer = new ArrayBuffer(12 + 16 + input.byteLength);\n\n        const nonce: DataView = new DataView(output, 0, 12);\n        crypto.getRandomValues(new Uint8Array(output, 0, 12));\n\n        const aesGcmParams: AesGcmParams = {\n            name: 'AES-GCM',\n            iv: nonce\n        };\n\n        const aesKeyAlgorithm: AesKeyAlgorithm = {\n            name: 'AES-GCM',\n            length: 256\n        };\n\n        const passwordKey: CryptoKey = await window.crypto.subtle.importKey(\n            'raw',\n            await getDerivedBytes(password, encryptionKeyDerivationSalt),\n            aesKeyAlgorithm,\n            false,\n            ['encrypt']\n        );\n\n        const result: ArrayBuffer = await window.crypto.subtle.encrypt(aesGcmParams, passwordKey, input);\n\n        new Uint8Array(output).set(new Uint8Array(result), 12);\n\n        return output;\n    }\n\n    async decrypt(input: ArrayBuffer, password: ArrayBuffer): Promise<ArrayBuffer> {\n        const nonce: DataView = new DataView(input, 0, 12);\n        const payload: DataView = new DataView(input, 12);\n\n        const aesGcmParams: AesGcmParams = {\n            name: 'AES-GCM',\n            iv: nonce\n        };\n\n        const aesKeyAlgorithm: AesKeyAlgorithm = {\n            name: 'AES-GCM',\n            length: 256\n        };\n\n        const derivedKey: ArrayBuffer = await getDerivedBytes(password, encryptionKeyDerivationSalt);\n\n        const passwordKey: CryptoKey = await window.crypto.subtle.importKey(\n            'raw',\n            derivedKey,\n            aesKeyAlgorithm,\n            false,\n            ['decrypt']\n        );\n\n        return await window.crypto.subtle.decrypt(aesGcmParams, passwordKey, payload);\n    }\n}\n","import { ICipher } from '../crypto';\nimport * as stringUtils from '../stringUtils';\nimport * as arrayUtils from '../arrayUtils';\nimport { ITabInfo } from '../TabControl';\nimport * as ui from '../ui';\nimport { getPrivatePart } from './privatePartComponent';\n\nimport { CipherV1 } from '../ciphers/v1';\nimport { CipherV2 } from '../ciphers/v2';\nimport { IComponent } from './IComponent';\n\nimport * as storageOutputComponent from './storageOutputComponent';\n\nconst ciphers: ICipher[] = [\n    new CipherV1(),\n    new CipherV2()\n];\n\nconst btnTabReEncrypt: HTMLInputElement = ui.getElementById('btnTabReEncrypt');\nconst divTabReEncrypt: HTMLInputElement = ui.getElementById('divTabReEncrypt');\n\nconst txtReEncryptSource: HTMLInputElement = ui.getElementById('txtReEncryptSource');\nconst txtReEncryptTarget: HTMLInputElement = ui.getElementById('txtReEncryptTarget');\n\nconst cboReEncryptFrom: HTMLInputElement = ui.getElementById('cboReEncryptFrom');\nconst cboReEncryptTo: HTMLInputElement = ui.getElementById('cboReEncryptTo');\nconst btnReEncrypt: HTMLInputElement = ui.getElementById('btnReEncrypt');\n\nconst btnClearReEncryptSource: HTMLInputElement = ui.getElementById('btnClearReEncryptSource');\nconst btnCopyReEncryptTarget: HTMLInputElement = ui.getElementById('btnCopyReEncryptTarget');\nconst btnClearReEncryptTarget: HTMLInputElement = ui.getElementById('btnClearReEncryptTarget');\n\nfunction fillCipherComboBox(cbo: HTMLSelectElement, initialValue: number): void {\n    let cipher: ICipher;\n\n    for (cipher of ciphers) {\n        const item: HTMLOptionElement = document.createElement('option');\n        item.value = cbo.childNodes.length.toString();\n        item.text = `${cipher.description} (v${cipher.version})`;\n        cbo.add(item);\n    }\n\n    cbo.value = initialValue.toString();\n}\n\nfunction clearSourceVisualCue(): void {\n    txtReEncryptSource.style.removeProperty('background-color');\n}\n\nfunction clearTargetVisualCue(): void {\n    txtReEncryptTarget.style.removeProperty('background-color');\n}\n\nfunction setSourceVisualCueError() {\n    txtReEncryptSource.style.setProperty('background-color', ui.ERROR_COLOR);\n}\n\nfunction setTargetVisualCueError() {\n    txtReEncryptTarget.style.setProperty('background-color', ui.ERROR_COLOR);\n}\n\nfunction clearAllVisualCues(): void {\n    clearSourceVisualCue();\n    clearTargetVisualCue();\n}\n\nasync function onReEncryptButtonClick(): Promise<boolean> {\n    txtReEncryptTarget.value = '';\n    clearAllVisualCues();\n\n    if (txtReEncryptSource.value.length === 0) {\n        setSourceVisualCueError();\n        return false;\n    }\n\n    if (cboReEncryptFrom.value === cboReEncryptTo.value) {\n        setTargetVisualCueError();\n        return false;\n    }\n\n    const privatePart: string = getPrivatePart();\n    if (privatePart.length === 0) {\n        console.warn('Private part is empty');\n        return false;\n    }\n\n    const sourceCipherIndex = parseInt(cboReEncryptFrom.value, 10);\n    const targetCipherIndex = parseInt(cboReEncryptTo.value, 10);\n\n    const password: ArrayBuffer = stringUtils.stringToArray(privatePart);\n\n    const input: ArrayBuffer = stringUtils.fromBase16(txtReEncryptSource.value);\n    const decrypted: ArrayBuffer = await ciphers[sourceCipherIndex].decrypt(input, password);\n    const reEncrypted: ArrayBuffer = await ciphers[targetCipherIndex].encrypt(decrypted, password);\n\n    txtReEncryptTarget.value = arrayUtils.toBase16(reEncrypted);\n\n    return true;\n}\n\nexport class ReEncryptComponent implements IComponent, ITabInfo {\n    getTabButton(): HTMLInputElement {\n        return btnTabReEncrypt;\n    }\n    getTabContent(): HTMLInputElement {\n        return divTabReEncrypt;\n    }\n    onTabSelected() {\n        storageOutputComponent.hide();\n    }\n\n    init(): void {\n        ui.setupCopyButton(txtReEncryptTarget, btnCopyReEncryptTarget);\n\n        // Mais est-ce que ce monde est serieux?\n        fillCipherComboBox(<HTMLSelectElement><any>cboReEncryptFrom, ciphers.length - 2);\n        fillCipherComboBox(<HTMLSelectElement><any>cboReEncryptTo, ciphers.length - 1);\n\n        txtReEncryptSource.addEventListener('input', () => {\n            if (txtReEncryptSource.value.length > 0) {\n                clearSourceVisualCue();\n            }\n        });\n\n        btnClearReEncryptSource.addEventListener('click', () => {\n            txtReEncryptSource.value = '';\n        });\n\n        btnClearReEncryptTarget.addEventListener('click', () => {\n            txtReEncryptTarget.value = '';\n        });\n\n        ui.setupFeedbackButton(btnReEncrypt, onReEncryptButtonClick);\n    }\n}\n","import * as passwordComponent from '../components/passwordComponent';\n\nimport { SecureLocalStorage } from './SecureLocalStorage';\nimport { IVaultStorage } from './IVaultStorage';\nimport { PlainObject } from '../PlainObject';\n\ninterface IApp {\n    name: string;\n}\n\ninterface IAuthorization {\n    id: number;\n    app: IApp;\n}\n\ninterface IGitHubContent {\n    sha: string;\n    content: string;\n}\n\nexport abstract class GitHubVaultStorageBase implements IVaultStorage {\n    static BASE_URL: string = 'https://api.github.com';\n    static AUTH_TOKEN_KEY_NAME: string = 'GitHubVaultStorageBase.AuthToken';\n\n    private token: string | null = null;\n    private oneTimePassword: string | null = null;\n    private currentVaultContentHash: string | null = null;\n\n    private username: string | null = null;\n    private repositoryName: string | null = null;\n    private vaultFilename: string | null = null;\n\n    static LOCAL_STORAGE_KEY_USERNAME: string = 'GitHubVaultStorageBase.Username';\n    static LOCAL_STORAGE_KEY_REPO: string = 'GitHubVaultStorageBase.Repository';\n    static LOCAL_STORAGE_KEY_FILENAME: string = 'GitHubVaultStorageBase.Filename';\n\n    protected getUsername(): string | null {\n        return this.username;\n    }\n\n    protected getRepositoryName(): string | null {\n        return this.repositoryName;\n    }\n\n    protected getVaultFilename(): string | null {\n        return this.vaultFilename;\n    }\n\n    public constructor(protected secureLocalStorage: SecureLocalStorage) {\n    }\n\n    public clear(): void {\n        this.secureLocalStorage.removeItem(GitHubApiVaultStorage.LOCAL_STORAGE_KEY_USERNAME);\n        this.secureLocalStorage.removeItem(GitHubApiVaultStorage.LOCAL_STORAGE_KEY_REPO);\n        this.secureLocalStorage.removeItem(GitHubApiVaultStorage.LOCAL_STORAGE_KEY_FILENAME);\n\n        this.secureLocalStorage.removeItem(GitHubVaultStorageBase.AUTH_TOKEN_KEY_NAME);\n    }\n\n    private constructTokenAuthString(): string {\n        return `token ${this.token}`;\n    }\n\n    private constructFetchRequest(method: string, authHeader: string, body: any): RequestInit {\n        const headers: PlainObject = {\n            'Accept': 'application/vnd.github.v3+json',\n            'Content-Type': 'application/json',\n            'Authorization': authHeader\n        };\n\n        if (this.oneTimePassword) {\n            headers['x-github-otp'] = this.oneTimePassword;\n        }\n\n        return {\n            method,\n            headers,\n            body: body ? JSON.stringify(body) : undefined\n        };\n    }\n\n    private constructUrl(relativeUrl: string): string {\n        return `${GitHubVaultStorageBase.BASE_URL}${relativeUrl}`;\n    }\n\n    protected async request(retryOnUnauthorized: boolean, method: string, relativeUrl: string, authHeader: string, body: any = undefined): Promise<Response | null> {\n        const url: string = this.constructUrl(relativeUrl);\n        const requestInfo: RequestInit = this.constructFetchRequest(method, authHeader, body);\n\n        let response: Response = await fetch(url, requestInfo);\n\n        if (response.status === 401 && retryOnUnauthorized) {\n            this.oneTimePassword = prompt('Input your 2FA code:');\n\n            if (!this.oneTimePassword) {\n                return null;\n            }\n\n            return await this.request(retryOnUnauthorized, method, relativeUrl, authHeader, body);\n        }\n\n        return response;\n    }\n\n    protected getSetVaultParameter(key: string, promptText: string): string | null {\n        let value: string | null = window.localStorage.getItem(key);\n\n        if (value) {\n            return value;\n        }\n\n        value = prompt(promptText);\n\n        if (!value) {\n            return null;\n        }\n\n        window.localStorage.setItem(key, value);\n\n        return value;\n    }\n\n    protected ensureVaultParameters(): Promise<boolean> {\n        const username = this.getSetVaultParameter(GitHubVaultStorageBase.LOCAL_STORAGE_KEY_USERNAME, 'GitHub account username:');\n        if (!username) {\n            return Promise.resolve(false);\n        }\n        this.username = username;\n\n        const repositoryName: string | null = this.getSetVaultParameter(GitHubVaultStorageBase.LOCAL_STORAGE_KEY_REPO, 'Vault GitHub repository name:');\n        if (!repositoryName) {\n            return Promise.resolve(false);\n        }\n        this.repositoryName = repositoryName;\n\n        const vaultFilename: string | null = this.getSetVaultParameter(GitHubVaultStorageBase.LOCAL_STORAGE_KEY_FILENAME, 'Vault filename:');\n        if (!vaultFilename) {\n            return Promise.resolve(false);\n        }\n        this.vaultFilename = vaultFilename;\n\n        return Promise.resolve(true);\n    }\n\n    protected abstract getToken(): Promise<string | null>;\n\n    private async ensureToken(): Promise<boolean> {\n        let token: string | null = await this.secureLocalStorage.getItem(GitHubVaultStorageBase.AUTH_TOKEN_KEY_NAME);\n\n        if (token === null) {\n            token = await this.getToken();\n        }\n\n        if (!token) {\n            return false;\n        }\n\n        await this.secureLocalStorage.setItem(GitHubVaultStorageBase.AUTH_TOKEN_KEY_NAME, token);\n\n        this.token = token;\n\n        return true;\n    }\n\n    private constructVaultFileUrl() {\n        return `/repos/${this.username}/${this.repositoryName}/contents/${this.vaultFilename}`;\n    }\n\n    public async getVaultContent(): Promise<string | null> {\n        if (await this.ensureVaultParameters() === false) {\n            return null;\n        }\n        if (await this.ensureToken() === false) {\n            return null;\n        }\n\n        const url: string = this.constructVaultFileUrl();\n        const response: Response | null = await this.request(false, 'GET', url, this.constructTokenAuthString());\n\n        if (response === null) {\n            console.warn('Fetching vault content aborted.');\n            return null;\n        }\n\n        if (response.ok === false) {\n            if (response.status === 401) {\n                this.secureLocalStorage.removeItem(GitHubVaultStorageBase.AUTH_TOKEN_KEY_NAME);\n                this.token = null;\n                this.oneTimePassword = null;\n\n                return await this.getVaultContent();\n            }\n\n            console.error(`Failed to fetch vault file '${this.vaultFilename}'.`, response);\n\n            return null;\n        }\n\n        const responseContent: IGitHubContent = await response.json();\n\n        this.currentVaultContentHash = responseContent.sha;\n\n        return atob(responseContent.content);\n    }\n\n    async setVaultContent(newContent: string, updateMessage: string): Promise<boolean> {\n        if (await this.ensureVaultParameters() === false) {\n            return false;\n        }\n        if (await this.ensureToken() === false) {\n            return false;\n        }\n\n        const body = {\n            message: updateMessage,\n            content: btoa(newContent),\n            sha: this.currentVaultContentHash\n        };\n\n        const url: string = this.constructVaultFileUrl();\n        const response: Response | null = await this.request(false, 'PUT', url, this.constructTokenAuthString(), body);\n\n        if (response === null) {\n            console.warn('Push new vault content aborted.');\n            return false;\n        }\n\n        const responseContent: any = await response.json();\n\n        if (response.ok === false) {\n            console.error(`Failed to create/update vault file '${this.vaultFilename}'.`, response, responseContent);\n            return false;\n        }\n\n        this.currentVaultContentHash = (responseContent.content as IGitHubContent).sha;\n\n        return true;\n    };\n}\n\n// ================================================================================================\n\nexport class GitHubPersonalAccessTokenVaultStorage extends GitHubVaultStorageBase {\n    protected getToken(): Promise<string | null> {\n        const authToken: string | null = prompt('Personal access token:');\n        return Promise.resolve(authToken);\n    }\n}\n\n// ================================================================================================\n\nexport class GitHubApiVaultStorage extends GitHubVaultStorageBase {\n    static AUTHORIZATION_NAME: string = 'github.com/TanukiSharp/ItchyPassword';\n\n    static LOCAL_STORAGE_KEY_PASSWORD_PUBLIC: string = 'GitHubApiVaultStorage.PasswordPublicPart';\n    static LOCAL_STORAGE_KEY_PASSWORD_LENGTH: string = 'GitHubApiVaultStorage.PasswordLength';\n    static LOCAL_STORAGE_KEY_BROWSER_NAME: string = 'GitHubApiVaultStorage.BrowserName';\n\n    private basicAuthHeader: string | null = null;\n    private authorizationName: string | null = null;\n\n    public constructor(secureLocalStorage: SecureLocalStorage) {\n        super(secureLocalStorage);\n    }\n\n    public clear(): void {\n        super.clear();\n\n        this.secureLocalStorage.removeItem(GitHubApiVaultStorage.LOCAL_STORAGE_KEY_PASSWORD_PUBLIC);\n        this.secureLocalStorage.removeItem(GitHubApiVaultStorage.LOCAL_STORAGE_KEY_PASSWORD_LENGTH);\n        this.secureLocalStorage.removeItem(GitHubApiVaultStorage.LOCAL_STORAGE_KEY_BROWSER_NAME);\n    }\n\n    private constructBasicAuthString(username: string, password: string): string {\n        console.log('username:', username);\n        console.log('password:', password);\n\n        const authString = btoa(`${username}:${password}`);\n        return `Basic ${authString}`;\n    }\n\n    private async listAuthorizations(): Promise<IAuthorization[] | null> {\n        if (!this.basicAuthHeader) {\n            return null;\n        }\n\n        const response: Response | null = await this.request(true, 'GET', '/authorizations', this.basicAuthHeader);\n\n        if (response === null) {\n            console.warn('List authorizations aborted.');\n            return null;\n        }\n\n        if (response.ok === false) {\n            console.error('Failed to list authorizations.', response);\n            return null;\n        }\n\n        return await response.json();\n    }\n\n    private async deleteAuthorization(authorization: IAuthorization): Promise<boolean> {\n        if (!this.basicAuthHeader) {\n            return false;\n        }\n\n        const response: Response | null = await this.request(true, 'DELETE', `/authorizations/${authorization.id}`, this.basicAuthHeader);\n\n        if (response === null) {\n            console.warn('Delete authorization aborted.');\n            return false;\n        }\n\n        if (response.ok === false) {\n            console.error(`Failed to delete authorization '${authorization.id}'.`, response);\n        }\n\n        return response.ok;\n    }\n\n    private async createAuthorization(): Promise<string | null> {\n        if (!this.authorizationName) {\n            return null;\n        }\n\n        if (!this.basicAuthHeader) {\n            return null;\n        }\n\n        const body: PlainObject = {\n            scopes: ['repo'],\n            note: this.authorizationName\n        };\n\n        const response: Response | null = await this.request(true, 'POST', '/authorizations', this.basicAuthHeader, body);\n\n        if (response === null) {\n            console.warn('Create new authorization aborted.');\n            return null;\n        }\n\n        if (response.ok === false) {\n            console.error('Failed to create new authorization.', response);\n            return null;\n        }\n\n        return (await response.json()).token as string;\n    }\n\n    private findAuthorization(authorizations: IAuthorization[]): IAuthorization | null {\n        if (!this.authorizationName) {\n            return null;\n        }\n\n        for (const authorization of authorizations) {\n            if (authorization.app && authorization.app.name === this.authorizationName) {\n                return authorization;\n            }\n        }\n\n        return null;\n    }\n\n    protected async ensureVaultParameters(): Promise<boolean> {\n        if (await super.ensureVaultParameters() === false) {\n            return false;\n        }\n\n        const username: string | null = this.getUsername();\n        if (!username) {\n            return false;\n        }\n\n        const passwordPublicPart: string | null = this.getSetVaultParameter(GitHubApiVaultStorage.LOCAL_STORAGE_KEY_PASSWORD_PUBLIC, 'GitHub account password public part:');\n        if (!passwordPublicPart) {\n            return false;\n        }\n\n        const passwordLengthString: string | null = this.getSetVaultParameter(GitHubApiVaultStorage.LOCAL_STORAGE_KEY_PASSWORD_LENGTH, 'GitHub account password length:');\n        if (!passwordLengthString) {\n            return false;\n        }\n\n        const passwordLength: number = parseInt(passwordLengthString, 10);\n        if (Number.isSafeInteger(passwordLength) === false || passwordLength <= 0) {\n            return false;\n        }\n\n        let password: string | null = await passwordComponent.generatePasswordString(passwordPublicPart);\n        if (!password) {\n            return false;\n        }\n\n        this.basicAuthHeader = this.constructBasicAuthString(username, password.substr(0, passwordLength));\n\n        const browserName: string | null = this.getSetVaultParameter(GitHubApiVaultStorage.LOCAL_STORAGE_KEY_BROWSER_NAME, 'Current device/browser name:');\n        if (!browserName) {\n            return false;\n        }\n\n        this.authorizationName = `${GitHubApiVaultStorage.AUTHORIZATION_NAME} (${browserName})`;\n\n\n        return true;\n    }\n\n    protected async getToken(): Promise<string | null> {\n        const authorizations: IAuthorization[] | null = await this.listAuthorizations();\n\n        if (authorizations === null) {\n            return null;\n        }\n\n        const authorization: IAuthorization | null = this.findAuthorization(authorizations);\n\n        if (authorization !== null) {\n            if (await this.deleteAuthorization(authorization) === false) {\n                return null;\n            }\n        }\n\n        return await this.createAuthorization();\n    }\n}\n","import { getElementById, setupFeedbackButton } from '../ui';\n\nimport { IComponent } from './IComponent';\nimport { ITabInfo } from '../TabControl';\n\nimport * as storageOutputComponent from './storageOutputComponent';\n\nimport { SecureLocalStorage } from '../storages/SecureLocalStorage';\nimport { IVaultStorage } from '../storages/IVaultStorage';\nimport { GitHubPersonalAccessTokenVaultStorage } from '../storages/GitHubVaultStorage';\nimport { hasPrivatePart } from './privatePartComponent';\n\nconst divTabVault: HTMLInputElement = getElementById('divTabVault');\nconst btnTabVault: HTMLInputElement = getElementById('btnTabVault');\n\nconst txtVault: HTMLInputElement = getElementById('txtVault');\nconst btnRefreshVault: HTMLInputElement = getElementById('btnRefreshVault');\nconst btnClearVaultSettings: HTMLInputElement = getElementById('btnClearVaultSettings');\n\nlet vaultStorage: IVaultStorage = new GitHubPersonalAccessTokenVaultStorage(new SecureLocalStorage());\n\nasync function reloadVault(): Promise<void> {\n    txtVault.value = (await vaultStorage.getVaultContent()) || '<error>';\n}\n\nasync function onRefreshVaultButtonClick(): Promise<boolean> {\n    if (hasPrivatePart() === false) {\n        alert('You must enter a master key first.');\n        return false;\n    }\n\n    await reloadVault();\n\n    return true;\n}\n\nfunction onClearVaultSettingsButtonClick(): void {\n    if (prompt('Are you sure you want to clear the vault settings ?\\nType \\'y\\' to accept', '') !== 'y') {\n        return;\n    }\n\n    vaultStorage.clear();\n}\n\nexport class VaultComponent implements IComponent, ITabInfo {\n    getTabButton(): HTMLInputElement {\n        return btnTabVault;\n    }\n    getTabContent(): HTMLInputElement {\n        return divTabVault;\n    }\n    onTabSelected(): void {\n        storageOutputComponent.hide();\n    }\n\n    init(): void {\n        setupFeedbackButton(btnRefreshVault, onRefreshVaultButtonClick);\n        btnClearVaultSettings.addEventListener('click', onClearVaultSettingsButtonClick);\n    }\n}\n","import * as cipherComponent from '../components/cipherComponent';\n\nexport interface IAsyncStorage {\n    readonly length: number;\n    clear(): void;\n    getItem(key: string): Promise<string | null>;\n    key(index: number): string | null;\n    removeItem(key: string): void;\n    setItem(key: string, value: string): Promise<void>;\n}\n\nexport class SecureLocalStorage implements IAsyncStorage {\n    get length(): number {\n        return window.localStorage.length;\n    }\n\n    clear(): void {\n        window.localStorage.clear();\n    }\n\n    key(index: number): string | null {\n        return window.localStorage.key(index);\n    }\n\n    removeItem(key: string): void {\n        window.localStorage.removeItem(key);\n    }\n\n    async getItem(key: string): Promise<string | null> {\n        const encryptedItem: string | null = window.localStorage.getItem(key);\n\n        if (encryptedItem === null) {\n            return null;\n        }\n\n        return await cipherComponent.decryptString(encryptedItem);\n    }\n\n    async setItem(key: string, value: string): Promise<void> {\n        const encrypted: string | null = await cipherComponent.encryptString(value);\n\n        if (encrypted === null) {\n            console.error('Failed to encrypt value. (nothing stored)');\n            return;\n        }\n\n        window.localStorage.setItem(key, encrypted);\n    }\n}\n","import { getElementById } from './ui';\nimport { TabControl, ITabInfo } from './TabControl';\nimport { IComponent } from './components/IComponent';\n\nimport { PrivatePartComponent } from './components/privatePartComponent';\nimport { PasswordComponent } from './components/passwordComponent';\nimport { CipherComponent } from './components/cipherComponent';\nimport { ReEncryptComponent } from './components/reEncryptComponent';\nimport { VaultComponent } from './components/vaultComponent';\n\nimport * as storageOutputComponent from './components/storageOutputComponent';\n\nconst nothingTabInfo: ITabInfo = {\n    getTabButton(): HTMLInputElement {\n        return getElementById('btnTabNothing');\n    },\n    getTabContent(): HTMLInputElement {\n        return getElementById('divTabNothing');\n    },\n    onTabSelected(): void {\n        storageOutputComponent.hide();\n    }\n}\n\nconst elements: any[] = [\n    nothingTabInfo,\n    new PrivatePartComponent(),\n    new PasswordComponent(),\n    new CipherComponent(),\n    new ReEncryptComponent(),\n    new storageOutputComponent.StorageOutputComponent(),\n    new VaultComponent(),\n];\n\nconst tabs: ITabInfo[] = elements.filter(e => (e as ITabInfo).getTabButton !== undefined);\nconst components: IComponent[] = elements.filter(e => (e as IComponent).init !== undefined);\n\nnew TabControl(tabs);\n\ndeclare const COMMITHASH: string;\n\nconst version = COMMITHASH.substr(0, 11);\nconst githubLink = '<a href=\"https://github.com/TanukiSharp/ItchyPassword\" target=\"_blank\">github</a>';\n\ngetElementById('divInfo').innerHTML = `${version}<br/>${githubLink}`;\n\nlet component: IComponent;\nfor (component of components) {\n    component.init();\n}\n","export interface ITabInfo {\n    getTabButton(): HTMLInputElement;\n    getTabContent(): HTMLInputElement;\n    onTabSelected: Function;\n}\n\nexport class TabControl {\n    private _activeTabIndex: number = -1;\n\n    public get activeTabIndex(): number {\n        return this._activeTabIndex;\n    }\n    public set activeTabIndex(index: number) {\n        if (index < 0 || index >= this.tabs.length) {\n            throw new Error(`Argument 'index' out of range. Must be in range [0;${this.tabs.length - 1}].`);\n        }\n        this.setActiveTab(index);\n    }\n\n    public constructor(private tabs: ITabInfo[]) {\n        for (let i = 0; i < this.tabs.length; i += 1) {\n            tabs[i].getTabButton().addEventListener('click', () => {\n                this.setActiveTab(i);\n            });\n        }\n\n        this.setActiveTab(0);\n    }\n\n    private setActiveTab(activeTabIndex: number) {\n        if (activeTabIndex === this._activeTabIndex) {\n            return;\n        }\n\n        let tabInfo: ITabInfo;\n\n        for (tabInfo of this.tabs) {\n            const button = tabInfo.getTabButton();\n            button.style.removeProperty('font-weight');\n            button.style.setProperty('color', '#C0C0C0');\n\n            tabInfo.getTabContent().style.setProperty('display', 'none');\n        }\n\n        const button = this.tabs[activeTabIndex].getTabButton();\n        button.style.setProperty('font-weight', 'bold');\n        button.style.removeProperty('color');\n\n        this.tabs[activeTabIndex].getTabContent().style.removeProperty('display');\n\n        this._activeTabIndex = activeTabIndex;\n\n        this.tabs[activeTabIndex].onTabSelected();\n    }\n}\n"],"sourceRoot":""}