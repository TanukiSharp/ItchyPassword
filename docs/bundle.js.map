{"version":3,"sources":["webpack://itchy-password/./src/ui.ts","webpack://itchy-password/./src/TabControl.ts","webpack://itchy-password/./src/components/privatePartComponent.ts","webpack://itchy-password/./src/TimedAction.ts","webpack://itchy-password/./src/arrayUtils.ts","webpack://itchy-password/./src/asyncUtils.ts","webpack://itchy-password/./src/crypto.ts","webpack://itchy-password/./src/stringUtils.ts","webpack://itchy-password/./src/PlainObject.ts","webpack://itchy-password/./src/services/serviceManger.ts","webpack://itchy-password/./src/storages/GitHubVaultStorage.ts","webpack://itchy-password/./src/ciphers/v2.ts","webpack://itchy-password/./src/components/cipherComponent.ts","webpack://itchy-password/./src/storages/SecureLocalStorage.ts","webpack://itchy-password/./src/components/storageOutputComponent.ts","webpack://itchy-password/./src/services/passwordService.ts","webpack://itchy-password/./src/components/passwordComponent.ts","webpack://itchy-password/./src/passwordGenerators/v1.ts","webpack://itchy-password/./src/ciphers/v1.ts","webpack://itchy-password/./src/components/reEncryptComponent.ts","webpack://itchy-password/./src/components/vaultComponents/TreeNode.ts","webpack://itchy-password/./src/searchMatchFunctions.ts","webpack://itchy-password/./src/components/vaultComponents/treeViewComponent.ts","webpack://itchy-password/./src/components/vaultComponents/textViewComponent.ts","webpack://itchy-password/./src/services/vaultService.ts","webpack://itchy-password/./src/components/vaultComponent.ts","webpack://itchy-password/./src/components/rootComponent.ts","webpack://itchy-password/./src/index.ts"],"names":["ERROR_COLOR","getElementById","elementName","element","document","Error","async","writeToClipboard","text","navigator","clipboard","writeText","error","console","stack","clearText","txt","refocus","value","focus","setupFeedbackButton","button","action","throttleTimeout","clearFunc","duration","timeout","start","undefined","clearTimeout","end","setTimeout","createThrottleTimeout","classList","remove","clickFunction","disabled","actionResult","result","Promise","add","addEventListener","setupCopyButton","showHide","isVisible","style","removeProperty","setProperty","showHideMany","elements","TabControl","tabs","_activeTabIndex","i","this","length","getTabButton","setActiveTab","index","activeTabIndex","tabInfo","getTabContent","onTabSelected","btnProtectTitleForProtect","txtPrivatePart","txtPrivatePartConfirmation","btnProtect","spnProtectedConfirmation","spnPrivatePartSize","spnPrivatePartSizeConfirmation","privatePart","onChangedHandlers","getPrivatePart","protectAndLockPrivatePart","innerHTML","title","updatePrivatePartsMatching","onProtectButtonClick","protectPrivatePartAction","delay","overrideDelay","window","onPrivatePartTextInput","onChangedHandler","toString","reset","onPrivatePartConfirmationTextInput","toCustomBaseOneWay","bytes","alphabet","alphabetLength","BigInt","number","arrayBuffer","byteLength","arrayView","DataView","multiplier","getUint8","arrayBufferToUnsignedBigIntWithoutHeader","remainder","asUintN","TaskCancelledError","message","super","_name","ERROR_NAME","Object","setPrototypeOf","prototype","name","CancellationTokenSource","_isCancelled","_token","CancellationToken","source","_none","isCancelled","ensureNotCancelled","cancellationToken","BASE62_ALPHABET","getDerivedBytes","password","salt","baseKey","crypto","subtle","importKey","algorithm","hash","iterations","deriveKey","key","exportKey","truncate","input","substr","stringToArray","str","TextEncoder","encode","buffer","isPlainObject","hasOwnProperty","constructor","objectDeepSort","object","output","entries","sort","a","b","localeCompare","services","getService","serviceName","TypeError","service","registerService","instance","GitHubVaultStorageBase","secureLocalStorage","token","oneTimePassword","currentVaultContentHash","username","repositoryName","vaultFilename","removeItem","GitHubApiVaultStorage","LOCAL_STORAGE_KEY_USERNAME","LOCAL_STORAGE_KEY_REPO","LOCAL_STORAGE_KEY_FILENAME","AUTH_TOKEN_KEY_NAME","method","authHeader","body","headers","JSON","stringify","relativeUrl","BASE_URL","retryOnUnauthorized","url","constructUrl","requestInfo","constructFetchRequest","response","fetch","status","prompt","request","promptText","defaultValue","localStorage","getItem","setItem","URL","location","defaultAccountUsername","defaultRepo","hostname","pathElements","pathname","split","getSetVaultParameter","resolve","getToken","ensureVaultParameters","ensureToken","constructVaultFileUrl","constructTokenAuthString","warn","ok","getVaultContent","responseContent","json","sha","atob","content","newContent","updateMessage","btoa","GitHubPersonalAccessTokenVaultStorage","authToken","basicAuthHeader","authorizationName","clear","LOCAL_STORAGE_KEY_PASSWORD_PUBLIC","LOCAL_STORAGE_KEY_PASSWORD_LENGTH","LOCAL_STORAGE_KEY_BROWSER_NAME","log","authorization","id","scopes","note","authorizations","app","getUsername","passwordPublicPart","passwordLengthString","passwordLength","parseInt","Number","isSafeInteger","none","constructBasicAuthString","browserName","AUTHORIZATION_NAME","listAuthorizations","findAuthorization","deleteAuthorization","createAuthorization","CipherV2","ArrayBuffer","nonce","getRandomValues","Uint8Array","passwordSalt","aesGcmParams","iv","passwordKey","encrypt","set","payload","derivedKey","decrypt","btnTabCiphers","divTabCiphers","cipher","txtCipherName","txtCipherSource","txtCipherTarget","btnEncrypt","btnDecrypt","btnClearCipherSource","btnCopyCipherTarget","btnClearCipherTarget","cipherTargetLastChange","clearSourceVisualCue","setSourceVisualCueError","clearAllVisualCues","setCipherTargetValue","isEncrypt","needDateTimeUpdate","Date","toISOString","updateCipherParameters","datetime","version","encryptString","encrypted","headeredBuffer","createHeaderedBuffer","arrayBufferToUnsignedBigInt","decryptString","indexOf","byteValue","push","totalLength","diff","slice","unsignedBigIntToArrayBuffer","decrypted","array","TextDecoder","decode","isMatching","rethrowCancelled","onEncryptButtonClick","encryptedString","onDecryptButtonClick","decryptedString","SecureLocalStorage","encryptedItem","divStorageOutput","txtPath","lblMatchingPath","txtParameters","btnPushToVault","txtCustomKeys","_parameterKeys","_parameterPath","vaultStorage","pathToObjectChain","path","chainInfo","separatorIndex","tail","firstPath","remainingPath","node","head","tailParent","onPathTextInput","depth","computeUserPathMatchDepth","matchingPath","position","createMatchingPath","innerText","updateMatchingPath","update","onCustomKeysTextInput","leaf","customKeys","obj","parse","parseCustomKeys","keys","deepMerge","target","sourceKey","targetValue","sourceValue","pushToVault","vaultContentData","newData","vaultContent","activeComponent","rootComponent","componentName","toLowerCase","fullPath","chars","includes","findNonCharFromStart","findNonCharFromEnd","substring","generateUpdateMessage","newVaultContentData","setVaultContent","clearOutputs","setParameters","parameterKeys","parameterPath","show","hide","PasswordService","publicPart","keyString","Math","max","btnTabPasswords","divTabPasswords","passwordGenerator","hkdfPurpose","_description","hkdfKey","sign","txtPublicPart","spnPublicPartSize","btnGeneratePublicPart","btnClearPublicPart","btnCopyPublicPart","btnShowHidePasswordOptionalFeatures","lblAlphabetLength","numOutputSizeRange","numOutputSizeNum","lblAlphabet","txtAlphabet","spnAlphabetSize","divPasswordAlphabetActions","btnResetAlphabet","txtResultPassword","spnResultPasswordLength","btnViewResultPassword","btnCopyResultPassword","lblGeneratingPassword","DEFAULT_LENGTH","DEFAULT_ALPHABET","passwordPublicPartLastChange","copyPasswordFunction","onClearPublicPartButtonClick","updatePublicPartSize","updatePasswordPublicPartLastUpdate","updatePasswordGenerationParameters","onGeneratePublicPartButtonClick","randomString","byteCount","generateRandomBytes","run","updateResultPasswordLength","isAlphabetValid","sortedAlphabet","canRun","public","updateOutputSizeRangeToNum","onOutputSizeRangeInput","onOutputSizeNumInput","min","val","isNaN","updateOutputSizeNumToRange","updateAlphabetSize","updateAlphabetValidityDisplay","onAlphabetTextInput","isAlphabetValidResult","onResetAlphabetButtonClick","resetAlphabet","generatePasswordString","privatePrivateBytes","publicPartBytes","generatePassword","passwordTaskRunner","currentTokenSource","currentTask","microThreadId","throwTaskCanceledError","MAX_SAFE_INTEGER","localMicroThreadId","cancel","cancelInternal","taskFactory","localToken","cancelAndExecute","runCore","onPublicPartTextInput","encryptionKeyDerivationSalt","ciphers","btnTabReEncrypt","divTabReEncrypt","txtReEncryptSource","txtReEncryptTarget","cboReEncryptFrom","cboReEncryptTo","btnReEncrypt","btnClearReEncryptSource","btnCopyReEncryptTarget","btnClearReEncryptTarget","fillCipherComboBox","cbo","initialValue","item","createElement","childNodes","description","onReEncryptButtonClick","sourceCipherIndex","targetCipherIndex","reEncrypted","Array","map","call","x","join","TreeNode","parent","treeNodeCreationController","children","verticalLineElement","rootElement","setRootElementStyle","titleElement","setTitleElementStyle","appendChild","createTreeNodeContentElement","childrenContainerElement","setChildrenContainerElementStyle","isLeaf","childKey","childValue","child","addChild","setupLinesElements","display","visibleChildCount","visibleLeafCount","getVisibleLeafCount","height","childrenOffset","gridTemplateRows","gridTemplateColumns","color","gridColumn","gridRow","width","borderRight","horizontalLineElement","borderBottom","updateLines","getVisibleChildCount","totalVisibleLeafCount","bottomPosition","marginLeft","deepMode","resetTitle","backgroundColor","borderRadius","markers","root","pos","marker","createSpan","len","searchText","matchFunction","createColoredSpan","filter","indexedAggresiveSearchMatchFunction","lhs","lhsIndex","rhs","subWord","foundPos","btnTabVaultTabTreeView","divTabVaultTabTreeView","trvVaultTreeView","txtVaultTreeViewSearch","cboVaultTreeViewSearchType","rootTreeNode","searchMatchFunctionDescriptions","function","onSearchVaultInputChanged","selectedIndex","searchMatchFunction","toLocaleLowerCase","VaultTreeNodeCreationController","passwordService","generateAndCopyPasswordToClipboard","sub","values","isCipherObject","isCiphersObject","isPasswordObject","justifySelf","minWidth","isHint","label","div","btnTabVaultTabTextView","divTabVaultTabTextView","txtVault","VaultService","vaultComponent","divTabVault","btnTabVault","btnRefreshVault","btnClearVaultSettings","vault","option","populateSearchFunctions","e","components","init","subTabs","vaultObject","onRefreshVaultButtonClick","alert","component","onVaultLoaded","reloadVault","onClearVaultSettingsButtonClick","onChanged","type","startVisible","pathArray","vaultService","tabControl"],"mappings":"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","file":"bundle.js","sourcesContent":["export const SUCCESS_COLOR: string = '#D0FFD0';\nexport const ERROR_COLOR: string = '#FFD0D0';\n\nexport function getElementById(elementName: string): HTMLElement {\n    const element: HTMLElement|null = document.getElementById(elementName);\n\n    if (elementName === null) {\n        throw new Error(`DOM element '${elementName}' not found.`);\n    }\n\n    return element as HTMLElement;\n}\n\nexport async function writeToClipboard(text: string): Promise<boolean> {\n    try {\n        await navigator.clipboard.writeText(text);\n        return true;\n    } catch (error) {\n        console.error(error.stack || error);\n        return false;\n    }\n}\n\nexport function clearText(txt: HTMLInputElement, refocus: boolean = false): void {\n    txt.value = '';\n    if (refocus) {\n        txt.focus();\n    }\n}\n\ninterface ThrottleTimeout {\n    start: Function;\n    end: Function;\n}\n\nfunction createThrottleTimeout(clearFunc: Function, duration: number): ThrottleTimeout {\n    let timeout: number | undefined = undefined;\n\n    return {\n        start: () => {\n            if (timeout !== undefined) {\n                clearTimeout(timeout);\n                timeout = undefined;\n            }\n            clearFunc();\n        },\n        end: () => {\n            if (timeout !== undefined) {\n                clearTimeout(timeout);\n            }\n            timeout = setTimeout(clearFunc, duration);\n        }\n    };\n}\n\nexport type FeedbackButtonAsyncFunction = () => Promise<boolean> | boolean | Promise<void> | void;\n\nexport function setupFeedbackButton(button: HTMLButtonElement, action: FeedbackButtonAsyncFunction): () => void {\n    const throttleTimeout: ThrottleTimeout = createThrottleTimeout(() => {\n        button.classList.remove('good-flash');\n        button.classList.remove('bad-flash');\n    }, 1000);\n\n    const clickFunction = async () => {\n        button.disabled = true;\n        throttleTimeout.start();\n\n        try {\n            const actionResult = action();\n\n            let result;\n            if (actionResult instanceof Promise) {\n                result = await actionResult;\n            } else {\n                result = actionResult;\n            }\n\n            if (result === undefined || result === true) {\n                button.classList.add('good-flash');\n            } else {\n                button.classList.add('bad-flash');\n            }\n        } catch (error) {\n            button.classList.add('bad-flash');\n            console.error(error.stack || error);\n        } finally {\n            throttleTimeout.end();\n            button.disabled = false;\n        }\n    };\n\n    button.addEventListener('click', clickFunction);\n\n    return clickFunction;\n}\n\nexport function setupCopyButton(txt: HTMLInputElement, button: HTMLButtonElement): () => void {\n    return setupFeedbackButton(button, () => writeToClipboard(txt.value));\n}\n\nexport function setupViewButton(txt: HTMLInputElement, button: HTMLButtonElement): void {\n    button.addEventListener('click', () => {\n        if (txt.type === 'password') {\n            txt.type = 'input';\n            button.innerHTML = 'Hide';\n        } else {\n            txt.type = 'password';\n            button.innerHTML = 'View';\n        }\n    });\n}\n\nexport function showHide(element: HTMLElement, isVisible: boolean): void {\n    if (isVisible) {\n        element.style.removeProperty('display');\n    } else {\n        element.style.setProperty('display', 'none');\n    }\n}\n\nexport function showHideMany(elements: HTMLElement[], isVisible: boolean): void {\n    for (const element of elements) {\n        showHide(element, isVisible);\n    }\n}\n\nexport function setupShowHideButton(button: HTMLButtonElement, startVisible: boolean, elements: HTMLElement[]): void {\n    let isVisible = startVisible;\n    button.addEventListener('click', function () {\n        isVisible = !isVisible;\n        showHideMany(elements, isVisible);\n    });\n    showHideMany(elements, isVisible);\n}\n","export interface ITabInfo {\n    getTabButton(): HTMLButtonElement;\n    getTabContent(): HTMLElement;\n    onTabSelected(): void;\n}\n\nexport class TabControl {\n    private _activeTabIndex: number = -1;\n\n    public get activeTabIndex(): number {\n        return this._activeTabIndex;\n    }\n\n    public set activeTabIndex(index: number) {\n        if (index < 0 || index >= this.tabs.length) {\n            throw new Error(`Argument 'index' out of range. Must be in range [0;${this.tabs.length - 1}].`);\n        }\n        this.setActiveTab(index);\n    }\n\n    public constructor(private tabs: ITabInfo[]) {\n        for (let i = 0; i < this.tabs.length; i += 1) {\n            tabs[i].getTabButton().addEventListener('click', () => {\n                this.setActiveTab(i);\n            });\n        }\n\n        this.setActiveTab(0);\n    }\n\n    private setActiveTab(activeTabIndex: number) {\n        if (activeTabIndex === this._activeTabIndex) {\n            return;\n        }\n\n        let tabInfo: ITabInfo;\n\n        for (tabInfo of this.tabs) {\n            const button = tabInfo.getTabButton();\n            button.style.removeProperty('font-weight');\n            button.style.setProperty('color', '#C0C0C0');\n\n            tabInfo.getTabContent().style.setProperty('display', 'none');\n        }\n\n        const button = this.tabs[activeTabIndex].getTabButton();\n        button.style.setProperty('font-weight', 'bold');\n        button.style.removeProperty('color');\n\n        this.tabs[activeTabIndex].getTabContent().style.removeProperty('display');\n\n        this._activeTabIndex = activeTabIndex;\n\n        this.tabs[activeTabIndex].onTabSelected();\n    }\n}\n","import * as ui from '../ui';\n\nimport { TimedAction } from '../TimedAction';\nimport { IComponent } from './IComponent';\n\nconst btnProtectTitleForProtect = 'Stores the string in memory and removes it from the UI component. Prevents a physical intruder from copy/pasting the value.';\nconst btnProtectTitleForClear = 'Removes the string form memory and re-enables the UI component.';\n\nconst txtPrivatePart = ui.getElementById('txtPrivatePart') as HTMLInputElement;\nconst txtPrivatePartConfirmation = ui.getElementById('txtPrivatePartConfirmation') as HTMLInputElement;\nconst btnProtect = ui.getElementById('btnProtect') as HTMLButtonElement;\nconst spnProtectedConfirmation = ui.getElementById('spnProtectedConfirmation');\n\nconst spnPrivatePartSize = ui.getElementById('spnPrivatePartSize');\nconst spnPrivatePartSizeConfirmation = ui.getElementById('spnPrivatePartSizeConfirmation');\n\nconst PRIVATE_PART_PROTECTION_TIMEOUT: number = 60 * 1000;\n\nlet privatePart: string | undefined;\n\nconst onChangedHandlers: (() => void)[] = [];\n\nexport function registerOnChanged(onChanged: () => void) {\n    onChangedHandlers.push(onChanged);\n}\n\nexport function hasPrivatePart(): boolean {\n    return getPrivatePart().length > 0;\n}\n\nexport function getPrivatePart(): string {\n    if (privatePart !== undefined) {\n        return privatePart;\n    }\n    return txtPrivatePart.value;\n}\n\nexport function protectAndLockPrivatePart(): void {\n    if (txtPrivatePart.value.length === 0) {\n        return;\n    }\n\n    privatePart = txtPrivatePart.value;\n    spnProtectedConfirmation.innerHTML = 'Protected';\n\n    ui.clearText(txtPrivatePart);\n\n    ui.clearText(txtPrivatePartConfirmation);\n    spnPrivatePartSize.innerHTML = '0';\n    spnPrivatePartSizeConfirmation.innerHTML = '0';\n\n    txtPrivatePart.disabled = true;\n    txtPrivatePartConfirmation.disabled = true;\n\n    btnProtect.innerHTML = 'Clear and unlock';\n    btnProtect.title = btnProtectTitleForClear;\n\n    updatePrivatePartsMatching();\n}\n\nfunction clearAndUnLockPrivatePart(): void {\n    privatePart = undefined;\n    spnProtectedConfirmation.innerHTML = '';\n\n    txtPrivatePart.disabled = false;\n    txtPrivatePartConfirmation.disabled = false;\n\n    btnProtect.innerHTML = 'Protect and lock';\n    btnProtect.title = btnProtectTitleForProtect;\n    btnProtect.disabled = true;\n}\n\nfunction togglePrivatePartProtection(): void {\n    if (privatePart === undefined) {\n        protectAndLockPrivatePart();\n    } else {\n        clearAndUnLockPrivatePart();\n    }\n}\n\nfunction onProtectButtonClick() {\n    togglePrivatePartProtection();\n}\n\nconst protectPrivatePartAction: TimedAction = new TimedAction(protectAndLockPrivatePart, PRIVATE_PART_PROTECTION_TIMEOUT);\n\nfunction onPrivatePartTextInput(): void {\n    btnProtect.disabled = txtPrivatePart.value.length === 0;\n\n    spnPrivatePartSize.innerHTML = txtPrivatePart.value.length.toString();\n    updatePrivatePartsMatching();\n\n    let onChangedHandler: () => void;\n    for (onChangedHandler of onChangedHandlers) {\n        onChangedHandler();\n    }\n\n    protectPrivatePartAction.reset();\n}\n\nfunction updatePrivatePartsMatching(): void {\n    if (txtPrivatePartConfirmation.value === txtPrivatePart.value) {\n        txtPrivatePartConfirmation.style.setProperty('background', ui.SUCCESS_COLOR);\n    } else {\n        txtPrivatePartConfirmation.style.setProperty('background', ui.ERROR_COLOR);\n    }\n};\n\nfunction onPrivatePartConfirmationTextInput(): void {\n    spnPrivatePartSizeConfirmation.innerHTML = txtPrivatePartConfirmation.value.length.toString();\n    protectPrivatePartAction.reset();\n    updatePrivatePartsMatching();\n}\n\nexport class PrivatePartComponent implements IComponent {\n    public readonly name: string = 'PrivatePart';\n\n    init(): void {\n        btnProtect.addEventListener('click', onProtectButtonClick);\n        txtPrivatePart.addEventListener('input', onPrivatePartTextInput);\n        txtPrivatePartConfirmation.addEventListener('input', onPrivatePartConfirmationTextInput);\n\n        updatePrivatePartsMatching();\n        btnProtect.title = btnProtectTitleForProtect;\n        txtPrivatePart.focus();\n    }\n}\n","export class TimedAction {\n    private timeout: number | undefined;\n\n    public constructor(private action: Function, private delay: number) {\n    }\n\n    public reset(overrideDelay: number | undefined = undefined): void {\n        if (this.timeout !== undefined) {\n            clearTimeout(this.timeout);\n        }\n\n        const delay = overrideDelay !== undefined ? overrideDelay : this.delay;\n\n        this.timeout = window.setTimeout(() => {\n            this.action();\n            this.timeout = undefined;\n        }, delay);\n    }\n}\n","export function arrayToString(array: ArrayBuffer): string {\n    const decoder = new TextDecoder(/*'utf-8'*/);\n    return decoder.decode(array);\n};\n\nexport function copy(source: Uint8Array, sourceIndex: number, target: Uint8Array, targetIndex: number, length: number): void {\n    for (let i: number = 0; i < length; i += 1) {\n        target[i + targetIndex] = source[i + sourceIndex];\n    }\n}\n\nfunction createHeaderedBuffer(buffer: ArrayBuffer): ArrayBuffer {\n    if (buffer.byteLength > 0xFFFF) {\n        throw new Error(`Buffer too large: ${buffer.byteLength} bytes`);\n    }\n\n    let length = buffer.byteLength;\n    const headeredBuffer: Uint8Array = new Uint8Array(2 + buffer.byteLength);\n\n    for (let i: number = 0; i < 2; i += 1) {\n        headeredBuffer[i] = length % 256;\n        length /= 256;\n    }\n\n    headeredBuffer.set(new Uint8Array(buffer), 2);\n\n    return headeredBuffer.buffer;\n}\n\nfunction arrayBufferToUnsignedBigIntWithoutHeader(arrayBuffer: ArrayBuffer): bigint {\n    const length: number = arrayBuffer.byteLength;\n    const arrayView: DataView = new DataView(arrayBuffer, 0);\n\n    let result: bigint = 0n;\n    let multiplier: bigint = 1n;\n\n    for (let i: number = 0; i < length; i += 1) {\n        result += BigInt(arrayView.getUint8(i)) * multiplier;\n        multiplier *= 256n;\n    }\n\n    return result;\n}\n\nfunction arrayBufferToUnsignedBigInt(arrayBuffer: ArrayBuffer): bigint {\n    arrayBuffer = createHeaderedBuffer(arrayBuffer);\n\n    const length: number = arrayBuffer.byteLength;\n    const arrayView: DataView = new DataView(arrayBuffer, 0);\n\n    let result: bigint = 0n;\n    let multiplier: bigint = 1n;\n\n    for (let i: number = 0; i < length; i += 1) {\n        result += BigInt(arrayView.getUint8(i)) * multiplier;\n        multiplier *= 256n;\n    }\n\n    return result;\n}\n\nexport function unsignedBigIntToArrayBuffer(number: bigint): ArrayBuffer {\n    const result: Array<number> = [];\n\n    while (number > 0n)\n    {\n        const remainder: bigint = number % 256n;\n        number /= 256n;\n\n        const byteValue: number = Number(<any>BigInt.asUintN(8, remainder));\n\n        result.push(byteValue);\n    }\n\n    let totalLength: number = result[0];\n    if (result.length > 1) { // For case where original buffer is of length 1 and contains 0.\n        totalLength += result[1] * 256;\n    }\n\n    // The varable 'result' contains 2 bytes of size header.\n    const diff = totalLength - (result.length - 2);\n\n    for (let i: number = 0; i < diff; i += 1) {\n        result.push(0);\n    }\n\n    return new Uint8Array(result.slice(2)).buffer;\n}\n\n// This is a one way encoding in the sense that decoding is not always deterministic.\n// This can be used to generate strings where decoding it doesn't matter.\nexport function toCustomBaseOneWay(bytes: ArrayBuffer, alphabet: string): string {\n    const alphabetLength: bigint = BigInt(alphabet.length);\n\n    let result: string = '';\n    let number: bigint = arrayBufferToUnsignedBigIntWithoutHeader(bytes);\n\n    while (number > 0n)\n    {\n        const remainder: bigint = number % alphabetLength;\n        number /= alphabetLength;\n\n        const index: number = <number><any>BigInt.asUintN(8, remainder);\n\n        result += alphabet[index];\n    }\n\n    return result;\n}\n\nexport function toCustomBase(bytes: ArrayBuffer, alphabet: string): string {\n    const alphabetLength: bigint = BigInt(alphabet.length);\n\n    let result: string = '';\n    let number: bigint = arrayBufferToUnsignedBigInt(bytes);\n\n    while (number > 0n)\n    {\n        const remainder: bigint = number % alphabetLength;\n        number /= alphabetLength;\n\n        const index: number = <number><any>BigInt.asUintN(8, remainder);\n\n        result += alphabet[index];\n    }\n\n    return result;\n}\n\nexport function fromCustomBase(input: string, alphabet: string): ArrayBuffer {\n    const alphabetLength: bigint = BigInt(alphabet.length);\n\n    let number: bigint = 0n;\n    let multiplier: bigint = 1n;\n\n    for (let i: number = 0; i < input.length; i += 1) {\n        const value: bigint = BigInt(alphabet.indexOf(input[i]));\n\n        number += value * multiplier;\n        multiplier *= alphabetLength;\n    }\n\n    return unsignedBigIntToArrayBuffer(number);\n}\n\nexport function toBase16(buffer: ArrayBuffer): string {\n    return Array.prototype.map.call(\n        new Uint8Array(buffer),\n        x => ('00' + x.toString(16)).slice(-2)\n    ).join('');\n}\n","export class TaskCancelledError extends Error {\n    private _name: string;\n\n    public get name(): string {\n        return this._name;\n    }\n\n    constructor(message?: string) {\n        super(message);\n        this._name = TaskCancelledError.ERROR_NAME;\n        Object.setPrototypeOf(this, new.target.prototype);\n    }\n\n    public static readonly ERROR_NAME: string = 'TaskCancelledError';\n\n    public static isMatching(error: Error) {\n        return error && error.name === TaskCancelledError.ERROR_NAME;\n    }\n}\n\nexport class CancellationTokenSource {\n    private _isCancelled: boolean = false;\n    private _token: CancellationToken;\n\n    constructor() {\n        this._token = new CancellationToken(this);\n    }\n\n    public get isCancelled(): boolean {\n        return this._isCancelled;\n    }\n\n    public get token(): CancellationToken {\n        return this._token;\n    }\n\n    public cancel(): void {\n        this._isCancelled = true;\n    }\n}\n\nexport class CancellationToken {\n    private static readonly _none: CancellationToken = new CancellationToken(new CancellationTokenSource());\n    public static get none(): CancellationToken {\n        return CancellationToken._none;\n    }\n\n    constructor(private source: CancellationTokenSource) {\n    }\n\n    public get isCancelled(): boolean {\n        return this.source.isCancelled;\n    }\n}\n\nexport function ensureNotCancelled(cancellationToken: CancellationToken): void {\n    if (cancellationToken.isCancelled) {\n        throw new TaskCancelledError();\n    }\n}\n\nexport function rethrowCancelled(error: Error): void {\n    if (TaskCancelledError.isMatching(error)) {\n        throw error;\n    }\n}\n\nexport type TaskFactory<T> = (cancellationToken: CancellationToken) => Promise<T>;\n\n// Manages the lifetime of a single task, and automatically cancels the previous when running a new one.\n// It also awaits for previous task to be fully terminated before running the new one.\nexport class TaskRunner<TValue> {\n    private currentTokenSource: CancellationTokenSource | null = null;\n    private currentTask: Promise<TValue | undefined> | null = null;\n    private microThreadId: number = 0;\n\n    // Gets a value indicating whether a task is currently running or not.\n    public get isRunning(): boolean {\n        return this.currentTask !== null;\n    }\n\n    // Cancels the currently running task, if any.\n    // Returns true if no one called cancelInternal() when it returns.\n    private async cancelInternal(throwTaskCanceledError: boolean): Promise<boolean> {\n        if (this.microThreadId === Number.MAX_SAFE_INTEGER) {\n            this.microThreadId = 0;\n        } else {\n            this.microThreadId = this.microThreadId + 1;\n        }\n\n        const localMicroThreadId: number = this.microThreadId;\n\n        // This corresponds to the end of cancelAndExecute().\n        if (this.currentTask === null) {\n            return true;\n        }\n\n        if (this.currentTokenSource !== null) {\n            this.currentTokenSource.cancel();\n\n            // The above currentTokenSource.cancel() can run the finally block of cancelAndExecute() and set currentTask to null.\n            if (this.currentTask !== null) {\n                try {\n                    await this.currentTask;\n                } catch (error) {\n                    if (TaskCancelledError.isMatching(error)) {\n                        if (throwTaskCanceledError) {\n                            throw error;\n                        }\n                    } else {\n                        throw error;\n                    }\n                }\n            }\n        }\n\n        return localMicroThreadId === this.microThreadId;\n    }\n\n    // Cancels the currently running task, if any.\n    // throwTaskCanceledError: Pass true allow to throw a TaskCancelledError.\n    // Returns a Promise that completes when the current job is fully cancelled.\n    public async cancel(throwTaskCanceledError: boolean = false): Promise<void> {\n        await this.cancelInternal(throwTaskCanceledError);\n    }\n\n    // Cancels the current task if any, and runs a new one.\n    // T: Type of value returned by the task to run.\n    // taskFactory: A task producer that receives a CancellationToken.\n    // throwTaskCanceledError: Pass true allow to throw a TaskCancelledError.\n    // Returns the task produced by the taskFactory.\n    public async cancelAndExecute(taskFactory: TaskFactory<TValue>, throwTaskCanceledError: boolean = false): Promise<TValue | undefined> {\n        if (await this.cancelInternal(throwTaskCanceledError) === false) {\n            if (throwTaskCanceledError === false) {\n                return undefined;\n            }\n            throw new TaskCancelledError();\n        }\n\n        var localToken = new CancellationTokenSource();\n        this.currentTokenSource = localToken;\n\n        try {\n            this.currentTask = taskFactory(this.currentTokenSource.token);\n            return await this.currentTask;\n        } catch (error) {\n            if (TaskCancelledError.isMatching(error) && throwTaskCanceledError === false) {\n                return undefined;\n            }\n            throw error;\n        } finally {\n            this.currentTask = null;\n        }\n    }\n}\n","import * as arrayUtils from './arrayUtils';\nimport { CancellationToken, ensureNotCancelled } from './asyncUtils';\n\nexport const BASE62_ALPHABET: string = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\n\nexport interface IPasswordGenerator {\n    readonly version: number;\n    readonly description: string;\n    generatePassword(privatePart: ArrayBuffer, publicPart: ArrayBuffer, cancellationToken: CancellationToken): Promise<ArrayBuffer>;\n}\n\nexport interface ICipher {\n    readonly version: number;\n    readonly description: string;\n    encrypt(input: ArrayBuffer, password: ArrayBuffer, cancellationToken: CancellationToken): Promise<ArrayBuffer>;\n    decrypt(input: ArrayBuffer, password: ArrayBuffer, cancellationToken: CancellationToken): Promise<ArrayBuffer>;\n}\n\nexport async function getDerivedBytes(password: ArrayBuffer, salt: ArrayBuffer, cancellationToken: CancellationToken): Promise<ArrayBuffer> {\n    const baseKey: CryptoKey = await window.crypto.subtle.importKey(\n        'raw',\n        password,\n        'PBKDF2',\n        false,\n        ['deriveKey']\n    );\n\n    ensureNotCancelled(cancellationToken);\n\n    const algorithm: Pbkdf2Params = {\n        name: 'PBKDF2',\n        hash: 'SHA-512',\n        iterations: 100000,\n        salt\n    };\n\n    const derivedKeyType: AesDerivedKeyParams = {\n        name: 'AES-CBC',\n        length: 256\n    };\n\n    const result: CryptoKey = await window.crypto.subtle.deriveKey(\n        algorithm,\n        baseKey,\n        derivedKeyType,\n        true,\n        ['encrypt']\n    );\n\n    ensureNotCancelled(cancellationToken);\n\n    const key: ArrayBuffer = await window.crypto.subtle.exportKey('raw', result);\n\n    ensureNotCancelled(cancellationToken);\n\n    return key;\n}\n\nexport function generateRandomBytes(byteCount: number = 64): ArrayBuffer {\n    const array: Uint8Array = new Uint8Array(byteCount);\n    return crypto.getRandomValues(array).buffer;\n}\n\nexport function generateRandomString(byteCount: number = 64, alphabet: string = BASE62_ALPHABET): string {\n    const array: ArrayBuffer = generateRandomBytes(byteCount);\n    return arrayUtils.toCustomBaseOneWay(array, alphabet);\n}\n","function findNonCharFromStart(value: string, chars: string[]): number {\n    for (let i = 0; i < value.length; i += 1) {\n        if (chars.includes(value[i]) === false) {\n            return i;\n        }\n    }\n\n    return value.length;\n}\n\nfunction findNonCharFromEnd(value: string, chars: string[]): number {\n    for (let i = value.length - 1; i >= 0; i -= 1) {\n        if (chars.includes(value[i]) === false) {\n            return i + 1;\n        }\n    }\n\n    return value.length;\n}\n\nexport function trim(value: string, ...chars: string[]): string {\n    const start: number = findNonCharFromStart(value, chars);\n    const end: number = findNonCharFromEnd(value, chars);\n\n    return value.substring(start, end);\n}\n\nexport function truncate(input: string, length: number): string {\n    if (input.length <= length) {\n        return input;\n    }\n\n    return input.substr(0, length);\n}\n\nexport function stringToArray(str: string): ArrayBuffer {\n    const encoder = new TextEncoder(/*'utf-8'*/);\n    return encoder.encode(str).buffer;\n}\n\nexport function fromBase16(str: string): ArrayBuffer {\n    if (str.length % 2 !== 0) {\n        str = '0' + str;\n    }\n\n    const result: Uint8Array = new Uint8Array(str.length / 2);\n\n    for (let i = 0; i < result.byteLength; i += 1) {\n        result[i] = parseInt(str.substr(i * 2, 2), 16);\n    }\n\n    return result.buffer;\n}\n","export type PlainObject = { [key: string]: any };\n\nexport function isPlainObject(value: any): boolean {\n    return value !== undefined &&\n        value !== null &&\n        value.hasOwnProperty('constructor') === false &&\n        value.constructor.name === 'Object';\n}\n\nexport function objectDeepSort(object: PlainObject): PlainObject {\n    const output: PlainObject = {};\n\n    for (const [key, value] of Object.entries(object).sort((a, b) => a[0].localeCompare(b[0]))) {\n        output[key] = isPlainObject(value) ? objectDeepSort(value) : value;\n    }\n\n    return output;\n}\n","type ServiceContainer = { [key: string]: any };\n\nconst services: ServiceContainer = {};\n\nexport function listServices(): string[] {\n    return Object.keys(services);\n}\n\nexport function getService(serviceName: string): any {\n    if (!serviceName) {\n        throw new TypeError(`Argument 'serviceName' is mandatory.`);\n    }\n\n    const service = services[serviceName];\n\n    if (service === undefined) {\n        throw new Error(`Service '${serviceName}' is not registered.`);\n    }\n\n    return service;\n}\n\nexport function registerService(serviceName: string, instance: any): void {\n    if (!serviceName) {\n        throw new TypeError(`Argument 'serviceName' is mandatory.`);\n    }\n    if (instance === undefined) {\n        throw new TypeError(`Argument 'instance' cannot be undefined.`);\n    }\n\n    if (services[serviceName] !== undefined) {\n        throw new Error(`Service '${serviceName}' is already registered.`);\n    }\n\n    services[serviceName] = instance;\n}\n","import * as passwordComponent from '../components/passwordComponent';\n\nimport { SecureLocalStorage } from './SecureLocalStorage';\nimport { IVaultStorage } from './IVaultStorage';\nimport { PlainObject } from '../PlainObject';\n\nimport { CancellationToken } from '../asyncUtils';\n\ninterface IApp {\n    name: string;\n}\n\ninterface IAuthorization {\n    id: number;\n    app: IApp;\n}\n\ninterface IGitHubContent {\n    sha: string;\n    content: string;\n}\n\nabstract class GitHubVaultStorageBase implements IVaultStorage {\n    static BASE_URL: string = 'https://api.github.com';\n    static AUTH_TOKEN_KEY_NAME: string = 'GitHubVaultStorageBase.AuthToken';\n\n    private token: string | null = null;\n    private oneTimePassword: string | null = null;\n    private currentVaultContentHash: string | null = null;\n\n    private username: string | null = null;\n    private repositoryName: string | null = null;\n    private vaultFilename: string | null = null;\n\n    static LOCAL_STORAGE_KEY_USERNAME: string = 'GitHubVaultStorageBase.Username';\n    static LOCAL_STORAGE_KEY_REPO: string = 'GitHubVaultStorageBase.Repository';\n    static LOCAL_STORAGE_KEY_FILENAME: string = 'GitHubVaultStorageBase.Filename';\n\n    protected getUsername(): string | null {\n        return this.username;\n    }\n\n    protected getRepositoryName(): string | null {\n        return this.repositoryName;\n    }\n\n    protected getVaultFilename(): string | null {\n        return this.vaultFilename;\n    }\n\n    public constructor(protected secureLocalStorage: SecureLocalStorage) {\n    }\n\n    public clear(): void {\n        this.secureLocalStorage.removeItem(GitHubApiVaultStorage.LOCAL_STORAGE_KEY_USERNAME);\n        this.secureLocalStorage.removeItem(GitHubApiVaultStorage.LOCAL_STORAGE_KEY_REPO);\n        this.secureLocalStorage.removeItem(GitHubApiVaultStorage.LOCAL_STORAGE_KEY_FILENAME);\n\n        this.secureLocalStorage.removeItem(GitHubVaultStorageBase.AUTH_TOKEN_KEY_NAME);\n    }\n\n    private constructTokenAuthString(): string {\n        return `token ${this.token}`;\n    }\n\n    private constructFetchRequest(method: string, authHeader: string, body: any): RequestInit {\n        const headers: PlainObject = {\n            'Accept': 'application/vnd.github.v3+json',\n            'Content-Type': 'application/json',\n            'Authorization': authHeader\n        };\n\n        if (this.oneTimePassword) {\n            headers['x-github-otp'] = this.oneTimePassword;\n        }\n\n        return {\n            method,\n            headers,\n            body: body ? JSON.stringify(body) : undefined\n        };\n    }\n\n    private constructUrl(relativeUrl: string): string {\n        return `${GitHubVaultStorageBase.BASE_URL}${relativeUrl}`;\n    }\n\n    protected async request(retryOnUnauthorized: boolean, method: string, relativeUrl: string, authHeader: string, body: any = undefined): Promise<Response | null> {\n        const url: string = this.constructUrl(relativeUrl);\n        const requestInfo: RequestInit = this.constructFetchRequest(method, authHeader, body);\n\n        let response: Response = await fetch(url, requestInfo);\n\n        if (response.status === 401 && retryOnUnauthorized) {\n            this.oneTimePassword = prompt('Input your 2FA code:');\n\n            if (!this.oneTimePassword) {\n                return null;\n            }\n\n            return await this.request(retryOnUnauthorized, method, relativeUrl, authHeader, body);\n        }\n\n        return response;\n    }\n\n    protected getSetVaultParameter(key: string, promptText: string, defaultValue?: string): string | null {\n        let value: string | null = window.localStorage.getItem(key);\n\n        if (value) {\n            return value;\n        }\n\n        value = prompt(promptText, defaultValue);\n\n        if (!value) {\n            return null;\n        }\n\n        window.localStorage.setItem(key, value);\n\n        return value;\n    }\n\n    protected ensureVaultParameters(): Promise<boolean> {\n        const url = new URL(window.location.toString());\n\n        let defaultAccountUsername = '';\n        let defaultRepo = '';\n\n        if (url.hostname === 'github.com') {\n            const pathElements = url.pathname.split('/');\n            if (pathElements.length >= 3) {\n                defaultAccountUsername = pathElements[1];\n                defaultRepo = `${pathElements[2]}Vault`;\n            }\n        }\n\n        const username = this.getSetVaultParameter(GitHubVaultStorageBase.LOCAL_STORAGE_KEY_USERNAME, 'GitHub account username:', defaultAccountUsername);\n        if (!username) {\n            return Promise.resolve(false);\n        }\n        this.username = username;\n\n        const repositoryName: string | null = this.getSetVaultParameter(GitHubVaultStorageBase.LOCAL_STORAGE_KEY_REPO, 'Vault GitHub repository name:', defaultRepo);\n        if (!repositoryName) {\n            return Promise.resolve(false);\n        }\n        this.repositoryName = repositoryName;\n\n        const vaultFilename: string | null = this.getSetVaultParameter(GitHubVaultStorageBase.LOCAL_STORAGE_KEY_FILENAME, 'Vault filename:', 'vault.json');\n        if (!vaultFilename) {\n            return Promise.resolve(false);\n        }\n        this.vaultFilename = vaultFilename;\n\n        return Promise.resolve(true);\n    }\n\n    protected abstract getToken(): Promise<string | null>;\n\n    private async ensureToken(): Promise<boolean> {\n        let token: string | null = await this.secureLocalStorage.getItem(GitHubVaultStorageBase.AUTH_TOKEN_KEY_NAME);\n\n        if (token === null) {\n            token = await this.getToken();\n        }\n\n        if (!token) {\n            return false;\n        }\n\n        await this.secureLocalStorage.setItem(GitHubVaultStorageBase.AUTH_TOKEN_KEY_NAME, token);\n\n        this.token = token;\n\n        return true;\n    }\n\n    private constructVaultFileUrl() {\n        return `/repos/${this.username}/${this.repositoryName}/contents/${this.vaultFilename}`;\n    }\n\n    public async getVaultContent(): Promise<string | null> {\n        if (await this.ensureVaultParameters() === false) {\n            return null;\n        }\n        if (await this.ensureToken() === false) {\n            return null;\n        }\n\n        const url: string = this.constructVaultFileUrl();\n        const response: Response | null = await this.request(false, 'GET', url, this.constructTokenAuthString());\n\n        if (response === null) {\n            console.warn('Fetching vault content aborted.');\n            return null;\n        }\n\n        if (response.ok === false) {\n            if (response.status === 401) {\n                this.secureLocalStorage.removeItem(GitHubVaultStorageBase.AUTH_TOKEN_KEY_NAME);\n                this.token = null;\n                this.oneTimePassword = null;\n\n                return await this.getVaultContent();\n            }\n\n            console.error(`Failed to fetch vault file '${this.vaultFilename}'.`, response);\n\n            return null;\n        }\n\n        const responseContent: IGitHubContent = await response.json();\n\n        this.currentVaultContentHash = responseContent.sha;\n\n        return atob(responseContent.content);\n    }\n\n    async setVaultContent(newContent: string, updateMessage: string): Promise<boolean> {\n        if (await this.ensureVaultParameters() === false) {\n            return false;\n        }\n        if (await this.ensureToken() === false) {\n            return false;\n        }\n\n        const body = {\n            message: updateMessage,\n            content: btoa(newContent),\n            sha: this.currentVaultContentHash\n        };\n\n        const url: string = this.constructVaultFileUrl();\n        const response: Response | null = await this.request(false, 'PUT', url, this.constructTokenAuthString(), body);\n\n        if (response === null) {\n            console.warn('Push new vault content aborted.');\n            return false;\n        }\n\n        const responseContent: any = await response.json();\n\n        if (response.ok === false) {\n            console.error(`Failed to create/update vault file '${this.vaultFilename}'.`, response, responseContent);\n            return false;\n        }\n\n        this.currentVaultContentHash = (responseContent.content as IGitHubContent).sha;\n\n        return true;\n    };\n}\n\n// ================================================================================================\n\nexport class GitHubPersonalAccessTokenVaultStorage extends GitHubVaultStorageBase {\n    protected getToken(): Promise<string | null> {\n        const authToken: string | null = prompt('Personal access token:');\n        return Promise.resolve(authToken);\n    }\n}\n\n// ================================================================================================\n\nexport class GitHubApiVaultStorage extends GitHubVaultStorageBase {\n    static AUTHORIZATION_NAME: string = 'github.com/TanukiSharp/ItchyPassword';\n\n    static LOCAL_STORAGE_KEY_PASSWORD_PUBLIC: string = 'GitHubApiVaultStorage.PasswordPublicPart';\n    static LOCAL_STORAGE_KEY_PASSWORD_LENGTH: string = 'GitHubApiVaultStorage.PasswordLength';\n    static LOCAL_STORAGE_KEY_BROWSER_NAME: string = 'GitHubApiVaultStorage.BrowserName';\n\n    private basicAuthHeader: string | null = null;\n    private authorizationName: string | null = null;\n\n    public constructor(secureLocalStorage: SecureLocalStorage) {\n        super(secureLocalStorage);\n    }\n\n    public clear(): void {\n        super.clear();\n\n        this.secureLocalStorage.removeItem(GitHubApiVaultStorage.LOCAL_STORAGE_KEY_PASSWORD_PUBLIC);\n        this.secureLocalStorage.removeItem(GitHubApiVaultStorage.LOCAL_STORAGE_KEY_PASSWORD_LENGTH);\n        this.secureLocalStorage.removeItem(GitHubApiVaultStorage.LOCAL_STORAGE_KEY_BROWSER_NAME);\n    }\n\n    private constructBasicAuthString(username: string, password: string): string {\n        console.log('username:', username);\n        console.log('password:', password);\n\n        const authString = btoa(`${username}:${password}`);\n        return `Basic ${authString}`;\n    }\n\n    private async listAuthorizations(): Promise<IAuthorization[] | null> {\n        if (!this.basicAuthHeader) {\n            return null;\n        }\n\n        const response: Response | null = await this.request(true, 'GET', '/authorizations', this.basicAuthHeader);\n\n        if (response === null) {\n            console.warn('List authorizations aborted.');\n            return null;\n        }\n\n        if (response.ok === false) {\n            console.error('Failed to list authorizations.', response);\n            return null;\n        }\n\n        return await response.json();\n    }\n\n    private async deleteAuthorization(authorization: IAuthorization): Promise<boolean> {\n        if (!this.basicAuthHeader) {\n            return false;\n        }\n\n        const response: Response | null = await this.request(true, 'DELETE', `/authorizations/${authorization.id}`, this.basicAuthHeader);\n\n        if (response === null) {\n            console.warn('Delete authorization aborted.');\n            return false;\n        }\n\n        if (response.ok === false) {\n            console.error(`Failed to delete authorization '${authorization.id}'.`, response);\n        }\n\n        return response.ok;\n    }\n\n    private async createAuthorization(): Promise<string | null> {\n        if (!this.authorizationName) {\n            return null;\n        }\n\n        if (!this.basicAuthHeader) {\n            return null;\n        }\n\n        const body: PlainObject = {\n            scopes: ['repo'],\n            note: this.authorizationName\n        };\n\n        const response: Response | null = await this.request(true, 'POST', '/authorizations', this.basicAuthHeader, body);\n\n        if (response === null) {\n            console.warn('Create new authorization aborted.');\n            return null;\n        }\n\n        if (response.ok === false) {\n            console.error('Failed to create new authorization.', response);\n            return null;\n        }\n\n        return (await response.json()).token as string;\n    }\n\n    private findAuthorization(authorizations: IAuthorization[]): IAuthorization | null {\n        if (!this.authorizationName) {\n            return null;\n        }\n\n        for (const authorization of authorizations) {\n            if (authorization.app && authorization.app.name === this.authorizationName) {\n                return authorization;\n            }\n        }\n\n        return null;\n    }\n\n    protected async ensureVaultParameters(): Promise<boolean> {\n        if (await super.ensureVaultParameters() === false) {\n            return false;\n        }\n\n        const username: string | null = this.getUsername();\n        if (!username) {\n            return false;\n        }\n\n        const passwordPublicPart: string | null = this.getSetVaultParameter(GitHubApiVaultStorage.LOCAL_STORAGE_KEY_PASSWORD_PUBLIC, 'GitHub account password public part:');\n        if (!passwordPublicPart) {\n            return false;\n        }\n\n        const passwordLengthString: string | null = this.getSetVaultParameter(GitHubApiVaultStorage.LOCAL_STORAGE_KEY_PASSWORD_LENGTH, 'GitHub account password length:');\n        if (!passwordLengthString) {\n            return false;\n        }\n\n        const passwordLength: number = parseInt(passwordLengthString, 10);\n        if (Number.isSafeInteger(passwordLength) === false || passwordLength <= 0) {\n            return false;\n        }\n\n        let password: string | null = await passwordComponent.generatePasswordString(passwordPublicPart, passwordComponent.DEFAULT_ALPHABET, CancellationToken.none);\n        if (!password) {\n            return false;\n        }\n\n        this.basicAuthHeader = this.constructBasicAuthString(username, password.substr(0, passwordLength));\n\n        const browserName: string | null = this.getSetVaultParameter(GitHubApiVaultStorage.LOCAL_STORAGE_KEY_BROWSER_NAME, 'Current device/browser name:');\n        if (!browserName) {\n            return false;\n        }\n\n        this.authorizationName = `${GitHubApiVaultStorage.AUTHORIZATION_NAME} (${browserName})`;\n\n\n        return true;\n    }\n\n    protected async getToken(): Promise<string | null> {\n        const authorizations: IAuthorization[] | null = await this.listAuthorizations();\n\n        if (authorizations === null) {\n            return null;\n        }\n\n        const authorization: IAuthorization | null = this.findAuthorization(authorizations);\n\n        if (authorization !== null) {\n            if (await this.deleteAuthorization(authorization) === false) {\n                return null;\n            }\n        }\n\n        return await this.createAuthorization();\n    }\n}\n","import { ICipher, getDerivedBytes } from '../crypto';\nimport { CancellationToken, ensureNotCancelled } from '../asyncUtils';\n\nexport class CipherV2 implements ICipher {\n    public get version(): number {\n        return 2;\n    }\n\n    public get description(): string {\n        return 'PBKDF2 + AES-GCM';\n    }\n\n    async encrypt(input: ArrayBuffer, password: ArrayBuffer, cancellationToken: CancellationToken): Promise<ArrayBuffer> {\n        const output: ArrayBuffer = new ArrayBuffer(12 + 16 + 16 + input.byteLength);\n\n        const nonce: Uint8Array = crypto.getRandomValues(new Uint8Array(output, 0, 12));\n        const passwordSalt: Uint8Array = crypto.getRandomValues(new Uint8Array(output, 12, 16));\n\n        const aesGcmParams: AesGcmParams = {\n            name: 'AES-GCM',\n            iv: nonce\n        };\n\n        const aesKeyAlgorithm: AesKeyAlgorithm = {\n            name: 'AES-GCM',\n            length: 256\n        };\n\n        const passwordKey: CryptoKey = await window.crypto.subtle.importKey(\n            'raw',\n            await getDerivedBytes(password, passwordSalt, cancellationToken),\n            aesKeyAlgorithm,\n            false,\n            ['encrypt']\n        );\n\n        ensureNotCancelled(cancellationToken);\n\n        const result: ArrayBuffer = await window.crypto.subtle.encrypt(aesGcmParams, passwordKey, input);\n\n        ensureNotCancelled(cancellationToken);\n\n        new Uint8Array(output).set(new Uint8Array(result), 12 + 16);\n\n        return output;\n    }\n\n    async decrypt(input: ArrayBuffer, password: ArrayBuffer, cancellationToken: CancellationToken): Promise<ArrayBuffer> {\n        const nonce: Uint8Array = new Uint8Array(input, 0, 12);\n        const passwordSalt: Uint8Array = new Uint8Array(input, 12, 16);\n        const payload: Uint8Array = new Uint8Array(input, 12 + 16);\n\n        const aesGcmParams: AesGcmParams = {\n            name: 'AES-GCM',\n            iv: nonce\n        };\n\n        const aesKeyAlgorithm: AesKeyAlgorithm = {\n            name: 'AES-GCM',\n            length: 256\n        };\n\n        const derivedKey: ArrayBuffer = await getDerivedBytes(password, passwordSalt, cancellationToken);\n\n        ensureNotCancelled(cancellationToken);\n\n        const passwordKey: CryptoKey = await window.crypto.subtle.importKey(\n            'raw',\n            derivedKey,\n            aesKeyAlgorithm,\n            false,\n            ['decrypt']\n        );\n\n        ensureNotCancelled(cancellationToken);\n\n        const result: ArrayBuffer = await window.crypto.subtle.decrypt(aesGcmParams, passwordKey, payload);\n\n        ensureNotCancelled(cancellationToken);\n\n        return result;\n    }\n}\n","import * as crypto from '../crypto';\nimport * as stringUtils from '../stringUtils';\nimport * as arrayUtils from '../arrayUtils';\n\nimport * as ui from '../ui';\nimport { getPrivatePart } from './privatePartComponent';\n\nimport { CipherV2 } from '../ciphers/v2';\nimport { ITabInfo } from '../TabControl';\nimport { IComponent } from './IComponent';\n\nimport * as storageOutputComponent from './storageOutputComponent';\n\nimport { CancellationToken, ensureNotCancelled, rethrowCancelled } from '../asyncUtils';\n\nconst btnTabCiphers = ui.getElementById('btnTabCiphers') as HTMLButtonElement;\nconst divTabCiphers = ui.getElementById('divTabCiphers');\n\nconst cipher: crypto.ICipher = new CipherV2();\n\nconst txtCipherName = ui.getElementById('txtCipherName') as HTMLInputElement;\nconst txtCipherSource = ui.getElementById('txtCipherSource') as HTMLInputElement;\nconst txtCipherTarget = ui.getElementById('txtCipherTarget') as HTMLInputElement;\nconst btnEncrypt = ui.getElementById('btnEncrypt') as HTMLButtonElement;\nconst btnDecrypt = ui.getElementById('btnDecrypt') as HTMLButtonElement;\n\nconst btnClearCipherSource = ui.getElementById('btnClearCipherSource') as HTMLButtonElement;\nconst btnCopyCipherTarget = ui.getElementById('btnCopyCipherTarget') as HTMLButtonElement;\nconst btnClearCipherTarget = ui.getElementById('btnClearCipherTarget') as HTMLButtonElement;\n\nlet cipherTargetLastChange: string | undefined;\n\nfunction clearSourceVisualCue(): void {\n    txtCipherSource.style.removeProperty('background-color');\n}\n\nfunction clearTargetVisualCue(): void {\n    txtCipherTarget.style.removeProperty('background-color');\n}\n\nfunction setSourceVisualCueError() {\n    txtCipherSource.style.setProperty('background-color', ui.ERROR_COLOR);\n}\n\nfunction setTargetVisualCueError() {\n    txtCipherTarget.style.setProperty('background-color', ui.ERROR_COLOR);\n}\n\nfunction clearAllVisualCues(): void {\n    clearSourceVisualCue();\n    clearTargetVisualCue();\n}\n\nfunction clearCipherTargetLastUpdate(): void {\n    cipherTargetLastChange = undefined;\n}\n\nfunction updateCipherTargetLastUpdate(): void {\n    cipherTargetLastChange = new Date().toISOString();\n}\n\nfunction setCipherTargetValue(value: string, isEncrypt: boolean): void {\n    const needDateTimeUpdate = value.length > 0 && txtCipherTarget.value !== value;\n\n    txtCipherTarget.value = value;\n\n    if (needDateTimeUpdate && isEncrypt) {\n        updateCipherTargetLastUpdate();\n    } else {\n        clearCipherTargetLastUpdate();\n    }\n\n    onCipherTargetChanged();\n}\n\nfunction onCipherTargetChanged(): void {\n    updateCipherParameters();\n}\n\nfunction updateCipherParameters(): void {\n    if (txtCipherTarget.value === '' || txtCipherName.value === '') {\n        storageOutputComponent.clearOutputs();\n        return;\n    }\n\n    const cipherParameters = {\n        datetime: cipherTargetLastChange,\n        version: cipher.version,\n        value: txtCipherTarget.value\n    }\n\n    const path = `ciphers/${txtCipherName.value}`;\n\n    storageOutputComponent.setParameters(cipherParameters, path);\n}\n\nexport async function encryptString(value: string, cancellationToken: CancellationToken): Promise<string | null> {\n    const privatePart: string = getPrivatePart();\n    if (privatePart.length === 0) {\n        console.warn('Private part is empty');\n        return null;\n    }\n\n    const input: ArrayBuffer = stringUtils.stringToArray(value);\n    const password: ArrayBuffer = stringUtils.stringToArray(privatePart);\n\n    const encrypted: ArrayBuffer = await cipher.encrypt(input, password, cancellationToken);\n\n    ensureNotCancelled(cancellationToken);\n\n    return arrayUtils.toCustomBase(encrypted, crypto.BASE62_ALPHABET);\n}\n\nexport async function decryptString(value: string, cancellationToken: CancellationToken): Promise<string | null> {\n    const privatePart: string = getPrivatePart();\n    if (privatePart.length === 0) {\n        console.warn('Private part is empty');\n        return null;\n    }\n\n    try {\n        const input: ArrayBuffer = arrayUtils.fromCustomBase(value, crypto.BASE62_ALPHABET);\n        const password: ArrayBuffer = stringUtils.stringToArray(privatePart);\n\n        const decrypted: ArrayBuffer = await cipher.decrypt(input, password, cancellationToken);\n\n        ensureNotCancelled(cancellationToken);\n\n        return arrayUtils.arrayToString(decrypted);\n    } catch (error) {\n        rethrowCancelled(error);\n\n        console.warn(`Failed to decrypt${error.message ? `, error: ${error.message}` : ', no error message'}`);\n        return null;\n    }\n}\n\nasync function onEncryptButtonClick(): Promise<boolean> {\n    txtCipherSource.focus();\n    setCipherTargetValue('', true);\n    clearAllVisualCues();\n\n    if (txtCipherSource.value.length === 0) {\n        setSourceVisualCueError();\n        return false;\n    }\n\n    const encryptedString: string | null = await encryptString(txtCipherSource.value, CancellationToken.none);\n\n    if (encryptedString === null) {\n        return false;\n    }\n\n    setCipherTargetValue(encryptedString, true);\n    updateCipherParameters();\n\n    return true;\n}\n\nasync function onDecryptButtonClick(): Promise<boolean> {\n    txtCipherSource.focus();\n    setCipherTargetValue('', false);\n    clearAllVisualCues();\n\n    if (txtCipherSource.value.length === 0) {\n        setSourceVisualCueError();\n        return false;\n    }\n\n    const decryptedString: string | null = await decryptString(txtCipherSource.value, CancellationToken.none);\n\n    if (decryptedString === null) {\n        setTargetVisualCueError();\n        return false;\n    }\n\n    setCipherTargetValue(decryptedString, false);\n\n    return true;\n}\n\nexport class CipherComponent implements IComponent, ITabInfo {\n    public readonly name: string = 'Cipher';\n\n    public getTabButton(): HTMLButtonElement {\n        return btnTabCiphers;\n    }\n\n    public getTabContent(): HTMLElement {\n        return divTabCiphers;\n    }\n\n    public onTabSelected(): void {\n        storageOutputComponent.show();\n        updateCipherParameters();\n        txtCipherName.focus();\n    }\n\n    public init(): void {\n        ui.setupCopyButton(txtCipherTarget, btnCopyCipherTarget);\n\n        ui.setupFeedbackButton(btnEncrypt, onEncryptButtonClick);\n        ui.setupFeedbackButton(btnDecrypt, onDecryptButtonClick);\n\n        txtCipherName.addEventListener('input', () => {\n            updateCipherParameters();\n        });\n\n        txtCipherSource.addEventListener('input', () => {\n            if (txtCipherSource.value.length > 0) {\n                clearSourceVisualCue();\n            }\n        });\n\n        btnClearCipherSource.addEventListener('click', () => {\n            ui.clearText(txtCipherSource, true);\n        });\n\n        btnClearCipherTarget.addEventListener('click', () => {\n            setCipherTargetValue('', false);\n        });\n    }\n}\n","import * as cipherComponent from '../components/cipherComponent';\nimport { CancellationToken } from '../asyncUtils';\n\nexport interface IAsyncStorage {\n    readonly length: number;\n    clear(): void;\n    getItem(key: string): Promise<string | null>;\n    key(index: number): string | null;\n    removeItem(key: string): void;\n    setItem(key: string, value: string): Promise<void>;\n}\n\nexport class SecureLocalStorage implements IAsyncStorage {\n    get length(): number {\n        return window.localStorage.length;\n    }\n\n    clear(): void {\n        window.localStorage.clear();\n    }\n\n    key(index: number): string | null {\n        return window.localStorage.key(index);\n    }\n\n    removeItem(key: string): void {\n        window.localStorage.removeItem(key);\n    }\n\n    async getItem(key: string): Promise<string | null> {\n        const encryptedItem: string | null = window.localStorage.getItem(key);\n\n        if (encryptedItem === null) {\n            return null;\n        }\n\n        return await cipherComponent.decryptString(encryptedItem, CancellationToken.none);\n    }\n\n    async setItem(key: string, value: string): Promise<void> {\n        const encrypted: string | null = await cipherComponent.encryptString(value, CancellationToken.none);\n\n        if (encrypted === null) {\n            console.error('Failed to encrypt value. (nothing stored)');\n            return;\n        }\n\n        window.localStorage.setItem(key, encrypted);\n    }\n}\n","import * as ui from '../ui';\nimport * as stringUtils from '../stringUtils';\nimport { PlainObject, objectDeepSort } from '../PlainObject';\nimport { IComponent } from './IComponent';\nimport { rootComponent, RootComponent } from './rootComponent';\nimport * as serviceManager from '../services/serviceManger';\nimport { VaultService } from '../services/vaultService';\n\nimport { IVaultStorage } from '../storages/IVaultStorage';\nimport { GitHubPersonalAccessTokenVaultStorage } from '../storages/GitHubVaultStorage';\nimport { SecureLocalStorage } from '../storages/SecureLocalStorage';\n\nconst divStorageOutput: HTMLElement = ui.getElementById('divStorageOutput');\n\nconst txtPath: HTMLInputElement = ui.getElementById('txtPath') as HTMLInputElement;\nconst lblMatchingPath: HTMLElement = ui.getElementById('lblMatchingPath');\n\nconst txtParameters: HTMLInputElement = ui.getElementById('txtParameters') as HTMLInputElement;\nconst btnPushToVault: HTMLButtonElement = ui.getElementById('btnPushToVault') as HTMLButtonElement;\nconst txtCustomKeys: HTMLInputElement = ui.getElementById('txtCustomKeys') as HTMLInputElement;\n\nlet vaultStorage: IVaultStorage = new GitHubPersonalAccessTokenVaultStorage(new SecureLocalStorage());\n\ntype IChainInfo = {\n    head: PlainObject,\n    tailParent: PlainObject,\n    tail: PlainObject\n};\n\n// Transforms a path like \"a/b/c/d\" into a hierarchy of objects like { \"a\": { \"b\": { \"c\": { \"d\": {} } } } }\n// From the result object, head is the root object that contains \"a\", tail is the value of \"d\", and tailParent is the value of \"c\"\nfunction pathToObjectChain(path: string, chainInfo: IChainInfo | undefined = undefined): IChainInfo {\n    const separatorIndex: number = path.indexOf('/');\n\n    const tail: PlainObject = {};\n\n    const firstPath: string = separatorIndex >= 0 ? path.substr(0, separatorIndex) : path;\n    const remainingPath: string | undefined = separatorIndex >= 0 ? path.substr(separatorIndex + 1) : undefined;\n\n    if (chainInfo === undefined) {\n        const node: PlainObject = {};\n        node[firstPath] = tail;\n        chainInfo = {\n            head: node,\n            tailParent: node,\n            tail\n        };\n    } else {\n        chainInfo.tail[firstPath] = tail;\n        chainInfo.tailParent = chainInfo.tail;\n        chainInfo.tail = tail;\n    }\n\n    if (remainingPath) {\n        return pathToObjectChain(remainingPath, chainInfo);\n    }\n\n    return chainInfo;\n}\n\nfunction createMatchingPath(path: string, depth: number): string {\n    let position = 0;\n\n    for (let i = 0; i < depth; i += 1) {\n        position = path.indexOf('/', position);\n        if (position < 0) {\n            position = path.length + 1;\n            break;\n        }\n        position += 1;\n    }\n\n    return path.substr(0, position - 1);\n}\n\nfunction updateMatchingPath(): void {\n    const vaultService: VaultService = serviceManager.getService('vault');\n\n    const depth = vaultService.computeUserPathMatchDepth(txtPath.value);\n\n    if (depth > 0) {\n        const matchingPath = createMatchingPath(txtPath.value, depth);\n        lblMatchingPath.innerText = matchingPath;\n    } else {\n        lblMatchingPath.innerText = '';\n    }\n}\n\nfunction onPathTextInput() {\n    updateMatchingPath();\n    update();\n}\n\nfunction onCustomKeysTextInput(): void {\n    update();\n}\n\nfunction updateCustomKeysDisplay(isValid: boolean): void {\n    if (isValid) {\n        txtCustomKeys.style.removeProperty('background');\n        return;\n    }\n\n    txtCustomKeys.style.setProperty('background', ui.ERROR_COLOR);\n}\n\nfunction parseCustomKeys(): PlainObject | null {\n    if (txtCustomKeys.value === '') {\n        return null;\n    }\n\n    try {\n        const obj: any = JSON.parse(txtCustomKeys.value);\n        if (obj === null || obj.constructor.name !== 'Object') {\n            return null;\n        }\n        return obj as PlainObject;\n    } catch {\n        return null;\n    }\n}\n\nfunction update(): void {\n    if (_parameterKeys === undefined || _parameterPath === undefined) {\n        return;\n    }\n\n    const chainInfo: IChainInfo = pathToObjectChain(`${txtPath.value}/${_parameterPath}`);\n    const leaf: PlainObject = chainInfo.tail;\n\n    for (const [key, value] of Object.entries(_parameterKeys)) {\n        leaf[key] = value;\n    }\n\n    const customKeys: PlainObject | null = parseCustomKeys();\n\n    updateCustomKeysDisplay(txtCustomKeys.value === '' || customKeys !== null);\n\n    if (customKeys !== null) {\n        leaf.customKeys = customKeys;\n    }\n\n    if (Object.keys(leaf).length === 0) {\n        // Remove the leaf object.\n        chainInfo.tailParent[Object.keys(chainInfo.tailParent)[0]] = null;\n    }\n\n    txtParameters.value = JSON.stringify(objectDeepSort(chainInfo.head), undefined, 4);\n}\n\nfunction deepMerge(source: PlainObject, target: PlainObject): void {\n    for (const sourceKey of Object.keys(source)) {\n        const targetValue: any = target[sourceKey];\n        const sourceValue: any = source[sourceKey];\n\n        if (targetValue === undefined ||\n            targetValue === null ||\n            targetValue.constructor.name !== 'Object' ||\n            sourceValue.constructor.name !== 'Object') {\n            target[sourceKey] = sourceValue;\n            continue;\n        }\n\n        deepMerge(sourceValue, targetValue);\n    }\n}\n\nfunction generateUpdateMessage() {\n    const activeComponent: IComponent | null = (rootComponent as RootComponent).getActiveComponent();\n\n    if (activeComponent === null) {\n        throw new Error('Could not determine active component.');\n    }\n\n    let componentName: string = activeComponent.name.toLowerCase();\n\n    const matchingPath: string = lblMatchingPath.innerText;\n    const fullPath: string = txtPath.value;\n\n    if (!matchingPath) {\n        return `Added ${componentName} for '${fullPath}'`;\n    }\n\n    if (matchingPath === fullPath) {\n        return `Updated ${componentName} for '${fullPath}'`;\n    }\n\n    const remainingPath: string = stringUtils.trim(fullPath.substr(matchingPath.length), '/');\n\n    return `Updated ${componentName} for '${matchingPath}' adding '${remainingPath}'`;\n}\n\nasync function pushToVault(): Promise<boolean> {\n    const vaultContentData: string | null = await vaultStorage.getVaultContent();\n\n    if (vaultContentData === null) {\n        return false;\n    }\n\n    const newData = JSON.parse(txtParameters.value);\n    let vaultContent = JSON.parse(vaultContentData);\n\n    // Keep deepMerge despite now all properties are explicitly defined, because of\n    // the datetime property that really need to be overwritten only if it exists.\n    deepMerge(newData, vaultContent);\n\n    const message: string = generateUpdateMessage();\n\n    const newVaultContentData: string = JSON.stringify(objectDeepSort(vaultContent), undefined, 4) + '\\n';\n\n    await vaultStorage.setVaultContent(newVaultContentData, `[ItchyPassword] ${message}`);\n\n    return true;\n}\n\nexport function clearOutputs(): void {\n    _parameterKeys = undefined;\n    _parameterPath = undefined;\n    ui.clearText(txtParameters);\n}\n\nlet _parameterKeys: PlainObject | undefined;\nlet _parameterPath: string | undefined;\n\nexport function setParameters(parameterKeys: PlainObject, parameterPath: string) {\n    _parameterKeys = parameterKeys;\n    _parameterPath = parameterPath;\n    update();\n}\n\nexport function show(): void {\n    divStorageOutput.style.setProperty('display', 'initial');\n}\n\nexport function hide(): void {\n    divStorageOutput.style.setProperty('display', 'none');\n}\n\nexport class StorageOutputComponent implements IComponent {\n    public readonly name: string = 'StorageOutput';\n\n    init(): void {\n        txtCustomKeys.addEventListener('input', onCustomKeysTextInput);\n        ui.setupFeedbackButton(btnPushToVault, pushToVault);\n        txtPath.addEventListener('input', onPathTextInput);\n    }\n}\n","import { CancellationToken } from '../asyncUtils';\nimport * as stringUtils from '../stringUtils';\nimport * as ui from '../ui';\nimport * as passwordComponent from '../components/passwordComponent';\n\nexport class PasswordService {\n    async generateAndCopyPasswordToClipboard(publicPart: string, alphabet?: string, length?: number): Promise<boolean> {\n        alphabet = alphabet !== undefined ? alphabet : passwordComponent.DEFAULT_ALPHABET;\n        length = length !== undefined ? length : passwordComponent.DEFAULT_LENGTH;\n\n        const keyString: string | null = await passwordComponent.generatePasswordString(publicPart, alphabet, CancellationToken.none);\n\n        if (keyString === null) {\n            return false;\n        }\n\n        const password = stringUtils.truncate(keyString, Math.max(4, length));\n\n        return await ui.writeToClipboard(password);\n    }\n}\n","import * as ui from '../ui';\nimport * as privatePartComponent from './privatePartComponent';\n\nimport * as crypto from '../crypto';\nimport * as stringUtils from '../stringUtils';\nimport * as arrayUtils from '../arrayUtils';\n\nimport { PlainObject } from '../PlainObject';\nimport { PasswordGeneratorV1 } from '../passwordGenerators/v1';\nimport { ITabInfo } from '../TabControl';\nimport { IComponent } from './IComponent';\n\nimport * as storageOutputComponent from './storageOutputComponent';\n\nimport { CancellationToken, TaskRunner } from '../asyncUtils';\n\nimport * as serviceManager from '../services/serviceManger';\nimport { PasswordService } from '../services/passwordService';\n\nconst btnTabPasswords = ui.getElementById('btnTabPasswords') as HTMLButtonElement;\nconst divTabPasswords = ui.getElementById('divTabPasswords');\n\nconst passwordGenerator: crypto.IPasswordGenerator = new PasswordGeneratorV1('Password');\n\nconst txtPublicPart = ui.getElementById('txtPublicPart') as HTMLInputElement;\nconst spnPublicPartSize = ui.getElementById('spnPublicPartSize');\nconst btnGeneratePublicPart = ui.getElementById('btnGeneratePublicPart') as HTMLButtonElement;\nconst btnClearPublicPart = ui.getElementById('btnClearPublicPart') as HTMLButtonElement;\nconst btnCopyPublicPart = ui.getElementById('btnCopyPublicPart') as HTMLButtonElement;\nconst btnShowHidePasswordOptionalFeatures = ui.getElementById('btnShowHidePasswordOptionalFeatures') as HTMLButtonElement;\n\nconst lblAlphabetLength = ui.getElementById('lblAlphabetLength');\nconst numOutputSizeRange = ui.getElementById('numOutputSizeRange') as HTMLInputElement;\nconst numOutputSizeNum = ui.getElementById('numOutputSizeNum') as HTMLInputElement;\n\nconst lblAlphabet = ui.getElementById('lblAlphabet');\nconst txtAlphabet = ui.getElementById('txtAlphabet') as HTMLInputElement;\nconst spnAlphabetSize = ui.getElementById('spnAlphabetSize');\nconst divPasswordAlphabetActions = ui.getElementById('divPasswordAlphabetActions');\nconst btnResetAlphabet = ui.getElementById('btnResetAlphabet') as HTMLButtonElement;\n\nconst txtResultPassword = ui.getElementById('txtResultPassword') as HTMLInputElement;\nconst spnResultPasswordLength = ui.getElementById('spnResultPasswordLength');\nconst btnViewResultPassword = ui.getElementById('btnViewResultPassword') as HTMLButtonElement;\nconst btnCopyResultPassword = ui.getElementById('btnCopyResultPassword') as HTMLButtonElement;\nconst lblGeneratingPassword = ui.getElementById('lblGeneratingPassword');\n\nexport const DEFAULT_LENGTH: number = 64;\nexport const DEFAULT_ALPHABET: string = '!\"#$%&\\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[]^_`abcdefghijklmnopqrstuvwxyz{|}~';\n\nlet passwordPublicPartLastChange: string | undefined;\nlet copyPasswordFunction: () => void;\n\nfunction onClearPublicPartButtonClick(): boolean {\n    if (txtPublicPart.value.length > 0) {\n        if (prompt('Are you sure you want to clear the public part ?\\nType \\'y\\' to accept', '') !== 'y') {\n            return false;\n        }\n    }\n\n    ui.clearText(txtPublicPart, true);\n\n    updatePublicPartSize();\n\n    updatePasswordPublicPartLastUpdate();\n    updatePasswordGenerationParameters();\n\n    return true;\n}\n\nfunction onGeneratePublicPartButtonClick(): boolean {\n    if (txtPublicPart.value.length > 0) {\n        if (prompt('Are you sure you want to generate a new public part ?\\nType \\'y\\' to accept', '') !== 'y') {\n            return false;\n        }\n    }\n\n    const randomString: string = crypto.generateRandomString();\n    txtPublicPart.value = randomString;\n    updatePublicPartSize();\n\n    updatePasswordPublicPartLastUpdate();\n\n    run();\n\n    return true;\n}\n\nfunction updatePasswordPublicPartLastUpdate(): void {\n    if (txtPublicPart.value.length > 0) {\n        passwordPublicPartLastChange = new Date().toISOString();\n    } else {\n        passwordPublicPartLastChange = undefined;\n    }\n}\n\nfunction updateResultPasswordLength(): void {\n    spnResultPasswordLength.innerHTML = txtResultPassword.value.length.toString();\n}\n\nfunction isAlphabetValid(alphabet: string): boolean {\n    const sortedAlphabet: string[] = alphabet.split('');\n    sortedAlphabet.sort();\n\n    for (let i: number = 1; i < sortedAlphabet.length; i += 1) {\n        if (sortedAlphabet[i - 1] === sortedAlphabet[i]) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nfunction updatePasswordGenerationParameters(): void {\n    if (canRun() === false) {\n        clearOutputs();\n        return;\n    }\n\n    const passwordParamters: PlainObject = {\n        public: txtPublicPart.value,\n        datetime: passwordPublicPartLastChange,\n        version: passwordGenerator.version,\n        length: txtResultPassword.value.length,\n        alphabet: txtAlphabet.value\n    };\n\n    storageOutputComponent.setParameters(passwordParamters, 'password');\n}\n\nfunction updateOutputSizeRangeToNum(): void {\n    numOutputSizeNum.value = numOutputSizeRange.value;\n}\n\nfunction updateOutputSizeNumToRange(): boolean {\n    const min: number = parseInt(numOutputSizeRange.min, 10);\n    const val: number = parseInt(numOutputSizeNum.value, 10);\n    const max: number = parseInt(numOutputSizeRange.max, 10);\n\n    if (isNaN(val) === false) {\n        numOutputSizeRange.value = Math.max(min, Math.min(val, max)).toString();\n        return true;\n    }\n\n    return false;\n}\n\nasync function onOutputSizeRangeInput(): Promise<void> {\n    updateOutputSizeRangeToNum();\n    await run();\n}\n\nasync function onOutputSizeNumInput(): Promise<void> {\n    if (updateOutputSizeNumToRange()) {\n        updateOutputSizeRangeToNum();\n    }\n    await run();\n}\n\nfunction updatePublicPartSize(): void {\n    spnPublicPartSize.innerHTML = txtPublicPart.value.length.toString();\n}\n\nfunction updateAlphabetSize(): void {\n    spnAlphabetSize.innerHTML = txtAlphabet.value.length.toString();\n}\n\nfunction updateAlphabetValidityDisplay(isAlphabetValid: boolean): void {\n    if (isAlphabetValid) {\n        txtAlphabet.style.removeProperty('background');\n    } else {\n        txtAlphabet.style.setProperty('background', ui.ERROR_COLOR);\n    }\n}\n\nasync function onAlphabetTextInput(): Promise<void> {\n    const isAlphabetValidResult: boolean = isAlphabetValid(txtAlphabet.value);\n\n    updateAlphabetValidityDisplay(isAlphabetValidResult);\n\n    if (isAlphabetValidResult === false) {\n        return;\n    }\n\n    updateAlphabetSize();\n    await run();\n}\n\nasync function onResetAlphabetButtonClick(): Promise<boolean> {\n    if (resetAlphabet() === false) {\n        return false;\n    }\n\n    await run();\n\n    return true;\n}\n\nfunction clearOutputs(): void {\n    ui.clearText(txtResultPassword);\n    storageOutputComponent.clearOutputs();\n    updateResultPasswordLength();\n}\n\nfunction canRun(publicPart?: string): boolean {\n    const alphabet: string = txtAlphabet.value;\n\n    if (isAlphabetValid(alphabet) === false) {\n        return false;\n    }\n\n    publicPart = publicPart || txtPublicPart.value;\n\n    if (privatePartComponent.getPrivatePart().length <= 0 || publicPart.length < 8 || alphabet.length < 2) {\n        return false;\n    }\n\n    return true;\n}\n\nexport async function generatePasswordString(publicPart: string, alphabet: string, cancellationToken: CancellationToken): Promise<string | null> {\n    if (canRun(publicPart) === false) {\n        return null;\n    }\n\n    const privatePartString: string = privatePartComponent.getPrivatePart();\n    const privatePrivateBytes: ArrayBuffer = stringUtils.stringToArray(privatePartString);\n    const publicPartBytes: ArrayBuffer = stringUtils.stringToArray(publicPart);\n    const keyBytes: ArrayBuffer = await passwordGenerator.generatePassword(privatePrivateBytes, publicPartBytes, cancellationToken);\n\n    return arrayUtils.toCustomBaseOneWay(keyBytes, alphabet);\n}\n\nconst passwordTaskRunner: TaskRunner<void> = new TaskRunner<void>();\n\nexport async function run(): Promise<void> {\n    if (canRun() === false) {\n        clearOutputs();\n        return;\n    }\n\n    ui.showHide(lblGeneratingPassword, true);\n\n    try {\n        await passwordTaskRunner.cancelAndExecute(runCore);\n    } finally {\n        ui.showHide(lblGeneratingPassword, false);\n    }\n}\n\nasync function runCore(cancellationToken: CancellationToken): Promise<void> {\n    const keyString: string | null = await generatePasswordString(txtPublicPart.value, txtAlphabet.value, cancellationToken);\n    if (keyString === null) {\n        return;\n    }\n\n    txtResultPassword.value = stringUtils.truncate(keyString, Math.max(4, parseInt(numOutputSizeRange.value, 10)));\n\n    updateResultPasswordLength();\n    updatePasswordGenerationParameters();\n\n    copyPasswordFunction();\n}\n\nfunction resetAlphabet(): boolean {\n    txtAlphabet.value = DEFAULT_ALPHABET;\n    updateAlphabetSize();\n\n    const isAlphabetValidResult: boolean = isAlphabetValid(txtAlphabet.value);\n\n    updateAlphabetValidityDisplay(isAlphabetValidResult);\n\n    return isAlphabetValidResult;\n}\n\nasync function onPublicPartTextInput(): Promise<void> {\n    updatePublicPartSize();\n    updatePasswordPublicPartLastUpdate();\n    await run();\n}\n\nexport class PasswordComponent implements IComponent, ITabInfo {\n    public readonly name: string = 'Password';\n\n    public getTabButton(): HTMLButtonElement {\n        return btnTabPasswords;\n    }\n\n    public getTabContent(): HTMLElement {\n        return divTabPasswords;\n    }\n\n    public onTabSelected(): void {\n        storageOutputComponent.show();\n        updatePasswordGenerationParameters();\n        txtPublicPart.focus();\n    }\n\n    public init(): void {\n        privatePartComponent.registerOnChanged(run);\n\n        // dafuq!?\n        numOutputSizeRange.max = DEFAULT_LENGTH.toString();\n        numOutputSizeRange.value = DEFAULT_LENGTH.toString();\n\n        ui.setupFeedbackButton(btnClearPublicPart, onClearPublicPartButtonClick);\n        ui.setupFeedbackButton(btnGeneratePublicPart, onGeneratePublicPartButtonClick);\n\n        ui.setupViewButton(txtResultPassword, btnViewResultPassword);\n\n        ui.setupCopyButton(txtPublicPart, btnCopyPublicPart);\n        copyPasswordFunction = ui.setupCopyButton(txtResultPassword, btnCopyResultPassword);\n\n        numOutputSizeRange.addEventListener('input', onOutputSizeRangeInput);\n        numOutputSizeNum.addEventListener('input', onOutputSizeNumInput);\n\n        txtAlphabet.addEventListener('input', onAlphabetTextInput);\n        ui.setupFeedbackButton(btnResetAlphabet, onResetAlphabetButtonClick);\n\n        txtPublicPart.addEventListener('input', onPublicPartTextInput);\n\n        ui.showHide(lblGeneratingPassword, false);\n\n        ui.setupShowHideButton(btnShowHidePasswordOptionalFeatures, false, [\n            lblAlphabet,\n            txtAlphabet,\n            spnAlphabetSize,\n            divPasswordAlphabetActions,\n            lblAlphabetLength,\n            numOutputSizeRange,\n            numOutputSizeNum\n        ]);\n\n        updatePublicPartSize();\n        updateOutputSizeRangeToNum();\n        resetAlphabet();\n\n        serviceManager.registerService('password', new PasswordService());\n    }\n};\n","import { stringToArray } from '../stringUtils';\nimport { IPasswordGenerator, getDerivedBytes } from '../crypto';\nimport { CancellationToken, ensureNotCancelled } from '../asyncUtils';\n\nexport class PasswordGeneratorV1 implements IPasswordGenerator {\n    private hkdfPurpose: ArrayBuffer;\n    private _description: string;\n\n    public constructor(hkdfPurpose: string) {\n        this.hkdfPurpose = stringToArray(hkdfPurpose);\n        this._description = `HKDF(PBKDF2, HMAC512) [purpose: ${hkdfPurpose}]`;\n    }\n\n    public get version(): number {\n        return 1;\n    }\n\n    public get description(): string {\n        return this._description;\n    }\n\n    public async generatePassword(privatePart: ArrayBuffer, publicPart: ArrayBuffer, cancellationToken: CancellationToken): Promise<ArrayBuffer> {\n        const derivedKey: ArrayBuffer = await getDerivedBytes(privatePart, publicPart, cancellationToken);\n\n        ensureNotCancelled(cancellationToken);\n\n        const hmacParameters: HmacImportParams = {\n            name: 'HMAC',\n            hash: { name: 'SHA-512' }\n        };\n\n        const hkdfKey: CryptoKey = await window.crypto.subtle.importKey(\n            'raw',\n            derivedKey,\n            hmacParameters,\n            false,\n            ['sign']\n        );\n\n        ensureNotCancelled(cancellationToken);\n\n        const result: ArrayBuffer = await window.crypto.subtle.sign('HMAC', hkdfKey, this.hkdfPurpose);\n\n        ensureNotCancelled(cancellationToken);\n\n        return result;\n    }\n}\n","import { ICipher, getDerivedBytes } from '../crypto';\nimport { CancellationToken, ensureNotCancelled } from '../asyncUtils';\n\nconst encryptionKeyDerivationSalt: ArrayBuffer = new Uint8Array([ 0xf2, 0xcf, 0xef, 0x8e, 0x13, 0x40, 0x46, 0x49, 0x92, 0x2a, 0xde, 0x5c, 0xbc, 0x88, 0x38, 0xa8 ]).buffer;\n\nexport class CipherV1 implements ICipher {\n    public get version(): number {\n        return 1;\n    }\n\n    public get description(): string {\n        return 'PBKDF2 + AES-GCM';\n    }\n\n    async encrypt(input: ArrayBuffer, password: ArrayBuffer, cancellationToken: CancellationToken): Promise<ArrayBuffer> {\n        const output: ArrayBuffer = new ArrayBuffer(12 + 16 + input.byteLength);\n\n        const nonce: DataView = new DataView(output, 0, 12);\n        crypto.getRandomValues(new Uint8Array(output, 0, 12));\n\n        const aesGcmParams: AesGcmParams = {\n            name: 'AES-GCM',\n            iv: nonce\n        };\n\n        const aesKeyAlgorithm: AesKeyAlgorithm = {\n            name: 'AES-GCM',\n            length: 256\n        };\n\n        const passwordKey: CryptoKey = await window.crypto.subtle.importKey(\n            'raw',\n            await getDerivedBytes(password, encryptionKeyDerivationSalt, cancellationToken),\n            aesKeyAlgorithm,\n            false,\n            ['encrypt']\n        );\n\n        ensureNotCancelled(cancellationToken);\n\n        const result: ArrayBuffer = await window.crypto.subtle.encrypt(aesGcmParams, passwordKey, input);\n\n        ensureNotCancelled(cancellationToken);\n\n        new Uint8Array(output).set(new Uint8Array(result), 12);\n\n        return output;\n    }\n\n    async decrypt(input: ArrayBuffer, password: ArrayBuffer, cancellationToken: CancellationToken): Promise<ArrayBuffer> {\n        const nonce: DataView = new DataView(input, 0, 12);\n        const payload: DataView = new DataView(input, 12);\n\n        const aesGcmParams: AesGcmParams = {\n            name: 'AES-GCM',\n            iv: nonce\n        };\n\n        const aesKeyAlgorithm: AesKeyAlgorithm = {\n            name: 'AES-GCM',\n            length: 256\n        };\n\n        const derivedKey: ArrayBuffer = await getDerivedBytes(password, encryptionKeyDerivationSalt, cancellationToken);\n\n        ensureNotCancelled(cancellationToken);\n\n        const passwordKey: CryptoKey = await window.crypto.subtle.importKey(\n            'raw',\n            derivedKey,\n            aesKeyAlgorithm,\n            false,\n            ['decrypt']\n        );\n\n        ensureNotCancelled(cancellationToken);\n\n        const result: ArrayBuffer = await window.crypto.subtle.decrypt(aesGcmParams, passwordKey, payload);\n\n        ensureNotCancelled(cancellationToken);\n\n        return result;\n    }\n}\n","import { ICipher } from '../crypto';\nimport * as stringUtils from '../stringUtils';\nimport * as arrayUtils from '../arrayUtils';\nimport { ITabInfo } from '../TabControl';\nimport * as ui from '../ui';\nimport { getPrivatePart } from './privatePartComponent';\n\nimport { CipherV1 } from '../ciphers/v1';\nimport { CipherV2 } from '../ciphers/v2';\nimport { IComponent } from './IComponent';\n\nimport * as storageOutputComponent from './storageOutputComponent';\n\nimport { CancellationToken } from '../asyncUtils';\n\nconst ciphers: ICipher[] = [\n    new CipherV1(),\n    new CipherV2()\n];\n\nconst btnTabReEncrypt: HTMLButtonElement = ui.getElementById('btnTabReEncrypt') as HTMLButtonElement;\nconst divTabReEncrypt: HTMLElement = ui.getElementById('divTabReEncrypt');\n\nconst txtReEncryptSource: HTMLInputElement = ui.getElementById('txtReEncryptSource') as HTMLInputElement;\nconst txtReEncryptTarget: HTMLInputElement = ui.getElementById('txtReEncryptTarget') as HTMLInputElement;\n\nconst cboReEncryptFrom: HTMLSelectElement = ui.getElementById('cboReEncryptFrom') as HTMLSelectElement;\nconst cboReEncryptTo: HTMLSelectElement = ui.getElementById('cboReEncryptTo') as HTMLSelectElement;\nconst btnReEncrypt: HTMLButtonElement = ui.getElementById('btnReEncrypt') as HTMLButtonElement;\n\nconst btnClearReEncryptSource: HTMLButtonElement = ui.getElementById('btnClearReEncryptSource') as HTMLButtonElement;\nconst btnCopyReEncryptTarget: HTMLButtonElement = ui.getElementById('btnCopyReEncryptTarget') as HTMLButtonElement;\nconst btnClearReEncryptTarget: HTMLButtonElement = ui.getElementById('btnClearReEncryptTarget') as HTMLButtonElement;\n\nfunction fillCipherComboBox(cbo: HTMLSelectElement, initialValue: number): void {\n    let cipher: ICipher;\n\n    for (cipher of ciphers) {\n        const item: HTMLOptionElement = document.createElement('option');\n        item.value = cbo.childNodes.length.toString();\n        item.text = `${cipher.description} (v${cipher.version})`;\n        cbo.add(item);\n    }\n\n    cbo.value = initialValue.toString();\n}\n\nfunction clearSourceVisualCue(): void {\n    txtReEncryptSource.style.removeProperty('background-color');\n}\n\nfunction clearTargetVisualCue(): void {\n    txtReEncryptTarget.style.removeProperty('background-color');\n}\n\nfunction setSourceVisualCueError() {\n    txtReEncryptSource.style.setProperty('background-color', ui.ERROR_COLOR);\n}\n\nfunction setTargetVisualCueError() {\n    txtReEncryptTarget.style.setProperty('background-color', ui.ERROR_COLOR);\n}\n\nfunction clearAllVisualCues(): void {\n    clearSourceVisualCue();\n    clearTargetVisualCue();\n}\n\nasync function onReEncryptButtonClick(): Promise<boolean> {\n    ui.clearText(txtReEncryptTarget, true);\n    clearAllVisualCues();\n\n    if (txtReEncryptSource.value.length === 0) {\n        setSourceVisualCueError();\n        return false;\n    }\n\n    if (cboReEncryptFrom.value === cboReEncryptTo.value) {\n        setTargetVisualCueError();\n        return false;\n    }\n\n    const privatePart: string = getPrivatePart();\n    if (privatePart.length === 0) {\n        console.warn('Private part is empty');\n        return false;\n    }\n\n    const sourceCipherIndex = parseInt(cboReEncryptFrom.value, 10);\n    const targetCipherIndex = parseInt(cboReEncryptTo.value, 10);\n\n    const password: ArrayBuffer = stringUtils.stringToArray(privatePart);\n\n    const input: ArrayBuffer = stringUtils.fromBase16(txtReEncryptSource.value);\n    const decrypted: ArrayBuffer = await ciphers[sourceCipherIndex].decrypt(input, password, CancellationToken.none);\n    const reEncrypted: ArrayBuffer = await ciphers[targetCipherIndex].encrypt(decrypted, password, CancellationToken.none);\n\n    txtReEncryptTarget.value = arrayUtils.toBase16(reEncrypted);\n\n    return true;\n}\n\nexport class ReEncryptComponent implements IComponent, ITabInfo {\n    public readonly name: string = 'ReEncrypt';\n\n    public getTabButton(): HTMLButtonElement {\n        return btnTabReEncrypt;\n    }\n\n    public getTabContent(): HTMLElement {\n        return divTabReEncrypt;\n    }\n\n    public onTabSelected() {\n        storageOutputComponent.hide();\n        txtReEncryptSource.focus();\n    }\n\n    public init(): void {\n        ui.setupCopyButton(txtReEncryptTarget, btnCopyReEncryptTarget);\n\n        // Mais est-ce que ce monde est serieux?\n        fillCipherComboBox(<HTMLSelectElement><any>cboReEncryptFrom, ciphers.length - 2);\n        fillCipherComboBox(<HTMLSelectElement><any>cboReEncryptTo, ciphers.length - 1);\n\n        txtReEncryptSource.addEventListener('input', () => {\n            if (txtReEncryptSource.value.length > 0) {\n                clearSourceVisualCue();\n            }\n        });\n\n        btnClearReEncryptSource.addEventListener('click', () => {\n            ui.clearText(txtReEncryptSource, true);\n        });\n\n        btnClearReEncryptTarget.addEventListener('click', () => {\n            ui.clearText(txtReEncryptTarget, true);\n        });\n\n        ui.setupFeedbackButton(btnReEncrypt, onReEncryptButtonClick);\n    }\n}\n","import * as plainObject from '../../PlainObject';\nimport { SearchMatchFunction, PositionMarker } from '../../searchMatchFunctions';\n\nexport const DEEP_MODE_NONE = 0;\nexport const DEEP_MODE_UP = 1;\nexport const DEEP_MODE_DOWN = 2;\n\nconst TREE_ELEMENT_HEIGHT = 24;\n\nconst HORIZONTAL_LINE_VERTICAL_OFFSET = 11;\nconst HORIZONTAL_LINE_LENGTH = 12;\nconst VERTICAL_BAR_OFFSET = 6;\n\nexport interface TreeNodeCreationController {\n    isLeaf(path: string, key: string, value: any): boolean;\n    createTreeNodeContentElement(path: string, key: string, value: any): HTMLElement;\n}\n\nexport class TreeNode {\n    protected readonly parent: TreeNode | null;\n    protected readonly children: TreeNode[] = [];\n\n    protected readonly rootElement: HTMLElement;\n    protected readonly titleElement: HTMLElement;\n    protected readonly childrenContainerElement: HTMLElement;\n\n    protected readonly treeNodeCreationController: TreeNodeCreationController;\n\n    protected readonly path: string;\n    protected readonly key: string;\n    protected readonly value: any;\n\n    public get element(): HTMLElement {\n        return this.rootElement;\n    }\n\n    public get isVisible(): boolean {\n        return this.rootElement.style.display !== 'none';\n    }\n\n    public getVisibleChildCount(): number {\n        let visibleChildCount = 0;\n\n        for (const child of this.children) {\n            if (child.isVisible) {\n                visibleChildCount += 1;\n            }\n        }\n\n        return visibleChildCount;\n    }\n\n    public getVisibleLeafCount(): number {\n        if (this.isVisible === false) {\n            return 0;\n        }\n\n        let visibleLeafCount = 1;\n\n        for (const child of this.children) {\n            visibleLeafCount += child.getVisibleLeafCount();\n        }\n\n        return visibleLeafCount;\n    }\n\n    private addChild(child: TreeNode) {\n        this.childrenContainerElement.appendChild(child.rootElement);\n        this.children.push(child);\n    }\n\n    constructor(parent: TreeNode | null, path: string, key: string, value: any, treeNodeCreationController: TreeNodeCreationController) {\n        this.parent = parent;\n        this.path = path;\n        this.key = key;\n        this.value = value;\n        this.treeNodeCreationController = treeNodeCreationController;\n\n        this.rootElement = document.createElement('div');\n        this.setRootElementStyle();\n\n\n        // Construct title DOM element.\n        this.titleElement = document.createElement('div');\n        this.setTitleElementStyle();\n\n        this.titleElement.appendChild(this.createTreeNodeContentElement());\n\n        this.rootElement.appendChild(this.titleElement);\n\n        // Construct children container DOM element.\n        this.childrenContainerElement = document.createElement('div');\n        this.rootElement.appendChild(this.childrenContainerElement);\n        this.setChildrenContainerElementStyle();\n\n        const isLeaf = treeNodeCreationController.isLeaf(path, key, value);\n\n        if (isLeaf === false && plainObject.isPlainObject(value)) {\n            for (const [childKey, childValue] of Object.entries(value)) {\n                const child = new TreeNode(this, `${path}/${childKey}`, childKey, childValue, treeNodeCreationController);\n                this.addChild(child);\n            }\n        }\n\n        if (parent) {\n            // Construct lines DOM elements.\n            this.setupLinesElements('#D0D0D0');\n        }\n    }\n\n    private createTreeNodeContentElement(): HTMLElement {\n        return this.treeNodeCreationController.createTreeNodeContentElement(this.path, this.key, this.value);\n    }\n\n    private setRootElementStyle(): void {\n        this.rootElement.classList.add('treenode-root');\n        this.rootElement.style.display = 'grid';\n\n        let height = 4; // Gives a bit of top spacing.\n        let childrenOffset = 0;\n\n        if (this.parent) {\n            height = TREE_ELEMENT_HEIGHT;\n        }\n        if (this.parent && this.parent.parent) {\n            childrenOffset = HORIZONTAL_LINE_LENGTH;\n        }\n\n        this.rootElement.style.gridTemplateRows = `${height}px 1fr`;\n        this.rootElement.style.gridTemplateColumns = `${childrenOffset}px ${VERTICAL_BAR_OFFSET}px 1fr`;\n    }\n\n    private verticalLineElement: HTMLElement | null = null;\n\n    private setupLinesElements(color: string): void {\n        const verticalLineElement = document.createElement('div');\n        verticalLineElement.classList.add('treenode-vertical-line');\n        verticalLineElement.style.gridColumn = '2';\n        verticalLineElement.style.gridRow = '2';\n        verticalLineElement.style.width = '100%';\n        verticalLineElement.style.borderRight = `1px solid ${color}`;\n        this.verticalLineElement = verticalLineElement;\n        this.rootElement.appendChild(verticalLineElement);\n\n        if (this.parent && this.parent.parent) {\n            const horizontalLineElement = document.createElement('div');\n            horizontalLineElement.classList.add('treenode-horizontal-line');\n            horizontalLineElement.style.gridColumn = '1';\n            horizontalLineElement.style.gridRow = '1';\n            horizontalLineElement.style.width = '100%';\n            horizontalLineElement.style.height = `${HORIZONTAL_LINE_VERTICAL_OFFSET}px`;\n            horizontalLineElement.style.borderBottom = `1px solid ${color}`;\n            this.rootElement.appendChild(horizontalLineElement);\n        }\n\n        this.updateLines();\n    }\n\n    private updateLines(): void {\n        if (this.verticalLineElement === null) {\n            return;\n        }\n\n        const visibleChildCount = this.getVisibleChildCount();\n\n        if (visibleChildCount === 0) {\n            this.verticalLineElement.style.height = '0px';\n            return;\n        }\n\n        let totalVisibleLeafCount = 1;\n\n        for (let i = 0; i < visibleChildCount - 1; i += 1) {\n            if (this.children[i].isVisible) {\n                totalVisibleLeafCount += this.children[i].getVisibleLeafCount();\n            }\n        }\n\n        const bottomPosition = (totalVisibleLeafCount * TREE_ELEMENT_HEIGHT) - TREE_ELEMENT_HEIGHT + HORIZONTAL_LINE_VERTICAL_OFFSET + 1;\n\n        this.verticalLineElement.style.height = `${bottomPosition}px`;\n    }\n\n    private setTitleElementStyle(): void {\n        if (!this.titleElement) {\n            return;\n        }\n\n        this.titleElement.classList.add('treenode-title');\n        this.titleElement.style.gridColumn = '2 / span 2';\n        this.titleElement.style.gridRow = '1';\n        this.titleElement.style.marginLeft = '3px';\n    }\n\n    private setChildrenContainerElementStyle(): void {\n        this.childrenContainerElement.classList.add('treenode-children-container');\n        this.childrenContainerElement.style.gridColumn = '3';\n        this.childrenContainerElement.style.gridRow = '2';\n    }\n\n    private resetTitle(deepMode: number): void {\n        if (this.titleElement) {\n            this.titleElement.innerHTML = '';\n            this.titleElement.appendChild(this.createTreeNodeContentElement());\n        }\n\n        if (deepMode === DEEP_MODE_UP && this.parent) {\n            this.parent.resetTitle(deepMode);\n        }\n\n        if (deepMode === DEEP_MODE_DOWN) {\n            for (const child of this.children) {\n                child.resetTitle(deepMode);\n            }\n        }\n    }\n\n    public show(deepMode: number): void {\n        this.rootElement.style.display = 'grid';\n\n        if (deepMode === DEEP_MODE_UP && this.parent) {\n            this.parent.show(deepMode);\n        }\n\n        if (deepMode === DEEP_MODE_DOWN) {\n            for (const child of this.children) {\n                child.show(deepMode);\n            }\n        }\n\n        this.updateLines();\n    }\n\n    public hide(deepMode: number): void {\n        this.rootElement.style.display = 'none';\n\n        if (deepMode === DEEP_MODE_UP && this.parent) {\n            this.parent.hide(deepMode);\n        }\n\n        if (deepMode === DEEP_MODE_DOWN) {\n            for (const child of this.children) {\n                child.hide(deepMode);\n            }\n        }\n\n        this.updateLines();\n    }\n\n    private static createSpan(text: string, color?: string): HTMLElement {\n        const element = document.createElement('span');\n        if (color) {\n            element.style.backgroundColor = color;\n            element.style.borderRadius = '2px';\n        }\n        element.innerText = text;\n        return element;\n    }\n\n    private static createColoredSpan(text: string, markers: PositionMarker[]): HTMLElement {\n        const root = document.createElement('span');\n\n        let pos = 0;\n\n        for (const marker of markers) {\n            if (marker.pos !== pos) {\n                root.appendChild(TreeNode.createSpan(text.substr(pos, marker.pos - pos)));\n            }\n\n            root.appendChild(TreeNode.createSpan(text.substr(marker.pos, marker.len), '#80C0FF'));\n\n            pos = marker.pos + marker.len;\n        }\n\n        if (pos < text.length) {\n            root.appendChild(TreeNode.createSpan(text.substr(pos, text.length - pos)));\n        }\n\n        return root;\n    }\n\n    public filter(searchText: string, matchFunction: SearchMatchFunction): void {\n        if (!searchText) {\n            this.resetTitle(DEEP_MODE_DOWN);\n            this.show(DEEP_MODE_DOWN);\n            this.updateLines();\n            return;\n        }\n\n        const markers: PositionMarker[] = [];\n        const isMatch = matchFunction(this.key, searchText, markers);\n\n        if (isMatch) {\n            if (this.titleElement) {\n                this.titleElement.innerHTML = '';\n                const title = this.createTreeNodeContentElement();\n                this.titleElement.appendChild(TreeNode.createColoredSpan(title.innerText, markers));\n            }\n\n            this.show(DEEP_MODE_UP);\n            this.show(DEEP_MODE_DOWN);\n        } else {\n            this.resetTitle(DEEP_MODE_DOWN);\n        }\n\n        for (const child of this.children) {\n            child.filter(searchText, matchFunction);\n        }\n\n        this.updateLines();\n    }\n}\n","export interface PositionMarker {\n    pos: number;\n    len: number;\n}\n\nexport type SearchMatchFunction = (lhs: string, rhs: string, markers: PositionMarker[]) => boolean;\n\nfunction indexedAggresiveSearchMatchFunction(lhs: string, lhsIndex: number, rhs: string, markers: PositionMarker[]): boolean {\n    if (!rhs) {\n        return true;\n    }\n\n    lhs = lhs.toLowerCase();\n    rhs = rhs.toLowerCase();\n\n    for (let len = rhs.length; len >= 1; len -= 1) {\n        const subWord = rhs.substr(0, len);\n        const foundPos = lhs.indexOf(subWord, lhsIndex);\n\n        if (foundPos >= 0) {\n            markers.push({\n                pos: foundPos,\n                len: subWord.length\n            });\n\n            return indexedAggresiveSearchMatchFunction(lhs, foundPos + subWord.length, rhs.substr(len), markers);\n        }\n    }\n\n    return false;\n}\n\nexport function aggresiveSearchMatchFunction(lhs: string, rhs: string, markers: PositionMarker[]): boolean {\n    return indexedAggresiveSearchMatchFunction(lhs, 0, rhs, markers);\n}\n\nexport function containsSearchMatchFunction(lhs: string, rhs: string, markers: PositionMarker[]): boolean {\n    const index = lhs.toLowerCase().indexOf(rhs.toLowerCase());\n\n    if (index < 0) {\n        return false;\n    }\n\n    markers.push({\n        pos: index,\n        len: rhs.length\n    });\n\n    return true;\n}\n","import { getElementById } from '../../ui';\nimport { IComponent } from '../IComponent';\nimport { ITabInfo } from '../../TabControl';\nimport { IVaultComponent } from '../vaultComponent';\nimport { TreeNode, TreeNodeCreationController, DEEP_MODE_DOWN } from './TreeNode';\nimport * as plainObject from '../../PlainObject';\nimport * as ui from '../../ui';\nimport { aggresiveSearchMatchFunction, containsSearchMatchFunction, SearchMatchFunction } from '../../searchMatchFunctions';\nimport * as serviceManager from '../../services/serviceManger';\nimport { PasswordService } from '../../services/passwordService';\n\nconst btnTabVaultTabTreeView = getElementById('btnTabVaultTabTreeView') as HTMLButtonElement;\nconst divTabVaultTabTreeView = getElementById('divTabVaultTabTreeView');\n\nconst trvVaultTreeView = getElementById('trvVaultTreeView');\nconst txtVaultTreeViewSearch = getElementById('txtVaultTreeViewSearch') as HTMLInputElement;\nconst cboVaultTreeViewSearchType = getElementById('cboVaultTreeViewSearchType') as HTMLSelectElement;\n\nlet rootTreeNode: TreeNode;\n\ninterface SearchMatchFunctionDescription {\n    text: string,\n    function: SearchMatchFunction\n}\n\nconst searchMatchFunctionDescriptions: SearchMatchFunctionDescription[] = [\n    { text: 'Aggresive', function: aggresiveSearchMatchFunction },\n    { text: 'Regular', function: containsSearchMatchFunction },\n];\n\nfunction onSearchVaultInputChanged(): void {\n    if (!rootTreeNode) {\n        return;\n    }\n\n    const index: number = cboVaultTreeViewSearchType.selectedIndex;\n    const searchMatchFunction: SearchMatchFunction = searchMatchFunctionDescriptions[index].function;\n\n    rootTreeNode.hide(DEEP_MODE_DOWN);\n    rootTreeNode.filter(txtVaultTreeViewSearch.value.toLocaleLowerCase(), searchMatchFunction);\n}\n\nfunction populateSearchFunctions(): void {\n    cboVaultTreeViewSearchType.innerHTML = '';\n\n    for (let description of searchMatchFunctionDescriptions) {\n        const option = document.createElement('option');\n        option.text = description.text;\n        cboVaultTreeViewSearchType.appendChild(option);\n    }\n}\n\nclass VaultTreeNodeCreationController implements TreeNodeCreationController {\n    private readonly passwordService: PasswordService;\n\n    public constructor() {\n        this.passwordService = serviceManager.getService('password');\n    }\n\n    private async run(value: any): Promise<void> {\n        await this.passwordService.generateAndCopyPasswordToClipboard(value.public, value.alphabet, value.length);\n    }\n\n    private static isPasswordObject(key: string, obj: plainObject.PlainObject): boolean {\n        if (key !== 'password') {\n            return false;\n        }\n\n        if (!obj || !plainObject.isPlainObject(obj) || typeof obj.public !== 'string' || obj.public.length < 4) {\n            return false;\n        }\n\n        return true;\n    }\n\n    private static isCipherObject(obj: plainObject.PlainObject): boolean {\n        if (!obj || !plainObject.isPlainObject(obj)) {\n            return false;\n        }\n\n        if (typeof obj.value !== 'string' || obj.value.length <= 0) {\n            return false;\n        }\n\n        if (typeof obj.version !== 'number' || obj.version < 0) {\n            return false;\n        }\n\n        return true;\n    }\n\n    private static isCiphersObject(key: string, obj: plainObject.PlainObject): boolean {\n        if (key !== 'ciphers') {\n            return false;\n        }\n\n        if (!obj || !plainObject.isPlainObject(obj)) {\n            return false;\n        }\n\n        for (const sub of Object.values(obj)) {\n            if (!VaultTreeNodeCreationController.isCipherObject(sub)) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    private static isHint(key: string, value: any) {\n        if (VaultTreeNodeCreationController.isCiphersObject(key, value) ||\n            VaultTreeNodeCreationController.isCipherObject(value) ||\n            VaultTreeNodeCreationController.isPasswordObject(key, value) ||\n            plainObject.isPlainObject(value)) {\n            return false;\n        }\n\n        return true;\n    }\n\n    public isLeaf(path: string, key: string, value: any): boolean {\n        if (VaultTreeNodeCreationController.isCipherObject(value) ||\n            VaultTreeNodeCreationController.isPasswordObject(key, value)) {\n            return true;\n        }\n\n        return plainObject.isPlainObject(value) === false;\n    }\n\n    createTreeNodeContentElement(path: string, key: string, value: any): HTMLElement {\n        if (VaultTreeNodeCreationController.isPasswordObject(key, value)) {\n            const button = document.createElement('button');\n            button.style.justifySelf = 'start';\n            button.style.minWidth = '80px';\n            button.innerText = 'Password';\n\n            ui.setupFeedbackButton(button, async () => await this.run(value));\n\n            return button;\n        } else if (VaultTreeNodeCreationController.isHint(key, value)) {\n            const label = document.createElement('span');\n            label.style.justifySelf = 'start';\n            label.innerText = `${key}: ${value}`;\n\n            return label;\n        }\n\n        const div = document.createElement('div');\n        div.innerText = key;\n        return div;\n    }\n}\n\nexport class VaultTreeViewComponent implements IComponent, ITabInfo, IVaultComponent {\n    public readonly name: string = 'VaultTreeView';\n\n    public onVaultLoaded(vault: plainObject.PlainObject): void {\n        rootTreeNode = new TreeNode(null, '<root>', '', vault, new VaultTreeNodeCreationController());\n\n        trvVaultTreeView.innerHTML = '';\n        trvVaultTreeView.appendChild(rootTreeNode.element);\n\n        onSearchVaultInputChanged();\n    }\n\n    public getTabButton(): HTMLButtonElement {\n        return btnTabVaultTabTreeView;\n    }\n\n    public getTabContent(): HTMLElement {\n        return divTabVaultTabTreeView;\n    }\n\n    public onTabSelected(): void {\n        txtVaultTreeViewSearch.focus();\n    }\n\n    public init(): void {\n        populateSearchFunctions();\n\n        txtVaultTreeViewSearch.addEventListener('input', onSearchVaultInputChanged);\n        cboVaultTreeViewSearchType.addEventListener('change', onSearchVaultInputChanged);\n    }\n}\n","import { getElementById } from '../../ui';\nimport { IComponent } from '../IComponent';\nimport { ITabInfo } from '../../TabControl';\nimport { IVaultComponent } from '../vaultComponent';\nimport * as plainObject from '../../PlainObject';\n\nconst btnTabVaultTabTextView = getElementById('btnTabVaultTabTextView') as HTMLButtonElement;\nconst divTabVaultTabTextView = getElementById('divTabVaultTabTextView');\n\nconst txtVault = getElementById('txtVault') as HTMLInputElement;\n\nexport class VaultTextViewComponent implements IComponent, ITabInfo, IVaultComponent {\n    public readonly name: string = 'VaultTextView';\n\n    public onVaultLoaded(vault: plainObject.PlainObject): void {\n        txtVault.value = JSON.stringify(vault, undefined, 4);\n    }\n\n    public getTabButton(): HTMLButtonElement {\n        return btnTabVaultTabTextView;\n    }\n\n    public getTabContent(): HTMLElement {\n        return divTabVaultTabTextView;\n    }\n\n    public onTabSelected(): void {\n    }\n\n    public init(): void {\n    }\n}\n","import { VaultComponent } from '../components/vaultComponent';\n\nexport class VaultService {\n    private readonly vaultComponent: VaultComponent;\n\n    public constructor(vaultComponent: VaultComponent) {\n        this.vaultComponent = vaultComponent;\n    }\n\n    public computeUserPathMatchDepth(path: string): number {\n        return this.vaultComponent.computeUserPathMatchDepth(path);\n    }\n}\n","import { getElementById, setupFeedbackButton } from '../ui';\n\nimport { IComponent } from './IComponent';\nimport { ITabInfo, TabControl } from '../TabControl';\n\nimport * as storageOutputComponent from './storageOutputComponent';\n\nimport { SecureLocalStorage } from '../storages/SecureLocalStorage';\nimport { IVaultStorage } from '../storages/IVaultStorage';\nimport { GitHubPersonalAccessTokenVaultStorage } from '../storages/GitHubVaultStorage';\nimport { hasPrivatePart, protectAndLockPrivatePart } from './privatePartComponent';\nimport * as plainObject from '../PlainObject';\nimport { VaultTreeViewComponent } from './vaultComponents/treeViewComponent';\nimport { VaultTextViewComponent } from './vaultComponents/textViewComponent';\n\nimport * as serviceManager from '../services/serviceManger';\nimport { VaultService } from '../services/vaultService';\n\nexport interface IVaultComponent {\n    onVaultLoaded(vault: plainObject.PlainObject): void;\n}\n\nconst divTabVault = getElementById('divTabVault');\nconst btnTabVault = getElementById('btnTabVault') as HTMLButtonElement;\n\nconst btnRefreshVault = getElementById('btnRefreshVault') as HTMLButtonElement;\nconst btnClearVaultSettings = getElementById('btnClearVaultSettings') as HTMLButtonElement;\n\nconst elements: any[] = [\n    new VaultTreeViewComponent(),\n    new VaultTextViewComponent(),\n];\n\nconst tabs: ITabInfo[] = elements.filter(e => (e as ITabInfo).getTabButton !== undefined);\nconst components: (IComponent & IVaultComponent)[] = elements.filter(e => (e as IComponent).init !== undefined);\n\nconst subTabs = new TabControl(tabs);\n\nlet vaultStorage: IVaultStorage = new GitHubPersonalAccessTokenVaultStorage(new SecureLocalStorage());\n\nlet vaultObject: plainObject.PlainObject | null = null;\n\nfunction computeUserPathMatchDepth(path: string): number {\n    if (vaultObject === null) {\n        return 0;\n    }\n\n    let obj = vaultObject;\n\n    const pathArray = path.split('/');\n\n    for (let i = 0; i < pathArray.length; i += 1) {\n        if (!obj[pathArray[i]]) {\n            return i;\n        }\n\n        // TODO: Filter here to not go further down ItchyObjects.\n\n        obj = obj[pathArray[i]];\n    }\n\n    return pathArray.length;\n}\n\nasync function reloadVault(): Promise<boolean> {\n    let content: string | null = await vaultStorage.getVaultContent();\n\n    if (content === null) {\n        return false;\n    }\n\n    try {\n        let obj = JSON.parse(content) as plainObject.PlainObject;\n        obj = plainObject.objectDeepSort(obj);\n\n        vaultObject = obj;\n\n        let component: IVaultComponent;\n        for (component of components) {\n            component.onVaultLoaded(obj);\n        }\n\n        return true;\n    } catch (error) {\n        vaultObject = null;\n        console.error(error);\n        return false;\n    }\n}\n\nasync function onRefreshVaultButtonClick(): Promise<boolean> {\n    if (hasPrivatePart() === false) {\n        alert('You must enter a master key first.');\n        return false;\n    }\n\n    const result: boolean = await reloadVault();\n\n    if (result) {\n        protectAndLockPrivatePart();\n    }\n\n    return result;\n}\n\nfunction onClearVaultSettingsButtonClick(): void {\n    if (prompt('Are you sure you want to clear the vault settings ?\\nType \\'y\\' to accept', '') !== 'y') {\n        return;\n    }\n\n    vaultStorage.clear();\n}\n\nexport class VaultComponent implements IComponent, ITabInfo {\n    public readonly name: string = 'Vault';\n\n    public computeUserPathMatchDepth(path: string) {\n        return computeUserPathMatchDepth(path);\n    }\n\n    public getTabButton(): HTMLButtonElement {\n        return btnTabVault;\n    }\n\n    public getTabContent(): HTMLElement {\n        return divTabVault;\n    }\n\n    public onTabSelected(): void {\n        storageOutputComponent.hide();\n        tabs[subTabs.activeTabIndex].onTabSelected();\n    }\n\n    public init(): void {\n        setupFeedbackButton(btnRefreshVault, onRefreshVaultButtonClick);\n        btnClearVaultSettings.addEventListener('click', onClearVaultSettingsButtonClick);\n\n        const vaultService = new VaultService(this);\n        serviceManager.registerService('vault', vaultService);\n\n        let component: IComponent;\n        for (component of components) {\n            component.init();\n        }\n    }\n}\n","import { getElementById } from '../ui';\nimport { TabControl, ITabInfo } from '../TabControl';\n\nimport { IComponent } from './IComponent';\nimport { PrivatePartComponent } from './privatePartComponent';\nimport { PasswordComponent } from './passwordComponent';\nimport { CipherComponent } from './cipherComponent';\nimport { ReEncryptComponent } from './reEncryptComponent';\nimport { VaultComponent } from './vaultComponent';\n\nimport * as storageOutputComponent from './storageOutputComponent';\n\nconst nothingTabInfo: ITabInfo = {\n    getTabButton(): HTMLButtonElement {\n        return getElementById('btnTabNothing') as HTMLButtonElement;\n    },\n    getTabContent(): HTMLElement {\n        return getElementById('divTabNothing');\n    },\n    onTabSelected(): void {\n        storageOutputComponent.hide();\n    }\n}\n\nconst elements: any[] = [\n    nothingTabInfo,\n    new PrivatePartComponent(),\n    new PasswordComponent(),\n    new CipherComponent(),\n    new ReEncryptComponent(),\n    new storageOutputComponent.StorageOutputComponent(),\n    new VaultComponent(),\n];\n\nconst tabs: ITabInfo[] = elements.filter(e => (e as ITabInfo).getTabButton !== undefined);\nconst components: IComponent[] = elements.filter(e => (e as IComponent).init !== undefined);\n\nconst tabControl = new TabControl(tabs);\n\nexport class RootComponent implements IComponent {\n    public readonly name: string = 'Root';\n\n    public constructor() {\n    }\n\n    public init(): void {\n        let component: IComponent;\n        for (component of components) {\n            component.init();\n        }\n    }\n\n    public getActiveComponent(): IComponent | null {\n        const component = tabs[tabControl.activeTabIndex] as any;\n\n        if (component.init !== undefined) {\n            return component as IComponent;\n        }\n\n        return null;\n    }\n}\n\nexport const rootComponent = new RootComponent();\n","import { getElementById } from './ui';\nimport { rootComponent } from './components/rootComponent';\n\ndeclare const COMMITHASH: string;\n\nconst version = COMMITHASH.substr(0, 11);\nconst githubLink = '<a href=\"https://github.com/TanukiSharp/ItchyPassword\" target=\"_blank\">github</a>';\n\ngetElementById('divInfo').innerHTML = `${version}<br/>${githubLink}`;\n\nrootComponent.init();\n"],"sourceRoot":""}