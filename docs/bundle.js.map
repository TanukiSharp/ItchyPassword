{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/ui.ts","webpack:///./src/TabControl.ts","webpack:///./src/components/privatePartComponent.ts","webpack:///./src/TimedAction.ts","webpack:///./src/arrayUtils.ts","webpack:///./src/asyncUtils.ts","webpack:///./src/crypto.ts","webpack:///./src/stringUtils.ts","webpack:///./src/PlainObject.ts","webpack:///./src/services/serviceManger.ts","webpack:///./src/storages/GitHubVaultStorage.ts","webpack:///./src/ciphers/v2.ts","webpack:///./src/components/cipherComponent.ts","webpack:///./src/storages/SecureLocalStorage.ts","webpack:///./src/components/storageOutputComponent.ts","webpack:///./src/services/passwordService.ts","webpack:///./src/components/passwordComponent.ts","webpack:///./src/passwordGenerators/v1.ts","webpack:///./src/ciphers/v1.ts","webpack:///./src/components/reEncryptComponent.ts","webpack:///./src/components/vaultComponents/TreeNode.ts","webpack:///./src/components/vaultComponents/treeViewComponent.ts","webpack:///./src/searchMatchFunctions.ts","webpack:///./src/components/vaultComponents/textViewComponent.ts","webpack:///./src/services/vaultService.ts","webpack:///./src/components/vaultComponent.ts","webpack:///./src/components/rootComponent.ts","webpack:///./src/index.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","getElementById","elementName","element","document","Error","async","writeToClipboard","text","navigator","clipboard","writeText","error","console","stack","clearText","txt","refocus","focus","setupFeedbackButton","button","action","throttleTimeout","clearFunc","duration","timeout","undefined","start","clearTimeout","end","setTimeout","createThrottleTimeout","classList","remove","clickFunction","disabled","actionResult","result","Promise","add","message","addEventListener","setupCopyButton","showHide","isVisible","style","removeProperty","setProperty","showHideMany","elements","TabControl","tabs","_activeTabIndex","this","length","getTabButton","setActiveTab","index","activeTabIndex","tabInfo","getTabContent","onTabSelected","btnProtectTitleForProtect","txtPrivatePart","txtPrivatePartConfirmation","btnProtect","spnProtectedConfirmation","spnPrivatePartSize","spnPrivatePartSizeConfirmation","onChangedHandlers","getPrivatePart","protectAndLockPrivatePart","innerHTML","title","updatePrivatePartsMatching","togglePrivatePartProtection","onProtectButtonClick","protectPrivatePartAction","delay","overrideDelay","onPrivatePartTextInput","onChangedHandler","toString","reset","onPrivatePartConfirmationTextInput","arrayBufferToUnsignedBigInt","arrayBuffer","buffer","byteLength","headeredBuffer","Uint8Array","set","createHeaderedBuffer","arrayView","DataView","multiplier","BigInt","getUint8","toCustomBaseOneWay","bytes","alphabet","alphabetLength","number","arrayBufferToUnsignedBigIntWithoutHeader","remainder","asUintN","fromCustomBase","input","indexOf","byteValue","Number","push","totalLength","diff","slice","unsignedBigIntToArrayBuffer","TaskCancelledError","super","_name","ERROR_NAME","setPrototypeOf","CancellationTokenSource","_isCancelled","_token","CancellationToken","source","_none","isCancelled","ensureNotCancelled","cancellationToken","BASE62_ALPHABET","getDerivedBytes","password","salt","baseKey","window","crypto","subtle","importKey","algorithm","hash","iterations","deriveKey","exportKey","generateRandomString","byteCount","array","getRandomValues","generateRandomBytes","truncate","substr","stringToArray","str","TextEncoder","encode","isPlainObject","constructor","objectDeepSort","output","entries","sort","a","b","localeCompare","services","getService","serviceName","TypeError","service","registerService","instance","GitHubVaultStorageBase","secureLocalStorage","token","oneTimePassword","currentVaultContentHash","username","repositoryName","vaultFilename","removeItem","LOCAL_STORAGE_KEY_USERNAME","LOCAL_STORAGE_KEY_REPO","LOCAL_STORAGE_KEY_FILENAME","AUTH_TOKEN_KEY_NAME","method","authHeader","body","headers","JSON","stringify","relativeUrl","BASE_URL","retryOnUnauthorized","url","constructUrl","requestInfo","constructFetchRequest","response","fetch","status","prompt","request","promptText","defaultValue","localStorage","getItem","setItem","URL","location","defaultAccountUsername","defaultRepo","hostname","pathElements","pathname","split","getSetVaultParameter","resolve","getToken","ensureVaultParameters","ensureToken","constructVaultFileUrl","constructTokenAuthString","warn","ok","getVaultContent","responseContent","json","sha","atob","content","newContent","updateMessage","btoa","GitHubPersonalAccessTokenVaultStorage","authToken","basicAuthHeader","authorizationName","clear","LOCAL_STORAGE_KEY_PASSWORD_PUBLIC","LOCAL_STORAGE_KEY_PASSWORD_LENGTH","LOCAL_STORAGE_KEY_BROWSER_NAME","log","authorization","id","scopes","note","authorizations","app","getUsername","passwordPublicPart","passwordLengthString","passwordLength","parseInt","isSafeInteger","none","constructBasicAuthString","browserName","AUTHORIZATION_NAME","listAuthorizations","findAuthorization","deleteAuthorization","createAuthorization","ArrayBuffer","nonce","passwordSalt","aesGcmParams","iv","passwordKey","encrypt","payload","derivedKey","decrypt","RESERVED_KEYS","btnTabCiphers","divTabCiphers","cipher","txtCipherName","txtCipherSource","txtCipherTarget","btnEncrypt","btnDecrypt","btnClearCipherSource","btnCopyCipherTarget","btnClearCipherTarget","clearSourceVisualCue","setSourceVisualCueError","clearAllVisualCues","setCipherTargetValue","updateCipherParameters","version","encryptString","privatePart","encrypted","decryptString","decrypted","TextDecoder","decode","isMatching","rethrowCancelled","onEncryptButtonClick","encryptedString","onDecryptButtonClick","decryptedString","encryptedItem","divStorageOutput","txtPath","lblMatchingPath","txtParameters","btnPushToVault","txtCustomKeys","_parameterKeys","_parameterPath","_reservedKeys","vaultStorage","onPathTextInput","depth","computeUserPathMatchDepth","matchingPath","path","position","createMatchingPath","innerText","updateMatchingPath","update","onCustomKeysTextInput","chainInfo","pathToObjectChain","separatorIndex","tail","firstPath","remainingPath","node","head","tailParent","leaf","customKeys","obj","parse","parseCustomKeys","resultParameters","target","reservedKeys","includes","shallowMerge","keys","pushToVault","vaultContentData","newData","vaultContent","deepMerge","sourceKey","targetValue","sourceValue","activeComponent","rootComponent","getActiveComponent","componentName","toLowerCase","fullPath","chars","findNonCharFromStart","findNonCharFromEnd","substring","generateUpdateMessage","newVaultContentData","setVaultContent","clearOutputs","setParameters","parameterKeys","parameterPath","show","hide","publicPart","keyString","Math","max","btnTabPasswords","divTabPasswords","passwordGenerator","hkdfPurpose","_description","hkdfKey","sign","txtPublicPart","spnPublicPartSize","btnGeneratePublicPart","btnClearPublicPart","btnCopyPublicPart","btnShowHidePasswordOptionalFeatures","lblAlphabetLength","numOutputSizeRange","numOutputSizeNum","lblAlphabet","txtAlphabet","spnAlphabetSize","divPasswordAlphabetActions","btnResetAlphabet","txtResultPassword","spnResultPasswordLength","btnViewResultPassword","btnCopyResultPassword","lblGeneratingPassword","DEFAULT_LENGTH","DEFAULT_ALPHABET","passwordPublicPartLastChange","copyPasswordFunction","onClearPublicPartButtonClick","updatePublicPartSize","updatePasswordPublicPartLastUpdate","updatePasswordGenerationParameters","onGeneratePublicPartButtonClick","randomString","run","Date","toISOString","updateResultPasswordLength","sortedAlphabet","canRun","passwordParamters","public","datetime","numericValue","updateOutputSizeRangeToNum","onOutputSizeRangeInput","onOutputSizeNumInput","min","val","isNaN","updateOutputSizeNumToRange","updateAlphabetSize","updateAlphabetValidityDisplay","isAlphabetValid","onAlphabetTextInput","isAlphabetValidResult","onResetAlphabetButtonClick","resetAlphabet","generatePasswordString","privatePrivateBytes","publicPartBytes","generatePassword","passwordTaskRunner","currentTokenSource","currentTask","microThreadId","throwTaskCanceledError","MAX_SAFE_INTEGER","localMicroThreadId","cancel","cancelInternal","taskFactory","localToken","cancelAndExecute","runCore","onPublicPartTextInput","encryptionKeyDerivationSalt","ciphers","btnTabReEncrypt","divTabReEncrypt","txtReEncryptSource","txtReEncryptTarget","cboReEncryptFrom","cboReEncryptTo","btnReEncrypt","btnClearReEncryptSource","btnCopyReEncryptTarget","btnClearReEncryptTarget","fillCipherComboBox","cbo","initialValue","item","createElement","childNodes","description","onReEncryptButtonClick","sourceCipherIndex","targetCipherIndex","reEncrypted","Array","map","x","join","parent","factory","children","titleElement","isHint","isCipher","isPassword","verticalLineElement","isLeaf","isCiphersObject","isCipherObject","isPasswordObject","rootElement","setRootElementStyle","context","createTreeNodeTitleElement","appendChild","setTitleElementStyle","childrenContainerElement","setChildrenContainerElementStyle","childKey","childValue","child","addChild","setupLinesElements","display","visibleChildCount","visibleLeafCount","getVisibleLeafCount","sub","values","height","childrenOffset","gridTemplateRows","gridTemplateColumns","color","gridColumn","gridRow","width","borderRight","horizontalLineElement","borderBottom","updateLines","getVisibleChildCount","totalVisibleLeafCount","bottomPosition","marginLeft","deepMode","resetTitle","backgroundColor","borderRadius","markers","root","pos","marker","createSpan","len","searchText","matchFunction","createColoredSpan","filter","btnTabVaultTabTreeView","divTabVaultTabTreeView","trvVaultTreeView","txtVaultTreeViewSearch","cboVaultTreeViewSearchType","rootTreeNode","searchMatchFunctionDescriptions","function","lhs","rhs","indexedAggresiveSearchMatchFunction","lhsIndex","subWord","foundPos","onSearchVaultInputChanged","selectedIndex","searchMatchFunction","toLocaleLowerCase","passwordService","generateAndCopyPasswordToClipboard","justifySelf","minWidth","btnTabVaultTabTextView","divTabVaultTabTextView","txtVault","VaultService","vaultComponent","divTabVault","btnTabVault","btnRefreshVault","btnClearVaultSettings","vault","option","populateSearchFunctions","e","components","init","subTabs","vaultObject","onRefreshVaultButtonClick","alert","component","onVaultLoaded","reloadVault","onClearVaultSettingsButtonClick","onChanged","type","startVisible","pathArray","vaultService","tabControl"],"mappings":"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","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","export const SUCCESS_COLOR: string = '#D0FFD0';\nexport const ERROR_COLOR: string = '#FFD0D0';\n\nexport function getElementById(elementName: string): HTMLElement {\n    const element: HTMLElement|null = document.getElementById(elementName);\n\n    if (elementName === null) {\n        throw new Error(`DOM element '${elementName}' not found.`);\n    }\n\n    return element as HTMLElement;\n}\n\nexport async function writeToClipboard(text: string): Promise<boolean> {\n    try {\n        await navigator.clipboard.writeText(text);\n        return true;\n    } catch (error) {\n        console.error(error.stack || error);\n        return false;\n    }\n}\n\nexport function clearText(txt: HTMLInputElement, refocus: boolean = false): void {\n    txt.value = '';\n    if (refocus) {\n        txt.focus();\n    }\n}\n\ninterface ThrottleTimeout {\n    start: Function;\n    end: Function;\n}\n\nfunction createThrottleTimeout(clearFunc: Function, duration: number): ThrottleTimeout {\n    let timeout: number | undefined = undefined;\n\n    return {\n        start: () => {\n            if (timeout !== undefined) {\n                clearTimeout(timeout);\n                timeout = undefined;\n            }\n            clearFunc();\n        },\n        end: () => {\n            if (timeout !== undefined) {\n                clearTimeout(timeout);\n            }\n            timeout = setTimeout(clearFunc, duration);\n        }\n    };\n}\n\nexport type FeedbackButtonAsyncFunction = () => Promise<boolean> | boolean | Promise<void> | void;\n\nexport function setupFeedbackButton(button: HTMLButtonElement, action: FeedbackButtonAsyncFunction): () => void {\n    const throttleTimeout: ThrottleTimeout = createThrottleTimeout(() => {\n        button.classList.remove('good-flash');\n        button.classList.remove('bad-flash');\n    }, 1000);\n\n    const clickFunction = async () => {\n        button.disabled = true;\n        throttleTimeout.start();\n\n        try {\n            const actionResult = action();\n\n            let result;\n            if (actionResult instanceof Promise) {\n                result = await actionResult;\n            } else {\n                result = actionResult;\n            }\n\n            if (result === undefined || result === true) {\n                button.classList.add('good-flash');\n            } else {\n                button.classList.add('bad-flash');\n            }\n        } catch (error) {\n            button.classList.add('bad-flash');\n            console.error(error.message || error);\n        } finally {\n            throttleTimeout.end();\n            button.disabled = false;\n        }\n    };\n\n    button.addEventListener('click', clickFunction);\n\n    return clickFunction;\n}\n\nexport function setupCopyButton(txt: HTMLInputElement, button: HTMLButtonElement): () => void {\n    return setupFeedbackButton(button, () => writeToClipboard(txt.value));\n}\n\nexport function setupViewButton(txt: HTMLInputElement, button: HTMLButtonElement): void {\n    button.addEventListener('click', () => {\n        if (txt.type === 'password') {\n            txt.type = 'input';\n            button.innerHTML = 'Hide';\n        } else {\n            txt.type = 'password';\n            button.innerHTML = 'View';\n        }\n    });\n}\n\nexport function showHide(element: HTMLElement, isVisible: boolean): void {\n    if (isVisible) {\n        element.style.removeProperty('display');\n    } else {\n        element.style.setProperty('display', 'none');\n    }\n}\n\nexport function showHideMany(elements: HTMLElement[], isVisible: boolean): void {\n    for (const element of elements) {\n        showHide(element, isVisible);\n    }\n}\n\nexport function setupShowHideButton(button: HTMLButtonElement, startVisible: boolean, elements: HTMLElement[]): void {\n    let isVisible = startVisible;\n    button.addEventListener('click', function () {\n        isVisible = !isVisible;\n        showHideMany(elements, isVisible);\n    });\n    showHideMany(elements, isVisible);\n}\n","export interface ITabInfo {\n    getTabButton(): HTMLButtonElement;\n    getTabContent(): HTMLElement;\n    onTabSelected(): void;\n}\n\nexport class TabControl {\n    private _activeTabIndex: number = -1;\n\n    public get activeTabIndex(): number {\n        return this._activeTabIndex;\n    }\n\n    public set activeTabIndex(index: number) {\n        if (index < 0 || index >= this.tabs.length) {\n            throw new Error(`Argument 'index' out of range. Must be in range [0;${this.tabs.length - 1}].`);\n        }\n        this.setActiveTab(index);\n    }\n\n    public constructor(private tabs: ITabInfo[]) {\n        for (let i = 0; i < this.tabs.length; i += 1) {\n            tabs[i].getTabButton().addEventListener('click', () => {\n                this.setActiveTab(i);\n            });\n        }\n\n        this.setActiveTab(0);\n    }\n\n    private setActiveTab(activeTabIndex: number) {\n        if (activeTabIndex === this._activeTabIndex) {\n            return;\n        }\n\n        let tabInfo: ITabInfo;\n\n        for (tabInfo of this.tabs) {\n            const button = tabInfo.getTabButton();\n            button.style.removeProperty('font-weight');\n            button.style.setProperty('color', '#C0C0C0');\n\n            tabInfo.getTabContent().style.setProperty('display', 'none');\n        }\n\n        const button = this.tabs[activeTabIndex].getTabButton();\n        button.style.setProperty('font-weight', 'bold');\n        button.style.removeProperty('color');\n\n        this.tabs[activeTabIndex].getTabContent().style.removeProperty('display');\n\n        this._activeTabIndex = activeTabIndex;\n\n        this.tabs[activeTabIndex].onTabSelected();\n    }\n}\n","import * as ui from '../ui';\n\nimport { TimedAction } from '../TimedAction';\nimport { IComponent } from './IComponent';\n\nconst btnProtectTitleForProtect = 'Stores the string in memory and removes it from the UI component. Prevents a physical intruder from copy/pasting the value.';\nconst btnProtectTitleForClear = 'Removes the string form memory and re-enables the UI component.';\n\nconst txtPrivatePart = ui.getElementById('txtPrivatePart') as HTMLInputElement;\nconst txtPrivatePartConfirmation = ui.getElementById('txtPrivatePartConfirmation') as HTMLInputElement;\nconst btnProtect = ui.getElementById('btnProtect') as HTMLButtonElement;\nconst spnProtectedConfirmation = ui.getElementById('spnProtectedConfirmation');\n\nconst spnPrivatePartSize = ui.getElementById('spnPrivatePartSize');\nconst spnPrivatePartSizeConfirmation = ui.getElementById('spnPrivatePartSizeConfirmation');\n\nconst PRIVATE_PART_PROTECTION_TIMEOUT: number = 60 * 1000;\n\nlet privatePart: string | undefined;\n\nconst onChangedHandlers: (() => void)[] = [];\n\nexport function registerOnChanged(onChanged: () => void) {\n    onChangedHandlers.push(onChanged);\n}\n\nexport function hasPrivatePart(): boolean {\n    return getPrivatePart().length > 0;\n}\n\nexport function getPrivatePart(): string {\n    if (privatePart !== undefined) {\n        return privatePart;\n    }\n    return txtPrivatePart.value;\n}\n\nfunction protectAndLockPrivatePart(): void {\n    if (txtPrivatePart.value.length === 0) {\n        return;\n    }\n\n    privatePart = txtPrivatePart.value;\n    spnProtectedConfirmation.innerHTML = 'Protected';\n\n    ui.clearText(txtPrivatePart);\n\n    ui.clearText(txtPrivatePartConfirmation);\n    spnPrivatePartSize.innerHTML = '0';\n    spnPrivatePartSizeConfirmation.innerHTML = '0';\n\n    txtPrivatePart.disabled = true;\n    txtPrivatePartConfirmation.disabled = true;\n\n    btnProtect.innerHTML = 'Clear and unlock';\n    btnProtect.title = btnProtectTitleForClear;\n\n    updatePrivatePartsMatching();\n}\n\nfunction clearAndUnLockPrivatePart(): void {\n    privatePart = undefined;\n    spnProtectedConfirmation.innerHTML = '';\n\n    txtPrivatePart.disabled = false;\n    txtPrivatePartConfirmation.disabled = false;\n\n    btnProtect.innerHTML = 'Protect and lock';\n    btnProtect.title = btnProtectTitleForProtect;\n    btnProtect.disabled = true;\n}\n\nfunction togglePrivatePartProtection(): void {\n    if (privatePart === undefined) {\n        protectAndLockPrivatePart();\n    } else {\n        clearAndUnLockPrivatePart();\n    }\n}\n\nfunction onProtectButtonClick() {\n    togglePrivatePartProtection();\n}\n\nconst protectPrivatePartAction: TimedAction = new TimedAction(protectAndLockPrivatePart, PRIVATE_PART_PROTECTION_TIMEOUT);\n\nfunction onPrivatePartTextInput(): void {\n    btnProtect.disabled = txtPrivatePart.value.length === 0;\n\n    spnPrivatePartSize.innerHTML = txtPrivatePart.value.length.toString();\n    updatePrivatePartsMatching();\n\n    let onChangedHandler: () => void;\n    for (onChangedHandler of onChangedHandlers) {\n        onChangedHandler();\n    }\n\n    protectPrivatePartAction.reset();\n}\n\nfunction updatePrivatePartsMatching(): void {\n    if (txtPrivatePartConfirmation.value === txtPrivatePart.value) {\n        txtPrivatePartConfirmation.style.setProperty('background', ui.SUCCESS_COLOR);\n    } else {\n        txtPrivatePartConfirmation.style.setProperty('background', ui.ERROR_COLOR);\n    }\n};\n\nfunction onPrivatePartConfirmationTextInput(): void {\n    spnPrivatePartSizeConfirmation.innerHTML = txtPrivatePartConfirmation.value.length.toString();\n    protectPrivatePartAction.reset();\n    updatePrivatePartsMatching();\n}\n\nexport class PrivatePartComponent implements IComponent {\n    public readonly name: string = 'PrivatePart';\n\n    init(): void {\n        btnProtect.addEventListener('click', onProtectButtonClick);\n        txtPrivatePart.addEventListener('input', onPrivatePartTextInput);\n        txtPrivatePartConfirmation.addEventListener('input', onPrivatePartConfirmationTextInput);\n\n        updatePrivatePartsMatching();\n        btnProtect.title = btnProtectTitleForProtect;\n        txtPrivatePart.focus();\n    }\n}\n","export class TimedAction {\n    private timeout: number | undefined;\n    public constructor(private action: Function, private delay: number) {\n    }\n\n    public reset(overrideDelay: number | undefined = undefined): void {\n        if (this.timeout !== undefined) {\n            clearTimeout(this.timeout);\n        }\n\n        const delay = overrideDelay !== undefined ? overrideDelay : this.delay;\n\n        this.timeout = setTimeout(() => {\n            this.action();\n            this.timeout = undefined;\n        }, delay);\n    }\n}\n","export function arrayToString(array: ArrayBuffer): string {\n    const decoder = new TextDecoder(/*'utf-8'*/);\n    return decoder.decode(array);\n};\n\nexport function copy(source: Uint8Array, sourceIndex: number, target: Uint8Array, targetIndex: number, length: number): void {\n    for (let i: number = 0; i < length; i += 1) {\n        target[i + targetIndex] = source[i + sourceIndex];\n    }\n}\n\nfunction createHeaderedBuffer(buffer: ArrayBuffer): ArrayBuffer {\n    if (buffer.byteLength > 0xFFFF) {\n        throw new Error(`Buffer too large: ${buffer.byteLength} bytes`);\n    }\n\n    let length = buffer.byteLength;\n    const headeredBuffer: Uint8Array = new Uint8Array(2 + buffer.byteLength);\n\n    for (let i: number = 0; i < 2; i += 1) {\n        headeredBuffer[i] = length % 256;\n        length /= 256;\n    }\n\n    headeredBuffer.set(new Uint8Array(buffer), 2);\n\n    return headeredBuffer.buffer;\n}\n\nfunction arrayBufferToUnsignedBigIntWithoutHeader(arrayBuffer: ArrayBuffer): bigint {\n    const length: number = arrayBuffer.byteLength;\n    const arrayView: DataView = new DataView(arrayBuffer, 0);\n\n    let result: bigint = 0n;\n    let multiplier: bigint = 1n;\n\n    for (let i: number = 0; i < length; i += 1) {\n        result += BigInt(arrayView.getUint8(i)) * multiplier;\n        multiplier *= 256n;\n    }\n\n    return result;\n}\n\nfunction arrayBufferToUnsignedBigInt(arrayBuffer: ArrayBuffer): bigint {\n    arrayBuffer = createHeaderedBuffer(arrayBuffer);\n\n    const length: number = arrayBuffer.byteLength;\n    const arrayView: DataView = new DataView(arrayBuffer, 0);\n\n    let result: bigint = 0n;\n    let multiplier: bigint = 1n;\n\n    for (let i: number = 0; i < length; i += 1) {\n        result += BigInt(arrayView.getUint8(i)) * multiplier;\n        multiplier *= 256n;\n    }\n\n    return result;\n}\n\nexport function unsignedBigIntToArrayBuffer(number: bigint): ArrayBuffer {\n    const result: Array<number> = [];\n\n    while (number > 0n)\n    {\n        const remainder: bigint = number % 256n;\n        number /= 256n;\n\n        const byteValue: number = Number(<any>BigInt.asUintN(8, remainder));\n\n        result.push(byteValue);\n    }\n\n    let totalLength: number = result[0];\n    if (result.length > 1) { // For case where original buffer is of length 1 and contains 0.\n        totalLength += result[1] * 256;\n    }\n\n    // The varable 'result' contains 2 bytes of size header.\n    const diff = totalLength - (result.length - 2);\n\n    for (let i: number = 0; i < diff; i += 1) {\n        result.push(0);\n    }\n\n    return new Uint8Array(result.slice(2)).buffer;\n}\n\n// This is a one way encoding in the sense that decoding is not always deterministic.\n// This can be used to generate strings where decoding it doesn't matter.\nexport function toCustomBaseOneWay(bytes: ArrayBuffer, alphabet: string): string {\n    const alphabetLength: bigint = BigInt(alphabet.length);\n\n    let result: string = '';\n    let number: bigint = arrayBufferToUnsignedBigIntWithoutHeader(bytes);\n\n    while (number > 0n)\n    {\n        const remainder: bigint = number % alphabetLength;\n        number /= alphabetLength;\n\n        const index: number = <number><any>BigInt.asUintN(8, remainder);\n\n        result += alphabet[index];\n    }\n\n    return result;\n}\n\nexport function toCustomBase(bytes: ArrayBuffer, alphabet: string): string {\n    const alphabetLength: bigint = BigInt(alphabet.length);\n\n    let result: string = '';\n    let number: bigint = arrayBufferToUnsignedBigInt(bytes);\n\n    while (number > 0n)\n    {\n        const remainder: bigint = number % alphabetLength;\n        number /= alphabetLength;\n\n        const index: number = <number><any>BigInt.asUintN(8, remainder);\n\n        result += alphabet[index];\n    }\n\n    return result;\n}\n\nexport function fromCustomBase(input: string, alphabet: string): ArrayBuffer {\n    const alphabetLength: bigint = BigInt(alphabet.length);\n\n    let number: bigint = 0n;\n    let multiplier: bigint = 1n;\n\n    for (let i: number = 0; i < input.length; i += 1) {\n        const value: bigint = BigInt(alphabet.indexOf(input[i]));\n\n        number += value * multiplier;\n        multiplier *= alphabetLength;\n    }\n\n    return unsignedBigIntToArrayBuffer(number);\n}\n\nexport function toBase16(buffer: ArrayBuffer): string {\n    return Array.prototype.map.call(\n        new Uint8Array(buffer),\n        x => ('00' + x.toString(16)).slice(-2)\n    ).join('');\n}\n","export class TaskCancelledError extends Error {\n    private _name: string;\n\n    public get name(): string {\n        return this._name;\n    }\n\n    constructor(message?: string) {\n        super(message);\n        this._name = TaskCancelledError.ERROR_NAME;\n        Object.setPrototypeOf(this, new.target.prototype);\n    }\n\n    public static readonly ERROR_NAME: string = 'TaskCancelledError';\n\n    public static isMatching(error: Error) {\n        return error && error.name === TaskCancelledError.ERROR_NAME;\n    }\n}\n\nexport class CancellationTokenSource {\n    private _isCancelled: boolean = false;\n    private _token: CancellationToken;\n\n    constructor() {\n        this._token = new CancellationToken(this);\n    }\n\n    public get isCancelled(): boolean {\n        return this._isCancelled;\n    }\n\n    public get token(): CancellationToken {\n        return this._token;\n    }\n\n    public cancel(): void {\n        this._isCancelled = true;\n    }\n}\n\nexport class CancellationToken {\n    private static readonly _none: CancellationToken = new CancellationToken(new CancellationTokenSource());\n    public static get none(): CancellationToken {\n        return CancellationToken._none;\n    }\n\n    constructor(private source: CancellationTokenSource) {\n    }\n\n    public get isCancelled(): boolean {\n        return this.source.isCancelled;\n    }\n}\n\nexport function ensureNotCancelled(cancellationToken: CancellationToken): void {\n    if (cancellationToken.isCancelled) {\n        throw new TaskCancelledError();\n    }\n}\n\nexport function rethrowCancelled(error: Error): void {\n    if (TaskCancelledError.isMatching(error)) {\n        throw error;\n    }\n}\n\nexport type TaskFactory<T> = (cancellationToken: CancellationToken) => Promise<T>;\n\n// Manages the lifetime of a single task, and automatically cancels the previous when running a new one.\n// It also awaits for previous task to be fully terminated before running the new one.\nexport class TaskRunner<TValue> {\n    private currentTokenSource: CancellationTokenSource | null = null;\n    private currentTask: Promise<TValue | undefined> | null = null;\n    private microThreadId: number = 0;\n\n    // Gets a value indicating whether a task is currently running or not.\n    public get isRunning(): boolean {\n        return this.currentTask !== null;\n    }\n\n    // Cancels the currently running task, if any.\n    // Returns true if no one called cancelInternal() when it returns.\n    private async cancelInternal(throwTaskCanceledError: boolean): Promise<boolean> {\n        if (this.microThreadId === Number.MAX_SAFE_INTEGER) {\n            this.microThreadId = 0;\n        } else {\n            this.microThreadId = this.microThreadId + 1;\n        }\n\n        const localMicroThreadId: number = this.microThreadId;\n\n        // This corresponds to the end of cancelAndExecute().\n        if (this.currentTask === null) {\n            return true;\n        }\n\n        if (this.currentTokenSource !== null) {\n            this.currentTokenSource.cancel();\n\n            // The above currentTokenSource.cancel() can run the finally block of cancelAndExecute() and set currentTask to null.\n            if (this.currentTask !== null) {\n                try {\n                    await this.currentTask;\n                } catch (error) {\n                    if (TaskCancelledError.isMatching(error)) {\n                        if (throwTaskCanceledError) {\n                            throw error;\n                        }\n                    } else {\n                        throw error;\n                    }\n                }\n            }\n        }\n\n        return localMicroThreadId === this.microThreadId;\n    }\n\n    // Cancels the currently running task, if any.\n    // throwTaskCanceledError: Pass true allow to throw a TaskCancelledError.\n    // Returns a Promise that completes when the current job is fully cancelled.\n    public async cancel(throwTaskCanceledError: boolean = false): Promise<void> {\n        await this.cancelInternal(throwTaskCanceledError);\n    }\n\n    // Cancels the current task if any, and runs a new one.\n    // T: Type of value returned by the task to run.\n    // taskFactory: A task producer that receives a CancellationToken.\n    // throwTaskCanceledError: Pass true allow to throw a TaskCancelledError.\n    // Returns the task produced by the taskFactory.\n    public async cancelAndExecute(taskFactory: TaskFactory<TValue>, throwTaskCanceledError: boolean = false): Promise<TValue | undefined> {\n        if (await this.cancelInternal(throwTaskCanceledError) === false) {\n            if (throwTaskCanceledError === false) {\n                return undefined;\n            }\n            throw new TaskCancelledError();\n        }\n\n        var localToken = new CancellationTokenSource();\n        this.currentTokenSource = localToken;\n\n        try {\n            this.currentTask = taskFactory(this.currentTokenSource.token);\n            return await this.currentTask;\n        } catch (error) {\n            if (TaskCancelledError.isMatching(error) && throwTaskCanceledError === false) {\n                return undefined;\n            }\n            throw error;\n        } finally {\n            this.currentTask = null;\n        }\n    }\n}\n","import * as arrayUtils from './arrayUtils';\nimport { CancellationToken, ensureNotCancelled } from './asyncUtils';\n\nexport const BASE62_ALPHABET: string = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\n\nexport interface IPasswordGenerator {\n    readonly version: number;\n    readonly description: string;\n    generatePassword(privatePart: ArrayBuffer, publicPart: ArrayBuffer, cancellationToken: CancellationToken): Promise<ArrayBuffer>;\n}\n\nexport interface ICipher {\n    readonly version: number;\n    readonly description: string;\n    encrypt(input: ArrayBuffer, password: ArrayBuffer, cancellationToken: CancellationToken): Promise<ArrayBuffer>;\n    decrypt(input: ArrayBuffer, password: ArrayBuffer, cancellationToken: CancellationToken): Promise<ArrayBuffer>;\n}\n\nexport async function getDerivedBytes(password: ArrayBuffer, salt: ArrayBuffer, cancellationToken: CancellationToken): Promise<ArrayBuffer> {\n    const baseKey: CryptoKey = await window.crypto.subtle.importKey(\n        'raw',\n        password,\n        'PBKDF2',\n        false,\n        ['deriveKey']\n    );\n\n    ensureNotCancelled(cancellationToken);\n\n    const algorithm: Pbkdf2Params = {\n        name: 'PBKDF2',\n        hash: 'SHA-512',\n        iterations: 100000,\n        salt\n    };\n\n    const derivedKeyType: AesDerivedKeyParams = {\n        name: 'AES-CBC',\n        length: 256\n    };\n\n    const result: CryptoKey = await window.crypto.subtle.deriveKey(\n        algorithm,\n        baseKey,\n        derivedKeyType,\n        true,\n        ['encrypt']\n    );\n\n    ensureNotCancelled(cancellationToken);\n\n    const key: ArrayBuffer = await window.crypto.subtle.exportKey('raw', result);\n\n    ensureNotCancelled(cancellationToken);\n\n    return key;\n}\n\nexport function generateRandomBytes(byteCount: number = 64): ArrayBuffer {\n    const array: Uint8Array = new Uint8Array(byteCount);\n    return crypto.getRandomValues(array).buffer;\n}\n\nexport function generateRandomString(byteCount: number = 64, alphabet: string = BASE62_ALPHABET): string {\n    const array: ArrayBuffer = generateRandomBytes(byteCount);\n    return arrayUtils.toCustomBaseOneWay(array, alphabet);\n}\n","function findNonCharFromStart(value: string, chars: string[]): number {\n    for (let i = 0; i < value.length; i += 1) {\n        if (chars.includes(value[i]) === false) {\n            return i;\n        }\n    }\n\n    return value.length;\n}\n\nfunction findNonCharFromEnd(value: string, chars: string[]): number {\n    for (let i = value.length - 1; i >= 0; i -= 1) {\n        if (chars.includes(value[i]) === false) {\n            return i + 1;\n        }\n    }\n\n    return value.length;\n}\n\nexport function trim(value: string, ...chars: string[]): string {\n    const start: number = findNonCharFromStart(value, chars);\n    const end: number = findNonCharFromEnd(value, chars);\n\n    return value.substring(start, end);\n}\n\nexport function truncate(input: string, length: number): string {\n    if (input.length <= length) {\n        return input;\n    }\n\n    return input.substr(0, length);\n}\n\nexport function stringToArray(str: string): ArrayBuffer {\n    const encoder = new TextEncoder(/*'utf-8'*/);\n    return encoder.encode(str).buffer;\n}\n\nexport function fromBase16(str: string): ArrayBuffer {\n    if (str.length % 2 !== 0) {\n        str = '0' + str;\n    }\n\n    const result: Uint8Array = new Uint8Array(str.length / 2);\n\n    for (let i = 0; i < result.byteLength; i += 1) {\n        result[i] = parseInt(str.substr(i * 2, 2), 16);\n    }\n\n    return result.buffer;\n}\n","export type PlainObject = { [key: string]: any };\n\nexport function isPlainObject(value: any): boolean {\n    return value !== undefined &&\n        value !== null &&\n        value.hasOwnProperty('constructor') === false &&\n        value.constructor.name === 'Object';\n}\n\nexport function objectDeepSort(object: PlainObject): PlainObject {\n    const output: PlainObject = {};\n\n    for (const [key, value] of Object.entries(object).sort((a, b) => a[0].localeCompare(b[0]))) {\n        output[key] = isPlainObject(value) ? objectDeepSort(value) : value;\n    }\n\n    return output;\n}\n","type ServiceContainer = { [key: string]: any };\n\nconst services: ServiceContainer = {};\n\nexport function listServices(): string[] {\n    return Object.keys(services);\n}\n\nexport function getService(serviceName: string): any {\n    if (!serviceName) {\n        throw new TypeError(`Argument 'serviceName' is mandatory.`);\n    }\n\n    const service = services[serviceName];\n\n    if (service === undefined) {\n        throw new Error(`Service '${serviceName}' is not registered.`);\n    }\n\n    return service;\n}\n\nexport function registerService(serviceName: string, instance: any): void {\n    if (!serviceName) {\n        throw new TypeError(`Argument 'serviceName' is mandatory.`);\n    }\n    if (instance === undefined) {\n        throw new TypeError(`Argument 'instance' cannot be undefined.`);\n    }\n\n    if (services[serviceName] !== undefined) {\n        throw new Error(`Service '${serviceName}' is already registered.`);\n    }\n\n    services[serviceName] = instance;\n}\n","import * as passwordComponent from '../components/passwordComponent';\n\nimport { SecureLocalStorage } from './SecureLocalStorage';\nimport { IVaultStorage } from './IVaultStorage';\nimport { PlainObject } from '../PlainObject';\n\nimport { CancellationToken } from '../asyncUtils';\n\ninterface IApp {\n    name: string;\n}\n\ninterface IAuthorization {\n    id: number;\n    app: IApp;\n}\n\ninterface IGitHubContent {\n    sha: string;\n    content: string;\n}\n\nabstract class GitHubVaultStorageBase implements IVaultStorage {\n    static BASE_URL: string = 'https://api.github.com';\n    static AUTH_TOKEN_KEY_NAME: string = 'GitHubVaultStorageBase.AuthToken';\n\n    private token: string | null = null;\n    private oneTimePassword: string | null = null;\n    private currentVaultContentHash: string | null = null;\n\n    private username: string | null = null;\n    private repositoryName: string | null = null;\n    private vaultFilename: string | null = null;\n\n    static LOCAL_STORAGE_KEY_USERNAME: string = 'GitHubVaultStorageBase.Username';\n    static LOCAL_STORAGE_KEY_REPO: string = 'GitHubVaultStorageBase.Repository';\n    static LOCAL_STORAGE_KEY_FILENAME: string = 'GitHubVaultStorageBase.Filename';\n\n    protected getUsername(): string | null {\n        return this.username;\n    }\n\n    protected getRepositoryName(): string | null {\n        return this.repositoryName;\n    }\n\n    protected getVaultFilename(): string | null {\n        return this.vaultFilename;\n    }\n\n    public constructor(protected secureLocalStorage: SecureLocalStorage) {\n    }\n\n    public clear(): void {\n        this.secureLocalStorage.removeItem(GitHubApiVaultStorage.LOCAL_STORAGE_KEY_USERNAME);\n        this.secureLocalStorage.removeItem(GitHubApiVaultStorage.LOCAL_STORAGE_KEY_REPO);\n        this.secureLocalStorage.removeItem(GitHubApiVaultStorage.LOCAL_STORAGE_KEY_FILENAME);\n\n        this.secureLocalStorage.removeItem(GitHubVaultStorageBase.AUTH_TOKEN_KEY_NAME);\n    }\n\n    private constructTokenAuthString(): string {\n        return `token ${this.token}`;\n    }\n\n    private constructFetchRequest(method: string, authHeader: string, body: any): RequestInit {\n        const headers: PlainObject = {\n            'Accept': 'application/vnd.github.v3+json',\n            'Content-Type': 'application/json',\n            'Authorization': authHeader\n        };\n\n        if (this.oneTimePassword) {\n            headers['x-github-otp'] = this.oneTimePassword;\n        }\n\n        return {\n            method,\n            headers,\n            body: body ? JSON.stringify(body) : undefined\n        };\n    }\n\n    private constructUrl(relativeUrl: string): string {\n        return `${GitHubVaultStorageBase.BASE_URL}${relativeUrl}`;\n    }\n\n    protected async request(retryOnUnauthorized: boolean, method: string, relativeUrl: string, authHeader: string, body: any = undefined): Promise<Response | null> {\n        const url: string = this.constructUrl(relativeUrl);\n        const requestInfo: RequestInit = this.constructFetchRequest(method, authHeader, body);\n\n        let response: Response = await fetch(url, requestInfo);\n\n        if (response.status === 401 && retryOnUnauthorized) {\n            this.oneTimePassword = prompt('Input your 2FA code:');\n\n            if (!this.oneTimePassword) {\n                return null;\n            }\n\n            return await this.request(retryOnUnauthorized, method, relativeUrl, authHeader, body);\n        }\n\n        return response;\n    }\n\n    protected getSetVaultParameter(key: string, promptText: string, defaultValue?: string): string | null {\n        let value: string | null = window.localStorage.getItem(key);\n\n        if (value) {\n            return value;\n        }\n\n        value = prompt(promptText, defaultValue);\n\n        if (!value) {\n            return null;\n        }\n\n        window.localStorage.setItem(key, value);\n\n        return value;\n    }\n\n    protected ensureVaultParameters(): Promise<boolean> {\n        const url = new URL(window.location.toString());\n\n        let defaultAccountUsername = '';\n        let defaultRepo = '';\n\n        if (url.hostname === 'github.com') {\n            const pathElements = url.pathname.split('/');\n            if (pathElements.length >= 3) {\n                defaultAccountUsername = pathElements[1];\n                defaultRepo = `${pathElements[2]}Vault`;\n            }\n        }\n\n        const username = this.getSetVaultParameter(GitHubVaultStorageBase.LOCAL_STORAGE_KEY_USERNAME, 'GitHub account username:', defaultAccountUsername);\n        if (!username) {\n            return Promise.resolve(false);\n        }\n        this.username = username;\n\n        const repositoryName: string | null = this.getSetVaultParameter(GitHubVaultStorageBase.LOCAL_STORAGE_KEY_REPO, 'Vault GitHub repository name:', defaultRepo);\n        if (!repositoryName) {\n            return Promise.resolve(false);\n        }\n        this.repositoryName = repositoryName;\n\n        const vaultFilename: string | null = this.getSetVaultParameter(GitHubVaultStorageBase.LOCAL_STORAGE_KEY_FILENAME, 'Vault filename:', 'vault.json');\n        if (!vaultFilename) {\n            return Promise.resolve(false);\n        }\n        this.vaultFilename = vaultFilename;\n\n        return Promise.resolve(true);\n    }\n\n    protected abstract getToken(): Promise<string | null>;\n\n    private async ensureToken(): Promise<boolean> {\n        let token: string | null = await this.secureLocalStorage.getItem(GitHubVaultStorageBase.AUTH_TOKEN_KEY_NAME);\n\n        if (token === null) {\n            token = await this.getToken();\n        }\n\n        if (!token) {\n            return false;\n        }\n\n        await this.secureLocalStorage.setItem(GitHubVaultStorageBase.AUTH_TOKEN_KEY_NAME, token);\n\n        this.token = token;\n\n        return true;\n    }\n\n    private constructVaultFileUrl() {\n        return `/repos/${this.username}/${this.repositoryName}/contents/${this.vaultFilename}`;\n    }\n\n    public async getVaultContent(): Promise<string | null> {\n        if (await this.ensureVaultParameters() === false) {\n            return null;\n        }\n        if (await this.ensureToken() === false) {\n            return null;\n        }\n\n        const url: string = this.constructVaultFileUrl();\n        const response: Response | null = await this.request(false, 'GET', url, this.constructTokenAuthString());\n\n        if (response === null) {\n            console.warn('Fetching vault content aborted.');\n            return null;\n        }\n\n        if (response.ok === false) {\n            if (response.status === 401) {\n                this.secureLocalStorage.removeItem(GitHubVaultStorageBase.AUTH_TOKEN_KEY_NAME);\n                this.token = null;\n                this.oneTimePassword = null;\n\n                return await this.getVaultContent();\n            }\n\n            console.error(`Failed to fetch vault file '${this.vaultFilename}'.`, response);\n\n            return null;\n        }\n\n        const responseContent: IGitHubContent = await response.json();\n\n        this.currentVaultContentHash = responseContent.sha;\n\n        return atob(responseContent.content);\n    }\n\n    async setVaultContent(newContent: string, updateMessage: string): Promise<boolean> {\n        if (await this.ensureVaultParameters() === false) {\n            return false;\n        }\n        if (await this.ensureToken() === false) {\n            return false;\n        }\n\n        const body = {\n            message: updateMessage,\n            content: btoa(newContent),\n            sha: this.currentVaultContentHash\n        };\n\n        const url: string = this.constructVaultFileUrl();\n        const response: Response | null = await this.request(false, 'PUT', url, this.constructTokenAuthString(), body);\n\n        if (response === null) {\n            console.warn('Push new vault content aborted.');\n            return false;\n        }\n\n        const responseContent: any = await response.json();\n\n        if (response.ok === false) {\n            console.error(`Failed to create/update vault file '${this.vaultFilename}'.`, response, responseContent);\n            return false;\n        }\n\n        this.currentVaultContentHash = (responseContent.content as IGitHubContent).sha;\n\n        return true;\n    };\n}\n\n// ================================================================================================\n\nexport class GitHubPersonalAccessTokenVaultStorage extends GitHubVaultStorageBase {\n    protected getToken(): Promise<string | null> {\n        const authToken: string | null = prompt('Personal access token:');\n        return Promise.resolve(authToken);\n    }\n}\n\n// ================================================================================================\n\nexport class GitHubApiVaultStorage extends GitHubVaultStorageBase {\n    static AUTHORIZATION_NAME: string = 'github.com/TanukiSharp/ItchyPassword';\n\n    static LOCAL_STORAGE_KEY_PASSWORD_PUBLIC: string = 'GitHubApiVaultStorage.PasswordPublicPart';\n    static LOCAL_STORAGE_KEY_PASSWORD_LENGTH: string = 'GitHubApiVaultStorage.PasswordLength';\n    static LOCAL_STORAGE_KEY_BROWSER_NAME: string = 'GitHubApiVaultStorage.BrowserName';\n\n    private basicAuthHeader: string | null = null;\n    private authorizationName: string | null = null;\n\n    public constructor(secureLocalStorage: SecureLocalStorage) {\n        super(secureLocalStorage);\n    }\n\n    public clear(): void {\n        super.clear();\n\n        this.secureLocalStorage.removeItem(GitHubApiVaultStorage.LOCAL_STORAGE_KEY_PASSWORD_PUBLIC);\n        this.secureLocalStorage.removeItem(GitHubApiVaultStorage.LOCAL_STORAGE_KEY_PASSWORD_LENGTH);\n        this.secureLocalStorage.removeItem(GitHubApiVaultStorage.LOCAL_STORAGE_KEY_BROWSER_NAME);\n    }\n\n    private constructBasicAuthString(username: string, password: string): string {\n        console.log('username:', username);\n        console.log('password:', password);\n\n        const authString = btoa(`${username}:${password}`);\n        return `Basic ${authString}`;\n    }\n\n    private async listAuthorizations(): Promise<IAuthorization[] | null> {\n        if (!this.basicAuthHeader) {\n            return null;\n        }\n\n        const response: Response | null = await this.request(true, 'GET', '/authorizations', this.basicAuthHeader);\n\n        if (response === null) {\n            console.warn('List authorizations aborted.');\n            return null;\n        }\n\n        if (response.ok === false) {\n            console.error('Failed to list authorizations.', response);\n            return null;\n        }\n\n        return await response.json();\n    }\n\n    private async deleteAuthorization(authorization: IAuthorization): Promise<boolean> {\n        if (!this.basicAuthHeader) {\n            return false;\n        }\n\n        const response: Response | null = await this.request(true, 'DELETE', `/authorizations/${authorization.id}`, this.basicAuthHeader);\n\n        if (response === null) {\n            console.warn('Delete authorization aborted.');\n            return false;\n        }\n\n        if (response.ok === false) {\n            console.error(`Failed to delete authorization '${authorization.id}'.`, response);\n        }\n\n        return response.ok;\n    }\n\n    private async createAuthorization(): Promise<string | null> {\n        if (!this.authorizationName) {\n            return null;\n        }\n\n        if (!this.basicAuthHeader) {\n            return null;\n        }\n\n        const body: PlainObject = {\n            scopes: ['repo'],\n            note: this.authorizationName\n        };\n\n        const response: Response | null = await this.request(true, 'POST', '/authorizations', this.basicAuthHeader, body);\n\n        if (response === null) {\n            console.warn('Create new authorization aborted.');\n            return null;\n        }\n\n        if (response.ok === false) {\n            console.error('Failed to create new authorization.', response);\n            return null;\n        }\n\n        return (await response.json()).token as string;\n    }\n\n    private findAuthorization(authorizations: IAuthorization[]): IAuthorization | null {\n        if (!this.authorizationName) {\n            return null;\n        }\n\n        for (const authorization of authorizations) {\n            if (authorization.app && authorization.app.name === this.authorizationName) {\n                return authorization;\n            }\n        }\n\n        return null;\n    }\n\n    protected async ensureVaultParameters(): Promise<boolean> {\n        if (await super.ensureVaultParameters() === false) {\n            return false;\n        }\n\n        const username: string | null = this.getUsername();\n        if (!username) {\n            return false;\n        }\n\n        const passwordPublicPart: string | null = this.getSetVaultParameter(GitHubApiVaultStorage.LOCAL_STORAGE_KEY_PASSWORD_PUBLIC, 'GitHub account password public part:');\n        if (!passwordPublicPart) {\n            return false;\n        }\n\n        const passwordLengthString: string | null = this.getSetVaultParameter(GitHubApiVaultStorage.LOCAL_STORAGE_KEY_PASSWORD_LENGTH, 'GitHub account password length:');\n        if (!passwordLengthString) {\n            return false;\n        }\n\n        const passwordLength: number = parseInt(passwordLengthString, 10);\n        if (Number.isSafeInteger(passwordLength) === false || passwordLength <= 0) {\n            return false;\n        }\n\n        let password: string | null = await passwordComponent.generatePasswordString(passwordPublicPart, passwordComponent.DEFAULT_ALPHABET, CancellationToken.none);\n        if (!password) {\n            return false;\n        }\n\n        this.basicAuthHeader = this.constructBasicAuthString(username, password.substr(0, passwordLength));\n\n        const browserName: string | null = this.getSetVaultParameter(GitHubApiVaultStorage.LOCAL_STORAGE_KEY_BROWSER_NAME, 'Current device/browser name:');\n        if (!browserName) {\n            return false;\n        }\n\n        this.authorizationName = `${GitHubApiVaultStorage.AUTHORIZATION_NAME} (${browserName})`;\n\n\n        return true;\n    }\n\n    protected async getToken(): Promise<string | null> {\n        const authorizations: IAuthorization[] | null = await this.listAuthorizations();\n\n        if (authorizations === null) {\n            return null;\n        }\n\n        const authorization: IAuthorization | null = this.findAuthorization(authorizations);\n\n        if (authorization !== null) {\n            if (await this.deleteAuthorization(authorization) === false) {\n                return null;\n            }\n        }\n\n        return await this.createAuthorization();\n    }\n}\n","import { ICipher, getDerivedBytes } from '../crypto';\nimport { CancellationToken, ensureNotCancelled } from '../asyncUtils';\n\nexport class CipherV2 implements ICipher {\n    public get version(): number {\n        return 2;\n    }\n\n    public get description(): string {\n        return 'PBKDF2 + AES-GCM';\n    }\n\n    async encrypt(input: ArrayBuffer, password: ArrayBuffer, cancellationToken: CancellationToken): Promise<ArrayBuffer> {\n        const output: ArrayBuffer = new ArrayBuffer(12 + 16 + 16 + input.byteLength);\n\n        const nonce: Uint8Array = crypto.getRandomValues(new Uint8Array(output, 0, 12));\n        const passwordSalt: Uint8Array = crypto.getRandomValues(new Uint8Array(output, 12, 16));\n\n        const aesGcmParams: AesGcmParams = {\n            name: 'AES-GCM',\n            iv: nonce\n        };\n\n        const aesKeyAlgorithm: AesKeyAlgorithm = {\n            name: 'AES-GCM',\n            length: 256\n        };\n\n        const passwordKey: CryptoKey = await window.crypto.subtle.importKey(\n            'raw',\n            await getDerivedBytes(password, passwordSalt, cancellationToken),\n            aesKeyAlgorithm,\n            false,\n            ['encrypt']\n        );\n\n        ensureNotCancelled(cancellationToken);\n\n        const result: ArrayBuffer = await window.crypto.subtle.encrypt(aesGcmParams, passwordKey, input);\n\n        ensureNotCancelled(cancellationToken);\n\n        new Uint8Array(output).set(new Uint8Array(result), 12 + 16);\n\n        return output;\n    }\n\n    async decrypt(input: ArrayBuffer, password: ArrayBuffer, cancellationToken: CancellationToken): Promise<ArrayBuffer> {\n        const nonce: Uint8Array = new Uint8Array(input, 0, 12);\n        const passwordSalt: Uint8Array = new Uint8Array(input, 12, 16);\n        const payload: Uint8Array = new Uint8Array(input, 12 + 16);\n\n        const aesGcmParams: AesGcmParams = {\n            name: 'AES-GCM',\n            iv: nonce\n        };\n\n        const aesKeyAlgorithm: AesKeyAlgorithm = {\n            name: 'AES-GCM',\n            length: 256\n        };\n\n        const derivedKey: ArrayBuffer = await getDerivedBytes(password, passwordSalt, cancellationToken);\n\n        ensureNotCancelled(cancellationToken);\n\n        const passwordKey: CryptoKey = await window.crypto.subtle.importKey(\n            'raw',\n            derivedKey,\n            aesKeyAlgorithm,\n            false,\n            ['decrypt']\n        );\n\n        ensureNotCancelled(cancellationToken);\n\n        const result: ArrayBuffer = await window.crypto.subtle.decrypt(aesGcmParams, passwordKey, payload);\n\n        ensureNotCancelled(cancellationToken);\n\n        return result;\n    }\n}\n","import * as crypto from '../crypto';\nimport * as stringUtils from '../stringUtils';\nimport * as arrayUtils from '../arrayUtils';\n\nimport * as ui from '../ui';\nimport { getPrivatePart } from './privatePartComponent';\n\nimport { CipherV2 } from '../ciphers/v2';\nimport { ITabInfo } from '../TabControl';\nimport { IComponent } from './IComponent';\n\nimport * as storageOutputComponent from './storageOutputComponent';\n\nimport { CancellationToken, ensureNotCancelled, rethrowCancelled } from '../asyncUtils';\n\nconst RESERVED_KEYS: string[] = ['version', 'value'];\n\nconst btnTabCiphers = ui.getElementById('btnTabCiphers') as HTMLButtonElement;\nconst divTabCiphers = ui.getElementById('divTabCiphers');\n\nconst cipher: crypto.ICipher = new CipherV2();\n\nconst txtCipherName = ui.getElementById('txtCipherName') as HTMLInputElement;\nconst txtCipherSource = ui.getElementById('txtCipherSource') as HTMLInputElement;\nconst txtCipherTarget = ui.getElementById('txtCipherTarget') as HTMLInputElement;\nconst btnEncrypt = ui.getElementById('btnEncrypt') as HTMLButtonElement;\nconst btnDecrypt = ui.getElementById('btnDecrypt') as HTMLButtonElement;\n\nconst btnClearCipherSource = ui.getElementById('btnClearCipherSource') as HTMLButtonElement;\nconst btnCopyCipherTarget = ui.getElementById('btnCopyCipherTarget') as HTMLButtonElement;\nconst btnClearCipherTarget = ui.getElementById('btnClearCipherTarget') as HTMLButtonElement;\n\nfunction clearSourceVisualCue(): void {\n    txtCipherSource.style.removeProperty('background-color');\n}\n\nfunction clearTargetVisualCue(): void {\n    txtCipherTarget.style.removeProperty('background-color');\n}\n\nfunction setSourceVisualCueError() {\n    txtCipherSource.style.setProperty('background-color', ui.ERROR_COLOR);\n}\n\nfunction setTargetVisualCueError() {\n    txtCipherTarget.style.setProperty('background-color', ui.ERROR_COLOR);\n}\n\nfunction clearAllVisualCues(): void {\n    clearSourceVisualCue();\n    clearTargetVisualCue();\n}\n\nfunction setCipherTargetValue(value: string): void {\n    txtCipherTarget.value = value;\n    onCipherTargetChanged();\n}\n\nfunction onCipherTargetChanged(): void {\n    updateCipherParameters();\n}\n\nfunction updateCipherParameters(): void {\n    if (txtCipherTarget.value === '' || txtCipherName.value === '') {\n        storageOutputComponent.clearOutputs();\n        return;\n    }\n\n    const cipherParameters = {\n        version: cipher.version,\n        value: txtCipherTarget.value\n    }\n\n    const path = `ciphers/${txtCipherName.value}`;\n\n    storageOutputComponent.setParameters(cipherParameters, path, RESERVED_KEYS);\n}\n\nexport async function encryptString(value: string, cancellationToken: CancellationToken): Promise<string | null> {\n    const privatePart: string = getPrivatePart();\n    if (privatePart.length === 0) {\n        console.warn('Private part is empty');\n        return null;\n    }\n\n    const input: ArrayBuffer = stringUtils.stringToArray(value);\n    const password: ArrayBuffer = stringUtils.stringToArray(privatePart);\n\n    const encrypted: ArrayBuffer = await cipher.encrypt(input, password, cancellationToken);\n\n    ensureNotCancelled(cancellationToken);\n\n    return arrayUtils.toCustomBase(encrypted, crypto.BASE62_ALPHABET);\n}\n\nexport async function decryptString(value: string, cancellationToken: CancellationToken): Promise<string | null> {\n    const privatePart: string = getPrivatePart();\n    if (privatePart.length === 0) {\n        console.warn('Private part is empty');\n        return null;\n    }\n\n    try {\n        const input: ArrayBuffer = arrayUtils.fromCustomBase(value, crypto.BASE62_ALPHABET);\n        const password: ArrayBuffer = stringUtils.stringToArray(privatePart);\n\n        const decrypted: ArrayBuffer = await cipher.decrypt(input, password, cancellationToken);\n\n        ensureNotCancelled(cancellationToken);\n\n        return arrayUtils.arrayToString(decrypted);\n    } catch (error) {\n        rethrowCancelled(error);\n\n        console.warn(`Failed to decrypt${error.message ? `, error: ${error.message}` : ', no error message'}`);\n        return null;\n    }\n}\n\nasync function onEncryptButtonClick(): Promise<boolean> {\n    txtCipherSource.focus();\n    setCipherTargetValue('');\n    clearAllVisualCues();\n\n    if (txtCipherSource.value.length === 0) {\n        setSourceVisualCueError();\n        return false;\n    }\n\n    const encryptedString: string | null = await encryptString(txtCipherSource.value, CancellationToken.none);\n\n    if (encryptedString === null) {\n        return false;\n    }\n\n    setCipherTargetValue(encryptedString);\n\n    return true;\n}\n\nasync function onDecryptButtonClick(): Promise<boolean> {\n    txtCipherSource.focus();\n    setCipherTargetValue('');\n    clearAllVisualCues();\n\n    if (txtCipherSource.value.length === 0) {\n        setSourceVisualCueError();\n        return false;\n    }\n\n    const decryptedString: string | null = await decryptString(txtCipherSource.value, CancellationToken.none);\n\n    if (decryptedString === null) {\n        setTargetVisualCueError();\n        return false;\n    }\n\n    setCipherTargetValue(decryptedString);\n\n    return true;\n}\n\nexport class CipherComponent implements IComponent, ITabInfo {\n    public readonly name: string = 'Cipher';\n\n    public getTabButton(): HTMLButtonElement {\n        return btnTabCiphers;\n    }\n\n    public getTabContent(): HTMLElement {\n        return divTabCiphers;\n    }\n\n    public onTabSelected(): void {\n        storageOutputComponent.show();\n        updateCipherParameters();\n        txtCipherName.focus();\n    }\n\n    public init(): void {\n        ui.setupCopyButton(txtCipherTarget, btnCopyCipherTarget);\n\n        ui.setupFeedbackButton(btnEncrypt, onEncryptButtonClick);\n        ui.setupFeedbackButton(btnDecrypt, onDecryptButtonClick);\n\n        txtCipherName.addEventListener('input', () => {\n            updateCipherParameters();\n        });\n\n        txtCipherSource.addEventListener('input', () => {\n            if (txtCipherSource.value.length > 0) {\n                clearSourceVisualCue();\n            }\n        });\n\n        btnClearCipherSource.addEventListener('click', () => {\n            ui.clearText(txtCipherSource, true);\n        });\n\n        btnClearCipherTarget.addEventListener('click', () => {\n            setCipherTargetValue('');\n        });\n    }\n}\n","import * as cipherComponent from '../components/cipherComponent';\nimport { CancellationToken } from '../asyncUtils';\n\nexport interface IAsyncStorage {\n    readonly length: number;\n    clear(): void;\n    getItem(key: string): Promise<string | null>;\n    key(index: number): string | null;\n    removeItem(key: string): void;\n    setItem(key: string, value: string): Promise<void>;\n}\n\nexport class SecureLocalStorage implements IAsyncStorage {\n    get length(): number {\n        return window.localStorage.length;\n    }\n\n    clear(): void {\n        window.localStorage.clear();\n    }\n\n    key(index: number): string | null {\n        return window.localStorage.key(index);\n    }\n\n    removeItem(key: string): void {\n        window.localStorage.removeItem(key);\n    }\n\n    async getItem(key: string): Promise<string | null> {\n        const encryptedItem: string | null = window.localStorage.getItem(key);\n\n        if (encryptedItem === null) {\n            return null;\n        }\n\n        return await cipherComponent.decryptString(encryptedItem, CancellationToken.none);\n    }\n\n    async setItem(key: string, value: string): Promise<void> {\n        const encrypted: string | null = await cipherComponent.encryptString(value, CancellationToken.none);\n\n        if (encrypted === null) {\n            console.error('Failed to encrypt value. (nothing stored)');\n            return;\n        }\n\n        window.localStorage.setItem(key, encrypted);\n    }\n}\n","import * as ui from '../ui';\nimport * as stringUtils from '../stringUtils';\nimport { PlainObject, objectDeepSort } from '../PlainObject';\nimport { IComponent } from './IComponent';\nimport { rootComponent, RootComponent } from './rootComponent';\nimport * as serviceManager from '../services/serviceManger';\nimport { VaultService } from '../services/vaultService';\n\nimport { IVaultStorage } from '../storages/IVaultStorage';\nimport { GitHubPersonalAccessTokenVaultStorage } from '../storages/GitHubVaultStorage';\nimport { SecureLocalStorage } from '../storages/SecureLocalStorage';\n\nconst divStorageOutput: HTMLElement = ui.getElementById('divStorageOutput');\n\nconst txtPath: HTMLInputElement = ui.getElementById('txtPath') as HTMLInputElement;\nconst lblMatchingPath: HTMLElement = ui.getElementById('lblMatchingPath');\n\nconst txtParameters: HTMLInputElement = ui.getElementById('txtParameters') as HTMLInputElement;\nconst btnPushToVault: HTMLButtonElement = ui.getElementById('btnPushToVault') as HTMLButtonElement;\nconst txtCustomKeys: HTMLInputElement = ui.getElementById('txtCustomKeys') as HTMLInputElement;\n\nlet vaultStorage: IVaultStorage = new GitHubPersonalAccessTokenVaultStorage(new SecureLocalStorage());\n\nfunction shallowMerge(source: PlainObject | null, target: PlainObject | null, reservedKeys: string[]): PlainObject {\n    const result: PlainObject = {};\n\n    if (source !== null) {\n        for (const [key, value] of Object.entries(source)) {\n            if (reservedKeys.includes(key) === false) {\n                result[key] = value;\n            }\n        }\n    }\n\n    if (target !== null) {\n        for (const [key, value] of Object.entries(target)) {\n            result[key] = value;\n        }\n    }\n\n    return result;\n}\n\ntype IChainInfo = {\n    head: PlainObject,\n    tailParent: PlainObject,\n    tail: PlainObject\n};\n\n// Transforms a path like \"a/b/c/d\" into a hierarchy of objects like { \"a\": { \"b\": { \"c\": { \"d\": {} } } } }\n// From the result object, head is the root object that contains \"a\", tail is the value of \"d\", and tailParent is the value of \"c\"\nfunction pathToObjectChain(path: string, chainInfo: IChainInfo | undefined = undefined): IChainInfo {\n    const separatorIndex: number = path.indexOf('/');\n\n    const tail: PlainObject = {};\n\n    const firstPath: string = separatorIndex >= 0 ? path.substr(0, separatorIndex) : path;\n    const remainingPath: string | undefined = separatorIndex >= 0 ? path.substr(separatorIndex + 1) : undefined;\n\n    if (chainInfo === undefined) {\n        const node: PlainObject = {};\n        node[firstPath] = tail;\n        chainInfo = {\n            head: node,\n            tailParent: node,\n            tail\n        };\n    } else {\n        chainInfo.tail[firstPath] = tail;\n        chainInfo.tailParent = chainInfo.tail;\n        chainInfo.tail = tail;\n    }\n\n    if (remainingPath) {\n        return pathToObjectChain(remainingPath, chainInfo);\n    }\n\n    return chainInfo;\n}\n\nfunction createMatchingPath(path: string, depth: number): string {\n    let position = 0;\n\n    for (let i = 0; i < depth; i += 1) {\n        position = path.indexOf('/', position);\n        if (position < 0) {\n            position = path.length + 1;\n            break;\n        }\n        position += 1;\n    }\n\n    return path.substr(0, position - 1);\n}\n\nfunction updateMatchingPath(): void {\n    const vaultService: VaultService = serviceManager.getService('vault');\n\n    const depth = vaultService.computeUserPathMatchDepth(txtPath.value);\n\n    if (depth > 0) {\n        const matchingPath = createMatchingPath(txtPath.value, depth);\n        lblMatchingPath.innerText = matchingPath;\n    } else {\n        lblMatchingPath.innerText = '';\n    }\n}\n\nfunction onPathTextInput() {\n    updateMatchingPath();\n    update();\n}\n\nfunction onCustomKeysTextInput(): void {\n    update();\n}\n\nfunction updateCustomKeysDisplay(isValid: boolean): void {\n    if (isValid) {\n        txtCustomKeys.style.removeProperty('background');\n        return;\n    }\n\n    txtCustomKeys.style.setProperty('background', ui.ERROR_COLOR);\n}\n\nfunction parseCustomKeys(): PlainObject | null {\n    if (txtCustomKeys.value === '') {\n        return {};\n    }\n\n    try {\n        const obj: any = JSON.parse(txtCustomKeys.value);\n        if (obj === null || obj.constructor.name !== 'Object') {\n            return null;\n        }\n        return obj as PlainObject;\n    } catch {\n        return null;\n    }\n}\n\nfunction update(): void {\n    if (_parameterKeys === undefined || _parameterPath === undefined || _reservedKeys === undefined) {\n        return;\n    }\n\n    const chainInfo: IChainInfo = pathToObjectChain(`${txtPath.value}/${_parameterPath}`);\n    const leaf: PlainObject = chainInfo.tail;\n\n    for (const [key, value] of Object.entries(_parameterKeys)) {\n        leaf[key] = value;\n    }\n\n    const customKeys: PlainObject | null = parseCustomKeys();\n    updateCustomKeysDisplay(customKeys !== null);\n    const resultParameters: PlainObject = shallowMerge(customKeys, leaf, _reservedKeys);\n\n    if (Object.keys(resultParameters).length === 0) {\n        // Set the value of the first (single) property of the object to null.\n        chainInfo.tailParent[Object.keys(chainInfo.tailParent)[0]] = null;\n    } else {\n        chainInfo.tailParent[Object.keys(chainInfo.tailParent)[0]] = resultParameters;\n    }\n\n    txtParameters.value = JSON.stringify(objectDeepSort(chainInfo.head), undefined, 4);\n}\n\nfunction deepMerge(source: PlainObject, target: PlainObject): void {\n    for (const sourceKey of Object.keys(source)) {\n        const targetValue: any = target[sourceKey];\n        const sourceValue: any = source[sourceKey];\n\n        if (targetValue === undefined ||\n            targetValue === null ||\n            targetValue.constructor.name !== 'Object' ||\n            sourceValue.constructor.name !== 'Object') {\n            target[sourceKey] = sourceValue;\n            continue;\n        }\n\n        deepMerge(sourceValue, targetValue);\n    }\n}\n\nfunction generateUpdateMessage() {\n    const activeComponent: IComponent | null = (rootComponent as RootComponent).getActiveComponent();\n\n    if (activeComponent === null) {\n        throw new Error('Could not determine active component.');\n    }\n\n    let componentName: string = activeComponent.name.toLowerCase();\n\n    const matchingPath: string = lblMatchingPath.innerText;\n    const fullPath: string = txtPath.value;\n\n    if (!matchingPath) {\n        return `Added ${componentName} for '${fullPath}'`;\n    }\n\n    if (matchingPath === fullPath) {\n        return `Updated ${componentName} for '${fullPath}'`;\n    }\n\n    const remainingPath: string = stringUtils.trim(fullPath.substr(matchingPath.length), '/');\n\n    return `Updated ${componentName} for '${matchingPath}' adding '${remainingPath}'`;\n}\n\nasync function pushToVault(): Promise<boolean> {\n    const vaultContentData: string | null = await vaultStorage.getVaultContent();\n\n    if (vaultContentData === null) {\n        return false;\n    }\n\n    const newData = JSON.parse(txtParameters.value);\n    let vaultContent = JSON.parse(vaultContentData);\n\n    deepMerge(newData, vaultContent);\n\n    const message: string = generateUpdateMessage();\n\n    const newVaultContentData: string = JSON.stringify(vaultContent, undefined, 4) + '\\n';\n\n    await vaultStorage.setVaultContent(newVaultContentData, `[ItchyPassword] ${message}`);\n\n    return true;\n}\n\nexport function clearOutputs(): void {\n    _parameterKeys = undefined;\n    _parameterPath = undefined;\n    _reservedKeys = undefined;\n    ui.clearText(txtParameters);\n}\n\nlet _parameterKeys: PlainObject | undefined;\nlet _parameterPath: string | undefined;\nlet _reservedKeys: string[] | undefined;\n\nexport function setParameters(parameterKeys: PlainObject, parameterPath: string, reservedKeys: string[]) {\n    _parameterKeys = parameterKeys;\n    _parameterPath = parameterPath;\n    _reservedKeys = reservedKeys;\n    update();\n}\n\nexport function show(): void {\n    divStorageOutput.style.setProperty('display', 'initial');\n}\n\nexport function hide(): void {\n    divStorageOutput.style.setProperty('display', 'none');\n}\n\nexport class StorageOutputComponent implements IComponent {\n    public readonly name: string = 'StorageOutput';\n\n    init(): void {\n        txtCustomKeys.addEventListener('input', onCustomKeysTextInput);\n        ui.setupFeedbackButton(btnPushToVault, pushToVault);\n        txtPath.addEventListener('input', onPathTextInput);\n    }\n}\n","import { CancellationToken } from '../asyncUtils';\nimport * as stringUtils from '../stringUtils';\nimport * as ui from '../ui';\nimport * as passwordComponent from '../components/passwordComponent';\n\nexport class PasswordService {\n    async generateAndCopyPasswordToClipboard(publicPart: string, alphabet?: string, length?: number): Promise<boolean> {\n        alphabet = alphabet !== undefined ? alphabet : passwordComponent.DEFAULT_ALPHABET;\n        length = length !== undefined ? length : passwordComponent.DEFAULT_LENGTH;\n\n        const keyString: string | null = await passwordComponent.generatePasswordString(publicPart, alphabet, CancellationToken.none);\n\n        if (keyString === null) {\n            return false;\n        }\n\n        const password = stringUtils.truncate(keyString, Math.max(4, length));\n\n        return await ui.writeToClipboard(password);\n    }\n}\n","import * as ui from '../ui';\nimport * as privatePartComponent from './privatePartComponent';\n\nimport * as crypto from '../crypto';\nimport * as stringUtils from '../stringUtils';\nimport * as arrayUtils from '../arrayUtils';\n\nimport { PlainObject } from '../PlainObject';\nimport { PasswordGeneratorV1 } from '../passwordGenerators/v1';\nimport { ITabInfo } from '../TabControl';\nimport { IComponent } from './IComponent';\n\nimport * as storageOutputComponent from './storageOutputComponent';\n\nimport { CancellationToken, TaskRunner } from '../asyncUtils';\n\nimport * as serviceManager from '../services/serviceManger';\nimport { PasswordService } from '../services/passwordService';\n\nconst btnTabPasswords = ui.getElementById('btnTabPasswords') as HTMLButtonElement;\nconst divTabPasswords = ui.getElementById('divTabPasswords');\n\nconst passwordGenerator: crypto.IPasswordGenerator = new PasswordGeneratorV1('Password');\n\nconst txtPublicPart = ui.getElementById('txtPublicPart') as HTMLInputElement;\nconst spnPublicPartSize = ui.getElementById('spnPublicPartSize');\nconst btnGeneratePublicPart = ui.getElementById('btnGeneratePublicPart') as HTMLButtonElement;\nconst btnClearPublicPart = ui.getElementById('btnClearPublicPart') as HTMLButtonElement;\nconst btnCopyPublicPart = ui.getElementById('btnCopyPublicPart') as HTMLButtonElement;\nconst btnShowHidePasswordOptionalFeatures = ui.getElementById('btnShowHidePasswordOptionalFeatures') as HTMLButtonElement;\n\nconst lblAlphabetLength = ui.getElementById('lblAlphabetLength');\nconst numOutputSizeRange = ui.getElementById('numOutputSizeRange') as HTMLInputElement;\nconst numOutputSizeNum = ui.getElementById('numOutputSizeNum') as HTMLInputElement;\n\nconst lblAlphabet = ui.getElementById('lblAlphabet');\nconst txtAlphabet = ui.getElementById('txtAlphabet') as HTMLInputElement;\nconst spnAlphabetSize = ui.getElementById('spnAlphabetSize');\nconst divPasswordAlphabetActions = ui.getElementById('divPasswordAlphabetActions');\nconst btnResetAlphabet = ui.getElementById('btnResetAlphabet') as HTMLButtonElement;\n\nconst txtResultPassword = ui.getElementById('txtResultPassword') as HTMLInputElement;\nconst spnResultPasswordLength = ui.getElementById('spnResultPasswordLength');\nconst btnViewResultPassword = ui.getElementById('btnViewResultPassword') as HTMLButtonElement;\nconst btnCopyResultPassword = ui.getElementById('btnCopyResultPassword') as HTMLButtonElement;\nconst lblGeneratingPassword = ui.getElementById('lblGeneratingPassword');\n\nexport const DEFAULT_LENGTH: number = 64;\nexport const DEFAULT_ALPHABET: string = '!\"#$%&\\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[]^_`abcdefghijklmnopqrstuvwxyz{|}~';\n\nconst RESERVED_KEYS: string[] = ['alphabet', 'length', 'public', 'datetime'];\n\nlet passwordPublicPartLastChange: string | undefined;\nlet copyPasswordFunction: () => void;\n\nfunction onClearPublicPartButtonClick(): boolean {\n    if (txtPublicPart.value.length > 0) {\n        if (prompt('Are you sure you want to clear the public part ?\\nType \\'y\\' to accept', '') !== 'y') {\n            return false;\n        }\n    }\n\n    ui.clearText(txtPublicPart, true);\n\n    updatePublicPartSize();\n\n    updatePasswordPublicPartLastUpdate();\n    updatePasswordGenerationParameters();\n\n    return true;\n}\n\nfunction onGeneratePublicPartButtonClick(): boolean {\n    if (txtPublicPart.value.length > 0) {\n        if (prompt('Are you sure you want to generate a new public part ?\\nType \\'y\\' to accept', '') !== 'y') {\n            return false;\n        }\n    }\n\n    const randomString: string = crypto.generateRandomString();\n    txtPublicPart.value = randomString;\n    updatePublicPartSize();\n\n    updatePasswordPublicPartLastUpdate();\n\n    run();\n\n    return true;\n}\n\nfunction updatePasswordPublicPartLastUpdate(): void {\n    if (txtPublicPart.value.length > 0) {\n        passwordPublicPartLastChange = new Date().toISOString();\n    } else {\n        passwordPublicPartLastChange = undefined;\n    }\n}\n\nfunction updateResultPasswordLength(): void {\n    spnResultPasswordLength.innerHTML = txtResultPassword.value.length.toString();\n}\n\nfunction isAlphabetValid(alphabet: string): boolean {\n    const sortedAlphabet: string[] = alphabet.split('');\n    sortedAlphabet.sort();\n\n    for (let i: number = 1; i < sortedAlphabet.length; i += 1) {\n        if (sortedAlphabet[i - 1] === sortedAlphabet[i]) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nfunction updatePasswordGenerationParameters(): void {\n    if (canRun() === false) {\n        clearOutputs();\n        return;\n    }\n\n    const passwordParamters: PlainObject = {\n        public: txtPublicPart.value,\n        datetime: passwordPublicPartLastChange\n    };\n\n    const numericValue: number = txtResultPassword.value.length;\n    if (numericValue !== DEFAULT_LENGTH) {\n        passwordParamters.length = numericValue;\n    }\n\n    const alphabet: string = txtAlphabet.value;\n    if (alphabet !== DEFAULT_ALPHABET) {\n        passwordParamters.alphabet = alphabet;\n    }\n\n    storageOutputComponent.setParameters(passwordParamters, 'password', RESERVED_KEYS);\n}\n\nfunction updateOutputSizeRangeToNum(): void {\n    numOutputSizeNum.value = numOutputSizeRange.value;\n}\n\nfunction updateOutputSizeNumToRange(): boolean {\n    const min: number = parseInt(numOutputSizeRange.min, 10);\n    const val: number = parseInt(numOutputSizeNum.value, 10);\n    const max: number = parseInt(numOutputSizeRange.max, 10);\n\n    if (isNaN(val) === false) {\n        numOutputSizeRange.value = Math.max(min, Math.min(val, max)).toString();\n        return true;\n    }\n\n    return false;\n}\n\nasync function onOutputSizeRangeInput(): Promise<void> {\n    updateOutputSizeRangeToNum();\n    await run();\n}\n\nasync function onOutputSizeNumInput(): Promise<void> {\n    if (updateOutputSizeNumToRange()) {\n        updateOutputSizeRangeToNum();\n    }\n    await run();\n}\n\nfunction updatePublicPartSize(): void {\n    spnPublicPartSize.innerHTML = txtPublicPart.value.length.toString();\n}\n\nfunction updateAlphabetSize(): void {\n    spnAlphabetSize.innerHTML = txtAlphabet.value.length.toString();\n}\n\nfunction updateAlphabetValidityDisplay(isAlphabetValid: boolean): void {\n    if (isAlphabetValid) {\n        txtAlphabet.style.removeProperty('background');\n    } else {\n        txtAlphabet.style.setProperty('background', ui.ERROR_COLOR);\n    }\n}\n\nasync function onAlphabetTextInput(): Promise<void> {\n    const isAlphabetValidResult: boolean = isAlphabetValid(txtAlphabet.value);\n\n    updateAlphabetValidityDisplay(isAlphabetValidResult);\n\n    if (isAlphabetValidResult === false) {\n        return;\n    }\n\n    updateAlphabetSize();\n    await run();\n}\n\nasync function onResetAlphabetButtonClick(): Promise<boolean> {\n    if (resetAlphabet() === false) {\n        return false;\n    }\n\n    await run();\n\n    return true;\n}\n\nfunction clearOutputs(): void {\n    ui.clearText(txtResultPassword);\n    storageOutputComponent.clearOutputs();\n    updateResultPasswordLength();\n}\n\nfunction canRun(publicPart?: string): boolean {\n    const alphabet: string = txtAlphabet.value;\n\n    if (isAlphabetValid(alphabet) === false) {\n        return false;\n    }\n\n    publicPart = publicPart || txtPublicPart.value;\n\n    if (privatePartComponent.getPrivatePart().length <= 0 || publicPart.length < 8 || alphabet.length < 2) {\n        return false;\n    }\n\n    return true;\n}\n\nexport async function generatePasswordString(publicPart: string, alphabet: string, cancellationToken: CancellationToken): Promise<string | null> {\n    if (canRun(publicPart) === false) {\n        return null;\n    }\n\n    const privatePartString: string = privatePartComponent.getPrivatePart();\n    const privatePrivateBytes: ArrayBuffer = stringUtils.stringToArray(privatePartString);\n    const publicPartBytes: ArrayBuffer = stringUtils.stringToArray(publicPart);\n    const keyBytes: ArrayBuffer = await passwordGenerator.generatePassword(privatePrivateBytes, publicPartBytes, cancellationToken);\n\n    return arrayUtils.toCustomBaseOneWay(keyBytes, alphabet);\n}\n\nconst passwordTaskRunner: TaskRunner<void> = new TaskRunner<void>();\n\nexport async function run(): Promise<void> {\n    if (canRun() === false) {\n        clearOutputs();\n        return;\n    }\n\n    ui.showHide(lblGeneratingPassword, true);\n\n    try {\n        await passwordTaskRunner.cancelAndExecute(runCore);\n    } finally {\n        ui.showHide(lblGeneratingPassword, false);\n    }\n}\n\nasync function runCore(cancellationToken: CancellationToken): Promise<void> {\n    const keyString: string | null = await generatePasswordString(txtPublicPart.value, txtAlphabet.value, cancellationToken);\n    if (keyString === null) {\n        return;\n    }\n\n    txtResultPassword.value = stringUtils.truncate(keyString, Math.max(4, parseInt(numOutputSizeRange.value, 10)));\n\n    updateResultPasswordLength();\n    updatePasswordGenerationParameters();\n\n    copyPasswordFunction();\n}\n\nfunction resetAlphabet(): boolean {\n    txtAlphabet.value = DEFAULT_ALPHABET;\n    updateAlphabetSize();\n\n    const isAlphabetValidResult: boolean = isAlphabetValid(txtAlphabet.value);\n\n    updateAlphabetValidityDisplay(isAlphabetValidResult);\n\n    return isAlphabetValidResult;\n}\n\nasync function onPublicPartTextInput(): Promise<void> {\n    updatePublicPartSize();\n    updatePasswordPublicPartLastUpdate();\n    await run();\n}\n\nexport class PasswordComponent implements IComponent, ITabInfo {\n    public readonly name: string = 'Password';\n\n    public getTabButton(): HTMLButtonElement {\n        return btnTabPasswords;\n    }\n\n    public getTabContent(): HTMLElement {\n        return divTabPasswords;\n    }\n\n    public onTabSelected(): void {\n        storageOutputComponent.show();\n        updatePasswordGenerationParameters();\n        txtPublicPart.focus();\n    }\n\n    public init(): void {\n        privatePartComponent.registerOnChanged(run);\n\n        // dafuq!?\n        numOutputSizeRange.max = DEFAULT_LENGTH.toString();\n        numOutputSizeRange.value = DEFAULT_LENGTH.toString();\n\n        ui.setupFeedbackButton(btnClearPublicPart, onClearPublicPartButtonClick);\n        ui.setupFeedbackButton(btnGeneratePublicPart, onGeneratePublicPartButtonClick);\n\n        ui.setupViewButton(txtResultPassword, btnViewResultPassword);\n\n        ui.setupCopyButton(txtPublicPart, btnCopyPublicPart);\n        copyPasswordFunction = ui.setupCopyButton(txtResultPassword, btnCopyResultPassword);\n\n        numOutputSizeRange.addEventListener('input', onOutputSizeRangeInput);\n        numOutputSizeNum.addEventListener('input', onOutputSizeNumInput);\n\n        txtAlphabet.addEventListener('input', onAlphabetTextInput);\n        ui.setupFeedbackButton(btnResetAlphabet, onResetAlphabetButtonClick);\n\n        txtPublicPart.addEventListener('input', onPublicPartTextInput);\n\n        ui.showHide(lblGeneratingPassword, false);\n\n        ui.setupShowHideButton(btnShowHidePasswordOptionalFeatures, false, [\n            lblAlphabet,\n            txtAlphabet,\n            spnAlphabetSize,\n            divPasswordAlphabetActions,\n            lblAlphabetLength,\n            numOutputSizeRange,\n            numOutputSizeNum\n        ]);\n\n        updatePublicPartSize();\n        updateOutputSizeRangeToNum();\n        resetAlphabet();\n\n        serviceManager.registerService('password', new PasswordService());\n    }\n};\n","import { stringToArray } from '../stringUtils';\nimport { IPasswordGenerator, getDerivedBytes } from '../crypto';\nimport { CancellationToken, ensureNotCancelled } from '../asyncUtils';\n\nexport class PasswordGeneratorV1 implements IPasswordGenerator {\n    private hkdfPurpose: ArrayBuffer;\n    private _description: string;\n\n    public constructor(hkdfPurpose: string) {\n        this.hkdfPurpose = stringToArray(hkdfPurpose);\n        this._description = `HKDF(PBKDF2, HMAC512) [purpose: ${hkdfPurpose}]`;\n    }\n\n    public get version(): number {\n        return 1;\n    }\n\n    public get description(): string {\n        return this._description;\n    }\n\n    public async generatePassword(privatePart: ArrayBuffer, publicPart: ArrayBuffer, cancellationToken: CancellationToken): Promise<ArrayBuffer> {\n        const derivedKey: ArrayBuffer = await getDerivedBytes(privatePart, publicPart, cancellationToken);\n\n        ensureNotCancelled(cancellationToken);\n\n        const hmacParameters: HmacImportParams = {\n            name: 'HMAC',\n            hash: { name: 'SHA-512' }\n        };\n\n        const hkdfKey: CryptoKey = await window.crypto.subtle.importKey(\n            'raw',\n            derivedKey,\n            hmacParameters,\n            false,\n            ['sign']\n        );\n\n        ensureNotCancelled(cancellationToken);\n\n        const result: ArrayBuffer = await window.crypto.subtle.sign('HMAC', hkdfKey, this.hkdfPurpose);\n\n        ensureNotCancelled(cancellationToken);\n\n        return result;\n    }\n}\n","import { ICipher, getDerivedBytes } from '../crypto';\nimport { CancellationToken, ensureNotCancelled } from '../asyncUtils';\n\nconst encryptionKeyDerivationSalt: ArrayBuffer = new Uint8Array([ 0xf2, 0xcf, 0xef, 0x8e, 0x13, 0x40, 0x46, 0x49, 0x92, 0x2a, 0xde, 0x5c, 0xbc, 0x88, 0x38, 0xa8 ]).buffer;\n\nexport class CipherV1 implements ICipher {\n    public get version(): number {\n        return 1;\n    }\n\n    public get description(): string {\n        return 'PBKDF2 + AES-GCM';\n    }\n\n    async encrypt(input: ArrayBuffer, password: ArrayBuffer, cancellationToken: CancellationToken): Promise<ArrayBuffer> {\n        const output: ArrayBuffer = new ArrayBuffer(12 + 16 + input.byteLength);\n\n        const nonce: DataView = new DataView(output, 0, 12);\n        crypto.getRandomValues(new Uint8Array(output, 0, 12));\n\n        const aesGcmParams: AesGcmParams = {\n            name: 'AES-GCM',\n            iv: nonce\n        };\n\n        const aesKeyAlgorithm: AesKeyAlgorithm = {\n            name: 'AES-GCM',\n            length: 256\n        };\n\n        const passwordKey: CryptoKey = await window.crypto.subtle.importKey(\n            'raw',\n            await getDerivedBytes(password, encryptionKeyDerivationSalt, cancellationToken),\n            aesKeyAlgorithm,\n            false,\n            ['encrypt']\n        );\n\n        ensureNotCancelled(cancellationToken);\n\n        const result: ArrayBuffer = await window.crypto.subtle.encrypt(aesGcmParams, passwordKey, input);\n\n        ensureNotCancelled(cancellationToken);\n\n        new Uint8Array(output).set(new Uint8Array(result), 12);\n\n        return output;\n    }\n\n    async decrypt(input: ArrayBuffer, password: ArrayBuffer, cancellationToken: CancellationToken): Promise<ArrayBuffer> {\n        const nonce: DataView = new DataView(input, 0, 12);\n        const payload: DataView = new DataView(input, 12);\n\n        const aesGcmParams: AesGcmParams = {\n            name: 'AES-GCM',\n            iv: nonce\n        };\n\n        const aesKeyAlgorithm: AesKeyAlgorithm = {\n            name: 'AES-GCM',\n            length: 256\n        };\n\n        const derivedKey: ArrayBuffer = await getDerivedBytes(password, encryptionKeyDerivationSalt, cancellationToken);\n\n        ensureNotCancelled(cancellationToken);\n\n        const passwordKey: CryptoKey = await window.crypto.subtle.importKey(\n            'raw',\n            derivedKey,\n            aesKeyAlgorithm,\n            false,\n            ['decrypt']\n        );\n\n        ensureNotCancelled(cancellationToken);\n\n        const result: ArrayBuffer = await window.crypto.subtle.decrypt(aesGcmParams, passwordKey, payload);\n\n        ensureNotCancelled(cancellationToken);\n\n        return result;\n    }\n}\n","import { ICipher } from '../crypto';\nimport * as stringUtils from '../stringUtils';\nimport * as arrayUtils from '../arrayUtils';\nimport { ITabInfo } from '../TabControl';\nimport * as ui from '../ui';\nimport { getPrivatePart } from './privatePartComponent';\n\nimport { CipherV1 } from '../ciphers/v1';\nimport { CipherV2 } from '../ciphers/v2';\nimport { IComponent } from './IComponent';\n\nimport * as storageOutputComponent from './storageOutputComponent';\n\nimport { CancellationToken } from '../asyncUtils';\n\nconst ciphers: ICipher[] = [\n    new CipherV1(),\n    new CipherV2()\n];\n\nconst btnTabReEncrypt: HTMLButtonElement = ui.getElementById('btnTabReEncrypt') as HTMLButtonElement;\nconst divTabReEncrypt: HTMLElement = ui.getElementById('divTabReEncrypt');\n\nconst txtReEncryptSource: HTMLInputElement = ui.getElementById('txtReEncryptSource') as HTMLInputElement;\nconst txtReEncryptTarget: HTMLInputElement = ui.getElementById('txtReEncryptTarget') as HTMLInputElement;\n\nconst cboReEncryptFrom: HTMLSelectElement = ui.getElementById('cboReEncryptFrom') as HTMLSelectElement;\nconst cboReEncryptTo: HTMLSelectElement = ui.getElementById('cboReEncryptTo') as HTMLSelectElement;\nconst btnReEncrypt: HTMLButtonElement = ui.getElementById('btnReEncrypt') as HTMLButtonElement;\n\nconst btnClearReEncryptSource: HTMLButtonElement = ui.getElementById('btnClearReEncryptSource') as HTMLButtonElement;\nconst btnCopyReEncryptTarget: HTMLButtonElement = ui.getElementById('btnCopyReEncryptTarget') as HTMLButtonElement;\nconst btnClearReEncryptTarget: HTMLButtonElement = ui.getElementById('btnClearReEncryptTarget') as HTMLButtonElement;\n\nfunction fillCipherComboBox(cbo: HTMLSelectElement, initialValue: number): void {\n    let cipher: ICipher;\n\n    for (cipher of ciphers) {\n        const item: HTMLOptionElement = document.createElement('option');\n        item.value = cbo.childNodes.length.toString();\n        item.text = `${cipher.description} (v${cipher.version})`;\n        cbo.add(item);\n    }\n\n    cbo.value = initialValue.toString();\n}\n\nfunction clearSourceVisualCue(): void {\n    txtReEncryptSource.style.removeProperty('background-color');\n}\n\nfunction clearTargetVisualCue(): void {\n    txtReEncryptTarget.style.removeProperty('background-color');\n}\n\nfunction setSourceVisualCueError() {\n    txtReEncryptSource.style.setProperty('background-color', ui.ERROR_COLOR);\n}\n\nfunction setTargetVisualCueError() {\n    txtReEncryptTarget.style.setProperty('background-color', ui.ERROR_COLOR);\n}\n\nfunction clearAllVisualCues(): void {\n    clearSourceVisualCue();\n    clearTargetVisualCue();\n}\n\nasync function onReEncryptButtonClick(): Promise<boolean> {\n    ui.clearText(txtReEncryptTarget, true);\n    clearAllVisualCues();\n\n    if (txtReEncryptSource.value.length === 0) {\n        setSourceVisualCueError();\n        return false;\n    }\n\n    if (cboReEncryptFrom.value === cboReEncryptTo.value) {\n        setTargetVisualCueError();\n        return false;\n    }\n\n    const privatePart: string = getPrivatePart();\n    if (privatePart.length === 0) {\n        console.warn('Private part is empty');\n        return false;\n    }\n\n    const sourceCipherIndex = parseInt(cboReEncryptFrom.value, 10);\n    const targetCipherIndex = parseInt(cboReEncryptTo.value, 10);\n\n    const password: ArrayBuffer = stringUtils.stringToArray(privatePart);\n\n    const input: ArrayBuffer = stringUtils.fromBase16(txtReEncryptSource.value);\n    const decrypted: ArrayBuffer = await ciphers[sourceCipherIndex].decrypt(input, password, CancellationToken.none);\n    const reEncrypted: ArrayBuffer = await ciphers[targetCipherIndex].encrypt(decrypted, password, CancellationToken.none);\n\n    txtReEncryptTarget.value = arrayUtils.toBase16(reEncrypted);\n\n    return true;\n}\n\nexport class ReEncryptComponent implements IComponent, ITabInfo {\n    public readonly name: string = 'ReEncrypt';\n\n    public getTabButton(): HTMLButtonElement {\n        return btnTabReEncrypt;\n    }\n\n    public getTabContent(): HTMLElement {\n        return divTabReEncrypt;\n    }\n\n    public onTabSelected() {\n        storageOutputComponent.hide();\n        txtReEncryptSource.focus();\n    }\n\n    public init(): void {\n        ui.setupCopyButton(txtReEncryptTarget, btnCopyReEncryptTarget);\n\n        // Mais est-ce que ce monde est serieux?\n        fillCipherComboBox(<HTMLSelectElement><any>cboReEncryptFrom, ciphers.length - 2);\n        fillCipherComboBox(<HTMLSelectElement><any>cboReEncryptTo, ciphers.length - 1);\n\n        txtReEncryptSource.addEventListener('input', () => {\n            if (txtReEncryptSource.value.length > 0) {\n                clearSourceVisualCue();\n            }\n        });\n\n        btnClearReEncryptSource.addEventListener('click', () => {\n            ui.clearText(txtReEncryptSource, true);\n        });\n\n        btnClearReEncryptTarget.addEventListener('click', () => {\n            ui.clearText(txtReEncryptTarget, true);\n        });\n\n        ui.setupFeedbackButton(btnReEncrypt, onReEncryptButtonClick);\n    }\n}\n","import * as plainObject from '../../PlainObject';\nimport { SearchMatchFunction, PositionMarker } from '../../searchMatchFunctions';\n\nexport const DEEP_MODE_NONE = 0;\nexport const DEEP_MODE_UP = 1;\nexport const DEEP_MODE_DOWN = 2;\n\nconst TREE_ELEMENT_HEIGHT = 24;\n\nconst HORIZONTAL_LINE_VERTICAL_OFFSET = 11;\nconst HORIZONTAL_LINE_LENGTH = 12;\nconst VERTICAL_BAR_OFFSET = 6;\n\nexport interface TreeNodeContext {\n    isCipher: boolean;\n    isPassword: boolean;\n    path: string;\n    key: string;\n    value: any;\n}\n\nexport interface TreeNodeTitleElementFactory {\n    createTreeNodeTitleElement(context: TreeNodeContext): HTMLElement;\n}\n\nexport class TreeNode {\n    protected readonly parent: TreeNode | null;\n    protected readonly children: TreeNode[] = [];\n\n    protected readonly rootElement: HTMLElement;\n    protected readonly titleElement: HTMLElement | null = null;\n    protected readonly childrenContainerElement: HTMLElement;\n\n    protected readonly title: string;\n    protected readonly value: any;\n\n    protected readonly isHint: boolean = false;\n    protected readonly isCipher: boolean = false;\n    protected readonly isPassword: boolean = false;\n\n    public get element(): HTMLElement {\n        return this.rootElement;\n    }\n\n    public get isVisible(): boolean {\n        return this.rootElement.style.display !== 'none';\n    }\n\n    public getVisibleChildCount(): number {\n        let visibleChildCount = 0;\n\n        for (const child of this.children) {\n            if (child.isVisible) {\n                visibleChildCount += 1;\n            }\n        }\n\n        return visibleChildCount;\n    }\n\n    public getVisibleLeafCount(): number {\n        if (this.isVisible === false) {\n            return 0;\n        }\n\n        let visibleLeafCount = 1;\n\n        for (const child of this.children) {\n            visibleLeafCount += child.getVisibleLeafCount();\n        }\n\n        return visibleLeafCount;\n    }\n\n    private addChild(child: TreeNode) {\n        this.childrenContainerElement.appendChild(child.rootElement);\n        this.children.push(child);\n    }\n\n    constructor(parent: TreeNode | null, path: string, title: string, factory: TreeNodeTitleElementFactory, value: any) {\n        this.parent = parent;\n        this.title = title;\n\n        let isLeaf: boolean = false;\n\n        if (TreeNode.isCiphersObject(title, value)) {\n            //this.titleElement.style.backgroundColor = '#FF0000';\n        } else if (TreeNode.isCipherObject(value)) {\n            //this.titleElement.style.backgroundColor = '#FF8080';\n            this.isCipher = true;\n            isLeaf = true;\n        } else if (TreeNode.isPasswordObject(title, value)) {\n            //this.titleElement.style.backgroundColor = '#0000FF';\n            this.isPassword = true;\n            isLeaf = true;\n        } else if (plainObject.isPlainObject(value)) {\n            //this.titleElement.style.backgroundColor = '#00FF00';\n        } else {\n            //this.titleElement.style.backgroundColor = '#FFFF00';\n            this.isHint = true;\n        }\n\n        this.rootElement = document.createElement('div');\n        this.setRootElementStyle();\n\n        if (parent) {\n            const context: TreeNodeContext = {\n                isCipher: this.isCipher,\n                isPassword: this.isPassword,\n                path,\n                key: title,\n                value\n            };\n\n            // Construct title DOM element.\n            this.titleElement = factory.createTreeNodeTitleElement(context);\n            this.titleElement.innerText = title;\n            this.rootElement.appendChild(this.titleElement);\n            this.setTitleElementStyle();\n        }\n\n        // Construct children container DOM element.\n        this.childrenContainerElement = document.createElement('div');\n        this.rootElement.appendChild(this.childrenContainerElement);\n        this.setChildrenContainerElementStyle();\n\n        if (isLeaf === false && plainObject.isPlainObject(value)) {\n            for (const [childKey, childValue] of Object.entries(value)) {\n                const child = new TreeNode(this, `${path}/${childKey}`, childKey, factory, childValue);\n                this.addChild(child);\n            }\n        } else {\n            this.value = value;\n        }\n\n        if (parent) {\n            // Construct lines DOM elements.\n            this.setupLinesElements('#D0D0D0');\n        }\n    }\n\n    private static isPasswordObject(key: string, obj: plainObject.PlainObject): boolean {\n        if (key !== 'password') {\n            return false;\n        }\n\n        if (!obj || !plainObject.isPlainObject(obj) || typeof obj.public !== 'string' || obj.public.length < 4) {\n            return false;\n        }\n\n        return true;\n    }\n\n    private static isCipherObject(obj: plainObject.PlainObject): boolean {\n        if (!obj || !plainObject.isPlainObject(obj)) {\n            return false;\n        }\n\n        if (typeof obj.value !== 'string' || obj.value.length <= 0) {\n            return false;\n        }\n\n        if (typeof obj.version !== 'number' || obj.version < 0) {\n            return false;\n        }\n\n        return true;\n    }\n\n    private static isCiphersObject(key: string, obj: plainObject.PlainObject): boolean {\n        if (key !== 'ciphers') {\n            return false;\n        }\n\n        if (!obj || !plainObject.isPlainObject(obj)) {\n            return false;\n        }\n\n        for (const sub of Object.values(obj)) {\n            if (!TreeNode.isCipherObject(sub)) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    private setRootElementStyle(): void {\n        this.rootElement.classList.add('treenode-root');\n        this.rootElement.style.display = 'grid';\n\n        let height = 4; // Gives a bit of top spacing.\n        let childrenOffset = 0;\n\n        if (this.parent) {\n            height = TREE_ELEMENT_HEIGHT;\n        }\n        if (this.parent && this.parent.parent) {\n            childrenOffset = HORIZONTAL_LINE_LENGTH;\n        }\n\n        this.rootElement.style.gridTemplateRows = `${height}px 1fr`;\n        this.rootElement.style.gridTemplateColumns = `${childrenOffset}px ${VERTICAL_BAR_OFFSET}px 1fr`;\n    }\n\n    private verticalLineElement: HTMLElement | null = null;\n\n    private setupLinesElements(color: string): void {\n        const verticalLineElement = document.createElement('div');\n        verticalLineElement.classList.add('treenode-vertical-line');\n        verticalLineElement.style.gridColumn = '2';\n        verticalLineElement.style.gridRow = '2';\n        verticalLineElement.style.width = '100%';\n        verticalLineElement.style.borderRight = `1px solid ${color}`;\n        this.verticalLineElement = verticalLineElement;\n        this.rootElement.appendChild(verticalLineElement);\n\n        if (this.parent && this.parent.parent) {\n            const horizontalLineElement = document.createElement('div');\n            horizontalLineElement.classList.add('treenode-horizontal-line');\n            horizontalLineElement.style.gridColumn = '1';\n            horizontalLineElement.style.gridRow = '1';\n            horizontalLineElement.style.width = '100%';\n            horizontalLineElement.style.height = `${HORIZONTAL_LINE_VERTICAL_OFFSET}px`;\n            horizontalLineElement.style.borderBottom = `1px solid ${color}`;\n            this.rootElement.appendChild(horizontalLineElement);\n        }\n\n        this.updateLines();\n    }\n\n    private updateLines(): void {\n        if (this.verticalLineElement === null) {\n            return;\n        }\n\n        const visibleChildCount = this.getVisibleChildCount();\n\n        if (visibleChildCount === 0) {\n            this.verticalLineElement.style.height = '0px';\n            return;\n        }\n\n        let totalVisibleLeafCount = 1;\n\n        for (let i = 0; i < visibleChildCount - 1; i += 1) {\n            if (this.children[i].isVisible) {\n                totalVisibleLeafCount += this.children[i].getVisibleLeafCount();\n            }\n        }\n\n        const bottomPosition = (totalVisibleLeafCount * TREE_ELEMENT_HEIGHT) - TREE_ELEMENT_HEIGHT + HORIZONTAL_LINE_VERTICAL_OFFSET + 1;\n\n        this.verticalLineElement.style.height = `${bottomPosition}px`;\n    }\n\n    private setTitleElementStyle(): void {\n        if (!this.titleElement) {\n            return;\n        }\n\n        this.titleElement.classList.add('treenode-title');\n        this.titleElement.style.gridColumn = '2 / span 2';\n        this.titleElement.style.gridRow = '1';\n        this.titleElement.style.marginLeft = '3px';\n    }\n\n    private setChildrenContainerElementStyle(): void {\n        this.childrenContainerElement.classList.add('treenode-children-container');\n        this.childrenContainerElement.style.gridColumn = '3';\n        this.childrenContainerElement.style.gridRow = '2';\n    }\n\n    private resetTitle(deepMode: number): void {\n        if (this.titleElement) {\n            this.titleElement.innerHTML = '';\n            this.titleElement.innerText = this.title;\n        }\n\n        if (deepMode === DEEP_MODE_UP && this.parent) {\n            this.parent.resetTitle(deepMode);\n        }\n\n        if (deepMode === DEEP_MODE_DOWN) {\n            for (const child of this.children) {\n                child.resetTitle(deepMode);\n            }\n        }\n    }\n\n    public show(deepMode: number): void {\n        this.rootElement.style.display = 'grid';\n\n        if (deepMode === DEEP_MODE_UP && this.parent) {\n            this.parent.show(deepMode);\n        }\n\n        if (deepMode === DEEP_MODE_DOWN) {\n            for (const child of this.children) {\n                child.show(deepMode);\n            }\n        }\n\n        this.updateLines();\n    }\n\n    public hide(deepMode: number): void {\n        this.rootElement.style.display = 'none';\n\n        if (deepMode === DEEP_MODE_UP && this.parent) {\n            this.parent.hide(deepMode);\n        }\n\n        if (deepMode === DEEP_MODE_DOWN) {\n            for (const child of this.children) {\n                child.hide(deepMode);\n            }\n        }\n\n        this.updateLines();\n    }\n\n    private static createSpan(text: string, color?: string): HTMLElement {\n        const element = document.createElement('span');\n        if (color) {\n            element.style.backgroundColor = color;\n            element.style.borderRadius = '2px';\n        }\n        element.innerText = text;\n        return element;\n    }\n\n    private static createColoredSpan(text: string, markers: PositionMarker[]): HTMLElement {\n        const root = document.createElement('span');\n\n        let pos = 0;\n\n        for (const marker of markers) {\n            if (marker.pos !== pos) {\n                root.appendChild(TreeNode.createSpan(text.substr(pos, marker.pos - pos)));\n            }\n\n            root.appendChild(TreeNode.createSpan(text.substr(marker.pos, marker.len), '#80C0FF'));\n\n            pos = marker.pos + marker.len;\n        }\n\n        if (pos < text.length) {\n            root.appendChild(TreeNode.createSpan(text.substr(pos, text.length - pos)));\n        }\n\n        return root;\n    }\n\n    public filter(searchText: string, matchFunction: SearchMatchFunction): void {\n        if (!searchText) {\n            this.resetTitle(DEEP_MODE_DOWN);\n            this.show(DEEP_MODE_DOWN);\n            this.updateLines();\n            return;\n        }\n\n        const markers: PositionMarker[] = [];\n        const isMatch = matchFunction(this.title, searchText, markers);\n\n        if (isMatch) {\n            if (this.titleElement) {\n                this.titleElement.innerHTML = '';\n                this.titleElement.appendChild(TreeNode.createColoredSpan(this.title, markers));\n            }\n\n            this.show(DEEP_MODE_UP);\n            this.show(DEEP_MODE_DOWN);\n        } else {\n            this.resetTitle(DEEP_MODE_DOWN);\n        }\n\n        for (const child of this.children) {\n            child.filter(searchText, matchFunction);\n        }\n\n        this.updateLines();\n    }\n}\n","import { getElementById } from '../../ui';\nimport { IComponent } from '../IComponent';\nimport { ITabInfo } from '../../TabControl';\nimport { IVaultComponent } from '../vaultComponent';\nimport { TreeNode, TreeNodeTitleElementFactory, TreeNodeContext, DEEP_MODE_DOWN } from './TreeNode';\nimport * as plainObject from '../../PlainObject';\nimport * as ui from '../../ui';\nimport { aggresiveSearchMatchFunction, containsSearchMatchFunction, SearchMatchFunction } from '../../searchMatchFunctions';\nimport * as serviceManager from '../../services/serviceManger';\nimport { PasswordService } from '../../services/passwordService';\n\nconst btnTabVaultTabTreeView = getElementById('btnTabVaultTabTreeView') as HTMLButtonElement;\nconst divTabVaultTabTreeView = getElementById('divTabVaultTabTreeView');\n\nconst trvVaultTreeView = getElementById('trvVaultTreeView');\nconst txtVaultTreeViewSearch = getElementById('txtVaultTreeViewSearch') as HTMLInputElement;\nconst cboVaultTreeViewSearchType = getElementById('cboVaultTreeViewSearchType') as HTMLSelectElement;\n\nlet rootTreeNode: TreeNode;\n\ninterface SearchMatchFunctionDescription {\n    text: string,\n    function: SearchMatchFunction\n}\n\nconst searchMatchFunctionDescriptions: SearchMatchFunctionDescription[] = [\n    { text: 'Aggresive', function: aggresiveSearchMatchFunction },\n    { text: 'Regular', function: containsSearchMatchFunction },\n];\n\nfunction onSearchVaultInputChanged(): void {\n    if (!rootTreeNode) {\n        return;\n    }\n\n    const index: number = cboVaultTreeViewSearchType.selectedIndex;\n    const searchMatchFunction: SearchMatchFunction = searchMatchFunctionDescriptions[index].function;\n\n    rootTreeNode.hide(DEEP_MODE_DOWN);\n    rootTreeNode.filter(txtVaultTreeViewSearch.value.toLocaleLowerCase(), searchMatchFunction);\n}\n\nfunction populateSearchFunctions(): void {\n    cboVaultTreeViewSearchType.innerHTML = '';\n\n    for (let description of searchMatchFunctionDescriptions) {\n        const option = document.createElement('option');\n        option.text = description.text;\n        cboVaultTreeViewSearchType.appendChild(option);\n    }\n}\n\nclass VaultTreeNodeTitleElementFactory implements TreeNodeTitleElementFactory {\n    private readonly passwordService: PasswordService;\n\n    public constructor() {\n        this.passwordService = serviceManager.getService('password');\n    }\n\n    private async run(context: TreeNodeContext): Promise<void> {\n        const value = context.value;\n        await this.passwordService.generateAndCopyPasswordToClipboard(value.public, value.alphabet, value.length);\n    }\n\n    createTreeNodeTitleElement(context: TreeNodeContext): HTMLElement {\n        if (context.isPassword) {\n            const button = document.createElement('button');\n            button.style.justifySelf = 'start';\n            button.style.minWidth = '80px';\n\n            ui.setupFeedbackButton(button, async () => await this.run(context));\n\n            return button;\n        }\n\n        return document.createElement('div');\n    }\n}\n\nexport class VaultTreeViewComponent implements IComponent, ITabInfo, IVaultComponent {\n    public readonly name: string = 'VaultTreeView';\n\n    public onVaultLoaded(vault: plainObject.PlainObject): void {\n        rootTreeNode = new TreeNode(null, '<root>', '', new VaultTreeNodeTitleElementFactory(), vault);\n\n        trvVaultTreeView.innerHTML = '';\n        trvVaultTreeView.appendChild(rootTreeNode.element);\n\n        onSearchVaultInputChanged();\n    }\n\n    public getTabButton(): HTMLButtonElement {\n        return btnTabVaultTabTreeView;\n    }\n\n    public getTabContent(): HTMLElement {\n        return divTabVaultTabTreeView;\n    }\n\n    public onTabSelected(): void {\n        txtVaultTreeViewSearch.focus();\n    }\n\n    public init(): void {\n        populateSearchFunctions();\n\n        txtVaultTreeViewSearch.addEventListener('input', onSearchVaultInputChanged);\n        cboVaultTreeViewSearchType.addEventListener('change', onSearchVaultInputChanged);\n    }\n}\n","export interface PositionMarker {\n    pos: number;\n    len: number;\n}\n\nexport type SearchMatchFunction = (lhs: string, rhs: string, markers: PositionMarker[]) => boolean;\n\nfunction indexedAggresiveSearchMatchFunction(lhs: string, lhsIndex: number, rhs: string, markers: PositionMarker[]): boolean {\n    if (!rhs) {\n        return true;\n    }\n\n    lhs = lhs.toLowerCase();\n    rhs = rhs.toLowerCase();\n\n    for (let len = rhs.length; len >= 1; len -= 1) {\n        const subWord = rhs.substr(0, len);\n        const foundPos = lhs.indexOf(subWord, lhsIndex);\n\n        if (foundPos >= 0) {\n            markers.push({\n                pos: foundPos,\n                len: subWord.length\n            });\n\n            return indexedAggresiveSearchMatchFunction(lhs, foundPos + subWord.length, rhs.substr(len), markers);\n        }\n    }\n\n    return false;\n}\n\nexport function aggresiveSearchMatchFunction(lhs: string, rhs: string, markers: PositionMarker[]): boolean {\n    return indexedAggresiveSearchMatchFunction(lhs, 0, rhs, markers);\n}\n\nexport function containsSearchMatchFunction(lhs: string, rhs: string, markers: PositionMarker[]): boolean {\n    const index = lhs.toLowerCase().indexOf(rhs.toLowerCase());\n\n    if (index < 0) {\n        return false;\n    }\n\n    markers.push({\n        pos: index,\n        len: rhs.length\n    });\n\n    return true;\n}\n","import { getElementById } from '../../ui';\nimport { IComponent } from '../IComponent';\nimport { ITabInfo } from '../../TabControl';\nimport { IVaultComponent } from '../vaultComponent';\nimport * as plainObject from '../../PlainObject';\n\nconst btnTabVaultTabTextView = getElementById('btnTabVaultTabTextView') as HTMLButtonElement;\nconst divTabVaultTabTextView = getElementById('divTabVaultTabTextView');\n\nconst txtVault = getElementById('txtVault') as HTMLInputElement;\n\nexport class VaultTextViewComponent implements IComponent, ITabInfo, IVaultComponent {\n    public readonly name: string = 'VaultTextView';\n\n    public onVaultLoaded(vault: plainObject.PlainObject): void {\n        txtVault.value = JSON.stringify(vault, undefined, 4);\n    }\n\n    public getTabButton(): HTMLButtonElement {\n        return btnTabVaultTabTextView;\n    }\n\n    public getTabContent(): HTMLElement {\n        return divTabVaultTabTextView;\n    }\n\n    public onTabSelected(): void {\n    }\n\n    public init(): void {\n    }\n}\n","import { VaultComponent } from '../components/vaultComponent';\n\nexport class VaultService {\n    private readonly vaultComponent: VaultComponent;\n\n    public constructor(vaultComponent: VaultComponent) {\n        this.vaultComponent = vaultComponent;\n    }\n\n    public computeUserPathMatchDepth(path: string): number {\n        return this.vaultComponent.computeUserPathMatchDepth(path);\n    }\n}\n","import { getElementById, setupFeedbackButton } from '../ui';\n\nimport { IComponent } from './IComponent';\nimport { ITabInfo, TabControl } from '../TabControl';\n\nimport * as storageOutputComponent from './storageOutputComponent';\n\nimport { SecureLocalStorage } from '../storages/SecureLocalStorage';\nimport { IVaultStorage } from '../storages/IVaultStorage';\nimport { GitHubPersonalAccessTokenVaultStorage } from '../storages/GitHubVaultStorage';\nimport { hasPrivatePart } from './privatePartComponent';\nimport * as plainObject from '../PlainObject';\nimport { VaultTreeViewComponent } from './vaultComponents/treeViewComponent';\nimport { VaultTextViewComponent } from './vaultComponents/textViewComponent';\n\nimport * as serviceManager from '../services/serviceManger';\nimport { VaultService } from '../services/vaultService';\n\nexport interface IVaultComponent {\n    onVaultLoaded(vault: plainObject.PlainObject): void;\n}\n\nconst divTabVault = getElementById('divTabVault');\nconst btnTabVault = getElementById('btnTabVault') as HTMLButtonElement;\n\nconst btnRefreshVault = getElementById('btnRefreshVault') as HTMLButtonElement;\nconst btnClearVaultSettings = getElementById('btnClearVaultSettings') as HTMLButtonElement;\n\nconst elements: any[] = [\n    new VaultTreeViewComponent(),\n    new VaultTextViewComponent(),\n];\n\nconst tabs: ITabInfo[] = elements.filter(e => (e as ITabInfo).getTabButton !== undefined);\nconst components: (IComponent & IVaultComponent)[] = elements.filter(e => (e as IComponent).init !== undefined);\n\nconst subTabs = new TabControl(tabs);\n\nlet vaultStorage: IVaultStorage = new GitHubPersonalAccessTokenVaultStorage(new SecureLocalStorage());\n\nlet vaultObject: plainObject.PlainObject | null = null;\n\nfunction computeUserPathMatchDepth(path: string) {\n    if (vaultObject === null) {\n        return 0;\n    }\n\n    let obj = vaultObject;\n\n    const pathArray = path.split('/');\n\n    for (let i = 0; i < pathArray.length; i += 1) {\n        if (!obj[pathArray[i]]) {\n            return i;\n        }\n\n        // TODO: Filter here to not go further down ItchyObjects.\n\n        obj = obj[pathArray[i]];\n    }\n\n    return pathArray.length;\n}\n\nasync function reloadVault(): Promise<boolean> {\n    let content: string | null = await vaultStorage.getVaultContent();\n\n    if (content === null) {\n        return false;\n    }\n\n    try {\n        let obj = JSON.parse(content) as plainObject.PlainObject;\n        obj = plainObject.objectDeepSort(obj);\n\n        vaultObject = obj;\n\n        let component: IVaultComponent;\n        for (component of components) {\n            component.onVaultLoaded(obj);\n        }\n\n        return true;\n    } catch (error) {\n        vaultObject = null;\n        console.error(error);\n        return false;\n    }\n}\n\nasync function onRefreshVaultButtonClick(): Promise<boolean> {\n    if (hasPrivatePart() === false) {\n        alert('You must enter a master key first.');\n        return false;\n    }\n\n    return await reloadVault();\n}\n\nfunction onClearVaultSettingsButtonClick(): void {\n    if (prompt('Are you sure you want to clear the vault settings ?\\nType \\'y\\' to accept', '') !== 'y') {\n        return;\n    }\n\n    vaultStorage.clear();\n}\n\nexport class VaultComponent implements IComponent, ITabInfo {\n    public readonly name: string = 'Vault';\n\n    public computeUserPathMatchDepth(path: string) {\n        return computeUserPathMatchDepth(path);\n    }\n\n    public getTabButton(): HTMLButtonElement {\n        return btnTabVault;\n    }\n\n    public getTabContent(): HTMLElement {\n        return divTabVault;\n    }\n\n    public onTabSelected(): void {\n        storageOutputComponent.hide();\n        tabs[subTabs.activeTabIndex].onTabSelected();\n    }\n\n    public init(): void {\n        setupFeedbackButton(btnRefreshVault, onRefreshVaultButtonClick);\n        btnClearVaultSettings.addEventListener('click', onClearVaultSettingsButtonClick);\n\n        const vaultService = new VaultService(this);\n        serviceManager.registerService('vault', vaultService);\n\n        let component: IComponent;\n        for (component of components) {\n            component.init();\n        }\n    }\n}\n","import { getElementById } from '../ui';\nimport { TabControl, ITabInfo } from '../TabControl';\n\nimport { IComponent } from './IComponent';\nimport { PrivatePartComponent } from './privatePartComponent';\nimport { PasswordComponent } from './passwordComponent';\nimport { CipherComponent } from './cipherComponent';\nimport { ReEncryptComponent } from './reEncryptComponent';\nimport { VaultComponent } from './vaultComponent';\n\nimport * as storageOutputComponent from './storageOutputComponent';\n\nconst nothingTabInfo: ITabInfo = {\n    getTabButton(): HTMLButtonElement {\n        return getElementById('btnTabNothing') as HTMLButtonElement;\n    },\n    getTabContent(): HTMLElement {\n        return getElementById('divTabNothing');\n    },\n    onTabSelected(): void {\n        storageOutputComponent.hide();\n    }\n}\n\nconst elements: any[] = [\n    nothingTabInfo,\n    new PrivatePartComponent(),\n    new PasswordComponent(),\n    new CipherComponent(),\n    new ReEncryptComponent(),\n    new storageOutputComponent.StorageOutputComponent(),\n    new VaultComponent(),\n];\n\nconst tabs: ITabInfo[] = elements.filter(e => (e as ITabInfo).getTabButton !== undefined);\nconst components: IComponent[] = elements.filter(e => (e as IComponent).init !== undefined);\n\nconst tabControl = new TabControl(tabs);\n\nexport class RootComponent implements IComponent {\n    public readonly name: string = 'Root';\n\n    public constructor() {\n    }\n\n    public init(): void {\n        let component: IComponent;\n        for (component of components) {\n            component.init();\n        }\n    }\n\n    public getActiveComponent(): IComponent | null {\n        const component = tabs[tabControl.activeTabIndex] as any;\n\n        if (component.init !== undefined) {\n            return component as IComponent;\n        }\n\n        return null;\n    }\n}\n\nexport const rootComponent = new RootComponent();\n","import { getElementById } from './ui';\nimport { rootComponent } from './components/rootComponent';\n\ndeclare const COMMITHASH: string;\n\nconst version = COMMITHASH.substr(0, 11);\nconst githubLink = '<a href=\"https://github.com/TanukiSharp/ItchyPassword\" target=\"_blank\">github</a>';\n\ngetElementById('divInfo').innerHTML = `${version}<br/>${githubLink}`;\n\nrootComponent.init();\n"],"sourceRoot":""}