{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/ui.ts","webpack:///./src/components/privatePartComponent.ts","webpack:///./src/TimedAction.ts","webpack:///./src/arrayUtils.ts","webpack:///./src/crypto.ts","webpack:///./src/stringUtils.ts","webpack:///./src/components/storageOutputComponent.ts","webpack:///./src/components/passwordComponent.ts","webpack:///./src/passwordGenerators/v1.ts","webpack:///./src/ciphers/v2.ts","webpack:///./src/components/cipherComponent.ts","webpack:///./src/ciphers/v1.ts","webpack:///./src/components/reEncryptComponent.ts","webpack:///./src/storages/GitHubVaultStorage.ts","webpack:///./src/components/vault.ts","webpack:///./src/index.ts","webpack:///./src/TabControl.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","getElementById","elementName","element","document","Error","setupCopyButton","txt","button","setupStopAnimationTimer","f","duration","timeout","clearTimeout","setTimeout","createSafeTimeout","classList","remove","addEventListener","async","text","navigator","clipboard","writeText","error","console","stack","writeToClipboard","add","SUCCESS_COLOR","ERROR_COLOR","btnProtectTitleForProtect","btnProtectTitleForClear","txtPrivatePart","txtPrivatePartConfirmation","btnProtect","spnProtectedConfirmation","spnPrivatePartSize","spnPrivatePartSizeConfirmation","onChangedHandlers","getPrivatePart","undefined","protectAndLockPrivatePart","length","innerHTML","disabled","title","updatePrivatePartsMatching","togglePrivatePartProtection","onProtectButtonClick","protectPrivatePartAction","action","delay","overrideDelay","this","onPrivatePartTextInput","onChangedHandler","toString","reset","style","setProperty","onPrivatePartConfirmationTextInput","arrayBufferToUnsignedBigInt","arrayBuffer","buffer","byteLength","headeredBuffer","Uint8Array","set","createHeaderedBuffer","arrayView","DataView","result","multiplier","BigInt","getUint8","toCustomBaseOneWay","bytes","alphabet","alphabetLength","number","arrayBufferToUnsignedBigIntWithoutHeader","remainder","asUintN","fromCustomBase","input","indexOf","byteValue","Number","push","totalLength","diff","slice","unsignedBigIntToArrayBuffer","BASE62_ALPHABET","getDerivedBytes","password","salt","baseKey","crypto","subtle","importKey","algorithm","hash","iterations","deriveKey","exportKey","generateRandomString","byteCount","array","getRandomValues","generateRandomBytes","stringToArray","str","TextEncoder","encode","divStorageOutput","txtPath","txtParameters","txtCustomKeys","onPathTextInput","update","onCustomKeysTextInput","_parameterKeys","_parameterPath","_reservedKeys","chainInfo","pathToObjectChain","path","separatorIndex","tail","firstPath","substr","remainingPath","node","head","tailParent","leaf","entries","customKeys","obj","JSON","parse","constructor","parseCustomKeys","removeProperty","resultParameters","source","target","reservedKeys","includes","shallowMerge","keys","stringify","clearOutputs","setParameters","parameterKeys","parameterPath","show","hide","btnTabPasswords","divTabPasswords","passwordGenerator","hkdfPurpose","_description","privatePart","publicPart","derivedKey","hkdfKey","sign","txtPublicPart","spnPublicPartSize","btnGeneratePublicPart","btnClearPublicPart","btnCopyPublicPart","numOutputSizeRange","numOutputSizeNum","txtAlphabet","spnAlphabetSize","btnResetAlphabet","txtResultPassword","spnResultPasswordLength","btnCopyResultPassword","DEFAULT_LENGTH","DEFAULT_ALPHABET","RESERVED_KEYS","passwordPublicPartLastChange","onClearPublicPartButtonClick","prompt","updatePublicPartSize","updatePasswordPublicPartLastUpdate","updatePasswordGenerationParameters","onGeneratePublicPartButtonClick","randomString","run","Date","toISOString","updateResultPasswordLength","sortedAlphabet","split","sort","canRun","passwordParamters","public","datetime","numericValue","updateOutputSizeRangeToNum","onOutputSizeRangeInput","onOutputSizeNumInput","min","parseInt","val","max","isNaN","Math","updateOutputSizeNumToRange","updateAlphabetSize","updateAlphabetValidityDisplay","isAlphabetValid","onAlphabetTextInput","isAlphabetValidResult","onResetAlphabetButtonClick","resetAlphabet","generatePasswordString","privatePrivateBytes","publicPartBytes","generatePassword","keyString","onPublicPartTextInput","output","ArrayBuffer","nonce","passwordSalt","aesGcmParams","iv","passwordKey","encrypt","payload","decrypt","btnTabCiphers","divTabCiphers","cipher","txtCipherName","txtCipherSource","txtCipherTarget","btnEncrypt","btnDecrypt","btnClearCipherSource","btnCopyCipherTarget","btnClearCipherTarget","clearSourceVisualCue","setSourceVisualCueError","clearAllVisualCues","setCipherTargetValue","updateCipherParameters","version","encryptString","warn","decryptString","decrypted","TextDecoder","decode","message","onEncryptButtonClick","focus","encryptedString","onDecryptButtonClick","decryptedString","encryptionKeyDerivationSalt","ciphers","btnTabReEncrypt","divTabReEncrypt","txtReEncryptSource","txtReEncryptTarget","cboReEncryptFrom","cboReEncryptTo","btnReEncrypt","btnClearReEncryptSource","btnCopyReEncryptTarget","btnClearReEncryptTarget","fillCipherComboBox","cbo","initialValue","item","createElement","childNodes","description","onReEncryptButtonClick","sourceCipherIndex","targetCipherIndex","reEncrypted","Array","map","x","join","GitHubVaultStorage","username","repositoryName","vaultFilename","keyValueStorage","token","oneTimePassword","currentVaultContentHash","repositoryOwner","basicAuthHeader","constructBasicAuthString","btoa","method","authHeader","body","headers","relativeUrl","BASE_URL","retryOnUnauthorized","url","constructUrl","requestInfo","constructFetchRequest","response","fetch","status","request","ok","json","authorization","id","scopes","note","AUTHORIZATION_NAME","authorizations","app","storedToken","getValue","KEY_VALUE_STORAGE_TOKEN_KEY_NAME","listAuthorizations","findAuthorization","deleteAuthorization","createAuthorization","setValue","getToken","ensureToken","constructVaultFileUrl","constructTokenAuthString","removeValue","getVaultContent","responseContent","sha","atob","content","newContent","updateMessage","divTabVault","btnTabVault","txtVault","btnRefreshVault","btnClearVaultSettings","vaultStorage","LOCAL_STORAGE_KEY_USERNAME","LOCAL_STORAGE_KEY_PASSWORD_PUBLIC","LOCAL_STORAGE_KEY_PASSWORD_LENGTH","LOCAL_STORAGE_KEY_REPO","LOCAL_STORAGE_KEY_FILENAME","window","localStorage","removeItem","encryptedItem","getItem","encrypted","setItem","reloadVault","getSetVaultParameter","passwordPublicPart","passwordLengthString","passwordLength","isSafeInteger","ensureVaultStorage","onRefreshVaultButtonClick","onClearVaultSettingsButtonClick","promptText","getTabButton","getTabContent","onChanged","buttonName","btn","type","setupViewButton","tabs","filter","e","components","init","_activeTabIndex","setActiveTab","index","activeTabIndex","tabInfo","onTabSelected","component"],"mappings":"aACE,IAAIA,EAAmB,GAGvB,SAASC,EAAoBC,GAG5B,GAAGF,EAAiBE,GACnB,OAAOF,EAAiBE,GAAUC,QAGnC,IAAIC,EAASJ,EAAiBE,GAAY,CACzCG,EAAGH,EACHI,GAAG,EACHH,QAAS,IAUV,OANAI,EAAQL,GAAUM,KAAKJ,EAAOD,QAASC,EAAQA,EAAOD,QAASF,GAG/DG,EAAOE,GAAI,EAGJF,EAAOD,QAKfF,EAAoBQ,EAAIF,EAGxBN,EAAoBS,EAAIV,EAGxBC,EAAoBU,EAAI,SAASR,EAASS,EAAMC,GAC3CZ,EAAoBa,EAAEX,EAASS,IAClCG,OAAOC,eAAeb,EAASS,EAAM,CAAEK,YAAY,EAAMC,IAAKL,KAKhEZ,EAAoBkB,EAAI,SAAShB,GACX,oBAAXiB,QAA0BA,OAAOC,aAC1CN,OAAOC,eAAeb,EAASiB,OAAOC,YAAa,CAAEC,MAAO,WAE7DP,OAAOC,eAAeb,EAAS,aAAc,CAAEmB,OAAO,KAQvDrB,EAAoBsB,EAAI,SAASD,EAAOE,GAEvC,GADU,EAAPA,IAAUF,EAAQrB,EAAoBqB,IAC/B,EAAPE,EAAU,OAAOF,EACpB,GAAW,EAAPE,GAA8B,iBAAVF,GAAsBA,GAASA,EAAMG,WAAY,OAAOH,EAChF,IAAII,EAAKX,OAAOY,OAAO,MAGvB,GAFA1B,EAAoBkB,EAAEO,GACtBX,OAAOC,eAAeU,EAAI,UAAW,CAAET,YAAY,EAAMK,MAAOA,IACtD,EAAPE,GAA4B,iBAATF,EAAmB,IAAI,IAAIM,KAAON,EAAOrB,EAAoBU,EAAEe,EAAIE,EAAK,SAASA,GAAO,OAAON,EAAMM,IAAQC,KAAK,KAAMD,IAC9I,OAAOF,GAIRzB,EAAoB6B,EAAI,SAAS1B,GAChC,IAAIS,EAAST,GAAUA,EAAOqB,WAC7B,WAAwB,OAAOrB,EAAgB,SAC/C,WAA8B,OAAOA,GAEtC,OADAH,EAAoBU,EAAEE,EAAQ,IAAKA,GAC5BA,GAIRZ,EAAoBa,EAAI,SAASiB,EAAQC,GAAY,OAAOjB,OAAOkB,UAAUC,eAAe1B,KAAKuB,EAAQC,IAGzG/B,EAAoBkC,EAAI,GAIjBlC,EAAoBA,EAAoBmC,EAAI,G,+BClF9C,SAASC,EAAeC,GAC3B,MAAMC,EAA4BC,SAASH,eAAeC,GAE1D,GAAoB,OAAhBA,EACA,MAAM,IAAIG,MAAM,gBAAgBH,iBAGpC,OAAOC,EAuBJ,SAASG,EAAgBC,EAAuBC,GACnD,MAAMC,EAXV,SAA2BC,EAAaC,GACpC,IAAIC,EACJ,MAAO,KACCA,GACAC,aAAaD,GAEjBA,EAAUE,WAAWJ,EAAGC,IAKII,CAAkB,KAC9CP,EAAOQ,UAAUC,OAAO,cACxBT,EAAOQ,UAAUC,OAAO,cACzB,KAEHT,EAAOU,iBAAiB,QAASC,gBA1BrCA,eAAgCC,GAC5B,IAEI,aADMC,UAAUC,UAAUC,UAAUH,IAC7B,EACT,MAAOI,GAEL,OADAC,QAAQD,MAAMA,EAAME,OAASF,IACtB,GAqBGG,CAAiBpB,EAAIrB,OAC3BsB,EAAOQ,UAAUY,IAAI,cAErBpB,EAAOQ,UAAUY,IAAI,aAEzBnB,M,OAID,MAAMoB,EAAwB,UACxBC,EAAsB,UC1CnC,MAAMC,EAA4B,8HAC5BC,EAA0B,kEAE1BC,EAAmChC,EAAe,kBAClDiC,EAA+CjC,EAAe,8BAC9DkC,EAA+BlC,EAAe,cAC9CmC,EAA6CnC,EAAe,4BAE5DoC,EAAuCpC,EAAe,sBACtDqC,EAAmDrC,EAAe,kCAIxE,IAAI,EAEJ,MAAMsC,EAAoC,GAMnC,SAASC,IACZ,YAAoBC,IAAhB,EACO,EAEJR,EAAe/C,MAG1B,SAASwD,IAC+B,IAAhCT,EAAe/C,MAAMyD,SAIzB,EAAcV,EAAe/C,MAC7BkD,EAAyBQ,UAAY,YAErCX,EAAe/C,MAAQ,GACvBgD,EAA2BhD,MAAQ,GACnCmD,EAAmBO,UAAY,IAC/BN,EAA+BM,UAAY,IAE3CX,EAAeY,UAAW,EAC1BX,EAA2BW,UAAW,EAEtCV,EAAWS,UAAY,mBACvBT,EAAWW,MAAQd,EAEnBe,KAeJ,SAASC,SACeP,IAAhB,EACAC,KAbJ,OAAcD,EACdL,EAAyBQ,UAAY,GAErCX,EAAeY,UAAW,EAC1BX,EAA2BW,UAAW,EAEtCV,EAAWS,UAAY,mBACvBT,EAAWW,MAAQf,EACnBI,EAAWU,UAAW,GAW1B,SAASI,IACLD,IAGJ,MAAME,EAAwC,IC/EvC,MAEH,YAA2BC,EAA0BC,GAA1B,KAAAD,SAA0B,KAAAC,QAG9C,MAAMC,QACYZ,IAAjBa,KAAK1C,SACLC,aAAayC,KAAK1C,SAGtB,MAAMwC,OAA0BX,IAAlBY,EAA8BA,EAAgBC,KAAKF,MAEjEE,KAAK1C,QAAUE,WAAW,KACtBwC,KAAKH,SACLG,KAAK1C,aAAU6B,GAChBW,KDgEmDV,EA/Dd,KAiEhD,SAASa,IAML,IAAIC,EACJ,IAAKA,KANLrB,EAAWU,SAA2C,IAAhCZ,EAAe/C,MAAMyD,OAE3CN,EAAmBO,UAAYX,EAAe/C,MAAMyD,OAAOc,WAC3DV,IAGyBR,GACrBiB,IAGJN,EAAyBQ,QAG7B,SAASX,IACDb,EAA2BhD,QAAU+C,EAAe/C,MACpDgD,EAA2ByB,MAAMC,YAAY,aAAc/B,GAE3DK,EAA2ByB,MAAMC,YAAY,aAAc9B,GAInE,SAAS+B,IACLvB,EAA+BM,UAAYV,EAA2BhD,MAAMyD,OAAOc,WACnFP,EAAyBQ,QACzBX,IE9DJ,SAASe,EAA4BC,GAGjC,MAAMpB,GAFNoB,EAlCJ,SAA8BC,GAC1B,GAAIA,EAAOC,WAAa,MACpB,MAAM,IAAI5D,MAAM,qBAAqB2D,EAAOC,oBAGhD,IAAItB,EAASqB,EAAOC,WACpB,MAAMC,EAA6B,IAAIC,WAAW,EAAIH,EAAOC,YAE7D,IAAK,IAAIhG,EAAY,EAAGA,EAAI,EAAGA,GAAK,EAChCiG,EAAejG,GAAK0E,EAAS,IAC7BA,GAAU,IAKd,OAFAuB,EAAeE,IAAI,IAAID,WAAWH,GAAS,GAEpCE,EAAeF,OAmBRK,CAAqBN,IAEAE,WAC7BK,EAAsB,IAAIC,SAASR,EAAa,GAEtD,IAAIS,EAAiB,GACjBC,EAAqB,GAEzB,IAAK,IAAIxG,EAAY,EAAGA,EAAI0E,EAAQ1E,GAAK,EACrCuG,GAAUE,OAAOJ,EAAUK,SAAS1G,IAAMwG,EAC1CA,GAAc,KAGlB,OAAOD,EAiCJ,SAASI,EAAmBC,EAAoBC,GACnD,MAAMC,EAAyBL,OAAOI,EAASnC,QAE/C,IAAI6B,EAAiB,GACjBQ,EAlER,SAAkDjB,GAC9C,MAAMpB,EAAiBoB,EAAYE,WAC7BK,EAAsB,IAAIC,SAASR,EAAa,GAEtD,IAAIS,EAAiB,GACjBC,EAAqB,GAEzB,IAAK,IAAIxG,EAAY,EAAGA,EAAI0E,EAAQ1E,GAAK,EACrCuG,GAAUE,OAAOJ,EAAUK,SAAS1G,IAAMwG,EAC1CA,GAAc,KAGlB,OAAOD,EAsDcS,CAAyCJ,GAE9D,KAAOG,EAAS,IAChB,CACI,MAAME,EAAoBF,EAASD,EACnCC,GAAUD,EAIVP,GAAUM,EAFyBJ,OAAOS,QAAQ,EAAGD,IAKzD,OAAOV,EAsBJ,SAASY,EAAeC,EAAeP,GAC1C,MAAMC,EAAyBL,OAAOI,EAASnC,QAE/C,IAAIqC,EAAiB,GACjBP,EAAqB,GAEzB,IAAK,IAAIxG,EAAY,EAAGA,EAAIoH,EAAM1C,OAAQ1E,GAAK,EAAG,CAG9C+G,GAFsBN,OAAOI,EAASQ,QAAQD,EAAMpH,KAElCwG,EAClBA,GAAcM,EAGlB,OAjFG,SAAqCC,GACxC,MAAMR,EAAwB,GAE9B,KAAOQ,EAAS,IAChB,CACI,MAAME,EAAoBF,EAAS,KACnCA,GAAU,KAEV,MAAMO,EAAoBC,OAAYd,OAAOS,QAAQ,EAAGD,IAExDV,EAAOiB,KAAKF,GAGhB,IAAIG,EAAsBlB,EAAO,GAC7BA,EAAO7B,OAAS,IAChB+C,GAA2B,IAAZlB,EAAO,IAI1B,MAAMmB,EAAOD,GAAelB,EAAO7B,OAAS,GAE5C,IAAK,IAAI1E,EAAY,EAAGA,EAAI0H,EAAM1H,GAAK,EACnCuG,EAAOiB,KAAK,GAGhB,OAAO,IAAItB,WAAWK,EAAOoB,MAAM,IAAI5B,OAwDhC6B,CAA4Bb,GC5IhC,MAAMc,EAA0B,iEAehC3E,eAAe4E,EAAgBC,EAAuBC,GACzD,MAAMC,QAA2BC,OAAOC,OAAOC,UAC3C,MACAL,EACA,UACA,EACA,CAAC,cAGCM,EAA0B,CAC5B9H,KAAM,SACN+H,KAAM,UACNC,WAAY,IACZP,QAQEzB,QAA0B2B,OAAOC,OAAOK,UAC1CH,EACAJ,EAPwC,CACxC1H,KAAM,UACNmE,OAAQ,MAOR,EACA,CAAC,YAKL,aAF+BwD,OAAOC,OAAOM,UAAU,MAAOlC,GAU3D,SAASmC,EAAqBC,EAAoB,GAAI9B,EAAmBgB,GAE5E,OAAO,EAPJ,SAA6Bc,EAAoB,IACpD,MAAMC,EAAoB,IAAI1C,WAAWyC,GACzC,OAAOT,OAAOW,gBAAgBD,GAAO7C,OAIV+C,CAAoBH,GACH9B,GClDzC,SAASkC,EAAcC,GAE1B,OADgB,IAAIC,aACLC,OAAOF,GAAKjD,OCN/B,MAAMoD,EAAqCnH,EAAe,oBAEpDoH,EAA4BpH,EAAe,WAE3CqH,EAAkCrH,EAAe,iBACjDsH,EAAkCtH,EAAe,iBA2DvD,SAASuH,IACLC,IAGJ,SAASC,IACLD,IA4BJ,SAASA,IACL,QAAuBhF,IAAnBkF,QAAmDlF,IAAnBmF,QAAkDnF,IAAlBoF,EAChE,OAGJ,MAAMC,EAnEV,SAASC,EAAkBC,EAAcF,GACrC,MAAMG,EAAyBD,EAAK1C,QAAQ,KAEtC4C,EAAoB,GAEpBC,EAAoBF,GAAkB,EAAID,EAAKI,OAAO,EAAGH,GAAkBD,EAC3EK,EAAoCJ,GAAkB,EAAID,EAAKI,OAAOH,EAAiB,QAAKxF,EAElG,QAAkBA,IAAdqF,EAAyB,CACzB,MAAMQ,EAAoB,GAC1BA,EAAKH,GAAaD,EAClBJ,EAAY,CACRS,KAAMD,EACNE,WAAYF,EACZJ,aAGJJ,EAAUI,KAAKC,GAAaD,EAC5BJ,EAAUU,WAAaV,EAAUI,KACjCJ,EAAUI,KAAOA,EAGrB,OAAIG,EACON,EAAkBM,EAAeP,GAGrCA,EAyCuBC,CAAkB,GAAGV,EAAQnI,SAAS0I,KAC9Da,EAAoBX,EAAUI,KAEpC,IAAK,MAAO1I,EAAKN,KAAUP,OAAO+J,QAAQf,GACtCc,EAAKjJ,GAAON,EAGhB,MAAMyJ,EA5BV,WACI,GAA4B,KAAxBpB,EAAcrI,MACd,MAAO,GAGX,IACI,MAAM0J,EAAWC,KAAKC,MAAMvB,EAAcrI,OAC1C,OAAY,OAAR0J,GAAyC,WAAzBA,EAAIG,YAAYvK,KACzB,KAEJoK,EACT,MACE,OAAO,MAgB4BI,GACA,OAAfL,EApCpBpB,EAAc5D,MAAMsF,eAAe,cAIvC1B,EAAc5D,MAAMC,YAAY,aAAc9B,GAiC9C,MAAMoH,EAxGV,SAAsBC,EAA4BC,EAA4BC,GAC1E,MAAM7E,EAAsB,GAE5B,GAAe,OAAX2E,EACA,IAAK,MAAO3J,EAAKN,KAAUP,OAAO+J,QAAQS,IACH,IAA/BE,EAAaC,SAAS9J,KACtBgF,EAAOhF,GAAON,GAK1B,GAAe,OAAXkK,EACA,IAAK,MAAO5J,EAAKN,KAAUP,OAAO+J,QAAQU,GACtC5E,EAAOhF,GAAON,EAItB,OAAOsF,EAuF+B+E,CAAaZ,EAAYF,EAAMZ,GAExB,IAAzClJ,OAAO6K,KAAKN,GAAkBvG,OAE9BmF,EAAUU,WAAW7J,OAAO6K,KAAK1B,EAAUU,YAAY,IAAM,KAE7DV,EAAUU,WAAW7J,OAAO6K,KAAK1B,EAAUU,YAAY,IAAMU,EAGjE5B,EAAcpI,MAAQ2J,KAAKY,UAAU3B,EAAUS,UAAM9F,EAAW,GAG7D,SAASiH,IACZ/B,OAAiBlF,EACjBmF,OAAiBnF,EACjBoF,OAAgBpF,EAChB6E,EAAcpI,MAAQ,GAG1B,IAAIyI,EACAC,EACAC,EAEG,SAAS8B,EAAcC,EAA4BC,EAAuBR,GAC7E1B,EAAiBiC,EACjBhC,EAAiBiC,EACjBhC,EAAgBwB,EAChB5B,IAGG,SAASqC,IACZ1C,EAAiBzD,MAAMC,YAAY,UAAW,WAG3C,SAASmG,IACZ3C,EAAiBzD,MAAMC,YAAY,UAAW,QCxIlD,MAAMoG,EAAoC/J,EAAe,mBACnDgK,EAAoChK,EAAe,mBAEnDiK,EAA+C,ICd9C,MAIH,YAAmBC,GACf7G,KAAK6G,YAAcnD,EAAcmD,GACjC7G,KAAK8G,aAAe,mCAAmCD,KAG3D,cACI,OAAO,EAGX,kBACI,OAAO7G,KAAK8G,aAGT,uBAAuBC,EAA0BC,GACpD,MAAMC,QAAgCxE,EAAgBsE,EAAaC,GAO7DE,QAA2BrE,OAAOC,OAAOC,UAC3C,MACAkE,EAPqC,CACrC/L,KAAM,OACN+H,KAAM,CAAE/H,KAAM,aAOd,EACA,CAAC,SAGL,aAAa2H,OAAOC,OAAOqE,KAAK,OAAQD,EAASlH,KAAK6G,eDnBe,YAEvEO,EAAkCzK,EAAe,iBACjD0K,EAAsC1K,EAAe,qBACrD2K,EAA0C3K,EAAe,yBACzD4K,EAAuC5K,EAAe,sBACtD6K,EAAsC7K,EAAe,qBAErD8K,GAAuC9K,EAAe,sBACtD+K,GAAqC/K,EAAe,oBAEpDgL,GAAgChL,EAAe,eAC/CiL,GAAoCjL,EAAe,mBACnDkL,GAAqClL,EAAe,oBAEpDmL,GAAsCnL,EAAe,qBACrDoL,GAA4CpL,EAAe,2BAC3DqL,GAA0CrL,EAAe,yBAEzDsL,GAAyB,GACzBC,GAA2B,iGAE3BC,GAA0B,CAAC,WAAY,SAAU,SAAU,YAEjE,IAAIC,GAEJ,SAASC,KACDjB,EAAcxL,MAAMyD,OAAS,GACgE,MAAzFiJ,OAAO,uEAA0E,MAKzFlB,EAAcxL,MAAQ,GACtB2M,KAEAC,KACAC,MAGJ,SAASC,KACL,GAAItB,EAAcxL,MAAMyD,OAAS,GACqE,MAA9FiJ,OAAO,4EAA+E,IACtF,OAIR,MAAMK,EAAuB,IAC7BvB,EAAcxL,MAAQ+M,EACtBJ,KAEAC,KAEAI,KAGJ,SAASJ,KAEDJ,GADAhB,EAAcxL,MAAMyD,OAAS,GACE,IAAIwJ,MAAOC,mBAEX3J,EAkCvC,SAAS4J,KACLhB,GAAwBzI,UAAYwI,GAAkBlM,MAAMyD,OAAOc,WAGvE,SAAS,GAAgBqB,GACrB,MAAMwH,EAA2BxH,EAASyH,MAAM,IAChDD,EAAeE,OAEf,IAAK,IAAIvO,EAAY,EAAGA,EAAIqO,EAAe3J,OAAQ1E,GAAK,EACpD,GAAIqO,EAAerO,EAAI,KAAOqO,EAAerO,GACzC,OAAO,EAIf,OAAO,EAGX,SAAS8N,KACL,IAAiB,IAAbU,KAEA,YADA,KAIJ,MAAMC,EAAiC,CACnCC,OAAQjC,EAAcxL,MACtB0N,SAAUlB,IAGRmB,EAAuBzB,GAAkBlM,MAAMyD,OACjDkK,IAAiBtB,KACjBmB,EAAkB/J,OAASkK,GAG/B,MAAM/H,EAAmBmG,GAAY/L,MACjC4F,IAAa0G,KACbkB,EAAkB5H,SAAWA,GAGjC,EAAqC4H,EAAmB,WAAYjB,IAGxE,SAASqB,KACL9B,GAAiB9L,MAAQ6L,GAAmB7L,MAgBhDiC,eAAe4L,KACXD,WACMZ,KAGV/K,eAAe6L,MAlBf,WACI,MAAMC,EAAcC,SAASnC,GAAmBkC,IAAK,IAC/CE,EAAcD,SAASlC,GAAiB9L,MAAO,IAC/CkO,EAAcF,SAASnC,GAAmBqC,IAAK,IAErD,OAAmB,IAAfC,MAAMF,KACNpC,GAAmB7L,MAAQoO,KAAKF,IAAIH,EAAKK,KAAKL,IAAIE,EAAKC,IAAM3J,YACtD,IAYP8J,IACAT,WAEEZ,KAGV,SAASL,KACLlB,EAAkB/H,UAAY8H,EAAcxL,MAAMyD,OAAOc,WAG7D,SAAS+J,KACLtC,GAAgBtI,UAAYqI,GAAY/L,MAAMyD,OAAOc,WAGzD,SAASgK,GAA8BC,GAC/BA,EACAzC,GAAYtH,MAAMsF,eAAe,cAEjCgC,GAAYtH,MAAMC,YAAY,aAAc9B,GAIpDX,eAAewM,KACX,MAAMC,EAAiC,GAAgB3C,GAAY/L,OAEnEuO,GAA8BG,IAEA,IAA1BA,IAIJJ,WACMtB,MAGV/K,eAAe0M,KACXC,KACAN,WACMtB,KAGV,SAAS,KACLd,GAAkBlM,MAAQ,GAC1B,IACAmN,KAGJ,SAASI,GAAOnC,GACZ,MAAMxF,EAAmBmG,GAAY/L,MAErC,OAAkC,IAA9B,GAAgB4F,KAIpBwF,EAAaA,GAAcI,EAAcxL,QAErC,IAAsCyD,QAAU,GAAK2H,EAAW3H,OAAS,GAAKmC,EAASnC,OAAS,IAOjGxB,eAAe4M,GAAuBzD,GACzC,IAA2B,IAAvBmC,GAAOnC,GACP,OAAO,KAGX,MACM0D,EAAmC,EADP,KAE5BC,EAA+B,EAA0B3D,GAG/D,OAAO,QAF6BJ,EAAkBgE,iBAAiBF,EAAqBC,GAE7ChD,GAAY/L,OAG/DiC,eAAe+K,KACX,IAAiB,IAAbO,KAEA,YADA,KAIJ,MAAM0B,QAAiCJ,GAAuBrD,EAAcxL,OFjQzE,IAAkBmG,EAAe1C,EEkQlB,OAAdwL,IAIJ/C,GAAkBlM,OFtQGmG,EEsQ0B8I,EFtQXxL,EEsQsB2K,KAAKF,IAAI,EAAGF,SAASnC,GAAmB7L,MAAO,KFrQrGmG,EAAM1C,QAAUA,EACT0C,EAGJA,EAAM+C,OAAO,EAAGzF,IEmQvB0J,KAEAN,MAGJ5K,eAAe2M,KACX7C,GAAY/L,MAAQsM,GACpBgC,KAEA,MAAMI,EAAiC,GAAgB3C,GAAY/L,OAEnEuO,GAA8BG,GAE1BA,SACM1B,KAId/K,eAAeiN,KACXvC,KACAC,WACMI,KE3RH,MAAM,GACT,cACI,OAAO,EAGX,kBACI,MAAO,mBAGX,cAAc7G,EAAoBW,GAC9B,MAAMqI,EAAsB,IAAIC,YAAY,GAAejJ,EAAMpB,YAE3DsK,EAAoBpI,OAAOW,gBAAgB,IAAI3C,WAAWkK,EAAQ,EAAG,KACrEG,EAA2BrI,OAAOW,gBAAgB,IAAI3C,WAAWkK,EAAQ,GAAI,KAE7EI,EAA6B,CAC/BjQ,KAAM,UACNkQ,GAAIH,GAQFI,QAA+BxI,OAAOC,OAAOC,UAC/C,YACMN,EAAgBC,EAAUwI,GAPK,CACrChQ,KAAM,UACNmE,OAAQ,MAOR,EACA,CAAC,YAGC6B,QAA4B2B,OAAOC,OAAOwI,QAAQH,EAAcE,EAAatJ,GAInF,OAFA,IAAIlB,WAAWkK,GAAQjK,IAAI,IAAID,WAAWK,GAAS,IAE5C6J,EAGX,cAAchJ,EAAoBW,GAC9B,MAAMuI,EAAoB,IAAIpK,WAAWkB,EAAO,EAAG,IAC7CmJ,EAA2B,IAAIrK,WAAWkB,EAAO,GAAI,IACrDwJ,EAAsB,IAAI1K,WAAWkB,EAAO,IAE5CoJ,EAA6B,CAC/BjQ,KAAM,UACNkQ,GAAIH,GAQFhE,QAAgCxE,EAAgBC,EAAUwI,GAE1DG,QAA+BxI,OAAOC,OAAOC,UAC/C,MACAkE,EATqC,CACrC/L,KAAM,UACNmE,OAAQ,MASR,EACA,CAAC,YAGL,aAAawD,OAAOC,OAAO0I,QAAQL,EAAcE,EAAaE,ICtDtE,MAAM,GAA0B,CAAC,UAAW,SAEtCE,GAAkC9O,EAAe,iBACjD+O,GAAkC/O,EAAe,iBAEjDgP,GAAyB,IAAI,GAE7BC,GAAkCjP,EAAe,iBACjDkP,GAAoClP,EAAe,mBACnDmP,GAAoCnP,EAAe,mBACnDoP,GAA+BpP,EAAe,cAC9CqP,GAA+BrP,EAAe,cAE9CsP,GAAyCtP,EAAe,wBACxDuP,GAAwCvP,EAAe,uBACvDwP,GAAyCxP,EAAe,wBAE9D,SAASyP,KACLP,GAAgBxL,MAAMsF,eAAe,oBAOzC,SAAS0G,KACLR,GAAgBxL,MAAMC,YAAY,mBAAoB9B,GAO1D,SAAS8N,KACLF,KAZAN,GAAgBzL,MAAMsF,eAAe,oBAgBzC,SAAS4G,GAAqB3Q,GAC1BkQ,GAAgBlQ,MAAQA,EAKxB4Q,KAGJ,SAASA,KACL,GAA8B,KAA1BV,GAAgBlQ,OAAwC,KAAxBgQ,GAAchQ,MAE9C,YADA,IAWJ,EAPyB,CACrB6Q,QAASd,GAAOc,QAChB7Q,MAAOkQ,GAAgBlQ,OAGd,WAAWgQ,GAAchQ,QAEuB,IAG1DiC,eAAe6O,GAAc9Q,GAChC,MAAMmL,EAAsB7H,IAC5B,GAA2B,IAAvB6H,EAAY1H,OAEZ,OADAlB,QAAQwO,KAAK,yBACN,KAGX,MAAM5K,EAAqB,EAA0BnG,GAC/C8G,EAAwB,EAA0BqE,GAIxD,OPsBG,SAAsBxF,EAAoBC,GAC7C,MAAMC,EAAyBL,OAAOI,EAASnC,QAE/C,IAAI6B,EAAiB,GACjBQ,EAAiBlB,EAA4Be,GAEjD,KAAOG,EAAS,IAChB,CACI,MAAME,EAAoBF,EAASD,EACnCC,GAAUD,EAIVP,GAAUM,EAFyBJ,OAAOS,QAAQ,EAAGD,IAKzD,OAAOV,EOtCA,OAF8ByK,GAAOL,QAAQvJ,EAAOW,GAEjB,GAGvC7E,eAAe+O,GAAchR,GAChC,MAAMmL,EAAsB7H,IAC5B,GAA2B,IAAvB6H,EAAY1H,OAEZ,OADAlB,QAAQwO,KAAK,yBACN,KAGX,IACI,MAAM5K,EAAqB,EAA0BnG,EAAO,GACtD8G,EAAwB,EAA0BqE,GAElD8F,QAA+BlB,GAAOH,QAAQzJ,EAAOW,GAE3D,OPxGsBa,EOwGUsJ,GPvGpB,IAAIC,aACLC,OAAOxJ,GOuGpB,MAAOrF,GAEL,OADAC,QAAQwO,KAAK,oBAAoBzO,EAAM8O,QAAU,YAAY9O,EAAM8O,UAAY,wBACxE,KP3GR,IAAuBzJ,EO+G9B1F,eAAeoP,KAKX,GAJApB,GAAgBqB,QAChBX,GAAqB,IACrBD,KAEqC,IAAjCT,GAAgBjQ,MAAMyD,OAEtB,YADAgN,KAIJ,MAAMc,QAAuCT,GAAcb,GAAgBjQ,OAEnD,OAApBuR,GAIJZ,GAAqBY,GAGzBtP,eAAeuP,KAKX,GAJAvB,GAAgBqB,QAChBX,GAAqB,IACrBD,KAEqC,IAAjCT,GAAgBjQ,MAAMyD,OAEtB,YADAgN,KAIJ,MAAMgB,QAAuCT,GAAcf,GAAgBjQ,OAEnD,OAApByR,EAKJd,GAAqBc,GAxGrBvB,GAAgBzL,MAAMC,YAAY,mBAAoB9B,GCzC1D,MAAM8O,GAA2C,IAAIzM,WAAW,CAAE,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,GAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,GAAM,MAAQH,OCWpK,MAAM6M,GAAqB,CACvB,IDVG,MACH,cACI,OAAO,EAGX,kBACI,MAAO,mBAGX,cAAcxL,EAAoBW,GAC9B,MAAMqI,EAAsB,IAAIC,YAAY,GAAUjJ,EAAMpB,YAEtDsK,EAAkB,IAAIhK,SAAS8J,EAAQ,EAAG,IAChDlI,OAAOW,gBAAgB,IAAI3C,WAAWkK,EAAQ,EAAG,KAEjD,MAAMI,EAA6B,CAC/BjQ,KAAM,UACNkQ,GAAIH,GAQFI,QAA+BxI,OAAOC,OAAOC,UAC/C,YACMN,EAAgBC,EAAU4K,IAPK,CACrCpS,KAAM,UACNmE,OAAQ,MAOR,EACA,CAAC,YAGC6B,QAA4B2B,OAAOC,OAAOwI,QAAQH,EAAcE,EAAatJ,GAInF,OAFA,IAAIlB,WAAWkK,GAAQjK,IAAI,IAAID,WAAWK,GAAS,IAE5C6J,EAGX,cAAchJ,EAAoBW,GAC9B,MAAMuI,EAAkB,IAAIhK,SAASc,EAAO,EAAG,IACzCwJ,EAAoB,IAAItK,SAASc,EAAO,IAExCoJ,EAA6B,CAC/BjQ,KAAM,UACNkQ,GAAIH,GAQFhE,QAAgCxE,EAAgBC,EAAU4K,IAE1DjC,QAA+BxI,OAAOC,OAAOC,UAC/C,MACAkE,EATqC,CACrC/L,KAAM,UACNmE,OAAQ,MASR,EACA,CAAC,YAGL,aAAawD,OAAOC,OAAO0I,QAAQL,EAAcE,EAAaE,KCrDlE,IAAI,IAGFiC,GAAoC7Q,EAAe,mBACnD8Q,GAAoC9Q,EAAe,mBAEnD+Q,GAAuC/Q,EAAe,sBACtDgR,GAAuChR,EAAe,sBAEtDiR,GAAqCjR,EAAe,oBACpDkR,GAAmClR,EAAe,kBAClDmR,GAAiCnR,EAAe,gBAEhDoR,GAA4CpR,EAAe,2BAC3DqR,GAA2CrR,EAAe,0BAC1DsR,GAA4CtR,EAAe,2BAEjE,SAASuR,GAAmBC,EAAwBC,GAChD,IAAIzC,EAEJ,IAAKA,KAAU4B,GAAS,CACpB,MAAMc,EAA0BvR,SAASwR,cAAc,UACvDD,EAAKzS,MAAQuS,EAAII,WAAWlP,OAAOc,WACnCkO,EAAKvQ,KAAO,GAAG6N,EAAO6C,iBAAiB7C,EAAOc,WAC9C0B,EAAI7P,IAAI+P,GAGZF,EAAIvS,MAAQwS,EAAajO,WAG7B,SAAS,KACLuN,GAAmBrN,MAAMsF,eAAe,oBAe5C,SAAS,KACL,KAZAgI,GAAmBtN,MAAMsF,eAAe,oBAgB5C9H,eAAe4Q,KAIX,GAHAd,GAAmB/R,MAAQ,GAC3B,KAEwC,IAApC8R,GAAmB9R,MAAMyD,OAEzB,YAlBJqO,GAAmBrN,MAAMC,YAAY,mBAAoB9B,GAqBzD,GAAIoP,GAAiBhS,QAAUiS,GAAejS,MAE1C,YAnBJ+R,GAAmBtN,MAAMC,YAAY,mBAAoB9B,GAsBzD,MAAMuI,EAAsB7H,IAC5B,GAA2B,IAAvB6H,EAAY1H,OAEZ,YADAlB,QAAQwO,KAAK,yBAIjB,MAAM+B,EAAoB9E,SAASgE,GAAiBhS,MAAO,IACrD+S,EAAoB/E,SAASiE,GAAejS,MAAO,IAEnD8G,EAAwB,EAA0BqE,GAElDhF,EP9EH,SAAoB4B,GACnBA,EAAItE,OAAS,GAAM,IACnBsE,EAAM,IAAMA,GAGhB,MAAMzC,EAAqB,IAAIL,WAAW8C,EAAItE,OAAS,GAEvD,IAAK,IAAI1E,EAAI,EAAGA,EAAIuG,EAAOP,WAAYhG,GAAK,EACxCuG,EAAOvG,GAAKiP,SAASjG,EAAImB,OAAW,EAAJnK,EAAO,GAAI,IAG/C,OAAOuG,EAAOR,OOmEa,CAAuBgN,GAAmB9R,OAC/DiR,QAA+BU,GAAQmB,GAAmBlD,QAAQzJ,EAAOW,GACzEkM,QAAiCrB,GAAQoB,GAAmBrD,QAAQuB,EAAWnK,GToDlF,IAAkBhC,ESlDrBiN,GAAmB/R,OTkDE8E,ESlD0BkO,ETmDxCC,MAAMtS,UAAUuS,IAAIhU,KACvB,IAAI+F,WAAWH,GACfqO,IAAM,KAAOA,EAAE5O,SAAS,KAAKmC,OAAO,IACtC0M,KAAK,KU9HJ,MAAMC,GAYT,YAAmBC,EAAkBxM,EAA0ByM,EAAgCC,EAA+BC,GAA/D,KAAAF,iBAAgC,KAAAC,gBAA+B,KAAAC,kBAJtH,KAAAC,MAAuB,KACvB,KAAAC,gBAAiC,KACjC,KAAAC,wBAAyC,KAG7CxP,KAAKyP,gBAAkBP,EACvBlP,KAAK0P,gBAAkB1P,KAAK2P,yBAAyBT,EAAUxM,GAG3D,yBAAyBwM,EAAkBxM,GAE/C,MAAO,SADYkN,KAAK,GAAGV,KAAYxM,OAInC,2BACJ,MAAO,SAAS1C,KAAKsP,QAGjB,sBAAsBO,EAAgBC,EAAoBC,GAC9D,MAAMC,EAAuB,CACzB,OAAU,iCACV,eAAgB,mBAChB,cAAiBF,GAOrB,OAJI9P,KAAKuP,kBACLS,EAAQ,gBAAkBhQ,KAAKuP,iBAG5B,CACHM,SACAG,UACAD,KAAMA,EAAOxK,KAAKY,UAAU4J,QAAQ5Q,GAIpC,aAAa8Q,GACjB,MAAO,GAAGhB,GAAmBiB,WAAWD,IAGpC,cAAcE,EAA8BN,EAAgBI,EAAqBH,EAAoBC,GACzG,MAAMK,EAAcpQ,KAAKqQ,aAAaJ,GAChCK,EAA2BtQ,KAAKuQ,sBAAsBV,EAAQC,EAAYC,GAEhF,IAAIS,QAA2BC,MAAML,EAAKE,GAE1C,OAAwB,MAApBE,EAASE,QAAkBP,GAC3BnQ,KAAKuP,gBAAkBjH,OAAO,wBAEzBtI,KAAKuP,sBAIGvP,KAAK2Q,QAAQR,EAAqBN,EAAQI,EAAaH,EAAYC,GAHrE,MAMRS,EAGH,2BACJ,MAAMA,QAAkCxQ,KAAK2Q,SAAQ,EAAM,MAAO,kBAAmB3Q,KAAK0P,iBAE1F,OAAiB,OAAbc,GACArS,QAAQwO,KAAK,gCACN,OAGS,IAAhB6D,EAASI,IACTzS,QAAQD,MAAM,iCAAkCsS,GACzC,YAGEA,EAASK,OAGlB,0BAA0BC,GAC9B,MAAMN,QAAkCxQ,KAAK2Q,SAAQ,EAAM,SAAU,mBAAmBG,EAAcC,KAAM/Q,KAAK0P,iBAEjH,OAAiB,OAAbc,GACArS,QAAQwO,KAAK,kCACN,KAGS,IAAhB6D,EAASI,IACTzS,QAAQD,MAAM,mCAAmC4S,EAAcC,OAAQP,GAGpEA,EAASI,IAGZ,4BACJ,MAAMb,EAAoB,CACtBiB,OAAQ,CAAC,QACTC,KAAMhC,GAAmBiC,oBAGvBV,QAAkCxQ,KAAK2Q,SAAQ,EAAM,OAAQ,kBAAmB3Q,KAAK0P,gBAAiBK,GAE5G,OAAiB,OAAbS,GACArS,QAAQwO,KAAK,qCACN,OAGS,IAAhB6D,EAASI,IACTzS,QAAQD,MAAM,sCAAuCsS,GAC9C,aAGGA,EAASK,QAAQvB,MAG3B,kBAAkB6B,GACtB,IAAK,MAAML,KAAiBK,EACxB,GAAIL,EAAcM,KAAON,EAAcM,IAAIlW,OAAS+T,GAAmBiC,mBACnE,OAAOJ,EAIf,OAAO,KAGH,iBACJ,MAAMO,QAAmCrR,KAAKqP,gBAAgBiC,SAASrC,GAAmBsC,kCAE1F,GAAoB,OAAhBF,EACA,OAAOA,EAGX,MAAMF,QAAgDnR,KAAKwR,qBAE3D,GAAuB,OAAnBL,EACA,OAAO,KAGX,MAAML,EAAuC9Q,KAAKyR,kBAAkBN,GAEpE,GAAsB,OAAlBL,IACsD,UAA5C9Q,KAAK0R,oBAAoBZ,GAC/B,OAAO,KAIf,MAAMxB,QAA6BtP,KAAK2R,sBAExC,OAAc,OAAVrC,EACO,YAGLtP,KAAKqP,gBAAgBuC,SAAS3C,GAAmBsC,iCAAkCjC,GAElFA,GAGH,oBAKJ,OAJmB,OAAftP,KAAKsP,QACLtP,KAAKsP,YAActP,KAAK6R,YAGN,OAAf7R,KAAKsP,MAGR,wBACJ,MAAO,UAAUtP,KAAKyP,mBAAmBzP,KAAKmP,2BAA2BnP,KAAKoP,gBAG3E,wBACH,IAAiC,UAAvBpP,KAAK8R,cACX,OAAO,KAGX,MAAM1B,EAAcpQ,KAAK+R,wBACnBvB,QAAkCxQ,KAAK2Q,SAAQ,EAAO,MAAOP,EAAKpQ,KAAKgS,4BAE7E,GAAiB,OAAbxB,EAEA,OADArS,QAAQwO,KAAK,mCACN,KAGX,IAAoB,IAAhB6D,EAASI,GACT,OAAwB,MAApBJ,EAASE,QACT1Q,KAAKqP,gBAAgB4C,YAAYhD,GAAmBsC,kCACpDvR,KAAKsP,MAAQ,KACbtP,KAAKuP,gBAAkB,WACVvP,KAAKkS,oBAGtB/T,QAAQD,MAAM,+BAA+B8B,KAAKoP,kBAAmBoB,GAE9D,MAGX,MAAM2B,QAAwC3B,EAASK,OAIvD,OAFA7Q,KAAKwP,wBAA0B2C,EAAgBC,IAExCC,KAAKF,EAAgBG,SAGhC,sBAAsBC,EAAoBC,GACtC,IAAiC,UAAvBxS,KAAK8R,cACX,OAAO,EAGX,MAAM/B,EAAO,CACT/C,QAASwF,EACTF,QAAS1C,KAAK2C,GACdH,IAAKpS,KAAKwP,yBAGRY,EAAcpQ,KAAK+R,wBACnBvB,QAAkCxQ,KAAK2Q,SAAQ,EAAO,MAAOP,EAAKpQ,KAAKgS,2BAA4BjC,GAEzG,GAAiB,OAAbS,EAEA,OADArS,QAAQwO,KAAK,oCACN,EAGX,MAAMwF,QAA6B3B,EAASK,OAE5C,OAAoB,IAAhBL,EAASI,IACTzS,QAAQD,MAAM,uCAAuC8B,KAAKoP,kBAAmBoB,EAAU2B,IAChF,IAGXnS,KAAKwP,wBAA2B2C,EAAgBG,QAA2BF,KAEpE,IAzOJ,GAAAlC,SAAmB,yBACnB,GAAAgB,mBAA6B,uCAC7B,GAAAK,iCAA2C,2BCdtD,MAAMkB,GAAgC9V,EAAe,eAC/C+V,GAAgC/V,EAAe,eAE/CgW,GAA6BhW,EAAe,YAC5CiW,GAAoCjW,EAAe,mBACnDkW,GAA0ClW,EAAe,yBAE/D,IAAImW,GAAqC,KAEzC,MAAMC,GAAqC,+BACrCC,GAA4C,yCAC5CC,GAA4C,qCAC5CC,GAAiC,iCACjCC,GAAqC,+BAE3C,MAAM,GACF,YAAYjX,GACRkX,OAAOC,aAAaC,WAAWpX,GAGnC,eAAeA,GACX,MAAMqX,EAA+BH,OAAOC,aAAaG,QAAQtX,GAEjE,OAAsB,OAAlBqX,EACO,KAGJ,GAA8BA,GAGzC,eAAerX,EAAaN,GACxB,MAAM6X,QAAiC,GAA8B7X,GAEnD,OAAd6X,EAKJL,OAAOC,aAAaK,QAAQxX,EAAKuX,GAJ7BtV,QAAQD,MAAM,8CAQ1BL,eAAe8V,MACwB,UA6CvC9V,iBACI,MAAMqR,EAA0B0E,GAAqBb,GAA4B,4BACjF,IAAK7D,EACD,OAAO,EAGX,MAAM2E,EAAoCD,GAAqBZ,GAAmC,wCAClG,IAAKa,EACD,OAAO,EAGX,MAAMC,EAAsCF,GAAqBX,GAAmC,mCACpG,IAAKa,EACD,OAAO,EAGX,MAAMC,EAAiBnK,SAASkK,EAAsB,IACtD,IAA6C,IAAzC5R,OAAO8R,cAAcD,IAA6BA,GAAkB,EACpE,OAAO,EAGX,MAAM5E,EAAgCyE,GAAqBV,GAAwB,iCACnF,IAAK/D,EACD,OAAO,EAGX,MAAMC,EAA+BwE,GAAqBT,GAA4B,mBACtF,IAAK/D,EACD,OAAO,EAGX,MAAMvE,QAAiC,GAAyCgJ,GAChF,IAAKhJ,EACD,OAAO,EAKX,OAFAiI,GAAe,IAAI7D,GAAmBC,EAAUrE,EAAU/F,OAAO,EAAGiP,GAAiB5E,EAAgBC,EAAe,IAAI,KAEjH,EAnFG6E,IAIW,OAAjBnB,KAIJH,GAAS/W,YAAekX,GAAaZ,mBAAsB,WAG/DrU,eAAeqW,WACLP,KAGV,SAASQ,KAC2F,MAA5F7L,OAAO,0EAA6E,MAIxF8K,OAAOC,aAAaC,WAAWP,IAC/BK,OAAOC,aAAaC,WAAWN,IAC/BI,OAAOC,aAAaC,WAAWL,IAC/BG,OAAOC,aAAaC,WAAWJ,IAC/BE,OAAOC,aAAaC,WAAWH,KAGnC,SAASS,GAAqB1X,EAAakY,GACvC,IAAIxY,EAAuBwX,OAAOC,aAAaG,QAAQtX,GAEvD,OAAIN,KAIJA,EAAQ0M,OAAO8L,KAMfhB,OAAOC,aAAaK,QAAQxX,EAAKN,GAE1BA,GALI,MChFf,MAYM,GAAkB,CAZS,CAC7ByY,aAAY,IACD1X,EAAe,iBAE1B2X,cAAa,IACF3X,EAAe,iBAE1B,gBACI,MAMJ,IdmFG,MACH,OACIkC,EAAWjB,iBAAiB,QAAS+B,GACrChB,EAAef,iBAAiB,QAASqC,GACzCrB,EAA2BhB,iBAAiB,QAAS2C,GAErDd,IACAZ,EAAWW,MAAQf,IczFvB,IRqQG,MACH,eACI,OAAOiI,EAEX,gBACI,OAAOC,EAEX,gBACI,IACA8B,KAGJ,ONtRG,IAA2B8L,IMuRa3L,GNtR3C3J,EAAkBkD,KAAKoS,GMyRnB9M,GAAmBqC,IAAM7B,GAAe9H,WACxCsH,GAAmB7L,MAAQqM,GAAe9H,WAE1CoH,EAAmB3J,iBAAiB,QAASyK,IAC7Cf,EAAsB1J,iBAAiB,QAAS8K,IAlNxD,SAAyBzL,EAAuBuX,GAC5C,MAAMC,EAAwB9X,EAAe6X,GAC7CC,EAAI7W,iBAAiB,QAAS,KACT,aAAbX,EAAIyX,MACJzX,EAAIyX,KAAO,QACXD,EAAInV,UAAY,SAEhBrC,EAAIyX,KAAO,WACXD,EAAInV,UAAY,UA4MpBqV,CAAgB7M,GAAmB,yBAEnC9K,EAAgBoK,EAAeI,GAC/BxK,EAAgB8K,GAAmBE,IAEnCP,GAAmB7J,iBAAiB,QAAS6L,IAC7C/B,GAAiB9J,iBAAiB,QAAS8L,IAE3C/B,GAAY/J,iBAAiB,QAASyM,IACtCxC,GAAiBjK,iBAAiB,QAAS2M,IAE3CnD,EAAcxJ,iBAAiB,QAASkN,IAExCvC,KACAiB,KACAgB,OQzSJ,IL0HG,MACH,eACI,OAAOiB,GAEX,gBACI,OAAOC,GAEX,gBACI,IACAc,KAGJ,OACIxP,EAAgB8O,GAAiBI,IAEjCH,GAAWnO,iBAAiB,QAASqP,IACrCjB,GAAWpO,iBAAiB,QAASwP,IAErCxB,GAAchO,iBAAiB,QAAS,KACpC4O,OAGJX,GAAgBjO,iBAAiB,QAAS,KAClCiO,GAAgBjQ,MAAMyD,OAAS,GAC/B+M,OAIRH,GAAqBrO,iBAAiB,QAAS,KAC3CiO,GAAgBjQ,MAAQ,KAG5BuQ,GAAqBvO,iBAAiB,QAAS,KAC3C2O,GAAqB,QK1J7B,IHqEG,MACH,eACI,OAAOiB,GAEX,gBACI,OAAOC,GAEX,gBACI,IAGJ,OACIzQ,EAAgB2Q,GAAoBK,IAGpCE,GAA2CN,GAAkBL,GAAQlO,OAAS,GAC9E6O,GAA2CL,GAAgBN,GAAQlO,OAAS,GAE5EqO,GAAmB9P,iBAAiB,QAAS,KACrC8P,GAAmB9R,MAAMyD,OAAS,GAClC,OAIR0O,GAAwBnQ,iBAAiB,QAAS,KAC9C8P,GAAmB9R,MAAQ,KAG/BqS,GAAwBrQ,iBAAiB,QAAS,KAC9C+P,GAAmB/R,MAAQ,KAG/BkS,GAAalQ,iBAAiB,QAAS6Q,MGpG3C,IT2HG,MACH,OACIxK,EAAcrG,iBAAiB,QAASwG,GACxCL,EAAQnG,iBAAiB,QAASsG,KS7HtC,ID8GG,MACH,eACI,OAAOwO,GAEX,gBACI,OAAOD,GAEX,gBACI,IAGJ,OACIG,GAAgBhV,iBAAiB,QAASsW,IAC1CrB,GAAsBjV,iBAAiB,QAASuW,OCxHlDS,GAAmB,GAASC,OAAOC,QAAsC3V,IAAhC2V,EAAeT,cACxDU,GAA2B,GAASF,OAAOC,QAAgC3V,IAA1B2V,EAAiBE,MAExE,IC/BO,MAaH,YAA2BJ,GAAA,KAAAA,OAZnB,KAAAK,iBAA2B,EAa/B,IAAK,IAAIta,EAAI,EAAGA,EAAIqF,KAAK4U,KAAKvV,OAAQ1E,GAAK,EACvCia,EAAKja,GAAG0Z,eAAezW,iBAAiB,QAAS,KAC7CoC,KAAKkV,aAAava,KAI1BqF,KAAKkV,aAAa,GAjBtB,qBACI,OAAOlV,KAAKiV,gBAEhB,mBAA0BE,GACtB,GAAIA,EAAQ,GAAKA,GAASnV,KAAK4U,KAAKvV,OAChC,MAAM,IAAItC,MAAM,sDAAsDiD,KAAK4U,KAAKvV,OAAS,OAE7FW,KAAKkV,aAAaC,GAad,aAAaC,GACjB,GAAIA,IAAmBpV,KAAKiV,gBACxB,OAGJ,IAAII,EAEJ,IAAKA,KAAWrV,KAAK4U,KAAM,CACvB,MAAM1X,EAASmY,EAAQhB,eACvBnX,EAAOmD,MAAMsF,eAAe,eAC5BzI,EAAOmD,MAAMC,YAAY,QAAS,WAElC+U,EAAQf,gBAAgBjU,MAAMC,YAAY,UAAW,QAGzD,MAAMpD,EAAS8C,KAAK4U,KAAKQ,GAAgBf,eACzCnX,EAAOmD,MAAMC,YAAY,cAAe,QACxCpD,EAAOmD,MAAMsF,eAAe,SAE5B3F,KAAK4U,KAAKQ,GAAgBd,gBAAgBjU,MAAMsF,eAAe,WAE/D3F,KAAKiV,gBAAkBG,EAEvBpV,KAAK4U,KAAKQ,GAAgBE,kBDfnBV,IAIf,MAAMnI,GAAU,2CAAW3H,OAAO,EAAG,IAKrC,IAAIyQ,GACJ,IAAKA,MAHL5Y,EAAe,WAAW2C,UAAY,GAAGmN,2FAGvBsI,IACdQ,GAAUP","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","export function getElementById(elementName: string): HTMLInputElement {\n    const element: HTMLElement|null = document.getElementById(elementName);\n\n    if (elementName === null) {\n        throw new Error(`DOM element '${elementName}' not found.`);\n    }\n\n    return element as HTMLInputElement;\n}\n\nasync function writeToClipboard(text: string): Promise<boolean> {\n    try {\n        await navigator.clipboard.writeText(text);\n        return true;\n    } catch (error) {\n        console.error(error.stack || error);\n        return false;\n    }\n}\n\nfunction createSafeTimeout(f: Function, duration: number): Function {\n    let timeout: number | undefined;\n    return () => {\n        if (timeout) {\n            clearTimeout(timeout);\n        }\n        timeout = setTimeout(f, duration);\n    };\n}\n\nexport function setupCopyButton(txt: HTMLInputElement, button: HTMLInputElement): void {\n    const setupStopAnimationTimer = createSafeTimeout(() => {\n        button.classList.remove('good-flash');\n        button.classList.remove('bad-flash');\n    }, 1000);\n\n    button.addEventListener('click', async () => {\n        if (await writeToClipboard(txt.value)) {\n            button.classList.add('good-flash');\n        } else {\n            button.classList.add('bad-flash');\n        }\n        setupStopAnimationTimer();\n    });\n}\n\nexport const SUCCESS_COLOR: string = '#D0FFD0';\nexport const ERROR_COLOR: string = '#FFD0D0';\n","import { getElementById, SUCCESS_COLOR, ERROR_COLOR } from '../ui';\n\nimport { TimedAction } from '../TimedAction';\nimport { IComponent } from './IComponent';\n\nconst btnProtectTitleForProtect = 'Stores the string in memory and removes it from the UI component. Prevents a physical intruder from copy/pasting the value.';\nconst btnProtectTitleForClear = 'Removes the string form memory and re-enables the UI component.';\n\nconst txtPrivatePart: HTMLInputElement = getElementById('txtPrivatePart');\nconst txtPrivatePartConfirmation: HTMLInputElement = getElementById('txtPrivatePartConfirmation');\nconst btnProtect: HTMLInputElement = getElementById('btnProtect');\nconst spnProtectedConfirmation: HTMLInputElement = getElementById('spnProtectedConfirmation');\n\nconst spnPrivatePartSize: HTMLInputElement = getElementById('spnPrivatePartSize');\nconst spnPrivatePartSizeConfirmation: HTMLInputElement = getElementById('spnPrivatePartSizeConfirmation');\n\nconst PRIVATE_PART_PROTECTION_TIMEOUT: number = 60 * 1000;\n\nlet privatePart: string | undefined;\n\nconst onChangedHandlers: (() => void)[] = [];\n\nexport function registerOnChanged(onChanged: () => void) {\n    onChangedHandlers.push(onChanged);\n}\n\nexport function getPrivatePart(): string {\n    if (privatePart !== undefined) {\n        return privatePart;\n    }\n    return txtPrivatePart.value;\n}\n\nfunction protectAndLockPrivatePart(): void {\n    if (txtPrivatePart.value.length === 0) {\n        return;\n    }\n\n    privatePart = txtPrivatePart.value;\n    spnProtectedConfirmation.innerHTML = 'Protected';\n\n    txtPrivatePart.value = '';\n    txtPrivatePartConfirmation.value = '';\n    spnPrivatePartSize.innerHTML = '0';\n    spnPrivatePartSizeConfirmation.innerHTML = '0';\n\n    txtPrivatePart.disabled = true;\n    txtPrivatePartConfirmation.disabled = true;\n\n    btnProtect.innerHTML = 'Clear and unlock';\n    btnProtect.title = btnProtectTitleForClear;\n\n    updatePrivatePartsMatching();\n}\n\nfunction clearAndUnLockPrivatePart(): void {\n    privatePart = undefined;\n    spnProtectedConfirmation.innerHTML = '';\n\n    txtPrivatePart.disabled = false;\n    txtPrivatePartConfirmation.disabled = false;\n\n    btnProtect.innerHTML = 'Protect and lock';\n    btnProtect.title = btnProtectTitleForProtect;\n    btnProtect.disabled = true;\n}\n\nfunction togglePrivatePartProtection(): void {\n    if (privatePart === undefined) {\n        protectAndLockPrivatePart();\n    } else {\n        clearAndUnLockPrivatePart();\n    }\n}\n\nfunction onProtectButtonClick() {\n    togglePrivatePartProtection();\n}\n\nconst protectPrivatePartAction: TimedAction = new TimedAction(protectAndLockPrivatePart, PRIVATE_PART_PROTECTION_TIMEOUT);\n\nfunction onPrivatePartTextInput(): void {\n    btnProtect.disabled = txtPrivatePart.value.length === 0;\n\n    spnPrivatePartSize.innerHTML = txtPrivatePart.value.length.toString();\n    updatePrivatePartsMatching();\n\n    let onChangedHandler: () => void;\n    for (onChangedHandler of onChangedHandlers) {\n        onChangedHandler();\n    }\n\n    protectPrivatePartAction.reset();\n}\n\nfunction updatePrivatePartsMatching(): void {\n    if (txtPrivatePartConfirmation.value === txtPrivatePart.value) {\n        txtPrivatePartConfirmation.style.setProperty('background', SUCCESS_COLOR);\n    } else {\n        txtPrivatePartConfirmation.style.setProperty('background', ERROR_COLOR);\n    }\n};\n\nfunction onPrivatePartConfirmationTextInput(): void {\n    spnPrivatePartSizeConfirmation.innerHTML = txtPrivatePartConfirmation.value.length.toString();\n    protectPrivatePartAction.reset();\n    updatePrivatePartsMatching();\n}\n\nexport class PrivatePartComponent implements IComponent {\n    init(): void {\n        btnProtect.addEventListener('click', onProtectButtonClick);\n        txtPrivatePart.addEventListener('input', onPrivatePartTextInput);\n        txtPrivatePartConfirmation.addEventListener('input', onPrivatePartConfirmationTextInput);\n\n        updatePrivatePartsMatching();\n        btnProtect.title = btnProtectTitleForProtect;\n    }\n}\n","export class TimedAction {\n    private timeout: number | undefined;\n    public constructor(private action: Function, private delay: number) {\n    }\n\n    public reset(overrideDelay: number | undefined = undefined): void {\n        if (this.timeout !== undefined) {\n            clearTimeout(this.timeout);\n        }\n\n        const delay = overrideDelay !== undefined ? overrideDelay : this.delay;\n\n        this.timeout = setTimeout(() => {\n            this.action();\n            this.timeout = undefined;\n        }, delay);\n    }\n}\n","export function arrayToString(array: ArrayBuffer): string {\n    const decoder = new TextDecoder(/*'utf-8'*/);\n    return decoder.decode(array);\n};\n\nexport function copy(source: Uint8Array, sourceIndex: number, target: Uint8Array, targetIndex: number, length: number): void {\n    for (let i: number = 0; i < length; i += 1) {\n        target[i + targetIndex] = source[i + sourceIndex];\n    }\n}\n\nfunction createHeaderedBuffer(buffer: ArrayBuffer): ArrayBuffer {\n    if (buffer.byteLength > 0xFFFF) {\n        throw new Error(`Buffer too large: ${buffer.byteLength} bytes`);\n    }\n\n    let length = buffer.byteLength;\n    const headeredBuffer: Uint8Array = new Uint8Array(2 + buffer.byteLength);\n\n    for (let i: number = 0; i < 2; i += 1) {\n        headeredBuffer[i] = length % 256;\n        length /= 256;\n    }\n\n    headeredBuffer.set(new Uint8Array(buffer), 2);\n\n    return headeredBuffer.buffer;\n}\n\nfunction arrayBufferToUnsignedBigIntWithoutHeader(arrayBuffer: ArrayBuffer): bigint {\n    const length: number = arrayBuffer.byteLength;\n    const arrayView: DataView = new DataView(arrayBuffer, 0);\n\n    let result: bigint = 0n;\n    let multiplier: bigint = 1n;\n\n    for (let i: number = 0; i < length; i += 1) {\n        result += BigInt(arrayView.getUint8(i)) * multiplier;\n        multiplier *= 256n;\n    }\n\n    return result;\n}\n\nfunction arrayBufferToUnsignedBigInt(arrayBuffer: ArrayBuffer): bigint {\n    arrayBuffer = createHeaderedBuffer(arrayBuffer);\n\n    const length: number = arrayBuffer.byteLength;\n    const arrayView: DataView = new DataView(arrayBuffer, 0);\n\n    let result: bigint = 0n;\n    let multiplier: bigint = 1n;\n\n    for (let i: number = 0; i < length; i += 1) {\n        result += BigInt(arrayView.getUint8(i)) * multiplier;\n        multiplier *= 256n;\n    }\n\n    return result;\n}\n\nexport function unsignedBigIntToArrayBuffer(number: bigint): ArrayBuffer {\n    const result: Array<number> = [];\n\n    while (number > 0n)\n    {\n        const remainder: bigint = number % 256n;\n        number /= 256n;\n\n        const byteValue: number = Number(<any>BigInt.asUintN(8, remainder));\n\n        result.push(byteValue);\n    }\n\n    let totalLength: number = result[0];\n    if (result.length > 1) { // For case where original buffer is of length 1 and contains 0.\n        totalLength += result[1] * 256;\n    }\n\n    // The varable 'result' contains 2 bytes of size header.\n    const diff = totalLength - (result.length - 2);\n\n    for (let i: number = 0; i < diff; i += 1) {\n        result.push(0);\n    }\n\n    return new Uint8Array(result.slice(2)).buffer;\n}\n\n// This is a one way encoding in the sense that decoding is not always deterministic.\n// This can be used to generate strings where decoding it doesn't matter.\nexport function toCustomBaseOneWay(bytes: ArrayBuffer, alphabet: string): string {\n    const alphabetLength: bigint = BigInt(alphabet.length);\n\n    let result: string = '';\n    let number: bigint = arrayBufferToUnsignedBigIntWithoutHeader(bytes);\n\n    while (number > 0n)\n    {\n        const remainder: bigint = number % alphabetLength;\n        number /= alphabetLength;\n\n        const index: number = <number><any>BigInt.asUintN(8, remainder);\n\n        result += alphabet[index];\n    }\n\n    return result;\n}\n\nexport function toCustomBase(bytes: ArrayBuffer, alphabet: string): string {\n    const alphabetLength: bigint = BigInt(alphabet.length);\n\n    let result: string = '';\n    let number: bigint = arrayBufferToUnsignedBigInt(bytes);\n\n    while (number > 0n)\n    {\n        const remainder: bigint = number % alphabetLength;\n        number /= alphabetLength;\n\n        const index: number = <number><any>BigInt.asUintN(8, remainder);\n\n        result += alphabet[index];\n    }\n\n    return result;\n}\n\nexport function fromCustomBase(input: string, alphabet: string): ArrayBuffer {\n    const alphabetLength: bigint = BigInt(alphabet.length);\n\n    let number: bigint = 0n;\n    let multiplier: bigint = 1n;\n\n    for (let i: number = 0; i < input.length; i += 1) {\n        const value: bigint = BigInt(alphabet.indexOf(input[i]));\n\n        number += value * multiplier;\n        multiplier *= alphabetLength;\n    }\n\n    return unsignedBigIntToArrayBuffer(number);\n}\n\nexport function toBase16(buffer: ArrayBuffer): string {\n    return Array.prototype.map.call(\n        new Uint8Array(buffer),\n        x => ('00' + x.toString(16)).slice(-2)\n    ).join('');\n}\n","import * as arrayUtils from './arrayUtils';\n\nexport const BASE62_ALPHABET: string = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\n\nexport interface IPasswordGenerator {\n    readonly version: number;\n    readonly description: string;\n    generatePassword(privatePart: ArrayBuffer, publicPart: ArrayBuffer): Promise<ArrayBuffer>;\n}\n\nexport interface ICipher {\n    readonly version: number;\n    readonly description: string;\n    encrypt(input: ArrayBuffer, password: ArrayBuffer): Promise<ArrayBuffer>;\n    decrypt(input: ArrayBuffer, password: ArrayBuffer): Promise<ArrayBuffer>;\n}\n\nexport async function getDerivedBytes(password: ArrayBuffer, salt: ArrayBuffer): Promise<ArrayBuffer> {\n    const baseKey: CryptoKey = await crypto.subtle.importKey(\n        'raw',\n        password,\n        'PBKDF2',\n        false,\n        ['deriveKey']\n    );\n\n    const algorithm: Pbkdf2Params = {\n        name: 'PBKDF2',\n        hash: 'SHA-512',\n        iterations: 100000,\n        salt\n    };\n\n    const derivedKeyType: AesDerivedKeyParams = {\n        name: 'AES-CBC',\n        length: 256\n    };\n\n    const result: CryptoKey = await crypto.subtle.deriveKey(\n        algorithm,\n        baseKey,\n        derivedKeyType,\n        true,\n        ['encrypt']\n    );\n\n    const key: ArrayBuffer = await crypto.subtle.exportKey('raw', result);\n\n    return key;\n}\n\nexport function generateRandomBytes(byteCount: number = 64): ArrayBuffer {\n    const array: Uint8Array = new Uint8Array(byteCount);\n    return crypto.getRandomValues(array).buffer;\n}\n\nexport function generateRandomString(byteCount: number = 64, alphabet: string = BASE62_ALPHABET): string {\n    const array: ArrayBuffer = generateRandomBytes(byteCount);\n    return arrayUtils.toCustomBaseOneWay(array, alphabet);\n}\n","export function truncate(input: string, length: number): string {\n    if (input.length <= length) {\n        return input;\n    }\n\n    return input.substr(0, length);\n}\n\nexport function stringToArray(str: string): ArrayBuffer {\n    const encoder = new TextEncoder(/*'utf-8'*/);\n    return encoder.encode(str).buffer;\n}\n\nexport function fromBase16(str: string): ArrayBuffer {\n    if (str.length % 2 !== 0) {\n        str = '0' + str;\n    }\n\n    const result: Uint8Array = new Uint8Array(str.length / 2);\n\n    for (let i = 0; i < result.byteLength; i += 1) {\n        result[i] = parseInt(str.substr(i * 2, 2), 16);\n    }\n\n    return result.buffer;\n}\n","import { getElementById, ERROR_COLOR } from '../ui';\nimport { PlainObject } from '../PlainObject';\nimport { IComponent } from './IComponent';\n\nconst divStorageOutput: HTMLInputElement = getElementById('divStorageOutput');\n\nconst txtPath: HTMLInputElement = getElementById('txtPath');\n\nconst txtParameters: HTMLInputElement = getElementById('txtParameters');\nconst txtCustomKeys: HTMLInputElement = getElementById('txtCustomKeys');\n\nfunction shallowMerge(source: PlainObject | null, target: PlainObject | null, reservedKeys: string[]): PlainObject {\n    const result: PlainObject = {};\n\n    if (source !== null) {\n        for (const [key, value] of Object.entries(source)) {\n            if (reservedKeys.includes(key) === false) {\n                result[key] = value;\n            }\n        }\n    }\n\n    if (target !== null) {\n        for (const [key, value] of Object.entries(target)) {\n            result[key] = value;\n        }\n    }\n\n    return result;\n}\n\ntype IChainInfo = {\n    head: PlainObject,\n    tailParent: PlainObject,\n    tail: PlainObject\n};\n\n// Transforms a path like \"a/b/c/d\" into a hierarchy of objects like { \"a\": { \"b\": { \"c\": { \"d\": {} } } } }\n// From the result object, head is the root object that contains \"a\", tail is the value of \"d\", and tailParent is the value of \"c\"\nfunction pathToObjectChain(path: string, chainInfo: IChainInfo | undefined = undefined): IChainInfo {\n    const separatorIndex: number = path.indexOf('/');\n\n    const tail: PlainObject = {};\n\n    const firstPath: string = separatorIndex >= 0 ? path.substr(0, separatorIndex) : path;\n    const remainingPath: string | undefined = separatorIndex >= 0 ? path.substr(separatorIndex + 1) : undefined;\n\n    if (chainInfo === undefined) {\n        const node: PlainObject = {};\n        node[firstPath] = tail;\n        chainInfo = {\n            head: node,\n            tailParent: node,\n            tail\n        };\n    } else {\n        chainInfo.tail[firstPath] = tail;\n        chainInfo.tailParent = chainInfo.tail;\n        chainInfo.tail = tail;\n    }\n\n    if (remainingPath) {\n        return pathToObjectChain(remainingPath, chainInfo);\n    }\n\n    return chainInfo;\n}\n\nfunction onPathTextInput() {\n    update();\n}\n\nfunction onCustomKeysTextInput(): void {\n    update();\n}\n\nfunction updateCustomKeysDisplay(isValid: boolean): void {\n    if (isValid) {\n        txtCustomKeys.style.removeProperty('background');\n        return;\n    }\n\n    txtCustomKeys.style.setProperty('background', ERROR_COLOR);\n}\n\nfunction parseCustomKeys(): PlainObject | null {\n    if (txtCustomKeys.value === '') {\n        return {};\n    }\n\n    try {\n        const obj: any = JSON.parse(txtCustomKeys.value);\n        if (obj === null || obj.constructor.name !== 'Object') {\n            return null;\n        }\n        return obj as PlainObject;\n    } catch {\n        return null;\n    }\n}\n\nfunction update(): void {\n    if (_parameterKeys === undefined || _parameterPath === undefined || _reservedKeys === undefined) {\n        return;\n    }\n\n    const chainInfo: IChainInfo = pathToObjectChain(`${txtPath.value}/${_parameterPath}`);\n    const leaf: PlainObject = chainInfo.tail;\n\n    for (const [key, value] of Object.entries(_parameterKeys)) {\n        leaf[key] = value;\n    }\n\n    const customKeys: PlainObject | null = parseCustomKeys();\n    updateCustomKeysDisplay(customKeys !== null);\n    const resultParameters: PlainObject = shallowMerge(customKeys, leaf, _reservedKeys);\n\n    if (Object.keys(resultParameters).length === 0) {\n        // Set the value of the first (single) property of the object to null.\n        chainInfo.tailParent[Object.keys(chainInfo.tailParent)[0]] = null;\n    } else {\n        chainInfo.tailParent[Object.keys(chainInfo.tailParent)[0]] = resultParameters;\n    }\n\n    txtParameters.value = JSON.stringify(chainInfo.head, undefined, 4);\n}\n\nexport function clearOutputs(): void {\n    _parameterKeys = undefined;\n    _parameterPath = undefined;\n    _reservedKeys = undefined;\n    txtParameters.value = '';\n}\n\nlet _parameterKeys: PlainObject | undefined;\nlet _parameterPath: string | undefined;\nlet _reservedKeys: string[] | undefined;\n\nexport function setParameters(parameterKeys: PlainObject, parameterPath: string, reservedKeys: string[]) {\n    _parameterKeys = parameterKeys;\n    _parameterPath = parameterPath;\n    _reservedKeys = reservedKeys;\n    update();\n}\n\nexport function show(): void {\n    divStorageOutput.style.setProperty('display', 'initial');\n}\n\nexport function hide(): void {\n    divStorageOutput.style.setProperty('display', 'none');\n}\n\nexport class StorageOutputComponent implements IComponent {\n    init(): void {\n        txtCustomKeys.addEventListener('input', onCustomKeysTextInput);\n        txtPath.addEventListener('input', onPathTextInput);\n    }\n}\n","import { getElementById, setupCopyButton, ERROR_COLOR } from '../ui';\nimport * as privatePartComponent from './privatePartComponent';\n\nimport * as crypto from '../crypto';\nimport * as stringUtils from '../stringUtils';\nimport * as arrayUtils from '../arrayUtils';\n\nimport { PlainObject } from '../PlainObject';\nimport { PasswordGeneratorV1 } from '../passwordGenerators/v1';\nimport { ITabInfo } from '../TabControl';\nimport { IComponent } from './IComponent';\n\nimport * as storageOutputComponent from './storageOutputComponent';\n\nconst btnTabPasswords: HTMLInputElement = getElementById('btnTabPasswords');\nconst divTabPasswords: HTMLInputElement = getElementById('divTabPasswords');\n\nconst passwordGenerator: crypto.IPasswordGenerator = new PasswordGeneratorV1('Password');\n\nconst txtPublicPart: HTMLInputElement = getElementById('txtPublicPart');\nconst spnPublicPartSize: HTMLInputElement = getElementById('spnPublicPartSize');\nconst btnGeneratePublicPart: HTMLInputElement = getElementById('btnGeneratePublicPart');\nconst btnClearPublicPart: HTMLInputElement = getElementById('btnClearPublicPart');\nconst btnCopyPublicPart: HTMLInputElement = getElementById('btnCopyPublicPart');\n\nconst numOutputSizeRange: HTMLInputElement = getElementById('numOutputSizeRange');\nconst numOutputSizeNum: HTMLInputElement = getElementById('numOutputSizeNum');\n\nconst txtAlphabet: HTMLInputElement = getElementById('txtAlphabet');\nconst spnAlphabetSize: HTMLInputElement = getElementById('spnAlphabetSize');\nconst btnResetAlphabet: HTMLInputElement = getElementById('btnResetAlphabet');\n\nconst txtResultPassword: HTMLInputElement = getElementById('txtResultPassword');\nconst spnResultPasswordLength: HTMLInputElement = getElementById('spnResultPasswordLength');\nconst btnCopyResultPassword: HTMLInputElement = getElementById('btnCopyResultPassword');\n\nconst DEFAULT_LENGTH: number = 64;\nconst DEFAULT_ALPHABET: string = '!\"#$%&\\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[]^_`abcdefghijklmnopqrstuvwxyz{|}~';\n\nconst RESERVED_KEYS: string[] = ['alphabet', 'length', 'public', 'datetime'];\n\nlet passwordPublicPartLastChange: string | undefined;\n\nfunction onClearPublicPartButtonClick(): void {\n    if (txtPublicPart.value.length > 0) {\n        if (prompt('Are you sure you want to clear the public part ?\\nType \\'y\\' to accept', '') !== 'y') {\n            return;\n        }\n    }\n\n    txtPublicPart.value = '';\n    updatePublicPartSize();\n\n    updatePasswordPublicPartLastUpdate();\n    updatePasswordGenerationParameters();\n}\n\nfunction onGeneratePublicPartButtonClick(): void {\n    if (txtPublicPart.value.length > 0) {\n        if (prompt('Are you sure you want to generate a new public part ?\\nType \\'y\\' to accept', '') !== 'y') {\n            return;\n        }\n    }\n\n    const randomString: string = crypto.generateRandomString();\n    txtPublicPart.value = randomString;\n    updatePublicPartSize();\n\n    updatePasswordPublicPartLastUpdate();\n\n    run();\n}\n\nfunction updatePasswordPublicPartLastUpdate(): void {\n    if (txtPublicPart.value.length > 0) {\n        passwordPublicPartLastChange = new Date().toISOString();\n    } else {\n        passwordPublicPartLastChange = undefined;\n    }\n}\n\nfunction deepMerge(source: PlainObject, target: PlainObject): void {\n    for (const sourceKey of Object.keys(source)) {\n        const targetValue: any = target[sourceKey];\n        const sourceValue: any = source[sourceKey];\n\n        if (targetValue === undefined ||\n            targetValue === null ||\n            targetValue.constructor.name !== 'Object' ||\n            sourceValue.constructor.name !== 'Object') {\n            target[sourceKey] = sourceValue;\n            continue;\n        }\n\n        deepMerge(sourceValue, targetValue);\n    }\n}\n\nfunction setupViewButton(txt: HTMLInputElement, buttonName: string): void {\n    const btn: HTMLInputElement = getElementById(buttonName);\n    btn.addEventListener('click', () => {\n        if (txt.type === 'password') {\n            txt.type = 'input';\n            btn.innerHTML = 'Hide';\n        } else {\n            txt.type = 'password';\n            btn.innerHTML = 'View';\n        }\n    });\n}\n\nfunction updateResultPasswordLength(): void {\n    spnResultPasswordLength.innerHTML = txtResultPassword.value.length.toString();\n}\n\nfunction isAlphabetValid(alphabet: string): boolean {\n    const sortedAlphabet: string[] = alphabet.split('');\n    sortedAlphabet.sort();\n\n    for (let i: number = 1; i < sortedAlphabet.length; i += 1) {\n        if (sortedAlphabet[i - 1] === sortedAlphabet[i]) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nfunction updatePasswordGenerationParameters(): void {\n    if (canRun() === false) {\n        clearOutputs();\n        return;\n    }\n\n    const passwordParamters: PlainObject = {\n        public: txtPublicPart.value,\n        datetime: passwordPublicPartLastChange\n    };\n\n    const numericValue: number = txtResultPassword.value.length;\n    if (numericValue !== DEFAULT_LENGTH) {\n        passwordParamters.length = numericValue;\n    }\n\n    const alphabet: string = txtAlphabet.value;\n    if (alphabet !== DEFAULT_ALPHABET) {\n        passwordParamters.alphabet = alphabet;\n    }\n\n    storageOutputComponent.setParameters(passwordParamters, 'password', RESERVED_KEYS);\n}\n\nfunction updateOutputSizeRangeToNum(): void {\n    numOutputSizeNum.value = numOutputSizeRange.value;\n}\n\nfunction updateOutputSizeNumToRange(): boolean {\n    const min: number = parseInt(numOutputSizeRange.min, 10);\n    const val: number = parseInt(numOutputSizeNum.value, 10);\n    const max: number = parseInt(numOutputSizeRange.max, 10);\n\n    if (isNaN(val) === false) {\n        numOutputSizeRange.value = Math.max(min, Math.min(val, max)).toString();\n        return true;\n    }\n\n    return false;\n}\n\nasync function onOutputSizeRangeInput(): Promise<void> {\n    updateOutputSizeRangeToNum();\n    await run();\n}\n\nasync function onOutputSizeNumInput(): Promise<void> {\n    if (updateOutputSizeNumToRange()) {\n        updateOutputSizeRangeToNum();\n    }\n    await run();\n}\n\nfunction updatePublicPartSize(): void {\n    spnPublicPartSize.innerHTML = txtPublicPart.value.length.toString();\n}\n\nfunction updateAlphabetSize(): void {\n    spnAlphabetSize.innerHTML = txtAlphabet.value.length.toString();\n}\n\nfunction updateAlphabetValidityDisplay(isAlphabetValid: boolean): void {\n    if (isAlphabetValid) {\n        txtAlphabet.style.removeProperty('background');\n    } else {\n        txtAlphabet.style.setProperty('background', ERROR_COLOR);\n    }\n}\n\nasync function onAlphabetTextInput(): Promise<void> {\n    const isAlphabetValidResult: boolean = isAlphabetValid(txtAlphabet.value);\n\n    updateAlphabetValidityDisplay(isAlphabetValidResult);\n\n    if (isAlphabetValidResult === false) {\n        return;\n    }\n\n    updateAlphabetSize();\n    await run();\n}\n\nasync function onResetAlphabetButtonClick(): Promise<void> {\n    resetAlphabet();\n    updateAlphabetSize();\n    await run();\n}\n\nfunction clearOutputs(): void {\n    txtResultPassword.value = '';\n    storageOutputComponent.clearOutputs();\n    updateResultPasswordLength();\n}\n\nfunction canRun(publicPart?: string): boolean {\n    const alphabet: string = txtAlphabet.value;\n\n    if (isAlphabetValid(alphabet) === false) {\n        return false;\n    }\n\n    publicPart = publicPart || txtPublicPart.value;\n\n    if (privatePartComponent.getPrivatePart().length <= 0 || publicPart.length < 8 || alphabet.length < 2) {\n        return false;\n    }\n\n    return true;\n}\n\nexport async function generatePasswordString(publicPart: string): Promise<string | null> {\n    if (canRun(publicPart) === false) {\n        return null;\n    }\n\n    const privatePartString: string = privatePartComponent.getPrivatePart();\n    const privatePrivateBytes: ArrayBuffer = stringUtils.stringToArray(privatePartString);\n    const publicPartBytes: ArrayBuffer = stringUtils.stringToArray(publicPart);\n    const keyBytes: ArrayBuffer = await passwordGenerator.generatePassword(privatePrivateBytes, publicPartBytes);\n\n    return arrayUtils.toCustomBaseOneWay(keyBytes, txtAlphabet.value);\n}\n\nasync function run(): Promise<void> {\n    if (canRun() === false) {\n        clearOutputs();\n        return;\n    }\n\n    const keyString: string | null = await generatePasswordString(txtPublicPart.value);\n    if (keyString === null) {\n        return;\n    }\n\n    txtResultPassword.value = stringUtils.truncate(keyString, Math.max(4, parseInt(numOutputSizeRange.value, 10)));\n\n    updateResultPasswordLength();\n\n    updatePasswordGenerationParameters();\n}\n\nasync function resetAlphabet(): Promise<void> {\n    txtAlphabet.value = DEFAULT_ALPHABET;\n    updateAlphabetSize();\n\n    const isAlphabetValidResult: boolean = isAlphabetValid(txtAlphabet.value);\n\n    updateAlphabetValidityDisplay(isAlphabetValidResult);\n\n    if (isAlphabetValidResult) {\n        await run();\n    }\n}\n\nasync function onPublicPartTextInput(): Promise<void> {\n    updatePublicPartSize();\n    updatePasswordPublicPartLastUpdate();\n    await run();\n}\n\nexport class PasswordComponent implements IComponent, ITabInfo {\n    getTabButton(): HTMLInputElement {\n        return btnTabPasswords;\n    }\n    getTabContent(): HTMLInputElement {\n        return divTabPasswords;\n    }\n    onTabSelected(): void {\n        storageOutputComponent.show();\n        updatePasswordGenerationParameters();\n    }\n\n    init(): void {\n        privatePartComponent.registerOnChanged(run);\n\n        // dafuq!?\n        numOutputSizeRange.max = DEFAULT_LENGTH.toString();\n        numOutputSizeRange.value = DEFAULT_LENGTH.toString();\n\n        btnClearPublicPart.addEventListener('click', onClearPublicPartButtonClick);\n        btnGeneratePublicPart.addEventListener('click', onGeneratePublicPartButtonClick);\n\n        setupViewButton(txtResultPassword, 'btnViewResultPassword');\n\n        setupCopyButton(txtPublicPart, btnCopyPublicPart);\n        setupCopyButton(txtResultPassword, btnCopyResultPassword);\n\n        numOutputSizeRange.addEventListener('input', onOutputSizeRangeInput);\n        numOutputSizeNum.addEventListener('input', onOutputSizeNumInput);\n\n        txtAlphabet.addEventListener('input', onAlphabetTextInput);\n        btnResetAlphabet.addEventListener('click', onResetAlphabetButtonClick);\n\n        txtPublicPart.addEventListener('input', onPublicPartTextInput);\n\n        updatePublicPartSize();\n        updateOutputSizeRangeToNum();\n        resetAlphabet();\n    }\n};\n","import { stringToArray } from '../stringUtils';\nimport { IPasswordGenerator, getDerivedBytes } from '../crypto';\n\nexport class PasswordGeneratorV1 implements IPasswordGenerator {\n    private hkdfPurpose: ArrayBuffer;\n    private _description: string;\n\n    public constructor(hkdfPurpose: string) {\n        this.hkdfPurpose = stringToArray(hkdfPurpose);\n        this._description = `HKDF(PBKDF2, HMAC512) [purpose: ${hkdfPurpose}]`;\n    }\n\n    public get version(): number {\n        return 1;\n    }\n\n    public get description(): string {\n        return this._description;\n    }\n\n    public async generatePassword(privatePart: ArrayBuffer, publicPart: ArrayBuffer): Promise<ArrayBuffer> {\n        const derivedKey: ArrayBuffer = await getDerivedBytes(privatePart, publicPart);\n\n        const hmacParameters: HmacImportParams = {\n            name: 'HMAC',\n            hash: { name: 'SHA-512' }\n        };\n\n        const hkdfKey: CryptoKey = await crypto.subtle.importKey(\n            'raw',\n            derivedKey,\n            hmacParameters,\n            false,\n            ['sign']\n        );\n\n        return await crypto.subtle.sign('HMAC', hkdfKey, this.hkdfPurpose);\n    }\n}\n","import { ICipher, getDerivedBytes } from '../crypto';\n\nexport class CipherV2 implements ICipher {\n    public get version(): number {\n        return 2;\n    }\n\n    public get description(): string {\n        return 'PBKDF2 + AES-GCM';\n    }\n\n    async encrypt(input: ArrayBuffer, password: ArrayBuffer): Promise<ArrayBuffer> {\n        const output: ArrayBuffer = new ArrayBuffer(12 + 16 + 16 + input.byteLength);\n\n        const nonce: Uint8Array = crypto.getRandomValues(new Uint8Array(output, 0, 12));\n        const passwordSalt: Uint8Array = crypto.getRandomValues(new Uint8Array(output, 12, 16));\n\n        const aesGcmParams: AesGcmParams = {\n            name: 'AES-GCM',\n            iv: nonce\n        };\n\n        const aesKeyAlgorithm: AesKeyAlgorithm = {\n            name: 'AES-GCM',\n            length: 256\n        };\n\n        const passwordKey: CryptoKey = await crypto.subtle.importKey(\n            'raw',\n            await getDerivedBytes(password, passwordSalt),\n            aesKeyAlgorithm,\n            false,\n            ['encrypt']\n        );\n\n        const result: ArrayBuffer = await crypto.subtle.encrypt(aesGcmParams, passwordKey, input);\n\n        new Uint8Array(output).set(new Uint8Array(result), 12 + 16);\n\n        return output;\n    }\n\n    async decrypt(input: ArrayBuffer, password: ArrayBuffer): Promise<ArrayBuffer> {\n        const nonce: Uint8Array = new Uint8Array(input, 0, 12);\n        const passwordSalt: Uint8Array = new Uint8Array(input, 12, 16);\n        const payload: Uint8Array = new Uint8Array(input, 12 + 16);\n\n        const aesGcmParams: AesGcmParams = {\n            name: 'AES-GCM',\n            iv: nonce\n        };\n\n        const aesKeyAlgorithm: AesKeyAlgorithm = {\n            name: 'AES-GCM',\n            length: 256\n        };\n\n        const derivedKey: ArrayBuffer = await getDerivedBytes(password, passwordSalt);\n\n        const passwordKey: CryptoKey = await crypto.subtle.importKey(\n            'raw',\n            derivedKey,\n            aesKeyAlgorithm,\n            false,\n            ['decrypt']\n        );\n\n        return await crypto.subtle.decrypt(aesGcmParams, passwordKey, payload);\n    }\n}\n","import * as crypto from '../crypto';\nimport * as stringUtils from '../stringUtils';\nimport * as arrayUtils from '../arrayUtils';\n\nimport { getElementById, setupCopyButton, ERROR_COLOR } from '../ui';\nimport { getPrivatePart } from './privatePartComponent';\n\nimport { CipherV2 } from '../ciphers/v2';\nimport { ITabInfo } from '../TabControl';\nimport { IComponent } from './IComponent';\n\nimport * as storageOutputComponent from './storageOutputComponent';\n\nconst RESERVED_KEYS: string[] = ['version', 'value'];\n\nconst btnTabCiphers: HTMLInputElement = getElementById('btnTabCiphers');\nconst divTabCiphers: HTMLInputElement = getElementById('divTabCiphers');\n\nconst cipher: crypto.ICipher = new CipherV2();\n\nconst txtCipherName: HTMLInputElement = getElementById('txtCipherName');\nconst txtCipherSource: HTMLInputElement = getElementById('txtCipherSource');\nconst txtCipherTarget: HTMLInputElement = getElementById('txtCipherTarget');\nconst btnEncrypt: HTMLInputElement = getElementById('btnEncrypt');\nconst btnDecrypt: HTMLInputElement = getElementById('btnDecrypt');\n\nconst btnClearCipherSource: HTMLInputElement = getElementById('btnClearCipherSource');\nconst btnCopyCipherTarget: HTMLInputElement = getElementById('btnCopyCipherTarget');\nconst btnClearCipherTarget: HTMLInputElement = getElementById('btnClearCipherTarget');\n\nfunction clearSourceVisualCue(): void {\n    txtCipherSource.style.removeProperty('background-color');\n}\n\nfunction clearTargetVisualCue(): void {\n    txtCipherTarget.style.removeProperty('background-color');\n}\n\nfunction setSourceVisualCueError() {\n    txtCipherSource.style.setProperty('background-color', ERROR_COLOR);\n}\n\nfunction setTargetVisualCueError() {\n    txtCipherTarget.style.setProperty('background-color', ERROR_COLOR);\n}\n\nfunction clearAllVisualCues(): void {\n    clearSourceVisualCue();\n    clearTargetVisualCue();\n}\n\nfunction setCipherTargetValue(value: string): void {\n    txtCipherTarget.value = value;\n    onCipherTargetChanged();\n}\n\nfunction onCipherTargetChanged(): void {\n    updateCipherParameters();\n}\n\nfunction updateCipherParameters(): void {\n    if (txtCipherTarget.value === '' || txtCipherName.value === '') {\n        storageOutputComponent.clearOutputs();\n        return;\n    }\n\n    const cipherParameters = {\n        version: cipher.version,\n        value: txtCipherTarget.value\n    }\n\n    const path = `ciphers/${txtCipherName.value}`;\n\n    storageOutputComponent.setParameters(cipherParameters, path, RESERVED_KEYS);\n}\n\nexport async function encryptString(value: string): Promise<string | null> {\n    const privatePart: string = getPrivatePart();\n    if (privatePart.length === 0) {\n        console.warn('Private part is empty');\n        return null;\n    }\n\n    const input: ArrayBuffer = stringUtils.stringToArray(value);\n    const password: ArrayBuffer = stringUtils.stringToArray(privatePart);\n\n    const encrypted: ArrayBuffer = await cipher.encrypt(input, password);\n\n    return arrayUtils.toCustomBase(encrypted, crypto.BASE62_ALPHABET);\n}\n\nexport async function decryptString(value: string): Promise<string | null> {\n    const privatePart: string = getPrivatePart();\n    if (privatePart.length === 0) {\n        console.warn('Private part is empty');\n        return null;\n    }\n\n    try {\n        const input: ArrayBuffer = arrayUtils.fromCustomBase(value, crypto.BASE62_ALPHABET);\n        const password: ArrayBuffer = stringUtils.stringToArray(privatePart);\n\n        const decrypted: ArrayBuffer = await cipher.decrypt(input, password);\n\n        return arrayUtils.arrayToString(decrypted);\n    } catch (error) {\n        console.warn(`Failed to decrypt${error.message ? `, error: ${error.message}` : ', no error message'}`);\n        return null;\n    }\n}\n\nasync function onEncryptButtonClick(): Promise<void> {\n    txtCipherSource.focus();\n    setCipherTargetValue('');\n    clearAllVisualCues();\n\n    if (txtCipherSource.value.length === 0) {\n        setSourceVisualCueError();\n        return;\n    }\n\n    const encryptedString: string | null = await encryptString(txtCipherSource.value);\n\n    if (encryptedString === null) {\n        return;\n    }\n\n    setCipherTargetValue(encryptedString);\n}\n\nasync function onDecryptButtonClick(): Promise<void> {\n    txtCipherSource.focus();\n    setCipherTargetValue('');\n    clearAllVisualCues();\n\n    if (txtCipherSource.value.length === 0) {\n        setSourceVisualCueError();\n        return;\n    }\n\n    const decryptedString: string | null = await decryptString(txtCipherSource.value);\n\n    if (decryptedString === null) {\n        setTargetVisualCueError();\n        return;\n    }\n\n    setCipherTargetValue(decryptedString);\n}\n\nexport class CipherComponent implements IComponent, ITabInfo {\n    getTabButton(): HTMLInputElement {\n        return btnTabCiphers;\n    }\n    getTabContent(): HTMLInputElement {\n        return divTabCiphers;\n    }\n    onTabSelected(): void {\n        storageOutputComponent.show();\n        updateCipherParameters();\n    }\n\n    init(): void {\n        setupCopyButton(txtCipherTarget, btnCopyCipherTarget);\n\n        btnEncrypt.addEventListener('click', onEncryptButtonClick);\n        btnDecrypt.addEventListener('click', onDecryptButtonClick);\n\n        txtCipherName.addEventListener('input', () => {\n            updateCipherParameters();\n        });\n\n        txtCipherSource.addEventListener('input', () => {\n            if (txtCipherSource.value.length > 0) {\n                clearSourceVisualCue();\n            }\n        });\n\n        btnClearCipherSource.addEventListener('click', () => {\n            txtCipherSource.value = '';\n        });\n\n        btnClearCipherTarget.addEventListener('click', () => {\n            setCipherTargetValue('');\n        });\n    }\n}\n","import { ICipher, getDerivedBytes } from '../crypto';\n\nconst encryptionKeyDerivationSalt: ArrayBuffer = new Uint8Array([ 0xf2, 0xcf, 0xef, 0x8e, 0x13, 0x40, 0x46, 0x49, 0x92, 0x2a, 0xde, 0x5c, 0xbc, 0x88, 0x38, 0xa8 ]).buffer;\n\nexport class CipherV1 implements ICipher {\n    public get version(): number {\n        return 1;\n    }\n\n    public get description(): string {\n        return 'PBKDF2 + AES-GCM';\n    }\n\n    async encrypt(input: ArrayBuffer, password: ArrayBuffer): Promise<ArrayBuffer> {\n        const output: ArrayBuffer = new ArrayBuffer(12 + 16 + input.byteLength);\n\n        const nonce: DataView = new DataView(output, 0, 12);\n        crypto.getRandomValues(new Uint8Array(output, 0, 12));\n\n        const aesGcmParams: AesGcmParams = {\n            name: 'AES-GCM',\n            iv: nonce\n        };\n\n        const aesKeyAlgorithm: AesKeyAlgorithm = {\n            name: 'AES-GCM',\n            length: 256\n        };\n\n        const passwordKey: CryptoKey = await crypto.subtle.importKey(\n            'raw',\n            await getDerivedBytes(password, encryptionKeyDerivationSalt),\n            aesKeyAlgorithm,\n            false,\n            ['encrypt']\n        );\n\n        const result: ArrayBuffer = await crypto.subtle.encrypt(aesGcmParams, passwordKey, input);\n\n        new Uint8Array(output).set(new Uint8Array(result), 12);\n\n        return output;\n    }\n\n    async decrypt(input: ArrayBuffer, password: ArrayBuffer): Promise<ArrayBuffer> {\n        const nonce: DataView = new DataView(input, 0, 12);\n        const payload: DataView = new DataView(input, 12);\n\n        const aesGcmParams: AesGcmParams = {\n            name: 'AES-GCM',\n            iv: nonce\n        };\n\n        const aesKeyAlgorithm: AesKeyAlgorithm = {\n            name: 'AES-GCM',\n            length: 256\n        };\n\n        const derivedKey: ArrayBuffer = await getDerivedBytes(password, encryptionKeyDerivationSalt);\n\n        const passwordKey: CryptoKey = await crypto.subtle.importKey(\n            'raw',\n            derivedKey,\n            aesKeyAlgorithm,\n            false,\n            ['decrypt']\n        );\n\n        return await crypto.subtle.decrypt(aesGcmParams, passwordKey, payload);\n    }\n}\n","import { ICipher } from '../crypto';\nimport * as stringUtils from '../stringUtils';\nimport * as arrayUtils from '../arrayUtils';\nimport { ITabInfo } from '../TabControl';\nimport { getElementById, setupCopyButton, ERROR_COLOR } from '../ui';\nimport { getPrivatePart } from './privatePartComponent';\n\nimport { CipherV1 } from '../ciphers/v1';\nimport { CipherV2 } from '../ciphers/v2';\nimport { IComponent } from './IComponent';\n\nimport * as storageOutputComponent from './storageOutputComponent';\n\nconst ciphers: ICipher[] = [\n    new CipherV1(),\n    new CipherV2()\n];\n\nconst btnTabReEncrypt: HTMLInputElement = getElementById('btnTabReEncrypt');\nconst divTabReEncrypt: HTMLInputElement = getElementById('divTabReEncrypt');\n\nconst txtReEncryptSource: HTMLInputElement = getElementById('txtReEncryptSource');\nconst txtReEncryptTarget: HTMLInputElement = getElementById('txtReEncryptTarget');\n\nconst cboReEncryptFrom: HTMLInputElement = getElementById('cboReEncryptFrom');\nconst cboReEncryptTo: HTMLInputElement = getElementById('cboReEncryptTo');\nconst btnReEncrypt: HTMLInputElement = getElementById('btnReEncrypt');\n\nconst btnClearReEncryptSource: HTMLInputElement = getElementById('btnClearReEncryptSource');\nconst btnCopyReEncryptTarget: HTMLInputElement = getElementById('btnCopyReEncryptTarget');\nconst btnClearReEncryptTarget: HTMLInputElement = getElementById('btnClearReEncryptTarget');\n\nfunction fillCipherComboBox(cbo: HTMLSelectElement, initialValue: number): void {\n    let cipher: ICipher;\n\n    for (cipher of ciphers) {\n        const item: HTMLOptionElement = document.createElement('option');\n        item.value = cbo.childNodes.length.toString();\n        item.text = `${cipher.description} (v${cipher.version})`;\n        cbo.add(item);\n    }\n\n    cbo.value = initialValue.toString();\n}\n\nfunction clearSourceVisualCue(): void {\n    txtReEncryptSource.style.removeProperty('background-color');\n}\n\nfunction clearTargetVisualCue(): void {\n    txtReEncryptTarget.style.removeProperty('background-color');\n}\n\nfunction setSourceVisualCueError() {\n    txtReEncryptSource.style.setProperty('background-color', ERROR_COLOR);\n}\n\nfunction setTargetVisualCueError() {\n    txtReEncryptTarget.style.setProperty('background-color', ERROR_COLOR);\n}\n\nfunction clearAllVisualCues(): void {\n    clearSourceVisualCue();\n    clearTargetVisualCue();\n}\n\nasync function onReEncryptButtonClick(): Promise<void> {\n    txtReEncryptTarget.value = '';\n    clearAllVisualCues();\n\n    if (txtReEncryptSource.value.length === 0) {\n        setSourceVisualCueError();\n        return;\n    }\n\n    if (cboReEncryptFrom.value === cboReEncryptTo.value) {\n        setTargetVisualCueError();\n        return;\n    }\n\n    const privatePart: string = getPrivatePart();\n    if (privatePart.length === 0) {\n        console.warn('Private part is empty');\n        return;\n    }\n\n    const sourceCipherIndex = parseInt(cboReEncryptFrom.value, 10);\n    const targetCipherIndex = parseInt(cboReEncryptTo.value, 10);\n\n    const password: ArrayBuffer = stringUtils.stringToArray(privatePart);\n\n    const input: ArrayBuffer = stringUtils.fromBase16(txtReEncryptSource.value);\n    const decrypted: ArrayBuffer = await ciphers[sourceCipherIndex].decrypt(input, password);\n    const reEncrypted: ArrayBuffer = await ciphers[targetCipherIndex].encrypt(decrypted, password);\n\n    txtReEncryptTarget.value = arrayUtils.toBase16(reEncrypted);\n}\n\nexport class ReEncryptComponent implements IComponent, ITabInfo {\n    getTabButton(): HTMLInputElement {\n        return btnTabReEncrypt;\n    }\n    getTabContent(): HTMLInputElement {\n        return divTabReEncrypt;\n    }\n    onTabSelected() {\n        storageOutputComponent.hide();\n    }\n\n    init(): void {\n        setupCopyButton(txtReEncryptTarget, btnCopyReEncryptTarget);\n\n        // Mais est-ce que ce monde est serieux?\n        fillCipherComboBox(<HTMLSelectElement><any>cboReEncryptFrom, ciphers.length - 2);\n        fillCipherComboBox(<HTMLSelectElement><any>cboReEncryptTo, ciphers.length - 1);\n\n        txtReEncryptSource.addEventListener('input', () => {\n            if (txtReEncryptSource.value.length > 0) {\n                clearSourceVisualCue();\n            }\n        });\n\n        btnClearReEncryptSource.addEventListener('click', () => {\n            txtReEncryptSource.value = '';\n        });\n\n        btnClearReEncryptTarget.addEventListener('click', () => {\n            txtReEncryptTarget.value = '';\n        });\n\n        btnReEncrypt.addEventListener('click', onReEncryptButtonClick);\n    }\n}\n","import { IVaultStorage } from './IVaultStorage';\nimport { PlainObject } from '../PlainObject';\n\ninterface IApp {\n    name: string;\n}\n\ninterface IAuthorization {\n    id: number;\n    app: IApp;\n}\n\ninterface IGitHubContent {\n    sha: string;\n    content: string;\n}\n\nexport interface IKeyValueStorage {\n    removeValue(key: string): void;\n    getValue(key: string): Promise<string | null>;\n    setValue(key: string, value: string): Promise<void>;\n}\n\nexport class GitHubVaultStorage implements IVaultStorage {\n    static BASE_URL: string = 'https://api.github.com';\n    static AUTHORIZATION_NAME: string = 'github.com/TanukiSharp/ItchyPassword';\n    static KEY_VALUE_STORAGE_TOKEN_KEY_NAME: string = 'GitHubVaultStorage.Token';\n\n    private repositoryOwner: string;\n    private basicAuthHeader: string;\n\n    private token: string | null = null;\n    private oneTimePassword: string | null = null;\n    private currentVaultContentHash: string | null = null;\n\n    public constructor(username: string, password: string, private repositoryName: string, private vaultFilename: string, private keyValueStorage: IKeyValueStorage) {\n        this.repositoryOwner = username;\n        this.basicAuthHeader = this.constructBasicAuthString(username, password);\n    }\n\n    private constructBasicAuthString(username: string, password: string): string {\n        const authString = btoa(`${username}:${password}`);\n        return `Basic ${authString}`;\n    }\n\n    private constructTokenAuthString(): string {\n        return `token ${this.token}`;\n    }\n\n    private constructFetchRequest(method: string, authHeader: string, body: any): RequestInit {\n        const headers: PlainObject = {\n            'Accept': 'application/vnd.github.v3+json',\n            'Content-Type': 'application/json',\n            'Authorization': authHeader\n        };\n\n        if (this.oneTimePassword) {\n            headers['x-github-otp'] = this.oneTimePassword;\n        }\n\n        return {\n            method,\n            headers,\n            body: body ? JSON.stringify(body) : undefined\n        };\n    }\n\n    private constructUrl(relativeUrl: string): string {\n        return `${GitHubVaultStorage.BASE_URL}${relativeUrl}`;\n    }\n\n    private async request(retryOnUnauthorized: boolean, method: string, relativeUrl: string, authHeader: string, body: any = undefined): Promise<Response | null> {\n        const url: string = this.constructUrl(relativeUrl);\n        const requestInfo: RequestInit = this.constructFetchRequest(method, authHeader, body);\n\n        let response: Response = await fetch(url, requestInfo);\n\n        if (response.status === 401 && retryOnUnauthorized) {\n            this.oneTimePassword = prompt('Input your 2FA code:');\n\n            if (!this.oneTimePassword) {\n                return null;\n            }\n\n            return await this.request(retryOnUnauthorized, method, relativeUrl, authHeader, body);\n        }\n\n        return response;\n    }\n\n    private async listAuthorizations(): Promise<IAuthorization[] | null> {\n        const response: Response | null = await this.request(true, 'GET', '/authorizations', this.basicAuthHeader);\n\n        if (response === null) {\n            console.warn('List authorizations aborted.');\n            return null;\n        }\n\n        if (response.ok === false) {\n            console.error('Failed to list authorizations.', response);\n            return null;\n        }\n\n        return await response.json();\n    }\n\n    private async deleteAuthorization(authorization: IAuthorization): Promise<boolean> {\n        const response: Response | null = await this.request(true, 'DELETE', `/authorizations/${authorization.id}`, this.basicAuthHeader);\n\n        if (response === null) {\n            console.warn('Delete authorization aborted.');\n            return false;\n        }\n\n        if (response.ok === false) {\n            console.error(`Failed to delete authorization '${authorization.id}'.`, response);\n        }\n\n        return response.ok;\n    }\n\n    private async createAuthorization(): Promise<string | null> {\n        const body: PlainObject = {\n            scopes: ['repo'],\n            note: GitHubVaultStorage.AUTHORIZATION_NAME\n        };\n\n        const response: Response | null = await this.request(true, 'POST', '/authorizations', this.basicAuthHeader, body);\n\n        if (response === null) {\n            console.warn('Create new authorization aborted.');\n            return null;\n        }\n\n        if (response.ok === false) {\n            console.error('Failed to create new authorization.', response);\n            return null;\n        }\n\n        return (await response.json()).token as string;\n    }\n\n    private findAuthorization(authorizations: IAuthorization[]): IAuthorization | null {\n        for (const authorization of authorizations) {\n            if (authorization.app && authorization.app.name === GitHubVaultStorage.AUTHORIZATION_NAME) {\n                return authorization;\n            }\n        }\n\n        return null;\n    }\n\n    private async getToken(): Promise<string | null> {\n        const storedToken: string | null = await this.keyValueStorage.getValue(GitHubVaultStorage.KEY_VALUE_STORAGE_TOKEN_KEY_NAME);\n\n        if (storedToken !== null) {\n            return storedToken;\n        }\n\n        const authorizations: IAuthorization[] | null = await this.listAuthorizations();\n\n        if (authorizations === null) {\n            return null;\n        }\n\n        const authorization: IAuthorization | null = this.findAuthorization(authorizations);\n\n        if (authorization !== null) {\n            if (await this.deleteAuthorization(authorization) === false) {\n                return null;\n            }\n        }\n\n        const token: string | null = await this.createAuthorization();\n\n        if (token === null) {\n            return null;\n        }\n\n        await this.keyValueStorage.setValue(GitHubVaultStorage.KEY_VALUE_STORAGE_TOKEN_KEY_NAME, token);\n\n        return token;\n    }\n\n    private async ensureToken(): Promise<boolean> {\n        if (this.token === null) {\n            this.token = await this.getToken();\n        }\n\n        return this.token !== null;\n    }\n\n    private constructVaultFileUrl() {\n        return `/repos/${this.repositoryOwner}/${this.repositoryName}/contents/${this.vaultFilename}`;\n    }\n\n    public async getVaultContent(): Promise<string | null> {\n        if (await this.ensureToken() === false) {\n            return null;\n        }\n\n        const url: string = this.constructVaultFileUrl();\n        const response: Response | null = await this.request(false, 'GET', url, this.constructTokenAuthString());\n\n        if (response === null) {\n            console.warn('Fetching vault content aborted.');\n            return null;\n        }\n\n        if (response.ok === false) {\n            if (response.status === 401) {\n                this.keyValueStorage.removeValue(GitHubVaultStorage.KEY_VALUE_STORAGE_TOKEN_KEY_NAME);\n                this.token = null;\n                this.oneTimePassword = null;\n                return await this.getVaultContent();\n            }\n\n            console.error(`Failed to fetch vault file '${this.vaultFilename}'.`, response);\n\n            return null;\n        }\n\n        const responseContent: IGitHubContent = await response.json();\n\n        this.currentVaultContentHash = responseContent.sha;\n\n        return atob(responseContent.content);\n    }\n\n    async setVaultContent(newContent: string, updateMessage: string): Promise<boolean> {\n        if (await this.ensureToken() === false) {\n            return false;\n        }\n\n        const body = {\n            message: updateMessage,\n            content: btoa(newContent),\n            sha: this.currentVaultContentHash\n        };\n\n        const url: string = this.constructVaultFileUrl();\n        const response: Response | null = await this.request(false, 'PUT', url, this.constructTokenAuthString(), body);\n\n        if (response === null) {\n            console.warn('Push new vault content aborted.');\n            return false;\n        }\n\n        const responseContent: any = await response.json();\n\n        if (response.ok === false) {\n            console.error(`Failed to create/update vault file '${this.vaultFilename}'.`, response, responseContent);\n            return false;\n        }\n\n        this.currentVaultContentHash = (responseContent.content as IGitHubContent).sha;\n\n        return true;\n    };\n}\n","import { getElementById } from '../ui';\n\nimport { IComponent } from './IComponent';\nimport { ITabInfo } from '../TabControl';\n\nimport * as passwordComponent from './passwordComponent';\nimport * as cipherComponent from './cipherComponent';\nimport * as storageOutputComponent from './storageOutputComponent';\n\nimport { IVaultStorage } from '../storages/IVaultStorage';\nimport { GitHubVaultStorage, IKeyValueStorage } from '../storages/GitHubVaultStorage';\n\nconst divTabVault: HTMLInputElement = getElementById('divTabVault');\nconst btnTabVault: HTMLInputElement = getElementById('btnTabVault');\n\nconst txtVault: HTMLInputElement = getElementById('txtVault');\nconst btnRefreshVault: HTMLInputElement = getElementById('btnRefreshVault');\nconst btnClearVaultSettings: HTMLInputElement = getElementById('btnClearVaultSettings');\n\nlet vaultStorage: IVaultStorage | null = null;\n\nconst LOCAL_STORAGE_KEY_USERNAME: string = 'ItchyPassword.Vault.Username';\nconst LOCAL_STORAGE_KEY_PASSWORD_PUBLIC: string = 'ItchyPassword.Vault.PasswordPublicPart';\nconst LOCAL_STORAGE_KEY_PASSWORD_LENGTH: string = 'ItchyPassword.Vault.PasswordLength';\nconst LOCAL_STORAGE_KEY_REPO: string = 'ItchyPassword.Vault.Repository';\nconst LOCAL_STORAGE_KEY_FILENAME: string = 'ItchyPassword.Vault.Filename';\n\nclass SecureLocalKeyValueStorage implements IKeyValueStorage {\n    removeValue(key: string): void {\n        window.localStorage.removeItem(key);\n    }\n\n    async getValue(key: string): Promise<string | null> {\n        const encryptedItem: string | null = window.localStorage.getItem(key);\n\n        if (encryptedItem === null) {\n            return null;\n        }\n\n        return cipherComponent.decryptString(encryptedItem);\n    }\n\n    async setValue(key: string, value: string): Promise<void> {\n        const encrypted: string | null = await cipherComponent.encryptString(value);\n\n        if (encrypted === null) {\n            console.error('Failed to encrypt value. (nothing stored)');\n            return;\n        }\n\n        window.localStorage.setItem(key, encrypted);\n    }\n}\n\nasync function reloadVault(): Promise<void> {\n    if (await ensureVaultStorage() === false) {\n        return;\n    }\n\n    if (vaultStorage === null) {\n        return;\n    }\n\n    txtVault.value = (await vaultStorage.getVaultContent()) || '<error>';\n}\n\nasync function onRefreshVaultButtonClick(): Promise<void> {\n    await reloadVault();\n}\n\nfunction onClearVaultSettingsButtonClick(): void {\n    if (prompt('Are you sure you want to clear the vault settings ?\\nType \\'y\\' to accept', '') !== 'y') {\n        return;\n    }\n\n    window.localStorage.removeItem(LOCAL_STORAGE_KEY_USERNAME);\n    window.localStorage.removeItem(LOCAL_STORAGE_KEY_PASSWORD_PUBLIC);\n    window.localStorage.removeItem(LOCAL_STORAGE_KEY_PASSWORD_LENGTH);\n    window.localStorage.removeItem(LOCAL_STORAGE_KEY_REPO);\n    window.localStorage.removeItem(LOCAL_STORAGE_KEY_FILENAME);\n}\n\nfunction getSetVaultParameter(key: string, promptText: string): string | null {\n    let value: string | null = window.localStorage.getItem(key);\n\n    if (value) {\n        return value;\n    }\n\n    value = prompt(promptText);\n\n    if (!value) {\n        return null;\n    }\n\n    window.localStorage.setItem(key, value);\n\n    return value;\n}\n\nasync function ensureVaultStorage(): Promise<boolean> {\n    const username: string | null = getSetVaultParameter(LOCAL_STORAGE_KEY_USERNAME, 'GitHub account username:');\n    if (!username) {\n        return false;\n    }\n\n    const passwordPublicPart: string | null = getSetVaultParameter(LOCAL_STORAGE_KEY_PASSWORD_PUBLIC, 'GitHub account password public part:');\n    if (!passwordPublicPart) {\n        return false;\n    }\n\n    const passwordLengthString: string | null = getSetVaultParameter(LOCAL_STORAGE_KEY_PASSWORD_LENGTH, 'GitHub account password length:');\n    if (!passwordLengthString) {\n        return false;\n    }\n\n    const passwordLength = parseInt(passwordLengthString, 10);\n    if (Number.isSafeInteger(passwordLength) === false || passwordLength <= 0) {\n        return false;\n    }\n\n    const repositoryName: string | null = getSetVaultParameter(LOCAL_STORAGE_KEY_REPO, 'Vault GitHub repository name:');\n    if (!repositoryName) {\n        return false;\n    }\n\n    const vaultFilename: string | null = getSetVaultParameter(LOCAL_STORAGE_KEY_FILENAME, 'Vault filename:');\n    if (!vaultFilename) {\n        return false;\n    }\n\n    const keyString: string | null = await passwordComponent.generatePasswordString(passwordPublicPart);\n    if (!keyString) {\n        return false;\n    }\n\n    vaultStorage = new GitHubVaultStorage(username, keyString.substr(0, passwordLength), repositoryName, vaultFilename, new SecureLocalKeyValueStorage());\n\n    return true;\n}\n\nexport class VaultComponent implements IComponent, ITabInfo {\n    getTabButton(): HTMLInputElement {\n        return btnTabVault;\n    }\n    getTabContent(): HTMLInputElement {\n        return divTabVault;\n    }\n    onTabSelected(): void {\n        storageOutputComponent.hide();\n    }\n\n    init(): void {\n        btnRefreshVault.addEventListener('click', onRefreshVaultButtonClick);\n        btnClearVaultSettings.addEventListener('click', onClearVaultSettingsButtonClick);\n    }\n}\n","import { getElementById } from './ui';\nimport { TabControl, ITabInfo } from './TabControl';\nimport { IComponent } from './components/IComponent';\n\nimport { PrivatePartComponent } from './components/privatePartComponent';\nimport { PasswordComponent } from './components/passwordComponent';\nimport { CipherComponent } from './components/cipherComponent';\nimport { ReEncryptComponent } from './components/reEncryptComponent';\nimport { VaultComponent } from './components/vault';\n\nimport * as storageOutputComponent from './components/storageOutputComponent';\n\nconst nothingTabInfo: ITabInfo = {\n    getTabButton(): HTMLInputElement {\n        return getElementById('btnTabNothing');\n    },\n    getTabContent(): HTMLInputElement {\n        return getElementById('divTabNothing');\n    },\n    onTabSelected(): void {\n        storageOutputComponent.hide();\n    }\n}\n\nconst elements: any[] = [\n    nothingTabInfo,\n    new PrivatePartComponent(),\n    new PasswordComponent(),\n    new CipherComponent(),\n    new ReEncryptComponent(),\n    new storageOutputComponent.StorageOutputComponent(),\n    new VaultComponent(),\n];\n\nconst tabs: ITabInfo[] = elements.filter(e => (e as ITabInfo).getTabButton !== undefined);\nconst components: IComponent[] = elements.filter(e => (e as IComponent).init !== undefined);\n\nnew TabControl(tabs);\n\ndeclare const COMMITHASH: string;\n\nconst version = COMMITHASH.substr(0, 11);\nconst githubLink = '<a href=\"https://github.com/TanukiSharp/ItchyPassword\" target=\"_blank\">github</a>';\n\ngetElementById('divInfo').innerHTML = `${version}<br/>${githubLink}`;\n\nlet component: IComponent;\nfor (component of components) {\n    component.init();\n}\n","export interface ITabInfo {\n    getTabButton(): HTMLInputElement;\n    getTabContent(): HTMLInputElement;\n    onTabSelected: Function;\n}\n\nexport class TabControl {\n    private _activeTabIndex: number = -1;\n\n    public get activeTabIndex(): number {\n        return this._activeTabIndex;\n    }\n    public set activeTabIndex(index: number) {\n        if (index < 0 || index >= this.tabs.length) {\n            throw new Error(`Argument 'index' out of range. Must be in range [0;${this.tabs.length - 1}].`);\n        }\n        this.setActiveTab(index);\n    }\n\n    public constructor(private tabs: ITabInfo[]) {\n        for (let i = 0; i < this.tabs.length; i += 1) {\n            tabs[i].getTabButton().addEventListener('click', () => {\n                this.setActiveTab(i);\n            });\n        }\n\n        this.setActiveTab(0);\n    }\n\n    private setActiveTab(activeTabIndex: number) {\n        if (activeTabIndex === this._activeTabIndex) {\n            return;\n        }\n\n        let tabInfo: ITabInfo;\n\n        for (tabInfo of this.tabs) {\n            const button = tabInfo.getTabButton();\n            button.style.removeProperty('font-weight');\n            button.style.setProperty('color', '#C0C0C0');\n\n            tabInfo.getTabContent().style.setProperty('display', 'none');\n        }\n\n        const button = this.tabs[activeTabIndex].getTabButton();\n        button.style.setProperty('font-weight', 'bold');\n        button.style.removeProperty('color');\n\n        this.tabs[activeTabIndex].getTabContent().style.removeProperty('display');\n\n        this._activeTabIndex = activeTabIndex;\n\n        this.tabs[activeTabIndex].onTabSelected();\n    }\n}\n"],"sourceRoot":""}