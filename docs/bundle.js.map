{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/VisualFeedback.ts","webpack:///./src/ui.ts","webpack:///./src/components/privatePartComponent.ts","webpack:///./src/TimedAction.ts","webpack:///./src/arrayUtils.ts","webpack:///./src/crypto.ts","webpack:///./src/stringUtils.ts","webpack:///./src/components/passwordComponent.ts","webpack:///./src/passwordGenerators/v1.ts","webpack:///./src/ciphers/v2.ts","webpack:///./src/components/cipherComponent.ts","webpack:///./src/ciphers/v1.ts","webpack:///./src/components/reEncryptComponent.ts","webpack:///./src/index.ts","webpack:///./src/TabControl.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","VisualFeedback","element","this","text","duration","innerHTML","timeout","clearTimeout","setTimeout","getElementById","elementName","document","Error","setupCopyButton","txt","button","feedback","visualFeedback","addEventListener","async","navigator","clipboard","writeText","error","console","stack","writeToClipboard","setText","SUCCESS_COLOR","ERROR_COLOR","btnProtectTitleForProtect","btnProtectTitleForClear","txtPrivatePart","txtPrivatePartConfirmation","btnProtect","spnProtectedConfirmation","spnPrivatePartSize","spnPrivatePartSizeConfirmation","onChangedHandlers","getPrivatePart","undefined","protectAndLockPrivatePart","length","disabled","title","updatePrivatePartsMatching","togglePrivatePartProtection","protectPrivatePartAction","action","delay","overrideDelay","style","setProperty","toCustomBase","bytes","alphabet","alphabetLength","BigInt","result","number","arrayBuffer","byteLength","arrayView","DataView","getUint8","arrayBufferToUnsignedBigInt","remainder","asUintN","toBase16","buffer","Array","map","Uint8Array","x","toString","slice","join","onChangedHandler","reset","BASE62_ALPHABET","getDerivedBytes","password","salt","baseKey","crypto","subtle","importKey","algorithm","hash","iterations","deriveKey","exportKey","generateRandomString","byteCount","array","getRandomValues","generateRandomBytes","stringToArray","str","TextEncoder","encode","fromBase16","parseInt","substr","onChanged","run","push","passwordGenerator","hkdfPurpose","_description","privatePart","publicPart","derivedKey","hkdfKey","sign","txtPath","txtPublicPart","btnGeneratePublicPart","btnClearPublicPart","btnCopyPublicPart","spnCopyPublicPartFeedback","numOutputSizeRange","numOutputSizeNum","txtAlphabet","spnAlphabetSize","btnResetAlphabet","txtResultPassword","spnResultPasswordLength","btnCopyResultPassword","spnCopyResultPasswordFeedback","txtParameters","txtCustomKeys","DEFAULT_LENGTH","DEFAULT_ALPHABET","RESERVED_KEYS","passwordPublicPartLastChange","updatePasswordPublicPartLastUpdate","Date","toISOString","updateResultPasswordLength","padStart","sortedAlphabet","split","sort","updatePasswordGenerationParameters","canRun","clearOutputs","chainInfo","pathToObjectChain","path","separatorIndex","indexOf","tail","firstPath","remainingPath","node","head","tailParent","leaf","public","datetime","numericValue","customKeys","obj","JSON","parse","constructor","parseCustomKeys","removeProperty","resultParameters","source","target","entries","includes","shallowMerge","keys","stringify","updateOutputSizeRangeToNum","updateAlphabetSize","updateAlphabetValidityDisplay","isAlphabetValid","privatePartString","publicPartString","privatePrivateBytes","publicPartBytes","keyString","generatePassword","input","resetAlphabet","isAlphabetValidResult","max","prompt","randomString","buttonName","btn","type","setupViewButton","min","val","Math","updateOutputSizeNumToRange","output","ArrayBuffer","nonce","passwordSalt","aesGcmParams","iv","passwordKey","encrypt","set","payload","decrypt","cipher","txtCipherSource","txtCipherTarget","btnEncrypt","btnDecrypt","btnClearCipherSource","spnCopyCipherTargetFeedback","btnCopyCipherTarget","btnClearCipherTarget","clearSourceVisualCue","setSourceVisualCueError","clearAllVisualCues","focus","warn","encrypted","decrypted","TextDecoder","decode","message","encryptionKeyDerivationSalt","ciphers","txtReEncryptSource","txtReEncryptTarget","cboReEncryptFrom","cboReEncryptTo","btnReEncrypt","btnClearReEncryptSource","spnCopyReEncryptTargetFeedback","btnCopyReEncryptTarget","btnClearReEncryptTarget","fillCipherComboBox","cbo","item","createElement","childNodes","description","version","add","sourceCipherIndex","targetCipherIndex","reEncrypted","btnTabNothing","btnTabPasswords","btnTabCiphers","btnTabReEncrypt","tabs","_activeTabIndex","setActiveTab","index","activeTabIndex","tabInfo","content"],"mappings":"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","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","export class VisualFeedback {\n    private element: HTMLElement;\n    private timeout: number | undefined;\n\n    public constructor(element: HTMLElement) {\n        this.element = element;\n    }\n\n    public setText(text: string, duration: number) {\n        this.element.innerHTML = text;\n        if (this.timeout) {\n            clearTimeout(this.timeout);\n        }\n        this.timeout = setTimeout(() => this.element.innerHTML = '', duration);\n    }\n}\n","import { VisualFeedback } from './VisualFeedback';\n\nexport function getElementById(elementName: string): HTMLInputElement {\n    const element: HTMLElement|null = document.getElementById(elementName);\n\n    if (elementName === null) {\n        throw new Error(`DOM element '${elementName}' not found.`);\n    }\n\n    return element as HTMLInputElement;\n}\n\nasync function writeToClipboard(text: string): Promise<boolean> {\n    try {\n        await navigator.clipboard.writeText(text);\n        return true;\n    } catch (error) {\n        console.error(error.stack || error);\n        return false;\n    }\n}\n\nexport function setupCopyButton(txt: HTMLInputElement, button: HTMLInputElement, feedback: HTMLInputElement): void {\n    const visualFeedback: VisualFeedback = new VisualFeedback(feedback);\n    button.addEventListener('click', async () => {\n        if (await writeToClipboard(txt.value)) {\n            visualFeedback.setText('Copied', 3000);\n        } else {\n            visualFeedback.setText('<span style=\"color: red\">Failed to copy</span>', 3000);\n        }\n    });\n}\n\nexport const SUCCESS_COLOR: string = '#D0FFD0';\nexport const ERROR_COLOR: string = '#FFD0D0';\n","import { getElementById, SUCCESS_COLOR, ERROR_COLOR } from '../ui';\n\nimport { TimedAction } from '../TimedAction';\n\nconst btnProtectTitleForProtect = 'Stores the string in memory and removes it from the UI component. Prevents a physical intruder from copy/pasting the value.';\nconst btnProtectTitleForClear = 'Removes the string form memory and re-enables the UI component.';\n\nconst txtPrivatePart: HTMLInputElement = getElementById('txtPrivatePart');\nconst txtPrivatePartConfirmation: HTMLInputElement = getElementById('txtPrivatePartConfirmation');\nconst btnProtect: HTMLInputElement = getElementById('btnProtect');\nconst spnProtectedConfirmation: HTMLInputElement = getElementById('spnProtectedConfirmation');\n\nconst spnPrivatePartSize: HTMLInputElement = getElementById('spnPrivatePartSize');\nconst spnPrivatePartSizeConfirmation: HTMLInputElement = getElementById('spnPrivatePartSizeConfirmation');\n\nconst PRIVATE_PART_PROTECTION_TIMEOUT: number = 60 * 1000;\n\nlet privatePart: string | undefined;\n\nlet onChangedHandlers: (() => void)[] = [];\n\nexport function registerOnChanged(onChanged: () => void) {\n    onChangedHandlers.push(onChanged);\n}\n\nexport function getPrivatePart(): string {\n    if (privatePart !== undefined) {\n        return privatePart;\n    }\n    return txtPrivatePart.value;\n}\n\nfunction protectAndLockPrivatePart(): void {\n    if (txtPrivatePart.value.length === 0) {\n        return;\n    }\n\n    privatePart = txtPrivatePart.value;\n    spnProtectedConfirmation.innerHTML = 'Protected';\n\n    txtPrivatePart.value = '';\n    txtPrivatePartConfirmation.value = '';\n    spnPrivatePartSize.innerHTML = '0';\n    spnPrivatePartSizeConfirmation.innerHTML = '0';\n\n    txtPrivatePart.disabled = true;\n    txtPrivatePartConfirmation.disabled = true;\n\n    btnProtect.innerHTML = 'Clear and unlock';\n    btnProtect.title = btnProtectTitleForClear;\n\n    updatePrivatePartsMatching();\n}\n\nfunction clearAndUnLockPrivatePart(): void {\n    privatePart = undefined;\n    spnProtectedConfirmation.innerHTML = '';\n\n    txtPrivatePart.disabled = false;\n    txtPrivatePartConfirmation.disabled = false;\n\n    btnProtect.innerHTML = 'Protect and lock';\n    btnProtect.title = btnProtectTitleForProtect;\n    btnProtect.disabled = true;\n}\n\nfunction togglePrivatePartProtection(): void {\n    if (privatePart === undefined) {\n        protectAndLockPrivatePart();\n    } else {\n        clearAndUnLockPrivatePart();\n    }\n}\n\nbtnProtect.addEventListener('click', () => {\n    togglePrivatePartProtection();\n});\n\nconst protectPrivatePartAction: TimedAction = new TimedAction(protectAndLockPrivatePart, PRIVATE_PART_PROTECTION_TIMEOUT);\n\ntxtPrivatePart.addEventListener('input', () => {\n    btnProtect.disabled = txtPrivatePart.value.length === 0;\n\n    spnPrivatePartSize.innerHTML = txtPrivatePart.value.length.toString();\n    updatePrivatePartsMatching();\n\n    let onChangedHandler: () => void;\n    for (onChangedHandler of onChangedHandlers) {\n        onChangedHandler();\n    }\n\n    protectPrivatePartAction.reset();\n});\n\nfunction updatePrivatePartsMatching(): void {\n    if (txtPrivatePartConfirmation.value === txtPrivatePart.value) {\n        txtPrivatePartConfirmation.style.setProperty('background', SUCCESS_COLOR);\n    } else {\n        txtPrivatePartConfirmation.style.setProperty('background', ERROR_COLOR);\n    }\n};\n\ntxtPrivatePartConfirmation.addEventListener('input', () => {\n    spnPrivatePartSizeConfirmation.innerHTML = txtPrivatePartConfirmation.value.length.toString();\n    updatePrivatePartsMatching();\n});\n\nupdatePrivatePartsMatching();\nbtnProtect.title = btnProtectTitleForProtect;\n","export class TimedAction {\n    private timeout: number | undefined;\n    public constructor(private action: Function, private delay: number) {\n    }\n\n    public reset(overrideDelay: number | undefined = undefined): void {\n        if (this.timeout !== undefined) {\n            clearTimeout(this.timeout);\n        }\n\n        const delay = overrideDelay !== undefined ? overrideDelay : this.delay;\n\n        this.timeout = setTimeout(() => {\n            this.action();\n            this.timeout = undefined;\n        }, delay);\n    }\n}\n","export function arrayToString(array: ArrayBuffer): string {\n    const decoder = new TextDecoder(/*'utf-8'*/);\n    return decoder.decode(array);\n};\n\nexport function copy(source: Uint8Array, sourceIndex: number, target: Uint8Array, targetIndex: number, length: number): void {\n    for (let i: number = 0; i < length; i += 1) {\n        target[i + targetIndex] = source[i + sourceIndex];\n    }\n}\n\nexport function arrayBufferToUnsignedBigInt(arrayBuffer: ArrayBuffer): bigint {\n    const length: number = arrayBuffer.byteLength;\n    const arrayView: DataView = new DataView(arrayBuffer, 0);\n\n    let result: bigint = 0n;\n\n    for (let i: number = 0; i < length; i += 1) {\n        result += BigInt(arrayView.getUint8(i)) * (256n ** BigInt(i));\n    }\n\n    return result;\n}\n\nexport function toCustomBase(bytes: ArrayBuffer, alphabet: string): string {\n    const alphabetLength: bigint = BigInt(alphabet.length);\n\n    let result: string = '';\n    let number: bigint = arrayBufferToUnsignedBigInt(bytes);\n\n    while (number > 0n)\n    {\n        const remainder: bigint = number % alphabetLength;\n        number /= alphabetLength;\n\n        const index: number = <number><any>BigInt.asUintN(64, remainder);\n\n        result += alphabet[index];\n    }\n\n    return result;\n}\n\nexport function toBase16(buffer: ArrayBuffer): string {\n    return Array.prototype.map.call(\n        new Uint8Array(buffer),\n        x => ('00' + x.toString(16)).slice(-2)\n    ).join('');\n}\n","import * as arrayUtils from './arrayUtils';\n\nexport const BASE62_ALPHABET: string = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\n\nexport interface IPasswordGenerator {\n    readonly version: number;\n    readonly description: string;\n    generatePassword(privatePart: ArrayBuffer, publicPart: ArrayBuffer): Promise<ArrayBuffer>;\n}\n\nexport interface ICipher {\n    readonly version: number;\n    readonly description: string;\n    encrypt(input: ArrayBuffer, password: ArrayBuffer): Promise<ArrayBuffer>;\n    decrypt(input: ArrayBuffer, password: ArrayBuffer): Promise<ArrayBuffer>;\n}\n\nexport async function getDerivedBytes(password: ArrayBuffer, salt: ArrayBuffer): Promise<ArrayBuffer> {\n    const baseKey: CryptoKey = await crypto.subtle.importKey(\n        'raw',\n        password,\n        'PBKDF2',\n        false,\n        ['deriveKey']\n    );\n\n    const algorithm: Pbkdf2Params = {\n        name: 'PBKDF2',\n        hash: 'SHA-512',\n        iterations: 100000,\n        salt\n    };\n\n    const derivedKeyType: AesDerivedKeyParams = {\n        name: 'AES-CBC',\n        length: 256\n    };\n\n    const result: CryptoKey = await crypto.subtle.deriveKey(\n        algorithm,\n        baseKey,\n        derivedKeyType,\n        true,\n        ['encrypt']\n    );\n\n    const key: ArrayBuffer = await crypto.subtle.exportKey('raw', result);\n\n    return key;\n}\n\nexport function generateRandomBytes(byteCount: number = 64): ArrayBuffer {\n    const array: Uint8Array = new Uint8Array(byteCount);\n    return crypto.getRandomValues(array).buffer;\n}\n\nexport function generateRandomString(byteCount: number = 64, alphabet: string = BASE62_ALPHABET): string {\n    const array: ArrayBuffer = generateRandomBytes(byteCount);\n    return arrayUtils.toCustomBase(array, alphabet);\n}\n","export function truncate(input: string, length: number): string {\n    if (input.length <= length) {\n        return input;\n    }\n\n    return input.substr(0, length);\n}\n\nexport function stringToArray(str: string): ArrayBuffer {\n    const encoder = new TextEncoder(/*'utf-8'*/);\n    return encoder.encode(str).buffer;\n}\n\nexport function fromBase16(str: string): ArrayBuffer {\n    if (str.length % 2 !== 0) {\n        str = '0' + str;\n    }\n\n    const result: Uint8Array = new Uint8Array(str.length / 2);\n\n    for (let i = 0; i < result.byteLength; i += 1) {\n        result[i] = parseInt(str.substr(i * 2, 2), 16);\n    }\n\n    return result.buffer;\n}\n","import { getElementById, setupCopyButton, ERROR_COLOR } from '../ui';\nimport * as privatePart from './privatePartComponent';\n\nimport * as crypto from '../crypto';\nimport * as stringUtils from '../stringUtils';\nimport * as arrayUtils from '../arrayUtils';\n\nimport { PlainObject } from '../PlainObject';\n\nimport { PasswordGeneratorV1 } from '../passwordGenerators/v1';\n\nprivatePart.registerOnChanged(run);\n\nconst passwordGenerator: crypto.IPasswordGenerator = new PasswordGeneratorV1('Password');\n\nconst txtPath: HTMLInputElement = getElementById('txtPath');\nconst txtPublicPart: HTMLInputElement = getElementById('txtPublicPart');\nconst btnGeneratePublicPart: HTMLInputElement = getElementById('btnGeneratePublicPart');\nconst btnClearPublicPart: HTMLInputElement = getElementById('btnClearPublicPart');\nconst btnCopyPublicPart: HTMLInputElement = getElementById('btnCopyPublicPart');\nconst spnCopyPublicPartFeedback: HTMLInputElement = getElementById('spnCopyPublicPartFeedback');\n\nconst numOutputSizeRange: HTMLInputElement = getElementById('numOutputSizeRange');\nconst numOutputSizeNum: HTMLInputElement = getElementById('numOutputSizeNum');\n\nconst txtAlphabet: HTMLInputElement = getElementById('txtAlphabet');\nconst spnAlphabetSize: HTMLInputElement = getElementById('spnAlphabetSize');\nconst btnResetAlphabet: HTMLInputElement = getElementById('btnResetAlphabet');\n\nconst txtResultPassword: HTMLInputElement = getElementById('txtResultPassword');\nconst spnResultPasswordLength: HTMLInputElement = getElementById('spnResultPasswordLength');\nconst btnCopyResultPassword: HTMLInputElement = getElementById('btnCopyResultPassword');\nconst spnCopyResultPasswordFeedback: HTMLInputElement = getElementById('spnCopyResultPasswordFeedback');\n\nconst txtParameters: HTMLInputElement = getElementById('txtParameters');\nconst txtCustomKeys: HTMLInputElement = getElementById('txtCustomKeys');\n\nconst DEFAULT_LENGTH: number = 64;\nconst DEFAULT_ALPHABET: string = '!\"#$%&\\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[]^_`abcdefghijklmnopqrstuvwxyz{|}~';\n\nconst RESERVED_KEYS: string[] = ['alphabet', 'length', 'public', 'datetime'];\n\n// dafuq!?\nnumOutputSizeRange.max = DEFAULT_LENGTH.toString();\nnumOutputSizeRange.value = DEFAULT_LENGTH.toString();\n\nlet passwordPublicPartLastChange: string | undefined;\n\nbtnClearPublicPart.addEventListener('click', () => {\n    if (txtPublicPart.value.length > 0) {\n        if (prompt('Are you sure you want to clear the public part ?\\nType \\'y\\' to accept', '') !== 'y') {\n            return;\n        }\n    }\n\n    txtPublicPart.value = '';\n\n    updatePasswordPublicPartLastUpdate();\n    updatePasswordGenerationParameters();\n});\n\nbtnGeneratePublicPart.addEventListener('click', () => {\n    if (txtPublicPart.value.length > 0) {\n        if (prompt('Are you sure you want to generate a new public part ?\\nType \\'y\\' to accept', '') !== 'y') {\n            return;\n        }\n    }\n\n    const randomString: string = crypto.generateRandomString();\n    txtPublicPart.value = randomString;\n\n    updatePasswordPublicPartLastUpdate();\n\n    run();\n});\n\nfunction updatePasswordPublicPartLastUpdate(): void {\n    if (txtPublicPart.value.length > 0) {\n        passwordPublicPartLastChange = new Date().toISOString();\n    } else {\n        passwordPublicPartLastChange = undefined;\n    }\n}\n\nfunction updateCustomKeysDisplay(isValid: boolean): void {\n    if (isValid) {\n        txtCustomKeys.style.removeProperty('background');\n        return;\n    }\n\n    txtCustomKeys.style.setProperty('background', ERROR_COLOR);\n}\n\nfunction parseCustomKeys(): PlainObject | null {\n    if (txtCustomKeys.value === '') {\n        return {};\n    }\n\n    try {\n        const obj: any = JSON.parse(txtCustomKeys.value);\n        if (obj === null || obj.constructor.name !== 'Object') {\n            return null;\n        }\n        return obj as PlainObject;\n    } catch {\n        return null;\n    }\n}\n\nfunction shallowMerge(source: PlainObject | null, target: PlainObject | null): PlainObject {\n    const result: PlainObject = {};\n\n    if (source !== null) {\n        for (const [key, value] of Object.entries(source)) {\n            if (RESERVED_KEYS.includes(key) === false) {\n                result[key] = value;\n            }\n        }\n    }\n\n    if (target !== null) {\n        for (const [key, value] of Object.entries(target)) {\n            result[key] = value;\n        }\n    }\n\n    return result;\n}\n\nfunction deepMerge(source: PlainObject, target: PlainObject): void {\n    for (const sourceKey of Object.keys(source)) {\n        const targetValue: any = target[sourceKey];\n        const sourceValue: any = source[sourceKey];\n\n        if (targetValue === undefined ||\n            targetValue === null ||\n            targetValue.constructor.name !== 'Object' ||\n            sourceValue.constructor.name !== 'Object') {\n            target[sourceKey] = sourceValue;\n            continue;\n        }\n\n        deepMerge(sourceValue, targetValue);\n    }\n}\n\nfunction setupViewButton(txt: HTMLInputElement, buttonName: string): void {\n    const btn: HTMLInputElement = getElementById(buttonName);\n    btn.addEventListener('click', () => {\n        if (txt.type === 'password') {\n            txt.type = 'input';\n            btn.innerHTML = 'Hide';\n        } else {\n            txt.type = 'password';\n            btn.innerHTML = 'View';\n        }\n    });\n}\n\nfunction updateResultPasswordLength() {\n    spnResultPasswordLength.innerHTML = txtResultPassword.value.length.toString().padStart(2, ' ');\n}\n\nsetupViewButton(txtResultPassword, 'btnViewResultPassword');\n\nsetupCopyButton(txtPublicPart, btnCopyPublicPart, spnCopyPublicPartFeedback);\nsetupCopyButton(txtResultPassword, btnCopyResultPassword, spnCopyResultPasswordFeedback);\n\nfunction isAlphabetValid(alphabet: string): boolean {\n    const sortedAlphabet: string[] = alphabet.split('');\n    sortedAlphabet.sort();\n\n    for (let i: number = 1; i < sortedAlphabet.length; i += 1) {\n        if (sortedAlphabet[i - 1] === sortedAlphabet[i]) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\ntype IChainInfo = {\n    head: PlainObject,\n    tailParent: PlainObject,\n    tail: PlainObject\n};\n\n// Transforms a path like \"a/b/c/d\" into a hierarchy of objects like { \"a\": { \"b\": { \"c\": { \"d\": {} } } } }\n// From the result object, head is the root object that contains \"a\", tail is the value of \"d\", and tailParent is the value of \"c\"\nfunction pathToObjectChain(path: string, chainInfo: IChainInfo | undefined = undefined): IChainInfo {\n    const separatorIndex: number = path.indexOf('/');\n\n    const tail: PlainObject = {};\n\n    const firstPath: string = separatorIndex >= 0 ? path.substr(0, separatorIndex) : path;\n    const remainingPath: string | undefined = separatorIndex >= 0 ? path.substr(separatorIndex + 1) : undefined;\n\n    if (chainInfo === undefined) {\n        const node: PlainObject = {};\n        node[firstPath] = tail;\n        chainInfo = {\n            head: node,\n            tailParent: node,\n            tail\n        };\n    } else {\n        chainInfo.tail[firstPath] = tail;\n        chainInfo.tailParent = chainInfo.tail;\n        chainInfo.tail = tail;\n    }\n\n    if (remainingPath) {\n        return pathToObjectChain(remainingPath, chainInfo);\n    }\n\n    return chainInfo;\n}\n\nfunction updatePasswordGenerationParameters(): void {\n    if (canRun() === false) {\n        clearOutputs();\n        return;\n    }\n\n    const chainInfo: IChainInfo = pathToObjectChain(txtPath.value);\n    const leaf: PlainObject = chainInfo.tail;\n\n    leaf.public = txtPublicPart.value;\n    leaf.datetime = passwordPublicPartLastChange;\n\n    const numericValue: number = parseInt(numOutputSizeNum.value, 10);\n    if (numericValue !== DEFAULT_LENGTH) {\n        leaf.length = numericValue;\n    }\n\n    const alphabet: string = txtAlphabet.value;\n    if (alphabet !== DEFAULT_ALPHABET) {\n        leaf.alphabet = alphabet;\n    }\n\n    const customKeys: PlainObject | null = parseCustomKeys();\n    updateCustomKeysDisplay(customKeys !== null);\n    const resultParameters: PlainObject = shallowMerge(customKeys, leaf);\n\n    if (Object.keys(resultParameters).length === 0) {\n        // Set the value of the first (single) property of the object to null.\n        chainInfo.tailParent[Object.keys(chainInfo.tailParent)[0]] = null;\n    } else {\n        chainInfo.tailParent[Object.keys(chainInfo.tailParent)[0]] = resultParameters;\n    }\n\n    txtParameters.value = JSON.stringify(chainInfo.head, undefined, 4);\n}\n\nfunction updateOutputSizeRangeToNum(): void {\n    numOutputSizeNum.value = numOutputSizeRange.value;\n}\n\nfunction updateOutputSizeNumToRange(): void {\n    const min: number = parseInt(numOutputSizeRange.min, 10);\n    const val: number = parseInt(numOutputSizeNum.value, 10);\n    const max: number = parseInt(numOutputSizeRange.max, 10);\n    numOutputSizeRange.value = Math.max(min, Math.min(val, max)).toString();\n}\n\nnumOutputSizeRange.addEventListener('input', () => {\n    updateOutputSizeRangeToNum();\n    run();\n});\n\nnumOutputSizeNum.addEventListener('input', () => {\n    updateOutputSizeNumToRange();\n    updateOutputSizeRangeToNum();\n    run();\n});\n\nfunction updateAlphabetSize(): void {\n    spnAlphabetSize.innerHTML = txtAlphabet.value.length.toString();\n\n    const alphabetSizeDigitCount: number = txtAlphabet.value.length.toString().length;\n    if (alphabetSizeDigitCount < 2) {\n        // Add a space to keep a nice visual alignment.\n        spnAlphabetSize.innerHTML = spnAlphabetSize.innerHTML.padStart(2, ' ');\n    }\n}\n\nfunction updateAlphabetValidityDisplay(isAlphabetValid: boolean): void {\n    if (isAlphabetValid) {\n        txtAlphabet.style.removeProperty('background');\n    } else {\n        txtAlphabet.style.setProperty('background', ERROR_COLOR);\n    }\n}\n\ntxtAlphabet.addEventListener('input', () => {\n    const isAlphabetValidResult: boolean = isAlphabetValid(txtAlphabet.value);\n\n    updateAlphabetValidityDisplay(isAlphabetValidResult);\n\n    if (isAlphabetValidResult === false) {\n        return;\n    }\n\n    updateAlphabetSize();\n    run();\n});\n\nbtnResetAlphabet.addEventListener('click', () => {\n    resetAlphabet();\n    updateAlphabetSize();\n    run();\n});\n\nfunction clearOutputs(): void {\n    txtResultPassword.value = '';\n    txtParameters.value = '';\n\n    updateResultPasswordLength();\n}\n\nfunction canRun(): boolean {\n    const alphabet: string = txtAlphabet.value;\n\n    if (isAlphabetValid(alphabet) === false) {\n        return false;\n    }\n\n    if (privatePart.getPrivatePart().length <= 0 || txtPublicPart.value.length < 8 || alphabet.length < 2) {\n        return false;\n    }\n\n    return true;\n}\n\nasync function run() {\n    updatePasswordGenerationParameters();\n\n    if (canRun() === false) {\n        clearOutputs();\n        return;\n    }\n\n    const privatePartString: string = privatePart.getPrivatePart();\n    const publicPartString = txtPublicPart.value;\n\n    const privatePrivateBytes: ArrayBuffer = stringUtils.stringToArray(privatePartString);\n    const publicPartBytes: ArrayBuffer = stringUtils.stringToArray(publicPartString);\n\n    const keyBytes: ArrayBuffer = await passwordGenerator.generatePassword(privatePrivateBytes, publicPartBytes);\n\n    const keyString: string = arrayUtils.toCustomBase(keyBytes, txtAlphabet.value);\n    txtResultPassword.value = stringUtils.truncate(keyString, parseInt(numOutputSizeRange.value, 10));\n\n    updateResultPasswordLength();\n}\n\nasync function resetAlphabet() {\n    txtAlphabet.value = DEFAULT_ALPHABET;\n    updateAlphabetSize();\n\n    const isAlphabetValidResult: boolean = isAlphabetValid(txtAlphabet.value);\n\n    updateAlphabetValidityDisplay(isAlphabetValidResult);\n\n    if (isAlphabetValidResult) {\n        await run();\n    }\n}\n\ntxtPath.addEventListener('input', () => {\n    updatePasswordGenerationParameters();\n});\n\ntxtPublicPart.addEventListener('input', () => {\n    updatePasswordPublicPartLastUpdate();\n    updatePasswordGenerationParameters();\n    run();\n});\n\ntxtCustomKeys.addEventListener('input', () => {\n    updatePasswordGenerationParameters();\n});\n\nupdateOutputSizeRangeToNum();\nresetAlphabet();\n","import { stringToArray } from '../stringUtils';\nimport { IPasswordGenerator, getDerivedBytes } from '../crypto';\n\nexport class PasswordGeneratorV1 implements IPasswordGenerator {\n    private hkdfPurpose: ArrayBuffer;\n    private _description: string;\n\n    public constructor(hkdfPurpose: string) {\n        this.hkdfPurpose = stringToArray(hkdfPurpose);\n        this._description = `HKDF(PBKDF2, HMAC512) [purpose: ${hkdfPurpose}]`;\n    }\n\n    public get version(): number {\n        return 1;\n    }\n\n    public get description(): string {\n        return this._description;\n    }\n\n    public async generatePassword(privatePart: ArrayBuffer, publicPart: ArrayBuffer): Promise<ArrayBuffer> {\n        const derivedKey: ArrayBuffer = await getDerivedBytes(privatePart, publicPart);\n\n        const hmacParameters: HmacImportParams = {\n            name: 'HMAC',\n            hash: { name: 'SHA-512' }\n        };\n\n        const hkdfKey: CryptoKey = await crypto.subtle.importKey(\n            'raw',\n            derivedKey,\n            hmacParameters,\n            false,\n            ['sign']\n        );\n\n        return await crypto.subtle.sign('HMAC', hkdfKey, this.hkdfPurpose);\n    }\n}\n","import { ICipher, getDerivedBytes } from '../crypto';\n\nexport class CipherV2 implements ICipher {\n    public get version(): number {\n        return 2;\n    }\n\n    public get description(): string {\n        return 'PBKDF2 + AES-GCM';\n    }\n\n    async encrypt(input: ArrayBuffer, password: ArrayBuffer): Promise<ArrayBuffer> {\n        const output: ArrayBuffer = new ArrayBuffer(12 + 16 + 16 + input.byteLength);\n\n        const nonce: Uint8Array = crypto.getRandomValues(new Uint8Array(output, 0, 12));\n        const passwordSalt: Uint8Array = crypto.getRandomValues(new Uint8Array(output, 12, 16));\n\n        const aesGcmParams: AesGcmParams = {\n            name: 'AES-GCM',\n            iv: nonce\n        };\n\n        const aesKeyAlgorithm: AesKeyAlgorithm = {\n            name: 'AES-GCM',\n            length: 256\n        };\n\n        const passwordKey: CryptoKey = await crypto.subtle.importKey(\n            'raw',\n            await getDerivedBytes(password, passwordSalt),\n            aesKeyAlgorithm,\n            false,\n            ['encrypt']\n        );\n\n        const result: ArrayBuffer = await crypto.subtle.encrypt(aesGcmParams, passwordKey, input);\n\n        new Uint8Array(output).set(new Uint8Array(result), 12 + 16);\n\n        return output;\n    }\n\n    async decrypt(input: ArrayBuffer, password: ArrayBuffer): Promise<ArrayBuffer> {\n        const nonce: Uint8Array = new Uint8Array(input, 0, 12);\n        const passwordSalt: Uint8Array = new Uint8Array(input, 12, 16);\n        const payload: Uint8Array = new Uint8Array(input, 12 + 16);\n\n        const aesGcmParams: AesGcmParams = {\n            name: 'AES-GCM',\n            iv: nonce\n        };\n\n        const aesKeyAlgorithm: AesKeyAlgorithm = {\n            name: 'AES-GCM',\n            length: 256\n        };\n\n        const derivedKey: ArrayBuffer = await getDerivedBytes(password, passwordSalt);\n\n        const passwordKey: CryptoKey = await crypto.subtle.importKey(\n            'raw',\n            derivedKey,\n            aesKeyAlgorithm,\n            false,\n            ['decrypt']\n        );\n\n        return await crypto.subtle.decrypt(aesGcmParams, passwordKey, payload);\n    }\n}\n","import * as crypto from '../crypto';\nimport * as stringUtils from '../stringUtils';\nimport * as arrayUtils from '../arrayUtils';\n\nimport { getElementById, setupCopyButton, ERROR_COLOR } from '../ui';\nimport { getPrivatePart } from './privatePartComponent';\n\nimport { CipherV2 } from '../ciphers/v2';\n\nconst cipher: crypto.ICipher = new CipherV2();\n\nconst txtCipherSource: HTMLInputElement = getElementById('txtCipherSource');\nconst txtCipherTarget: HTMLInputElement = getElementById('txtCipherTarget');\nconst btnEncrypt: HTMLInputElement = getElementById('btnEncrypt');\nconst btnDecrypt: HTMLInputElement = getElementById('btnDecrypt');\n\nconst btnClearCipherSource: HTMLInputElement = getElementById('btnClearCipherSource');\nconst spnCopyCipherTargetFeedback: HTMLInputElement = getElementById('spnCopyCipherTargetFeedback');\nconst btnCopyCipherTarget: HTMLInputElement = getElementById('btnCopyCipherTarget');\nconst btnClearCipherTarget: HTMLInputElement = getElementById('btnClearCipherTarget');\n\nsetupCopyButton(txtCipherTarget, btnCopyCipherTarget, spnCopyCipherTargetFeedback);\n\nfunction clearSourceVisualCue(): void {\n    txtCipherSource.style.removeProperty('background-color');\n}\n\nfunction clearTargetVisualCue(): void {\n    txtCipherTarget.style.removeProperty('background-color');\n}\n\nfunction setSourceVisualCueError() {\n    txtCipherSource.style.setProperty('background-color', ERROR_COLOR);\n}\n\nfunction setTargetVisualCueError() {\n    txtCipherTarget.style.setProperty('background-color', ERROR_COLOR);\n}\n\nfunction clearAllVisualCues(): void {\n    clearSourceVisualCue();\n    clearTargetVisualCue();\n}\n\nbtnEncrypt.addEventListener('click', async () => {\n    txtCipherSource.focus();\n    txtCipherTarget.value = '';\n    clearAllVisualCues();\n\n    if (txtCipherSource.value.length === 0) {\n        setSourceVisualCueError();\n        return;\n    }\n\n    const privatePart: string = getPrivatePart();\n    if (privatePart.length === 0) {\n        console.warn('Private part is empty');\n        return;\n    }\n\n    const input: ArrayBuffer = stringUtils.stringToArray(txtCipherSource.value);\n    const password: ArrayBuffer = stringUtils.stringToArray(privatePart);\n\n    const encrypted: ArrayBuffer = await cipher.encrypt(input, password);\n\n    txtCipherTarget.value = arrayUtils.toBase16(encrypted);\n});\n\nbtnDecrypt.addEventListener('click', async () => {\n    txtCipherSource.focus();\n    txtCipherTarget.value = '';\n    clearAllVisualCues();\n\n    if (txtCipherSource.value.length === 0) {\n        setSourceVisualCueError();\n        return;\n    }\n\n    const privatePart: string = getPrivatePart();\n    if (privatePart.length === 0) {\n        console.warn('Private part is empty');\n        return;\n    }\n\n    try {\n        const input: ArrayBuffer = stringUtils.fromBase16(txtCipherSource.value);\n        const password: ArrayBuffer = stringUtils.stringToArray(privatePart);\n\n        const decrypted: ArrayBuffer = await cipher.decrypt(input, password);\n\n        txtCipherTarget.value = arrayUtils.arrayToString(decrypted);\n    } catch (error) {\n        console.warn(`Failed to decrypt${error.message ? `, error: ${error.message}` : ', no error message'}`);\n        setTargetVisualCueError();\n    }\n});\n\ntxtCipherSource.addEventListener('input', () => {\n    if (txtCipherSource.value.length > 0) {\n        clearSourceVisualCue();\n    }\n});\n\nbtnClearCipherSource.addEventListener('click', () => {\n    txtCipherSource.value = '';\n});\n\nbtnClearCipherTarget.addEventListener('click', () => {\n    txtCipherTarget.value = '';\n});\n","import { ICipher, getDerivedBytes } from '../crypto';\n\nconst encryptionKeyDerivationSalt: ArrayBuffer = new Uint8Array([ 0xf2, 0xcf, 0xef, 0x8e, 0x13, 0x40, 0x46, 0x49, 0x92, 0x2a, 0xde, 0x5c, 0xbc, 0x88, 0x38, 0xa8 ]).buffer;\n\nexport class CipherV1 implements ICipher {\n    public get version(): number {\n        return 1;\n    }\n\n    public get description(): string {\n        return 'PBKDF2 + AES-GCM';\n    }\n\n    async encrypt(input: ArrayBuffer, password: ArrayBuffer): Promise<ArrayBuffer> {\n        const output: ArrayBuffer = new ArrayBuffer(12 + 16 + input.byteLength);\n\n        const nonce: DataView = new DataView(output, 0, 12);\n        crypto.getRandomValues(new Uint8Array(output, 0, 12));\n\n        const aesGcmParams: AesGcmParams = {\n            name: 'AES-GCM',\n            iv: nonce\n        };\n\n        const aesKeyAlgorithm: AesKeyAlgorithm = {\n            name: 'AES-GCM',\n            length: 256\n        };\n\n        const passwordKey: CryptoKey = await crypto.subtle.importKey(\n            'raw',\n            await getDerivedBytes(password, encryptionKeyDerivationSalt),\n            aesKeyAlgorithm,\n            false,\n            ['encrypt']\n        );\n\n        const result: ArrayBuffer = await crypto.subtle.encrypt(aesGcmParams, passwordKey, input);\n\n        new Uint8Array(output).set(new Uint8Array(result), 12);\n\n        return output;\n    }\n\n    async decrypt(input: ArrayBuffer, password: ArrayBuffer): Promise<ArrayBuffer> {\n        const nonce: DataView = new DataView(input, 0, 12);\n        const payload: DataView = new DataView(input, 12);\n\n        const aesGcmParams: AesGcmParams = {\n            name: 'AES-GCM',\n            iv: nonce\n        };\n\n        const aesKeyAlgorithm: AesKeyAlgorithm = {\n            name: 'AES-GCM',\n            length: 256\n        };\n\n        const derivedKey: ArrayBuffer = await getDerivedBytes(password, encryptionKeyDerivationSalt);\n\n        const passwordKey: CryptoKey = await crypto.subtle.importKey(\n            'raw',\n            derivedKey,\n            aesKeyAlgorithm,\n            false,\n            ['decrypt']\n        );\n\n        return await crypto.subtle.decrypt(aesGcmParams, passwordKey, payload);\n    }\n}\n","import { ICipher } from '../crypto';\nimport * as stringUtils from '../stringUtils';\nimport * as arrayUtils from '../arrayUtils';\n\nimport { getElementById, setupCopyButton, ERROR_COLOR } from '../ui';\nimport { getPrivatePart } from './privatePartComponent';\n\nimport { CipherV1 } from '../ciphers/v1';\nimport { CipherV2 } from '../ciphers/v2';\n\nconst ciphers: ICipher[] = [\n    new CipherV1(),\n    new CipherV2()\n];\n\nconst txtReEncryptSource: HTMLInputElement = getElementById('txtReEncryptSource');\nconst txtReEncryptTarget: HTMLInputElement = getElementById('txtReEncryptTarget');\n\nconst cboReEncryptFrom: HTMLInputElement = getElementById('cboReEncryptFrom');\nconst cboReEncryptTo: HTMLInputElement = getElementById('cboReEncryptTo');\nconst btnReEncrypt: HTMLInputElement = getElementById('btnReEncrypt');\n\nconst btnClearReEncryptSource: HTMLInputElement = getElementById('btnClearReEncryptSource');\nconst spnCopyReEncryptTargetFeedback: HTMLInputElement = getElementById('spnCopyReEncryptTargetFeedback');\nconst btnCopyReEncryptTarget: HTMLInputElement = getElementById('btnCopyReEncryptTarget');\nconst btnClearReEncryptTarget: HTMLInputElement = getElementById('btnClearReEncryptTarget');\n\nsetupCopyButton(txtReEncryptTarget, btnCopyReEncryptTarget, spnCopyReEncryptTargetFeedback);\n\nfunction fillCipherComboBox(cbo: HTMLSelectElement): void {\n    let cipher: ICipher;\n\n    for (cipher of ciphers) {\n        const item: HTMLOptionElement = document.createElement('option');\n        item.value = cbo.childNodes.length.toString();\n        item.text = `${cipher.description} (v${cipher.version})`;\n        cbo.add(item);\n    }\n}\n\n// Mais est-ce que ce monde est serieux?\nfillCipherComboBox(<HTMLSelectElement><any>cboReEncryptFrom);\nfillCipherComboBox(<HTMLSelectElement><any>cboReEncryptTo);\n\nfunction clearSourceVisualCue(): void {\n    txtReEncryptSource.style.removeProperty('background-color');\n}\n\nfunction clearTargetVisualCue(): void {\n    txtReEncryptTarget.style.removeProperty('background-color');\n}\n\nfunction setSourceVisualCueError() {\n    txtReEncryptSource.style.setProperty('background-color', ERROR_COLOR);\n}\n\nfunction setTargetVisualCueError() {\n    txtReEncryptTarget.style.setProperty('background-color', ERROR_COLOR);\n}\n\nfunction clearAllVisualCues(): void {\n    clearSourceVisualCue();\n    clearTargetVisualCue();\n}\n\nbtnReEncrypt.addEventListener('click', async () => {\n    txtReEncryptTarget.value = '';\n    clearAllVisualCues();\n\n    if (txtReEncryptSource.value.length === 0) {\n        setSourceVisualCueError();\n        return;\n    }\n\n    if (cboReEncryptFrom.value === cboReEncryptTo.value) {\n        setTargetVisualCueError();\n        return;\n    }\n\n    const privatePart: string = getPrivatePart();\n    if (privatePart.length === 0) {\n        console.warn('Private part is empty');\n        return;\n    }\n\n    const sourceCipherIndex = parseInt(cboReEncryptFrom.value, 10);\n    const targetCipherIndex = parseInt(cboReEncryptTo.value, 10);\n\n    const password: ArrayBuffer = stringUtils.stringToArray(privatePart);\n\n    const input: ArrayBuffer = stringUtils.fromBase16(txtReEncryptSource.value);\n    const decrypted: ArrayBuffer = await ciphers[sourceCipherIndex].decrypt(input, password);\n    const reEncrypted: ArrayBuffer = await ciphers[targetCipherIndex].encrypt(decrypted, password);\n\n    txtReEncryptTarget.value = arrayUtils.toBase16(reEncrypted);\n});\n\ntxtReEncryptSource.addEventListener('input', () => {\n    if (txtReEncryptSource.value.length > 0) {\n        clearSourceVisualCue();\n    }\n});\n\nbtnClearReEncryptSource.addEventListener('click', () => {\n    txtReEncryptSource.value = '';\n});\n\nbtnClearReEncryptTarget.addEventListener('click', () => {\n    txtReEncryptTarget.value = '';\n});\n","import { getElementById } from './ui';\n\nimport './components/privatePartComponent';\nimport './components/passwordComponent';\nimport './components/cipherComponent';\nimport './components/reEncryptComponent';\n\nimport { TabControl, ITabInfo } from './TabControl';\n\nconst btnTabNothing: HTMLInputElement = getElementById('btnTabNothing');\nconst btnTabPasswords: HTMLInputElement = getElementById('btnTabPasswords');\nconst btnTabCiphers: HTMLInputElement = getElementById('btnTabCiphers');\nconst btnTabReEncrypt: HTMLInputElement = getElementById('btnTabReEncrypt');\n\nconst divTabNothing: HTMLInputElement = getElementById('divTabNothing');\nconst divTabPasswords: HTMLInputElement = getElementById('divTabPasswords');\nconst divTabCiphers: HTMLInputElement = getElementById('divTabCiphers');\nconst divTabReEncrypt: HTMLInputElement = getElementById('divTabReEncrypt');\n\nconst tabs: ITabInfo[] = [\n    { button: btnTabNothing, content: divTabNothing },\n    { button: btnTabPasswords, content: divTabPasswords },\n    { button: btnTabCiphers, content: divTabCiphers },\n    { button: btnTabReEncrypt, content: divTabReEncrypt }\n];\n\nnew TabControl(tabs);\n\ndeclare const COMMITHASH: string;\n\nconst version = COMMITHASH.substr(0, 11);\nconst githubLink = '<a href=\"https://github.com/TanukiSharp/ItchyPassword\" target=\"_blank\">github</a>';\n\ngetElementById('divInfo').innerHTML = `${version}<br/>${githubLink}`;\n","export interface ITabInfo {\n    button: HTMLInputElement,\n    content: HTMLInputElement\n}\n\nexport class TabControl {\n    private _activeTabIndex: number = -1;\n\n    public get activeTabIndex(): number {\n        return this._activeTabIndex;\n    }\n    public set activeTabIndex(index: number) {\n        if (index < 0 || index >= this.tabs.length) {\n            throw new Error(`Argument 'index' out of range. Must be in range [0;${this.tabs.length - 1}].`);\n        }\n        this.setActiveTab(index);\n    }\n\n    public constructor(private tabs: ITabInfo[]) {\n        for (let i = 0; i < this.tabs.length; i += 1) {\n            tabs[i].button.addEventListener('click', () => {\n                this.setActiveTab(i);\n            });\n        }\n\n        this.setActiveTab(0);\n    }\n\n    private setActiveTab(activeTabIndex: number) {\n        let tabInfo: ITabInfo;\n\n        for (tabInfo of this.tabs) {\n            tabInfo.button.style.removeProperty('font-weight');\n            tabInfo.button.style.setProperty('color', '#C0C0C0');\n            tabInfo.content.style.setProperty('display', 'none');\n        }\n\n        this.tabs[activeTabIndex].button.style.setProperty('font-weight', 'bold');\n        this.tabs[activeTabIndex].button.style.removeProperty('color');\n        this.tabs[activeTabIndex].content.style.removeProperty('display');\n\n        this._activeTabIndex = activeTabIndex;\n    }\n}\n"],"sourceRoot":""}