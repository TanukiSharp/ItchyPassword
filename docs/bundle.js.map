{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://itchy-password/./src/ui.ts","webpack://itchy-password/./src/TabControl.ts","webpack://itchy-password/./src/components/privatePartComponent.ts","webpack://itchy-password/./src/TimedAction.ts","webpack://itchy-password/./src/encoding.ts","webpack://itchy-password/./src/arrayUtils.ts","webpack://itchy-password/./src/asyncUtils.ts","webpack://itchy-password/./src/crypto.ts","webpack://itchy-password/./src/stringUtils.ts","webpack://itchy-password/./src/PlainObject.ts","webpack://itchy-password/./src/services/serviceManger.ts","webpack://itchy-password/./src/storages/GitHubVaultStorage.ts","webpack://itchy-password/./src/services/cipherService.ts","webpack://itchy-password/./src/components/cipherComponent.ts","webpack://itchy-password/./src/ciphers/v2.ts","webpack://itchy-password/./src/ciphers/v3.ts","webpack://itchy-password/./src/storages/SecureLocalStorage.ts","webpack://itchy-password/./src/components/storageOutputComponent.ts","webpack://itchy-password/./src/services/passwordService.ts","webpack://itchy-password/./src/components/passwordComponent.ts","webpack://itchy-password/./src/passwordGenerators/v1.ts","webpack://itchy-password/./src/passwordGenerators/v2.ts","webpack://itchy-password/./src/components/reEncryptComponent.ts","webpack://itchy-password/./src/components/vaultComponents/TreeNode.ts","webpack://itchy-password/./src/searchMatchFunctions.ts","webpack://itchy-password/./src/components/vaultComponents/treeViewComponent.ts","webpack://itchy-password/./src/components/vaultComponents/textViewComponent.ts","webpack://itchy-password/./src/services/vaultService.ts","webpack://itchy-password/./src/components/vaultComponent.ts","webpack://itchy-password/./src/services/errorLogsService.ts","webpack://itchy-password/./src/components/errorLogsComponent.ts","webpack://itchy-password/./src/components/rootComponent.ts","webpack://itchy-password/./src/index.ts"],"sourcesContent":["export const SUCCESS_COLOR: string = '#D0FFD0';\nexport const ERROR_COLOR: string = '#FFD0D0';\n\nexport function getElementById(elementName: string): HTMLElement {\n    const element: HTMLElement|null = document.getElementById(elementName);\n\n    if (elementName === null) {\n        throw new Error(`DOM element '${elementName}' not found.`);\n    }\n\n    return element as HTMLElement;\n}\n\nexport async function writeToClipboard(text: string, logFunc?: (..._: any[]) => void): Promise<boolean> {\n    try {\n        await navigator.clipboard.writeText(text);\n        return true;\n    } catch (error) {\n        const typedError = error as Error;\n        console.error(typedError.stack || error);\n        logFunc?.(typedError.stack || error);\n        return false;\n    }\n}\n\nexport function clearText(txt: HTMLInputElement, refocus: boolean = false): void {\n    txt.value = '';\n    if (refocus) {\n        txt.focus();\n    }\n}\n\ninterface ThrottleTimeout {\n    start: Function;\n    end: Function;\n}\n\nfunction createThrottleTimeout(clearFunc: Function, duration: number): ThrottleTimeout {\n    let timeout: number | undefined = undefined;\n\n    return {\n        start: () => {\n            if (timeout !== undefined) {\n                clearTimeout(timeout);\n                timeout = undefined;\n            }\n            clearFunc();\n        },\n        end: () => {\n            if (timeout !== undefined) {\n                clearTimeout(timeout);\n            }\n            timeout = setTimeout(clearFunc, duration);\n        }\n    };\n}\n\nexport type FeedbackButtonAsyncFunction = () => Promise<boolean> | boolean | Promise<void> | void;\n\nexport function setupFeedbackButton(button: HTMLButtonElement, action: FeedbackButtonAsyncFunction, logError?: (error: any) => any): () => void {\n    const throttleTimeout: ThrottleTimeout = createThrottleTimeout(() => {\n        button.classList.remove('good-flash');\n        button.classList.remove('bad-flash');\n    }, 1000);\n\n    const clickFunction = async () => {\n        button.disabled = true;\n        throttleTimeout.start();\n\n        try {\n            const actionResult = action();\n\n            let result;\n            if (actionResult instanceof Promise) {\n                result = await actionResult;\n            } else {\n                result = actionResult;\n            }\n\n            if (result === undefined || result === true) {\n                button.classList.add('good-flash');\n            } else {\n                button.classList.add('bad-flash');\n            }\n        } catch (error) {\n            const typedError = error as Error;\n            button.classList.add('bad-flash');\n            console.error(typedError.stack || error);\n            logError?.(typedError.stack || error);\n        } finally {\n            throttleTimeout.end();\n            button.disabled = false;\n        }\n    };\n\n    button.addEventListener('click', clickFunction);\n\n    return clickFunction;\n}\n\nexport function setupCopyButton(txt: HTMLInputElement, button: HTMLButtonElement, logFunc?: (..._: any[]) => void): () => void {\n    return setupFeedbackButton(button, () => writeToClipboard(txt.value), logFunc);\n}\n\nexport function setupViewButton(txt: HTMLInputElement, button: HTMLButtonElement): void {\n    button.addEventListener('click', () => {\n        if (txt.type === 'password') {\n            txt.type = 'input';\n            button.innerHTML = 'Hide';\n        } else {\n            txt.type = 'password';\n            button.innerHTML = 'View';\n        }\n    });\n}\n\nexport function showHide(element: HTMLElement, isVisible: boolean): void {\n    if (isVisible) {\n        element.style.removeProperty('display');\n    } else {\n        element.style.setProperty('display', 'none');\n    }\n}\n\nexport function showHideMany(elements: HTMLElement[], isVisible: boolean): void {\n    for (const element of elements) {\n        showHide(element, isVisible);\n    }\n}\n\nexport function setupShowHideButton(button: HTMLButtonElement, startVisible: boolean, elements: HTMLElement[]): void {\n    let isVisible = startVisible;\n    button.addEventListener('click', function () {\n        isVisible = !isVisible;\n        showHideMany(elements, isVisible);\n    });\n    showHideMany(elements, isVisible);\n}\n","export interface ITabInfo {\n    getTabButton(): HTMLButtonElement;\n    getTabContent(): HTMLElement;\n    onTabSelected(): void;\n}\n\nexport class TabControl {\n    private _activeTabIndex: number = -1;\n\n    public get activeTabIndex(): number {\n        return this._activeTabIndex;\n    }\n\n    public set activeTabIndex(index: number) {\n        if (index < 0 || index >= this.tabs.length) {\n            throw new Error(`Argument 'index' out of range. Must be in range [0;${this.tabs.length - 1}].`);\n        }\n        this.setActiveTab(index);\n    }\n\n    public constructor(private tabs: ITabInfo[]) {\n        for (let i = 0; i < this.tabs.length; i += 1) {\n            tabs[i].getTabButton().addEventListener('click', () => {\n                this.setActiveTab(i);\n            });\n        }\n\n        this.setActiveTab(0);\n    }\n\n    private setActiveTab(activeTabIndex: number) {\n        if (activeTabIndex === this._activeTabIndex) {\n            return;\n        }\n\n        let tabInfo: ITabInfo;\n\n        for (tabInfo of this.tabs) {\n            const button = tabInfo.getTabButton();\n            button.style.removeProperty('font-weight');\n            button.style.setProperty('color', '#C0C0C0');\n\n            tabInfo.getTabContent().style.setProperty('display', 'none');\n        }\n\n        const button = this.tabs[activeTabIndex].getTabButton();\n        button.style.setProperty('font-weight', 'bold');\n        button.style.removeProperty('color');\n\n        this.tabs[activeTabIndex].getTabContent().style.removeProperty('display');\n\n        this._activeTabIndex = activeTabIndex;\n\n        this.tabs[activeTabIndex].onTabSelected();\n    }\n}\n","import * as ui from '../ui';\n\nimport { TimedAction } from '../TimedAction';\nimport { IComponent } from './IComponent';\n\nconst btnProtectTitleForProtect = 'Stores the string in memory and removes it from the UI component. Prevents a physical intruder from copy/pasting the value.';\nconst btnProtectTitleForClear = 'Removes the string form memory and re-enables the UI component.';\n\nconst divPrivatePartContainer = ui.getElementById('divMasterKey');\n\nconst txtPrivatePart = ui.getElementById('txtPrivatePart') as HTMLInputElement;\nconst txtPrivatePartConfirmation = ui.getElementById('txtPrivatePartConfirmation') as HTMLInputElement;\nconst btnProtect = ui.getElementById('btnProtect') as HTMLButtonElement;\nconst spnProtectedConfirmation = ui.getElementById('spnProtectedConfirmation');\n\nconst spnPrivatePartSize = ui.getElementById('spnPrivatePartSize');\nconst spnPrivatePartSizeConfirmation = ui.getElementById('spnPrivatePartSizeConfirmation');\n\nconst PRIVATE_PART_PROTECTION_TIMEOUT: number = 60 * 1000;\n\nlet privatePart: string | undefined;\n\nconst onChangedHandlers: (() => void)[] = [];\n\nexport function registerOnChanged(onChanged: () => void) {\n    onChangedHandlers.push(onChanged);\n}\n\nexport function hasPrivatePart(): boolean {\n    return getPrivatePart().length > 0;\n}\n\nexport function getPrivatePart(): string {\n    if (privatePart !== undefined) {\n        return privatePart;\n    }\n    return txtPrivatePart.value;\n}\n\nexport function protectAndLockPrivatePart(): void {\n    if (txtPrivatePart.value.length === 0) {\n        return;\n    }\n\n    privatePart = txtPrivatePart.value;\n    spnProtectedConfirmation.innerHTML = 'Protected';\n\n    ui.clearText(txtPrivatePart);\n\n    ui.clearText(txtPrivatePartConfirmation);\n    spnPrivatePartSize.innerHTML = '0';\n    spnPrivatePartSizeConfirmation.innerHTML = '0';\n\n    txtPrivatePart.disabled = true;\n    txtPrivatePartConfirmation.disabled = true;\n\n    btnProtect.innerHTML = 'Clear and unlock';\n    btnProtect.title = btnProtectTitleForClear;\n\n    updatePrivatePartsMatching();\n}\n\nexport function hidePrivatePartContainer() {\n    // This cannot be reveresed, the only way is to refresh the page, and that's fine.\n    divPrivatePartContainer.style.display = 'none';\n}\n\nfunction clearAndUnLockPrivatePart(): void {\n    privatePart = undefined;\n    spnProtectedConfirmation.innerHTML = '';\n\n    txtPrivatePart.disabled = false;\n    txtPrivatePartConfirmation.disabled = false;\n\n    btnProtect.innerHTML = 'Protect and lock';\n    btnProtect.title = btnProtectTitleForProtect;\n    btnProtect.disabled = true;\n}\n\nfunction togglePrivatePartProtection(): void {\n    if (privatePart === undefined) {\n        protectAndLockPrivatePart();\n    } else {\n        clearAndUnLockPrivatePart();\n    }\n}\n\nfunction onProtectButtonClick() {\n    togglePrivatePartProtection();\n}\n\nconst protectPrivatePartAction: TimedAction = new TimedAction(protectAndLockPrivatePart, PRIVATE_PART_PROTECTION_TIMEOUT);\n\nfunction onPrivatePartTextInput(): void {\n    btnProtect.disabled = txtPrivatePart.value.length === 0;\n\n    spnPrivatePartSize.innerHTML = txtPrivatePart.value.length.toString();\n    updatePrivatePartsMatching();\n\n    let onChangedHandler: () => void;\n    for (onChangedHandler of onChangedHandlers) {\n        onChangedHandler();\n    }\n\n    protectPrivatePartAction.reset();\n}\n\nfunction updatePrivatePartsMatching(): void {\n    if (txtPrivatePartConfirmation.value === txtPrivatePart.value) {\n        txtPrivatePartConfirmation.style.setProperty('background', ui.SUCCESS_COLOR);\n    } else {\n        txtPrivatePartConfirmation.style.setProperty('background', ui.ERROR_COLOR);\n    }\n};\n\nfunction onPrivatePartConfirmationTextInput(): void {\n    spnPrivatePartSizeConfirmation.innerHTML = txtPrivatePartConfirmation.value.length.toString();\n    protectPrivatePartAction.reset();\n    updatePrivatePartsMatching();\n}\n\nexport class PrivatePartComponent implements IComponent {\n    public readonly name: string = 'PrivatePart';\n\n    public getVaultHint(): string {\n        throw new Error('Not supported.');\n    }\n\n    public init(): void {\n        btnProtect.addEventListener('click', onProtectButtonClick);\n        txtPrivatePart.addEventListener('input', onPrivatePartTextInput);\n        txtPrivatePartConfirmation.addEventListener('input', onPrivatePartConfirmationTextInput);\n\n        updatePrivatePartsMatching();\n        btnProtect.title = btnProtectTitleForProtect;\n        txtPrivatePart.focus();\n    }\n}\n","export class TimedAction {\n    private timeout: number | undefined;\n\n    public constructor(private action: Function, private delay: number) {\n    }\n\n    public reset(overrideDelay: number | undefined = undefined): void {\n        if (this.timeout !== undefined) {\n            clearTimeout(this.timeout);\n        }\n\n        const delay = overrideDelay !== undefined ? overrideDelay : this.delay;\n\n        this.timeout = window.setTimeout(() => {\n            this.action();\n            this.timeout = undefined;\n        }, delay);\n    }\n}\n","import * as arrayUtils from './arrayUtils';\n\nexport interface IEncoding {\n    readonly name: string;\n    readonly description: string;\n    encode(input: ArrayBuffer): string;\n    decode(input: string): ArrayBuffer;\n}\n\nconst BASE58_ALPHABET: string = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';\n\nexport class Base58Encoding implements IEncoding {\n    get name(): string {\n        return 'base58';\n    }\n\n    get description(): string {\n        return `Base58 alphabet in ASCII table order.`;\n    }\n\n    encode(input: ArrayBuffer): string {\n        return arrayUtils.toCustomBaseFast(input, BASE58_ALPHABET);\n    }\n\n    decode(input: string): ArrayBuffer {\n        return arrayUtils.fromCustomBaseFast(input, BASE58_ALPHABET);\n    }\n}\n\nexport const BASE62_ALPHABET: string = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\n\nexport class Base62Encoding implements IEncoding {\n    get name(): string {\n        return 'base62';\n    }\n\n    get description(): string {\n        return `Alphabet '${BASE62_ALPHABET}'.`;\n    }\n\n    encode(input: ArrayBuffer): string {\n        return arrayUtils.toCustomBase(input, BASE62_ALPHABET);\n    }\n\n    decode(input: string): ArrayBuffer {\n        return arrayUtils.fromCustomBase(input, BASE62_ALPHABET);\n    }\n}\n\n// Code to encode and decode base64 is taken from MDN and adjusted.\n\nexport class Base64Encoding implements IEncoding {\n    get name(): string {\n        return 'base64';\n    }\n\n    get description(): string {\n        return '';\n    }\n\n    encode(input: ArrayBuffer): string {\n        return this._base64Encode(new Uint8Array(input))\n    }\n\n    decode(input: string): ArrayBuffer {\n        return this._base64Decode(input).buffer;\n    }\n\n    _base64ToUint6(base64Char: number): number {\n        return base64Char > 64 && base64Char < 91\n            ? base64Char - 65\n            : base64Char > 96 && base64Char < 123\n                ? base64Char - 71\n                : base64Char > 47 && base64Char < 58\n                    ? base64Char + 4\n                    : base64Char === 43\n                        ? 62\n                        : base64Char === 47\n                            ? 63\n                            : 0;\n    }\n\n    _base64Decode(base64Input: string, blocksSize?: number): Uint8Array {\n        // Remove any non-base64 characters, such as trailing '=', whitespace, and more.\n        base64Input = base64Input.replace(/[^A-Za-z0-9+/]/g, '');\n\n        const inputLength = base64Input.length;\n        const outputLength = blocksSize\n            ? Math.ceil(((inputLength * 3 + 1) >> 2) / blocksSize) * blocksSize\n            : (inputLength * 3 + 1) >> 2;\n\n        const outputBytes = new Uint8Array(outputLength);\n\n        let value24Bits = 0;\n\n        let outputIndex = 0;\n\n        for (let inputIndex = 0; inputIndex < inputLength; inputIndex++) {\n            const inputIndexMod4 = inputIndex % 4;\n\n            value24Bits |= this._base64ToUint6(base64Input.charCodeAt(inputIndex)) << (6 * (3 - inputIndexMod4));\n\n            if (inputIndexMod4 === 3 || inputLength - inputIndex === 1) {\n                let inputIndexMod3 = 0;\n\n                while (inputIndexMod3 < 3 && outputIndex < outputLength) {\n                    outputBytes[outputIndex] = (value24Bits >>> ((0b1_0000 >>> inputIndexMod3) & 0b1_1000)) & 0xFF;\n                    inputIndexMod3++;\n                    outputIndex++;\n                }\n\n                value24Bits = 0;\n            }\n        }\n\n        return outputBytes;\n    }\n\n    /* Base64 string to array encoding */\n    _uint6ToBase64(value6Bits: number): number {\n        return value6Bits < 26\n            ? value6Bits + 65\n            : value6Bits < 52\n                ? value6Bits + 71\n                : value6Bits < 62\n                    ? value6Bits - 4\n                    : value6Bits === 62\n                        ? 43\n                        : value6Bits === 63\n                            ? 47\n                            : 65;\n    }\n\n    _base64Encode(inputBytes: Uint8Array): string {\n        let inputIndexMod3 = 2;\n        let base64Output = '';\n\n        const inputBytesLength = inputBytes.length;\n\n        let value24Bits = 0;\n\n        for (let inputIndex = 0; inputIndex < inputBytesLength; inputIndex++) {\n            inputIndexMod3 = inputIndex % 3;\n\n            // To break your base64 into several 80-character lines, add:\n            // if (inputIndex > 0 && ((inputIndex * 4) / 3) % 76 === 0) {\n            //     base64Output += '\\n';\n            // }\n\n            const shift = 0b1_0000 >>> inputIndexMod3;\n            const constrainedShift = shift & 0b1_1000;\n\n            value24Bits |= inputBytes[inputIndex] << constrainedShift;\n\n            if (inputIndexMod3 === 2 || inputBytes.length - inputIndex === 1) {\n                base64Output += String.fromCodePoint(\n                    this._uint6ToBase64((value24Bits >>> 18) & 63),\n                    this._uint6ToBase64((value24Bits >>> 12) & 63),\n                    this._uint6ToBase64((value24Bits >>> 6) & 63),\n                    this._uint6ToBase64(value24Bits & 63)\n                );\n                value24Bits = 0;\n            }\n        }\n\n        const padding = inputIndexMod3 === 2\n            ? ''\n            : inputIndexMod3 === 1\n                ? '='\n                : '==';\n\n        return base64Output.substring(0, base64Output.length - 2 + inputIndexMod3) + padding;\n    }\n}\n\n// ---------------------------------------------------------------\n\nexport const availableEncodings: IEncoding[] = [\n    new Base62Encoding(),\n    new Base58Encoding(),\n    new Base64Encoding(),\n];\n\nexport function findEncodingByName(name: string): IEncoding | null {\n    for (const encoding of availableEncodings) {\n        if (encoding.name === name) {\n            return encoding;\n        }\n    }\n\n    return null;\n}\n","export function arrayToString(array: ArrayBuffer): string {\n    const decoder = new TextDecoder(/*'utf-8'*/);\n    return decoder.decode(array);\n};\n\nexport function copy(source: Uint8Array, sourceIndex: number, target: Uint8Array, targetIndex: number, length: number): void {\n    for (let i: number = 0; i < length; i += 1) {\n        target[i + targetIndex] = source[i + sourceIndex];\n    }\n}\n\nfunction createHeaderedBuffer(buffer: ArrayBuffer): ArrayBuffer {\n    if (buffer.byteLength > 0xFFFF) {\n        throw new Error(`Buffer too large: ${buffer.byteLength} bytes`);\n    }\n\n    let length = buffer.byteLength;\n    const headeredBuffer: Uint8Array = new Uint8Array(2 + buffer.byteLength);\n\n    for (let i: number = 0; i < 2; i += 1) {\n        headeredBuffer[i] = length % 256;\n        length /= 256;\n    }\n\n    headeredBuffer.set(new Uint8Array(buffer), 2);\n\n    return headeredBuffer.buffer;\n}\n\nfunction arrayBufferToUnsignedBigIntWithoutHeader(arrayBuffer: ArrayBuffer): bigint {\n    const length: number = arrayBuffer.byteLength;\n    const arrayView: DataView = new DataView(arrayBuffer, 0);\n\n    let result: bigint = 0n;\n    let multiplier: bigint = 1n;\n\n    for (let i: number = 0; i < length; i += 1) {\n        result += BigInt(arrayView.getUint8(i)) * multiplier;\n        multiplier *= 256n;\n    }\n\n    return result;\n}\n\nfunction arrayBufferToUnsignedBigInt(arrayBuffer: ArrayBuffer): bigint {\n    arrayBuffer = createHeaderedBuffer(arrayBuffer);\n\n    const length: number = arrayBuffer.byteLength;\n    const arrayView: DataView = new DataView(arrayBuffer, 0);\n\n    let result: bigint = 0n;\n    let multiplier: bigint = 1n;\n\n    for (let i: number = 0; i < length; i += 1) {\n        result += BigInt(arrayView.getUint8(i)) * multiplier;\n        multiplier *= 256n;\n    }\n\n    return result;\n}\n\nexport function unsignedBigIntToArrayBuffer(number: bigint): ArrayBuffer {\n    const result: Array<number> = [];\n\n    while (number > 0n) {\n        const remainder: bigint = number % 256n;\n        number /= 256n;\n\n        const byteValue: number = Number(<any>BigInt.asUintN(8, remainder));\n\n        result.push(byteValue);\n    }\n\n    let totalLength: number = result[0];\n    if (result.length > 1) { // For case where original buffer is of length 1 and contains 0.\n        totalLength += result[1] * 256;\n    }\n\n    // The varable 'result' contains 2 bytes of size header.\n    const diff = totalLength - (result.length - 2);\n\n    for (let i: number = 0; i < diff; i += 1) {\n        result.push(0);\n    }\n\n    return new Uint8Array(result.slice(2)).buffer;\n}\n\n// This is a one way encoding in the sense that decoding is not always deterministic.\n// This can be used to generate strings where decoding it doesn't matter.\nexport function toCustomBaseOneWay(bytes: ArrayBuffer, alphabet: string): string {\n    const alphabetLength: bigint = BigInt(alphabet.length);\n\n    let result: string = '';\n    let number: bigint = arrayBufferToUnsignedBigIntWithoutHeader(bytes);\n\n    while (number > 0n) {\n        const remainder: bigint = number % alphabetLength;\n        number /= alphabetLength;\n\n        const index: number = <number><any>BigInt.asUintN(8, remainder);\n\n        result += alphabet[index];\n    }\n\n    return result;\n}\n\nexport function toCustomBase(bytes: ArrayBuffer, alphabet: string): string {\n    const alphabetLength: bigint = BigInt(alphabet.length);\n\n    let result: string = '';\n    let number: bigint = arrayBufferToUnsignedBigInt(bytes);\n\n    while (number > 0n) {\n        const remainder: bigint = number % alphabetLength;\n        number /= alphabetLength;\n\n        const index: number = <number><any>BigInt.asUintN(8, remainder);\n\n        result += alphabet[index];\n    }\n\n    return result;\n}\n\nexport function fromCustomBase(input: string, alphabet: string): ArrayBuffer {\n    const alphabetLength: bigint = BigInt(alphabet.length);\n\n    let number: bigint = 0n;\n    let multiplier: bigint = 1n;\n\n    for (let i: number = 0; i < input.length; i += 1) {\n        const value: bigint = BigInt(alphabet.indexOf(input[i]));\n\n        number += value * multiplier;\n        multiplier *= alphabetLength;\n    }\n\n    return unsignedBigIntToArrayBuffer(number);\n}\n\nexport function toBase16(buffer: ArrayBuffer): string {\n    return Array.prototype.map.call(\n        new Uint8Array(buffer),\n        (x: number) => ('00' + x.toString(16)).slice(-2)\n    ).join('');\n}\n\n// Code in functions toCustomBaseFast and fromCustomBaseFast is taken from https://www.browserling.com/tools/base58-encode and adjusted.\n\nexport function toCustomBaseFast(input: ArrayBuffer, alphabet: string): string {\n    if (alphabet.length < 2) {\n        throw new Error('Alphabet does not contain enough characters, at least 2 are required.');\n    }\n\n    if (input.byteLength === 0) {\n        return '';\n    }\n\n    const arrayView: DataView = new DataView(input, 0);\n\n    let carry: number = 0;\n    const digits: number[] = [0]\n\n    for (let i = 0; i < input.byteLength; i++) {\n        for (let j = 0; j < digits.length; j++) {\n            digits[j] <<= 8;\n        }\n\n        digits[0] += arrayView.getUint8(i);\n\n        carry = 0;\n\n        for (let j = 0; j < digits.length; j++) {\n            digits[j] += carry;\n            carry = (digits[j] / alphabet.length) | 0;\n            digits[j] %= alphabet.length;\n        }\n\n        while (carry > 0) {\n            digits.push(carry % alphabet.length);\n            carry = (carry / alphabet.length) | 0;\n        }\n    }\n\n    for (let i = 0; arrayView.getUint8(i) === 0 && i < input.byteLength - 1; i++) {\n        digits.push(0);\n    }\n\n    let result = '';\n\n    for (let i = digits.length - 1; i >= 0; i--) {\n        result += alphabet[digits[i]];\n    }\n\n    return result;\n}\n\nexport function fromCustomBaseFast(input: string, alphabet: string): ArrayBuffer {\n    if (alphabet.length < 2) {\n        throw new Error('Alphabet does not contain enough characters, at least 2 are required.');\n    }\n\n    if (input.length === 0) {\n        return new ArrayBuffer(0);\n    }\n\n    for (let i = 0; i < input.length; i++) {\n        if (alphabet.includes(input[i]) === false) {\n            throw new Error(`Base${alphabet.length} alphabet '${alphabet}' does not contain character '${input[i]}'.`);\n        }\n    }\n\n    const bytes: number[] = [0];\n    let carry = 0;\n\n    for (let i = 0; i < input.length; i++) {\n        const c = input[i];\n\n        for (let j = 0; j < bytes.length; j++) {\n            bytes[j] *= alphabet.length;\n        }\n\n        bytes[0] += alphabet.indexOf(c);\n\n        carry = 0;\n\n        for (let j = 0; j < bytes.length; j++) {\n            bytes[j] += carry;\n            carry = bytes[j] >> 8;\n            bytes[j] &= 0xFF;\n        }\n\n        while (carry > 0) {\n            bytes.push(carry & 0xFF);\n            carry >>= 8;\n        }\n    }\n\n    for (let i = 0; input[i] === alphabet[0] && i < input.length - 1; i++) {\n        bytes.push(0);\n    }\n\n    return new Uint8Array(bytes.reverse()).buffer;\n}\n","export class TaskCancelledError extends Error {\n    private _name: string;\n\n    public get name(): string {\n        return this._name;\n    }\n\n    constructor(message?: string) {\n        super(message);\n        this._name = TaskCancelledError.ERROR_NAME;\n        Object.setPrototypeOf(this, new.target.prototype);\n    }\n\n    public static readonly ERROR_NAME: string = 'TaskCancelledError';\n\n    public static isMatching(error: Error) {\n        return error && error.name === TaskCancelledError.ERROR_NAME;\n    }\n}\n\nexport class CancellationTokenSource {\n    private _isCancelled: boolean = false;\n    private _token: CancellationToken;\n\n    constructor() {\n        this._token = new CancellationToken(this);\n    }\n\n    public get isCancelled(): boolean {\n        return this._isCancelled;\n    }\n\n    public get token(): CancellationToken {\n        return this._token;\n    }\n\n    public cancel(): void {\n        this._isCancelled = true;\n    }\n}\n\nexport class CancellationToken {\n    private static _none: CancellationToken | null = null;\n    public static get none(): CancellationToken {\n        if (CancellationToken._none === null) {\n            CancellationToken._none = new CancellationToken(new CancellationTokenSource());\n        }\n        return CancellationToken._none;\n    }\n\n    constructor(private source: CancellationTokenSource) {\n    }\n\n    public get isCancelled(): boolean {\n        return this.source.isCancelled;\n    }\n}\n\nexport function ensureNotCancelled(cancellationToken: CancellationToken): void {\n    if (cancellationToken.isCancelled) {\n        throw new TaskCancelledError();\n    }\n}\n\nexport function rethrowCancelled(error: Error): void {\n    if (TaskCancelledError.isMatching(error)) {\n        throw error;\n    }\n}\n\nexport type TaskFactory<T> = (cancellationToken: CancellationToken) => Promise<T>;\n\n// Manages the lifetime of a single task, and automatically cancels the previous when running a new one.\n// It also awaits for previous task to be fully terminated before running the new one.\nexport class TaskRunner<TValue> {\n    private currentTokenSource: CancellationTokenSource | null = null;\n    private currentTask: Promise<TValue | undefined> | null = null;\n    private microThreadId: number = 0;\n\n    // Gets a value indicating whether a task is currently running or not.\n    public get isRunning(): boolean {\n        return this.currentTask !== null;\n    }\n\n    // Cancels the currently running task, if any.\n    // Returns true if no one called cancelInternal() when it returns.\n    private async cancelInternal(throwTaskCanceledError: boolean): Promise<boolean> {\n        if (this.microThreadId === Number.MAX_SAFE_INTEGER) {\n            this.microThreadId = 0;\n        } else {\n            this.microThreadId = this.microThreadId + 1;\n        }\n\n        const localMicroThreadId: number = this.microThreadId;\n\n        // This corresponds to the end of cancelAndExecute().\n        if (this.currentTask === null) {\n            return true;\n        }\n\n        if (this.currentTokenSource !== null) {\n            this.currentTokenSource.cancel();\n\n            // The above currentTokenSource.cancel() can run the finally block of cancelAndExecute() and set currentTask to null.\n            if (this.currentTask !== null) {\n                try {\n                    await this.currentTask;\n                } catch (error) {\n                    if (TaskCancelledError.isMatching(error as Error)) {\n                        if (throwTaskCanceledError) {\n                            throw error;\n                        }\n                    } else {\n                        throw error;\n                    }\n                }\n            }\n        }\n\n        return localMicroThreadId === this.microThreadId;\n    }\n\n    // Cancels the currently running task, if any.\n    // throwTaskCanceledError: Pass true allow to throw a TaskCancelledError.\n    // Returns a Promise that completes when the current job is fully cancelled.\n    public async cancel(throwTaskCanceledError: boolean = false): Promise<void> {\n        await this.cancelInternal(throwTaskCanceledError);\n    }\n\n    // Cancels the current task if any, and runs a new one.\n    // T: Type of value returned by the task to run.\n    // taskFactory: A task producer that receives a CancellationToken.\n    // throwTaskCanceledError: Pass true allow to throw a TaskCancelledError.\n    // Returns the task produced by the taskFactory.\n    public async cancelAndExecute(taskFactory: TaskFactory<TValue>, throwTaskCanceledError: boolean = false): Promise<TValue | undefined> {\n        if (await this.cancelInternal(throwTaskCanceledError) === false) {\n            if (throwTaskCanceledError === false) {\n                return undefined;\n            }\n            throw new TaskCancelledError();\n        }\n\n        var localToken = new CancellationTokenSource();\n        this.currentTokenSource = localToken;\n\n        try {\n            this.currentTask = taskFactory(this.currentTokenSource.token);\n            return await this.currentTask;\n        } catch (error) {\n            if (TaskCancelledError.isMatching(error as Error) && throwTaskCanceledError === false) {\n                return undefined;\n            }\n            throw error;\n        } finally {\n            this.currentTask = null;\n        }\n    }\n}\n","import { Base58Encoding, IEncoding } from './encoding';\nimport { CancellationToken, ensureNotCancelled } from './asyncUtils';\n\nconst encoding: IEncoding = new Base58Encoding();\n\nexport interface IPasswordGenerator {\n    readonly version: number;\n    readonly description: string;\n    generatePassword(privatePart: ArrayBuffer, publicPart: ArrayBuffer, cancellationToken: CancellationToken): Promise<ArrayBuffer>;\n}\n\nexport interface ICipher {\n    readonly version: number;\n    readonly description: string;\n    encrypt(input: ArrayBuffer, password: ArrayBuffer, cancellationToken: CancellationToken): Promise<ArrayBuffer>;\n    decrypt(input: ArrayBuffer, password: ArrayBuffer, cancellationToken: CancellationToken): Promise<ArrayBuffer>;\n}\n\nexport async function getDerivedBytes(password: ArrayBuffer, salt: ArrayBuffer, iterations: number, cancellationToken: CancellationToken): Promise<ArrayBuffer> {\n    const baseKey: CryptoKey = await window.crypto.subtle.importKey(\n        'raw',\n        password,\n        'PBKDF2',\n        false,\n        ['deriveKey']\n    );\n\n    ensureNotCancelled(cancellationToken);\n\n    const algorithm: Pbkdf2Params = {\n        name: 'PBKDF2',\n        hash: 'SHA-512',\n        iterations: iterations,\n        salt\n    };\n\n    const derivedKeyType: AesDerivedKeyParams = {\n        // Algorithm name must be a recognized one,\n        // but any AES-* produces the same result...\n        name: 'AES-GCM',\n        length: 256\n    };\n\n    const result: CryptoKey = await window.crypto.subtle.deriveKey(\n        algorithm,\n        baseKey,\n        derivedKeyType,\n        true,\n        ['encrypt']\n    );\n\n    ensureNotCancelled(cancellationToken);\n\n    const key: ArrayBuffer = await window.crypto.subtle.exportKey('raw', result);\n\n    ensureNotCancelled(cancellationToken);\n\n    return key;\n}\n\nexport function generateRandomBytes(byteCount: number = 64): ArrayBuffer {\n    const array: Uint8Array = new Uint8Array(byteCount);\n    return crypto.getRandomValues(array).buffer;\n}\n\nexport function generateRandomString(byteCount: number = 64): string {\n    const array: ArrayBuffer = generateRandomBytes(byteCount);\n    return encoding.encode(array);\n}\n","function findNonCharFromStart(value: string, chars: string[]): number {\n    for (let i = 0; i < value.length; i += 1) {\n        if (chars.includes(value[i]) === false) {\n            return i;\n        }\n    }\n\n    return value.length;\n}\n\nfunction findNonCharFromEnd(value: string, chars: string[]): number {\n    for (let i = value.length - 1; i >= 0; i -= 1) {\n        if (chars.includes(value[i]) === false) {\n            return i + 1;\n        }\n    }\n\n    return value.length;\n}\n\nexport function trim(value: string, ...chars: string[]): string {\n    const start: number = findNonCharFromStart(value, chars);\n    const end: number = findNonCharFromEnd(value, chars);\n\n    return value.substring(start, end);\n}\n\nexport function truncate(input: string, length: number): string {\n    if (input.length <= length) {\n        return input;\n    }\n\n    return input.substring(0, length);\n}\n\nexport function stringToArray(str: string): ArrayBuffer {\n    const encoder = new TextEncoder(/*'utf-8'*/);\n    return encoder.encode(str).buffer;\n}\n\nexport function fromBase16(str: string): ArrayBuffer {\n    if (str.length % 2 !== 0) {\n        str = '0' + str;\n    }\n\n    const result: Uint8Array = new Uint8Array(str.length / 2);\n\n    for (let i = 0; i < result.byteLength; i += 1) {\n        const position = i * 2;\n        result[i] = parseInt(str.substring(position, position + 2), 16);\n    }\n\n    return result.buffer;\n}\n\nexport function escapeAndDecodeUtfString(utfString: string): string {\n    return decodeURIComponent(escape(utfString));\n}\n","export type PlainObject = { [key: string]: any };\n\nexport function isPlainObject(value: any): boolean {\n    return value !== undefined &&\n        value !== null &&\n        value.hasOwnProperty('constructor') === false &&\n        value.constructor.name === 'Object';\n}\n\nexport function objectDeepSort(object: PlainObject): PlainObject {\n    const output: PlainObject = {};\n\n    for (const [key, value] of Object.entries(object).sort((a, b) => a[0].localeCompare(b[0]))) {\n        output[key] = isPlainObject(value) ? objectDeepSort(value) : value;\n    }\n\n    return output;\n}\n","type ServiceContainer = { [key: string]: any };\n\nconst services: ServiceContainer = {};\n\nexport function listServices(): string[] {\n    return Object.keys(services);\n}\n\nexport function getService(serviceName: string): any {\n    if (!serviceName) {\n        throw new TypeError(`Argument 'serviceName' is mandatory.`);\n    }\n\n    const service = services[serviceName];\n\n    if (service === undefined) {\n        throw new Error(`Service '${serviceName}' is not registered.`);\n    }\n\n    return service;\n}\n\nexport function registerService(serviceName: string, instance: any): void {\n    if (!serviceName) {\n        throw new TypeError(`Argument 'serviceName' is mandatory.`);\n    }\n    if (instance === undefined) {\n        throw new TypeError(`Argument 'instance' cannot be undefined.`);\n    }\n\n    if (services[serviceName] !== undefined) {\n        throw new Error(`Service '${serviceName}' is already registered.`);\n    }\n\n    services[serviceName] = instance;\n}\n","import { SecureLocalStorage } from './SecureLocalStorage';\nimport { IVaultStorage } from './IVaultStorage';\nimport { PlainObject } from '../PlainObject';\n\ninterface IGitHubContent {\n    sha: string;\n    content: string;\n}\n\nabstract class GitHubVaultStorageBase implements IVaultStorage {\n    static BASE_URL: string = 'https://api.github.com';\n    static AUTH_TOKEN_KEY_NAME: string = 'GitHubVaultStorageBase.AuthToken';\n\n    static LOCAL_STORAGE_KEY_USERNAME: string = 'GitHubVaultStorageBase.Username';\n    static LOCAL_STORAGE_KEY_REPO: string = 'GitHubVaultStorageBase.Repository';\n    static LOCAL_STORAGE_KEY_FILENAME: string = 'GitHubVaultStorageBase.Filename';\n\n    private token: string | null = null;\n    private oneTimePassword: string | null = null;\n    private currentVaultContentHash: string | null = null;\n\n    private username: string | null = null;\n    private repositoryName: string | null = null;\n    private vaultFilename: string | null = null;\n\n    protected getUsername(): string | null {\n        return this.username;\n    }\n\n    protected getRepositoryName(): string | null {\n        return this.repositoryName;\n    }\n\n    protected getVaultFilename(): string | null {\n        return this.vaultFilename;\n    }\n\n    public constructor(protected secureLocalStorage: SecureLocalStorage) {\n    }\n\n    public clear(): void {\n        this.secureLocalStorage.removeItem(GitHubVaultStorageBase.LOCAL_STORAGE_KEY_USERNAME);\n        this.secureLocalStorage.removeItem(GitHubVaultStorageBase.LOCAL_STORAGE_KEY_REPO);\n        this.secureLocalStorage.removeItem(GitHubVaultStorageBase.LOCAL_STORAGE_KEY_FILENAME);\n\n        this.secureLocalStorage.removeItem(GitHubVaultStorageBase.AUTH_TOKEN_KEY_NAME);\n    }\n\n    private constructTokenAuthString(): string {\n        return `token ${this.token}`;\n    }\n\n    private constructFetchRequest(method: string, authHeader: string, body: any): RequestInit {\n        const headers: PlainObject = {\n            'Accept': 'application/vnd.github.v3+json',\n            'Content-Type': 'application/json',\n            'Authorization': authHeader\n        };\n\n        if (this.oneTimePassword) {\n            headers['x-github-otp'] = this.oneTimePassword;\n        }\n\n        return {\n            method,\n            headers,\n            body: body ? JSON.stringify(body) : undefined\n        };\n    }\n\n    private constructUrl(relativeUrl: string): string {\n        return `${GitHubVaultStorageBase.BASE_URL}${relativeUrl}`;\n    }\n\n    protected async request(retryOnUnauthorized: boolean, method: string, relativeUrl: string, authHeader: string, body: any = undefined): Promise<Response | null> {\n        const url: string = this.constructUrl(relativeUrl);\n        const requestInfo: RequestInit = this.constructFetchRequest(method, authHeader, body);\n\n        let response: Response = await fetch(url, requestInfo);\n\n        if (response.status === 401 && retryOnUnauthorized) {\n            this.oneTimePassword = prompt('Input your 2FA code:');\n\n            if (!this.oneTimePassword) {\n                return null;\n            }\n\n            return await this.request(retryOnUnauthorized, method, relativeUrl, authHeader, body);\n        }\n\n        return response;\n    }\n\n    protected getSetVaultParameter(key: string, promptText: string, defaultValue?: string): string | null {\n        let value: string | null = window.localStorage.getItem(key);\n\n        if (value) {\n            return value;\n        }\n\n        value = prompt(promptText, defaultValue);\n\n        if (!value) {\n            return null;\n        }\n\n        window.localStorage.setItem(key, value);\n\n        return value;\n    }\n\n    protected ensureVaultParameters(): Promise<boolean> {\n        const url = new URL(window.location.toString());\n\n        let defaultAccountUsername = '';\n        let defaultRepo = '';\n\n        if (url.hostname === 'github.com') {\n            const pathElements = url.pathname.split('/');\n            if (pathElements.length >= 3) {\n                defaultAccountUsername = pathElements[1];\n                defaultRepo = `${pathElements[2]}Vault`;\n            }\n        }\n\n        if (!defaultRepo) {\n            defaultRepo = 'ItchyPasswordVault';\n        }\n\n        const username = this.getSetVaultParameter(GitHubVaultStorageBase.LOCAL_STORAGE_KEY_USERNAME, 'GitHub account username:', defaultAccountUsername);\n        if (!username) {\n            return Promise.resolve(false);\n        }\n        this.username = username;\n\n        const repositoryName: string | null = this.getSetVaultParameter(GitHubVaultStorageBase.LOCAL_STORAGE_KEY_REPO, 'Vault GitHub repository name:', defaultRepo);\n        if (!repositoryName) {\n            return Promise.resolve(false);\n        }\n        this.repositoryName = repositoryName;\n\n        const vaultFilename: string | null = this.getSetVaultParameter(GitHubVaultStorageBase.LOCAL_STORAGE_KEY_FILENAME, 'Vault filename:', 'vault.json');\n        if (!vaultFilename) {\n            return Promise.resolve(false);\n        }\n        this.vaultFilename = vaultFilename;\n\n        return Promise.resolve(true);\n    }\n\n    protected abstract getToken(): Promise<string | null>;\n\n    private async ensureToken(): Promise<boolean> {\n        let token: string | null = await this.secureLocalStorage.getItem(GitHubVaultStorageBase.AUTH_TOKEN_KEY_NAME);\n\n        if (token === null) {\n            token = await this.getToken();\n\n            if (token === null) {\n                return false;\n            }\n        }\n\n        await this.secureLocalStorage.setItem(GitHubVaultStorageBase.AUTH_TOKEN_KEY_NAME, token);\n\n        this.token = token;\n\n        return true;\n    }\n\n    private constructVaultFileUrl() {\n        return `/repos/${this.username}/${this.repositoryName}/contents/${this.vaultFilename}`;\n    }\n\n    public async getVaultContent(): Promise<string | null> {\n        if (await this.ensureVaultParameters() === false) {\n            return null;\n        }\n        if (await this.ensureToken() === false) {\n            return null;\n        }\n\n        const url: string = this.constructVaultFileUrl();\n        const response: Response | null = await this.request(false, 'GET', url, this.constructTokenAuthString());\n\n        if (response === null) {\n            console.warn('Fetching vault content aborted.');\n            return null;\n        }\n\n        if (response.ok === false) {\n            if (response.status === 401) {\n                this.secureLocalStorage.removeItem(GitHubVaultStorageBase.AUTH_TOKEN_KEY_NAME);\n                this.token = null;\n                this.oneTimePassword = null;\n\n                return await this.getVaultContent();\n            } else if (response.status === 404) {\n                if (await this.setVaultContent('{}', '[ItchyPassword] Creation of vault file')) {\n                    return '{}';\n                }\n                return null;\n            }\n\n            console.error(`Failed to fetch vault file '${this.vaultFilename}'.`, response);\n\n            return null;\n        }\n\n        const responseContent: IGitHubContent = await response.json();\n\n        this.currentVaultContentHash = responseContent.sha;\n\n        const decodedContent = atob(responseContent.content);\n\n        if (decodedContent.trim() === '') {\n            return '{}';\n        }\n\n        return decodedContent;\n    }\n\n    public async setVaultContent(newContent: string, updateMessage: string): Promise<boolean> {\n        if (await this.ensureVaultParameters() === false) {\n            return false;\n        }\n        if (await this.ensureToken() === false) {\n            return false;\n        }\n\n        const body = {\n            message: updateMessage,\n            content: btoa(newContent),\n            sha: this.currentVaultContentHash\n        };\n\n        const url: string = this.constructVaultFileUrl();\n        const response: Response | null = await this.request(false, 'PUT', url, this.constructTokenAuthString(), body);\n\n        if (response === null) {\n            console.warn('Push new vault content aborted.');\n            return false;\n        }\n\n        const responseContent: any = await response.json();\n\n        if (response.ok === false) {\n            console.error(`Failed to create/update vault file '${this.vaultFilename}'.`, response, responseContent);\n            return false;\n        }\n\n        this.currentVaultContentHash = (responseContent.content as IGitHubContent).sha;\n\n        return true;\n    }\n\n    public getVaultSettings(): string {\n        const username = window.localStorage.getItem(GitHubVaultStorageBase.LOCAL_STORAGE_KEY_USERNAME);\n        const repositoryName = window.localStorage.getItem(GitHubVaultStorageBase.LOCAL_STORAGE_KEY_REPO);\n        const vaultFilename = window.localStorage.getItem(GitHubVaultStorageBase.LOCAL_STORAGE_KEY_FILENAME);\n\n        const usernameDisplay = username == null ? '<null>' : `'${username}'`;\n        const repositoryNameDisplay = repositoryName == null ? '<null>' : `'${repositoryName}'`;\n        const vaultFilenameDisplay = vaultFilename == null ? '<null>' : `'${vaultFilename}'`;\n\n        return `username: ${usernameDisplay}\\nrepository name: ${repositoryNameDisplay}\\nvault filename: ${vaultFilenameDisplay}`;\n    }\n}\n\n// ================================================================================================\n\nexport class GitHubPersonalAccessTokenVaultStorage extends GitHubVaultStorageBase {\n    protected getToken(): Promise<string | null> {\n        const authToken: string | null = prompt('Personal access token:');\n        return Promise.resolve(authToken);\n    }\n}\n","import { PlainObject } from 'PlainObject';\nimport { CipherComponent, findLatestCipher } from '../components/cipherComponent';\n\nexport class CipherService {\n    private latestVersion: number;\n\n    public constructor(private readonly cipherComponent: CipherComponent) {\n        this.latestVersion = findLatestCipher().version\n    }\n\n    public isLatestVersion(version: number): boolean {\n        return version === this.getLatestVersion();\n    }\n\n    public getLatestVersion(): number {\n        return this.latestVersion;\n    }\n\n    public async activate(storageFullPath: string, cipherName: string, parameterKeys: PlainObject): Promise<boolean> {\n        if (await this.cipherComponent.setParameters(cipherName, parameterKeys, storageFullPath) === false) {\n            return false;\n        }\n\n        this.cipherComponent.getTabButton().click();\n\n        return true;\n    }\n}\n","import * as crypto from '../crypto';\nimport * as stringUtils from '../stringUtils';\nimport * as arrayUtils from '../arrayUtils';\n\nimport * as ui from '../ui';\nimport { getPrivatePart } from './privatePartComponent';\n\nimport { IEncoding, availableEncodings, findEncodingByName } from '../encoding';\n\nimport { CipherV2 } from '../ciphers/v2';\nimport { CipherV3 } from '../ciphers/v3';\nimport { ITabInfo } from '../TabControl';\nimport { IComponent } from './IComponent';\n\nimport * as storageOutputComponent from './storageOutputComponent';\n\nimport * as serviceManager from '../services/serviceManger';\nimport { CipherService } from '../services/cipherService';\n\nimport { CancellationToken, ensureNotCancelled, rethrowCancelled } from '../asyncUtils';\nimport { PlainObject } from '../PlainObject';\n\nexport const RECOMMENDED_ENCODING_NAME = 'base58';\nexport const LEGACY_ENCODING_NAME = 'base62';\n\nconst btnTabCiphers = ui.getElementById('btnTabCiphers') as HTMLButtonElement;\nconst divTabCiphers = ui.getElementById('divTabCiphers');\n\nexport const ciphers: crypto.ICipher[] = [\n    new CipherV2(),\n    new CipherV3(),\n];\n\nconst btnClearAllCipherInfo = ui.getElementById('btnClearAllCipherInfo') as HTMLButtonElement;\n\nconst txtCipherName = ui.getElementById('txtCipherName') as HTMLInputElement;\nconst txtCipherSource = ui.getElementById('txtCipherSource') as HTMLInputElement;\nconst txtCipherTarget = ui.getElementById('txtCipherTarget') as HTMLInputElement;\n\nconst cboCipherVersion = ui.getElementById('cboCipherVersion') as HTMLSelectElement;\nconst cboCipherEncoding = ui.getElementById('cboCipherEncoding') as HTMLSelectElement;\nconst btnEncrypt = ui.getElementById('btnEncrypt') as HTMLButtonElement;\nconst btnDecrypt = ui.getElementById('btnDecrypt') as HTMLButtonElement;\n\nconst spnCipherSourceLength = ui.getElementById('spnCipherSourceLength') as HTMLSpanElement;\nconst btnCopyCipherSource = ui.getElementById('btnCopyCipherSource') as HTMLButtonElement;\nconst btnClearCipherSource = ui.getElementById('btnClearCipherSource') as HTMLButtonElement;\n\nconst spnCipherTargetLength = ui.getElementById('spnCipherTargetLength') as HTMLSpanElement;\nconst btnCopyCipherTarget = ui.getElementById('btnCopyCipherTarget') as HTMLButtonElement;\nconst btnClearCipherTarget = ui.getElementById('btnClearCipherTarget') as HTMLButtonElement;\n\nlet cipherTargetLastChange: string | undefined;\n\nexport function findCipherByVersion(version: number): crypto.ICipher | null {\n    for (const cipher of ciphers) {\n        if (cipher.version === version) {\n            return cipher;\n        }\n    }\n\n    return null;\n}\n\nexport function findLatestCipher(): crypto.ICipher {\n    if (ciphers.length === 0) {\n        throw new Error('No ciphers registered.');\n    }\n\n    let bestCipher: crypto.ICipher = ciphers[0];\n\n    for (const cipher of ciphers) {\n        if (cipher.version > bestCipher.version) {\n            bestCipher = cipher;\n        }\n    }\n\n    return bestCipher;\n}\n\nfunction findCipherVersionDropdownIndexByVersion(version: number): number {\n    for (let i = 0; i < ciphers.length; i++) {\n        if (ciphers[i].version === version) {\n            return i;\n        }\n    }\n\n    return -1;\n}\n\nfunction findCipherEncodingDropdownIndexByName(name: string): number {\n    for (let i = 0; i < availableEncodings.length; i++) {\n        if (availableEncodings[i].name === name) {\n            return i;\n        }\n    }\n\n    return -1;\n}\n\nfunction clearSourceVisualCue(): void {\n    txtCipherSource.style.removeProperty('background-color');\n}\n\nfunction clearTargetVisualCue(): void {\n    txtCipherTarget.style.removeProperty('background-color');\n}\n\nfunction clearEncodingVisualCue(): void {\n    cboCipherEncoding.style.removeProperty('background-color');\n}\n\nfunction setSourceVisualCueError() {\n    txtCipherSource.style.setProperty('background-color', ui.ERROR_COLOR);\n}\n\nfunction setTargetVisualCueError() {\n    txtCipherTarget.style.setProperty('background-color', ui.ERROR_COLOR);\n}\n\nfunction setEncodingVisualCueError() {\n    cboCipherEncoding.style.setProperty('background-color', ui.ERROR_COLOR);\n}\n\nfunction clearAllVisualCues(): void {\n    clearSourceVisualCue();\n    clearTargetVisualCue();\n    clearEncodingVisualCue();\n}\n\nfunction clearCipherTargetLastUpdate(): void {\n    cipherTargetLastChange = undefined;\n}\n\nfunction updateCipherTargetLastUpdate(): void {\n    cipherTargetLastChange = new Date().toISOString();\n}\n\nfunction updateCipherSourceLength(): void {\n    spnCipherSourceLength.innerText = txtCipherSource.value.length.toString();\n}\n\nfunction updateCipherTargetLength(): void {\n    spnCipherTargetLength.innerText = txtCipherTarget.value.length.toString();\n}\n\nfunction setCipherTargetValue(value: string, isEncrypt: boolean): void {\n    const needDateTimeUpdate = value.length > 0 && txtCipherTarget.value !== value;\n\n    txtCipherTarget.value = value;\n    updateCipherTargetLength();\n\n    if (needDateTimeUpdate && isEncrypt) {\n        updateCipherTargetLastUpdate();\n    } else {\n        clearCipherTargetLastUpdate();\n    }\n\n    onCipherTargetChanged();\n}\n\nfunction onCipherTargetChanged(): void {\n    updateCipherParameters();\n}\n\nfunction updateCipherParameters(): void {\n    const encodingIndex = cboCipherEncoding.selectedIndex;\n\n    const isValidEncodingIndex = encodingIndex >= 0 && encodingIndex < availableEncodings.length;\n\n    if (txtCipherTarget.value === '' || txtCipherName.value === '' || isValidEncodingIndex === false) {\n        storageOutputComponent.clearOutputs();\n        return;\n    }\n\n    const cipherParameters = {\n        datetime: cipherTargetLastChange,\n        version: ciphers[cboCipherVersion.selectedIndex].version,\n        encoding: availableEncodings[encodingIndex].name,\n        value: txtCipherTarget.value\n    }\n\n    const path = `ciphers/${txtCipherName.value}`;\n\n    storageOutputComponent.setParameters(cipherParameters, path);\n}\n\nexport async function encryptString(value: string, cipher: crypto.ICipher, encoding: IEncoding, cancellationToken: CancellationToken): Promise<string | null> {\n    const privatePart: string = getPrivatePart();\n\n    if (privatePart.length === 0) {\n        console.warn('Private part is empty');\n        return null;\n    }\n\n    const input: ArrayBuffer = stringUtils.stringToArray(value);\n    const password: ArrayBuffer = stringUtils.stringToArray(privatePart);\n\n    const encrypted: ArrayBuffer = await cipher.encrypt(input, password, cancellationToken);\n\n    ensureNotCancelled(cancellationToken);\n\n    return encoding.encode(encrypted);\n}\n\nexport async function decryptStringWithCipher(value: string, cipher: crypto.ICipher, encoding: IEncoding, cancellationToken: CancellationToken): Promise<string | null> {\n    const privatePart: string = getPrivatePart();\n\n    if (privatePart.length === 0) {\n        console.warn('Private part is empty');\n        return null;\n    }\n\n    try {\n        const input: ArrayBuffer = encoding.decode(value);\n        const password: ArrayBuffer = stringUtils.stringToArray(privatePart);\n\n        const decrypted: ArrayBuffer = await cipher.decrypt(input, password, cancellationToken);\n\n        ensureNotCancelled(cancellationToken);\n\n        return arrayUtils.arrayToString(decrypted);\n    } catch (error) {\n        const typedError = error as Error;\n\n        rethrowCancelled(typedError);\n\n        console.warn(`Failed to decrypt${typedError.message ? `, error: ${typedError.message}` : ', no error message'}`);\n        return null;\n    }\n}\n\nexport async function decryptStringWithVersion(value: string, version: number, encoding: IEncoding, cancellationToken: CancellationToken): Promise<string | null> {\n    const cipher = findCipherByVersion(version);\n\n    if (cipher === null) {\n        throw new Error(`Failed to find cip[her for version ${version}.`);\n    }\n\n    return decryptStringWithCipher(value, cipher, encoding, cancellationToken);\n}\n\nasync function onEncryptButtonClick(): Promise<boolean> {\n    txtCipherSource.focus();\n    setCipherTargetValue('', true);\n    clearAllVisualCues();\n\n    if (txtCipherSource.value.length === 0) {\n        setSourceVisualCueError();\n        return false;\n    }\n\n    const encoding: IEncoding = availableEncodings[cboCipherEncoding.selectedIndex];\n\n    const encryptedString: string | null = await encryptString(\n        txtCipherSource.value,\n        ciphers[cboCipherVersion.selectedIndex],\n        encoding,\n        CancellationToken.none\n    );\n\n    if (encryptedString === null) {\n        return false;\n    }\n\n    setCipherTargetValue(encryptedString, true);\n    updateCipherParameters();\n\n    return true;\n}\n\nasync function onDecryptButtonClick(): Promise<boolean> {\n    txtCipherSource.focus();\n    setCipherTargetValue('', false);\n    clearAllVisualCues();\n\n    if (txtCipherSource.value.length === 0) {\n        setSourceVisualCueError();\n        return false;\n    }\n\n    if (cboCipherEncoding.selectedIndex < 0 || cboCipherEncoding.selectedIndex >= availableEncodings.length) {\n        setEncodingVisualCueError();\n        return false;\n    }\n\n    const encoding: IEncoding = availableEncodings[cboCipherEncoding.selectedIndex];\n\n    const decryptedString: string | null = await decryptStringWithCipher(\n        txtCipherSource.value,\n        ciphers[cboCipherVersion.selectedIndex],\n        encoding,\n        CancellationToken.none\n    );\n\n    if (decryptedString === null) {\n        setTargetVisualCueError();\n        return false;\n    }\n\n    setCipherTargetValue(decryptedString, false);\n\n    return true;\n}\n\nfunction setupCipherVersionsDropdown() {\n    for (const cipher of ciphers) {\n        const option = document.createElement('option');\n        option.text = `v${cipher.version}`;\n        cboCipherVersion.appendChild(option);\n    }\n\n    cboCipherVersion.selectedIndex = cboCipherVersion.options.length - 1;\n}\n\nfunction setupCipherEncodingDropdown() {\n    for (const encoding of availableEncodings) {\n        const option = document.createElement('option');\n        option.text = encoding.name;\n        option.title = encoding.description;\n        cboCipherEncoding.appendChild(option);\n    }\n\n    cboCipherEncoding.selectedIndex = findCipherEncodingDropdownIndexByName(RECOMMENDED_ENCODING_NAME);\n}\n\nexport class CipherComponent implements IComponent, ITabInfo {\n    public readonly name: string = 'Cipher';\n\n    public getTabButton(): HTMLButtonElement {\n        return btnTabCiphers;\n    }\n\n    public getTabContent(): HTMLElement {\n        return divTabCiphers;\n    }\n\n    public onTabSelected(): void {\n        storageOutputComponent.show();\n        updateCipherParameters();\n        txtCipherName.focus();\n    }\n\n    private static fullPathToStoragePath(fullPath: string, cipherName: string): string | null {\n        const prefix = '<root>/';\n        const suffix = `/ciphers/${cipherName}`;\n\n        if (fullPath.startsWith(prefix) === false) {\n            return null;\n        }\n\n        if (fullPath.endsWith(suffix) === false) {\n            return null;\n        }\n\n        return fullPath.substring(prefix.length, fullPath.length - suffix.length);\n    }\n\n    public async setParameters(cipherName: string, parameterKeys: PlainObject, storageFullPath: string): Promise<boolean> {\n        txtCipherName.value = '';\n        txtCipherSource.value = '';\n        updateCipherSourceLength();\n        txtCipherTarget.value = '';\n        updateCipherTargetLength();\n        cboCipherVersion.selectedIndex = cboCipherVersion.options.length - 1;\n        cboCipherEncoding.selectedIndex = findCipherEncodingDropdownIndexByName(RECOMMENDED_ENCODING_NAME);\n        storageOutputComponent.setPathUI('');\n        storageOutputComponent.setCustomKeysUI('');\n\n        const encodingName: string = parameterKeys.encoding ?? LEGACY_ENCODING_NAME;\n\n        const encoding: IEncoding | null = findEncodingByName(encodingName);\n\n        if (encoding === null) {\n            throw new Error(`Failed to find encoding '${encodingName}'.`);\n        }\n\n        const decrypted: string | null = await decryptStringWithVersion(\n            parameterKeys.value,\n            parameterKeys.version,\n            encoding,\n            CancellationToken.none\n        );\n\n        if (decrypted === null) {\n            alert(`Failed to decrypt cipher '${cipherName}'.`);\n            return false;\n        }\n\n        const storagePath: string | null = CipherComponent.fullPathToStoragePath(storageFullPath, cipherName);\n\n        if (storagePath === null) {\n            console.error(`Failed to retrieve storage path from full path '${storageFullPath}'.`);\n            alert('Failed to retrieve storage path from full path.');\n            return false;\n        }\n\n        if (parameterKeys.customKeys) {\n            storageOutputComponent.setCustomKeysUI(JSON.stringify(parameterKeys.customKeys, null, 4));\n        }\n\n        delete parameterKeys.customKeys;\n\n        txtCipherName.value = cipherName;\n\n        txtCipherSource.value = decrypted;\n        updateCipherSourceLength();\n\n        cboCipherVersion.selectedIndex = findCipherVersionDropdownIndexByVersion(parameterKeys.version);\n        cboCipherEncoding.selectedIndex = findCipherEncodingDropdownIndexByName(encodingName);\n\n        storageOutputComponent.setPathUI(storagePath);\n        storageOutputComponent.setParameters(parameterKeys, `ciphers/${cipherName}`);\n\n        return true;\n    }\n\n    public getVaultHint(): string {\n        return `${this.name.toLowerCase()} '${txtCipherName.value}'`;\n    }\n\n    public init(): void {\n        const errorLogsService = serviceManager.getService('errorLogs');\n        const logFunc = errorLogsService.createLogErrorMessageFunction();\n\n        ui.setupCopyButton(txtCipherSource, btnCopyCipherSource, logFunc);\n        ui.setupCopyButton(txtCipherTarget, btnCopyCipherTarget, logFunc);\n\n        ui.setupFeedbackButton(btnEncrypt, onEncryptButtonClick, logFunc);\n        ui.setupFeedbackButton(btnDecrypt, onDecryptButtonClick, logFunc);\n\n        txtCipherName.addEventListener('input', () => {\n            updateCipherParameters();\n        });\n\n        txtCipherSource.addEventListener('input', () => {\n            updateCipherSourceLength();\n            if (txtCipherSource.value.length > 0) {\n                clearSourceVisualCue();\n            }\n        });\n\n        txtCipherTarget.addEventListener('input', () => {\n            updateCipherTargetLength();\n        });\n\n        cboCipherVersion.addEventListener('input', () => {\n            updateCipherParameters();\n        });\n\n        btnClearAllCipherInfo.addEventListener('click', () => {\n            txtCipherName.value = '';\n            txtCipherSource.value = '';\n            updateCipherSourceLength();\n            txtCipherTarget.value = '';\n            updateCipherTargetLength();\n            cboCipherVersion.selectedIndex = cboCipherVersion.options.length - 1;\n            cboCipherEncoding.selectedIndex = findCipherEncodingDropdownIndexByName(RECOMMENDED_ENCODING_NAME);\n            storageOutputComponent.clearMatchingPath();\n            clearCipherTargetLastUpdate();\n            clearAllVisualCues();\n\n            storageOutputComponent.clearUI();\n        });\n\n        btnClearCipherSource.addEventListener('click', () => {\n            ui.clearText(txtCipherSource, true);\n        });\n\n        btnClearCipherTarget.addEventListener('click', () => {\n            setCipherTargetValue('', false);\n        });\n\n        setupCipherVersionsDropdown();\n        setupCipherEncodingDropdown();\n\n        serviceManager.registerService('cipher', new CipherService(this));\n    }\n}\n","import { ICipher, getDerivedBytes } from '../crypto';\nimport { CancellationToken, ensureNotCancelled } from '../asyncUtils';\n\nexport class CipherV2 implements ICipher {\n    private iterations: number = 100_000;\n\n    public get version(): number {\n        return 2;\n    }\n\n    public get description(): string {\n        return 'PBKDF2 + AES-GCM (100k iterations)';\n    }\n\n    async encrypt(input: ArrayBuffer, password: ArrayBuffer, cancellationToken: CancellationToken): Promise<ArrayBuffer> {\n        const output: ArrayBuffer = new ArrayBuffer(12 + 16 + 16 + input.byteLength);\n\n        const nonce: Uint8Array = crypto.getRandomValues(new Uint8Array(output, 0, 12));\n        const passwordSalt: Uint8Array = crypto.getRandomValues(new Uint8Array(output, 12, 16));\n\n        const aesGcmParams: AesGcmParams = {\n            name: 'AES-GCM',\n            iv: nonce\n        };\n\n        const aesKeyAlgorithm: AesKeyAlgorithm = {\n            name: 'AES-GCM',\n            length: 0, // Key length is ignored here.\n        };\n\n        const passwordKey: CryptoKey = await window.crypto.subtle.importKey(\n            'raw',\n            await getDerivedBytes(password, passwordSalt, this.iterations, cancellationToken),\n            aesKeyAlgorithm,\n            false,\n            ['encrypt']\n        );\n\n        ensureNotCancelled(cancellationToken);\n\n        const result: ArrayBuffer = await window.crypto.subtle.encrypt(aesGcmParams, passwordKey, input);\n\n        ensureNotCancelled(cancellationToken);\n\n        new Uint8Array(output).set(new Uint8Array(result), 12 + 16);\n\n        return output;\n    }\n\n    async decrypt(input: ArrayBuffer, password: ArrayBuffer, cancellationToken: CancellationToken): Promise<ArrayBuffer> {\n        const nonce: Uint8Array = new Uint8Array(input, 0, 12);\n        const passwordSalt: Uint8Array = new Uint8Array(input, 12, 16);\n        const payload: Uint8Array = new Uint8Array(input, 12 + 16);\n\n        const aesGcmParams: AesGcmParams = {\n            name: 'AES-GCM',\n            iv: nonce\n        };\n\n        const aesKeyAlgorithm: AesKeyAlgorithm = {\n            name: 'AES-GCM',\n            length: 0, // Key length is ignored here.\n        };\n\n        const derivedKey: ArrayBuffer = await getDerivedBytes(password, passwordSalt, this.iterations, cancellationToken);\n\n        ensureNotCancelled(cancellationToken);\n\n        const passwordKey: CryptoKey = await window.crypto.subtle.importKey(\n            'raw',\n            derivedKey,\n            aesKeyAlgorithm,\n            false,\n            ['decrypt']\n        );\n\n        ensureNotCancelled(cancellationToken);\n\n        const result: ArrayBuffer = await window.crypto.subtle.decrypt(aesGcmParams, passwordKey, payload);\n\n        ensureNotCancelled(cancellationToken);\n\n        return result;\n    }\n}\n","import { ICipher, getDerivedBytes } from '../crypto';\nimport { CancellationToken, ensureNotCancelled } from '../asyncUtils';\n\n// TODO: Should refactor v2 and v3 common code into a reusable component instead of shamelessly copy/pasting...\n\nexport class CipherV3 implements ICipher {\n    private iterations: number = 400_000;\n\n    public get version(): number {\n        return 3;\n    }\n\n    public get description(): string {\n        return 'PBKDF2 + AES-GCM (400k iterations)';\n    }\n\n    async encrypt(input: ArrayBuffer, password: ArrayBuffer, cancellationToken: CancellationToken): Promise<ArrayBuffer> {\n        const output: ArrayBuffer = new ArrayBuffer(12 + 16 + 16 + input.byteLength);\n\n        const nonce: Uint8Array = crypto.getRandomValues(new Uint8Array(output, 0, 12));\n        const passwordSalt: Uint8Array = crypto.getRandomValues(new Uint8Array(output, 12, 16));\n\n        const aesGcmParams: AesGcmParams = {\n            name: 'AES-GCM',\n            iv: nonce\n        };\n\n        const aesKeyAlgorithm: AesKeyAlgorithm = {\n            name: 'AES-GCM',\n            length: 0, // Key length is ignored here.\n        };\n\n        const passwordKey: CryptoKey = await window.crypto.subtle.importKey(\n            'raw',\n            await getDerivedBytes(password, passwordSalt, this.iterations, cancellationToken),\n            aesKeyAlgorithm,\n            false,\n            ['encrypt']\n        );\n\n        ensureNotCancelled(cancellationToken);\n\n        const result: ArrayBuffer = await window.crypto.subtle.encrypt(aesGcmParams, passwordKey, input);\n\n        ensureNotCancelled(cancellationToken);\n\n        new Uint8Array(output).set(new Uint8Array(result), 12 + 16);\n\n        return output;\n    }\n\n    async decrypt(input: ArrayBuffer, password: ArrayBuffer, cancellationToken: CancellationToken): Promise<ArrayBuffer> {\n        const nonce: Uint8Array = new Uint8Array(input, 0, 12);\n        const passwordSalt: Uint8Array = new Uint8Array(input, 12, 16);\n        const payload: Uint8Array = new Uint8Array(input, 12 + 16);\n\n        const aesGcmParams: AesGcmParams = {\n            name: 'AES-GCM',\n            iv: nonce\n        };\n\n        const aesKeyAlgorithm: AesKeyAlgorithm = {\n            name: 'AES-GCM',\n            length: 0 // Key length is ignored here.\n        };\n\n        const derivedKey: ArrayBuffer = await getDerivedBytes(password, passwordSalt, this.iterations, cancellationToken);\n\n        ensureNotCancelled(cancellationToken);\n\n        const passwordKey: CryptoKey = await window.crypto.subtle.importKey(\n            'raw',\n            derivedKey,\n            aesKeyAlgorithm,\n            false,\n            ['decrypt']\n        );\n\n        ensureNotCancelled(cancellationToken);\n\n        const result: ArrayBuffer = await window.crypto.subtle.decrypt(aesGcmParams, passwordKey, payload);\n\n        ensureNotCancelled(cancellationToken);\n\n        return result;\n    }\n}\n","import * as cipherComponent from '../components/cipherComponent';\nimport { CancellationToken } from '../asyncUtils';\nimport { Base58Encoding, IEncoding } from '../encoding';\n\nconst encoding: IEncoding = new Base58Encoding();\n\nexport interface IAsyncStorage {\n    readonly length: number;\n    clear(): void;\n    getItem(key: string): Promise<string | null>;\n    key(index: number): string | null;\n    removeItem(key: string): void;\n    setItem(key: string, value: string): Promise<void>;\n}\n\nexport class SecureLocalStorage implements IAsyncStorage {\n    get length(): number {\n        return window.localStorage.length;\n    }\n\n    clear(): void {\n        window.localStorage.clear();\n    }\n\n    key(index: number): string | null {\n        return window.localStorage.key(index);\n    }\n\n    removeItem(key: string): void {\n        window.localStorage.removeItem(key);\n    }\n\n    async getItem(key: string): Promise<string | null> {\n        const encryptedItem: string | null = window.localStorage.getItem(key);\n\n        if (encryptedItem === null) {\n            return null;\n        }\n\n        const sortedCiphers = cipherComponent.ciphers.map(x => x).sort((a, b) => b.version - a.version);\n\n        for (const cipher of sortedCiphers) {\n            const result: string | null = await cipherComponent.decryptStringWithCipher(encryptedItem, cipher, encoding, CancellationToken.none);\n            if (result !== null) {\n                return result;\n            }\n        }\n\n        return null;\n    }\n\n    async setItem(key: string, value: string): Promise<void> {\n        const encrypted: string | null = await cipherComponent.encryptString(\n            value,\n            cipherComponent.findLatestCipher(),\n            encoding,\n            CancellationToken.none\n        );\n\n        if (encrypted === null) {\n            console.error('Failed to encrypt value. (nothing stored)');\n            return;\n        }\n\n        window.localStorage.setItem(key, encrypted);\n    }\n}\n","import * as ui from '../ui';\nimport * as stringUtils from '../stringUtils';\nimport { PlainObject, objectDeepSort } from '../PlainObject';\nimport { IComponent } from './IComponent';\nimport { rootComponent, RootComponent } from './rootComponent';\nimport * as serviceManager from '../services/serviceManger';\nimport { VaultService } from '../services/vaultService';\n\nimport { IVaultStorage } from '../storages/IVaultStorage';\nimport { GitHubPersonalAccessTokenVaultStorage } from '../storages/GitHubVaultStorage';\nimport { SecureLocalStorage } from '../storages/SecureLocalStorage';\n\nconst divStorageOutput: HTMLElement = ui.getElementById('divStorageOutput');\n\nconst txtPath: HTMLInputElement = ui.getElementById('txtPath') as HTMLInputElement;\nconst lblMatchingPath: HTMLElement = ui.getElementById('lblMatchingPath');\n\nconst txtParameters: HTMLInputElement = ui.getElementById('txtParameters') as HTMLInputElement;\nconst btnPushToVault: HTMLButtonElement = ui.getElementById('btnPushToVault') as HTMLButtonElement;\nconst txtCustomKeys: HTMLInputElement = ui.getElementById('txtCustomKeys') as HTMLInputElement;\n\nlet vaultStorage: IVaultStorage = new GitHubPersonalAccessTokenVaultStorage(new SecureLocalStorage());\n\ntype IChainInfo = {\n    head: PlainObject,\n    tailParent: PlainObject,\n    tail: PlainObject\n};\n\n// Transforms a path like \"a/b/c/d\" into a hierarchy of objects like { \"a\": { \"b\": { \"c\": { \"d\": {} } } } }\n// From the result object, head is the root object that contains \"a\", tail is the value of \"d\", and tailParent is the value of \"c\"\nfunction pathToObjectChain(path: string, chainInfo: IChainInfo | undefined = undefined): IChainInfo {\n    const separatorIndex: number = path.indexOf('/');\n\n    const tail: PlainObject = {};\n\n    const firstPath: string = separatorIndex >= 0 ? path.substring(0, separatorIndex) : path;\n    const remainingPath: string | undefined = separatorIndex >= 0 ? path.substring(separatorIndex + 1) : undefined;\n\n    if (chainInfo === undefined) {\n        const node: PlainObject = {};\n        node[firstPath] = tail;\n        chainInfo = {\n            head: node,\n            tailParent: node,\n            tail\n        };\n    } else {\n        chainInfo.tail[firstPath] = tail;\n        chainInfo.tailParent = chainInfo.tail;\n        chainInfo.tail = tail;\n    }\n\n    if (remainingPath) {\n        return pathToObjectChain(remainingPath, chainInfo);\n    }\n\n    return chainInfo;\n}\n\nfunction createMatchingPath(path: string, depth: number): string {\n    let position = 0;\n\n    for (let i = 0; i < depth; i += 1) {\n        position = path.indexOf('/', position);\n        if (position < 0) {\n            position = path.length + 1;\n            break;\n        }\n        position += 1;\n    }\n\n    return path.substring(0, position - 1);\n}\n\nfunction updateMatchingPath(): void {\n    const vaultService: VaultService = serviceManager.getService('vault');\n\n    const depth = vaultService.computeUserPathMatchDepth(txtPath.value);\n\n    if (depth > 0) {\n        const matchingPath = createMatchingPath(txtPath.value, depth);\n        lblMatchingPath.innerText = matchingPath;\n    } else {\n        lblMatchingPath.innerText = '';\n    }\n}\n\nfunction onPathTextInput() {\n    updateMatchingPath();\n    update();\n}\n\nfunction onCustomKeysTextInput(): void {\n    update();\n}\n\nfunction updateCustomKeysDisplay(isValid: boolean): void {\n    if (isValid) {\n        txtCustomKeys.style.removeProperty('background');\n        return;\n    }\n\n    txtCustomKeys.style.setProperty('background', ui.ERROR_COLOR);\n}\n\nfunction parseCustomKeys(): PlainObject | null {\n    if (txtCustomKeys.value === '') {\n        return null;\n    }\n\n    try {\n        const obj: any = JSON.parse(txtCustomKeys.value);\n        if (obj === null || obj.constructor.name !== 'Object') {\n            return null;\n        }\n        return obj as PlainObject;\n    } catch {\n        return null;\n    }\n}\n\nfunction update(): void {\n    if (_parameterKeys === undefined || _parameterPath === undefined) {\n        return;\n    }\n\n    const chainInfo: IChainInfo = pathToObjectChain(`${txtPath.value}/${_parameterPath}`);\n    const leaf: PlainObject = chainInfo.tail;\n\n    for (const [key, value] of Object.entries(_parameterKeys)) {\n        leaf[key] = value;\n    }\n\n    const customKeys: PlainObject | null = parseCustomKeys();\n\n    updateCustomKeysDisplay(txtCustomKeys.value === '' || customKeys !== null);\n\n    if (customKeys !== null) {\n        leaf.customKeys = customKeys;\n    }\n\n    if (Object.keys(leaf).length === 0) {\n        // Remove the leaf object.\n        chainInfo.tailParent[Object.keys(chainInfo.tailParent)[0]] = null;\n    }\n\n    txtParameters.value = JSON.stringify(objectDeepSort(chainInfo.head), undefined, 4);\n}\n\nfunction deepMerge(source: PlainObject, target: PlainObject): void {\n    for (const sourceKey of Object.keys(source)) {\n        const targetValue: any = target[sourceKey];\n        const sourceValue: any = source[sourceKey];\n\n        if (targetValue === undefined ||\n            targetValue === null ||\n            targetValue.constructor.name !== 'Object' ||\n            sourceValue.constructor.name !== 'Object') {\n            target[sourceKey] = sourceValue;\n            continue;\n        }\n\n        deepMerge(sourceValue, targetValue);\n    }\n}\n\nfunction generateUpdateMessage() {\n    const activeComponent: IComponent | null = (rootComponent as RootComponent).getActiveComponent();\n\n    if (activeComponent === null) {\n        throw new Error('Could not determine active component.');\n    }\n\n    let hint: string = activeComponent.getVaultHint();\n\n    const matchingPath: string = lblMatchingPath.innerText;\n    const fullPath: string = txtPath.value;\n\n    if (!matchingPath) {\n        return `Added ${hint} for '${fullPath}'`;\n    }\n\n    if (matchingPath === fullPath) {\n        return `Updated ${hint} for '${fullPath}'`;\n    }\n\n    const remainingPath: string = stringUtils.trim(fullPath.substring(matchingPath.length), '/');\n\n    return `Updated ${hint} for '${matchingPath}' adding '${remainingPath}'`;\n}\n\nasync function pushToVault(): Promise<boolean> {\n    const vaultContentData: string | null = await vaultStorage.getVaultContent();\n\n    if (vaultContentData === null) {\n        return false;\n    }\n\n    const newData = JSON.parse(txtParameters.value);\n    let vaultContent = JSON.parse(vaultContentData);\n\n    // Keep deepMerge despite now all properties are explicitly defined, because of\n    // the datetime property that really need to be overwritten only if it exists.\n    deepMerge(newData, vaultContent);\n\n    const message: string = generateUpdateMessage();\n\n    const newVaultContentData: string = JSON.stringify(objectDeepSort(vaultContent), undefined, 4) + '\\n';\n\n    await vaultStorage.setVaultContent(newVaultContentData, `[ItchyPassword] ${message}`);\n\n    return true;\n}\n\nexport function clearOutputs(): void {\n    _parameterKeys = undefined;\n    _parameterPath = undefined;\n    ui.clearText(txtParameters);\n}\n\nlet _parameterKeys: PlainObject | undefined;\nlet _parameterPath: string | undefined;\n\nexport function setParameters(parameterKeys: PlainObject, parameterPath: string) {\n    _parameterKeys = parameterKeys;\n    _parameterPath = parameterPath;\n    update();\n}\n\nexport function setPathUI(path: string) {\n    txtPath.value = path;\n    onPathTextInput();\n}\n\nexport function setCustomKeysUI(customKeys: string) {\n    txtCustomKeys.value = customKeys;\n}\n\nexport function show(): void {\n    divStorageOutput.style.setProperty('display', 'initial');\n}\n\nexport function hide(): void {\n    divStorageOutput.style.setProperty('display', 'none');\n}\n\nexport function clearUI(): void {\n    txtPath.value = '';\n    txtParameters.value = '';\n    txtCustomKeys.value = '';\n    _parameterKeys = undefined;\n    _parameterPath = undefined;\n    updateCustomKeysDisplay(true);\n}\n\nexport function clearMatchingPath(): void {\n    lblMatchingPath.innerText = '';\n}\n\nexport class StorageOutputComponent implements IComponent {\n    public readonly name: string = 'StorageOutput';\n\n    public getVaultHint(): string {\n        throw new Error('Not supported.');\n    }\n\n    public init(): void {\n        const errorLogsService = serviceManager.getService('errorLogs');\n        const logFunc = errorLogsService.createLogErrorMessageFunction();\n\n        txtCustomKeys.addEventListener('input', onCustomKeysTextInput);\n        ui.setupFeedbackButton(btnPushToVault, pushToVault, logFunc);\n        txtPath.addEventListener('input', onPathTextInput);\n    }\n}\n","import { CancellationToken } from '../asyncUtils';\nimport * as stringUtils from '../stringUtils';\nimport * as ui from '../ui';\nimport { PasswordComponent, generatePasswordString } from '../components/passwordComponent';\nimport { DEFAULT_ALPHABET, DEFAULT_LENGTH, CURRENT_PASSWORD_GENERATOR_VERSION } from '../components/passwordComponent';\nimport * as serviceManager from './serviceManger';\nimport { PlainObject } from 'PlainObject';\n\nexport class PasswordService {\n    constructor(private readonly passwordComponent: PasswordComponent) {\n    }\n\n    isLatestVersion(version: number): boolean {\n        return version === this.getLatestVersion();\n    }\n\n    getLatestVersion(): number {\n        return CURRENT_PASSWORD_GENERATOR_VERSION;\n    }\n\n    async generateAndCopyPasswordToClipboard(publicPart: string, alphabet?: string, length?: number, version?: number): Promise<boolean> {\n        alphabet = alphabet !== undefined ? alphabet : DEFAULT_ALPHABET;\n        length = length !== undefined ? length : DEFAULT_LENGTH;\n        version = version !== undefined ? version : CURRENT_PASSWORD_GENERATOR_VERSION;\n\n        const keyString: string | null = await generatePasswordString(publicPart, alphabet, version, CancellationToken.none);\n\n        if (keyString === null) {\n            return false;\n        }\n\n        const password = stringUtils.truncate(keyString, Math.max(4, length));\n\n        const errorLogsService = serviceManager.getService('errorLogs');\n        const logFunc = errorLogsService.createLogErrorMessageFunction();\n\n        return await ui.writeToClipboard(password, logFunc);\n    }\n\n    public activate(storageFullPath: string, parameterKeys: PlainObject): boolean {\n        if (this.passwordComponent.setParameters(parameterKeys, storageFullPath) === false) {\n            return false;\n        }\n\n        this.passwordComponent.getTabButton().click();\n\n        return true;\n    }\n}\n","import * as ui from '../ui';\nimport * as privatePartComponent from './privatePartComponent';\n\nimport * as crypto from '../crypto';\nimport * as stringUtils from '../stringUtils';\nimport * as arrayUtils from '../arrayUtils';\n\nimport { PlainObject } from '../PlainObject';\nimport { PasswordGeneratorV1 } from '../passwordGenerators/v1';\nimport { PasswordGeneratorV2 } from '../passwordGenerators/v2';\nimport { ITabInfo } from '../TabControl';\nimport { IComponent } from './IComponent';\n\nimport * as storageOutputComponent from './storageOutputComponent';\n\nimport { CancellationToken, TaskRunner } from '../asyncUtils';\n\nimport * as serviceManager from '../services/serviceManger';\nimport { PasswordService } from '../services/passwordService';\n\nconst btnTabPasswords = ui.getElementById('btnTabPasswords') as HTMLButtonElement;\nconst divTabPasswords = ui.getElementById('divTabPasswords');\n\nconst passwordGenerators: crypto.IPasswordGenerator[] = [\n    new PasswordGeneratorV1('Password'),\n    new PasswordGeneratorV2('Password'),\n];\n\nexport const CURRENT_PASSWORD_GENERATOR_VERSION = 2;\n\nconst btnClearAllPasswordInfo = ui.getElementById('btnClearAllPasswordInfo') as HTMLButtonElement;\n\nconst txtPublicPart = ui.getElementById('txtPublicPart') as HTMLInputElement;\nconst spnPublicPartSize = ui.getElementById('spnPublicPartSize');\nconst btnGeneratePublicPart = ui.getElementById('btnGeneratePublicPart') as HTMLButtonElement;\nconst btnClearPublicPart = ui.getElementById('btnClearPublicPart') as HTMLButtonElement;\nconst btnCopyPublicPart = ui.getElementById('btnCopyPublicPart') as HTMLButtonElement;\nconst btnShowHidePasswordOptionalFeatures = ui.getElementById('btnShowHidePasswordOptionalFeatures') as HTMLButtonElement;\n\nconst lblAlphabetLength = ui.getElementById('lblAlphabetLength');\nconst numOutputSizeRange = ui.getElementById('numOutputSizeRange') as HTMLInputElement;\nconst numOutputSizeNum = ui.getElementById('numOutputSizeNum') as HTMLInputElement;\n\nconst lblAlphabet = ui.getElementById('lblAlphabet');\nconst txtAlphabet = ui.getElementById('txtAlphabet') as HTMLInputElement;\nconst spnAlphabetSize = ui.getElementById('spnAlphabetSize');\nconst divPasswordAlphabetActions = ui.getElementById('divPasswordAlphabetActions');\nconst btnResetAlphabet = ui.getElementById('btnResetAlphabet') as HTMLButtonElement;\n\nconst lblPasswordVersion = ui.getElementById('lblPasswordVersion');\nconst cboPasswordVersion = ui.getElementById('cboPasswordVersion') as HTMLSelectElement;\n\nconst txtResultPassword = ui.getElementById('txtResultPassword') as HTMLInputElement;\nconst spnResultPasswordLength = ui.getElementById('spnResultPasswordLength');\nconst btnViewResultPassword = ui.getElementById('btnViewResultPassword') as HTMLButtonElement;\nconst btnCopyResultPassword = ui.getElementById('btnCopyResultPassword') as HTMLButtonElement;\nconst lblGeneratingPassword = ui.getElementById('lblGeneratingPassword');\n\nexport const DEFAULT_LENGTH: number = 64;\nexport const DEFAULT_ALPHABET: string = '!\"#$%&\\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[]^_`abcdefghijklmnopqrstuvwxyz{|}~';\n\nlet passwordPublicPartLastChange: string | undefined;\nlet copyPasswordFunction: () => void;\n\nfunction findPasswordGeneratorByVersion(version: number): crypto.IPasswordGenerator {\n    for (const passwordGenerator of passwordGenerators) {\n        if (passwordGenerator?.version === version) {\n            return passwordGenerator;\n        }\n    }\n\n    throw new Error(`Failed to find password generator version ${version}`);\n}\n\nfunction findPasswordGeneratorFromUserInterface(): crypto.IPasswordGenerator {\n    const passwordGenerator = passwordGenerators[cboPasswordVersion.selectedIndex];\n\n    if (!passwordGenerator) {\n        throw new Error(`Failed to find password generator version from index ${cboPasswordVersion.selectedIndex}`);\n    }\n\n    return passwordGenerator;\n}\n\nfunction findPasswordDropdownIndexByVersion(version: number): number {\n    for (let i = 0; i < passwordGenerators.length; i++) {\n        if (passwordGenerators[i].version === version) {\n            return i;\n        }\n    }\n\n    return -1;\n}\n\nfunction onClearPublicPartButtonClick(): boolean {\n    if (txtPublicPart.value.length > 0) {\n        if (prompt('Are you sure you want to clear the public part ?\\nType \\'y\\' to accept', '') !== 'y') {\n            return false;\n        }\n    }\n\n    ui.clearText(txtPublicPart, true);\n\n    updatePublicPartSize();\n\n    updatePasswordPublicPartLastUpdate();\n    updatePasswordGenerationParameters();\n\n    return true;\n}\n\nfunction onGeneratePublicPartButtonClick(): boolean {\n    if (txtPublicPart.value.length > 0) {\n        if (prompt('Are you sure you want to generate a new public part ?\\nType \\'y\\' to accept', '') !== 'y') {\n            return false;\n        }\n    }\n\n    const randomString: string = crypto.generateRandomString();\n    txtPublicPart.value = randomString;\n    updatePublicPartSize();\n\n    updatePasswordPublicPartLastUpdate();\n\n    run();\n\n    return true;\n}\n\nfunction updatePasswordPublicPartLastUpdate(): void {\n    if (txtPublicPart.value.length > 0) {\n        passwordPublicPartLastChange = new Date().toISOString();\n    } else {\n        passwordPublicPartLastChange = undefined;\n    }\n}\n\nfunction updateResultPasswordLength(): void {\n    spnResultPasswordLength.innerHTML = txtResultPassword.value.length.toString();\n}\n\nfunction isAlphabetValid(alphabet: string): boolean {\n    const sortedAlphabet: string[] = alphabet.split('');\n    sortedAlphabet.sort();\n\n    for (let i: number = 1; i < sortedAlphabet.length; i += 1) {\n        if (sortedAlphabet[i - 1] === sortedAlphabet[i]) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nfunction updatePasswordGenerationParameters(): void {\n    if (canRun() === false) {\n        clearOutputs();\n        return;\n    }\n\n    const passwordGenerator = passwordGenerators[cboPasswordVersion.selectedIndex];\n\n    if (!passwordGenerator) {\n        throw new Error('Invalid selected password generator version.');\n    }\n\n    const passwordParamters: PlainObject = {\n        public: txtPublicPart.value,\n        datetime: passwordPublicPartLastChange,\n        version: passwordGenerator.version,\n        length: txtResultPassword.value.length,\n        alphabet: txtAlphabet.value\n    };\n\n    storageOutputComponent.setParameters(passwordParamters, 'password');\n}\n\nfunction updateOutputSizeRangeToNum(): void {\n    numOutputSizeNum.value = numOutputSizeRange.value;\n}\n\nfunction updateOutputSizeNumToRange(): boolean {\n    const min: number = parseInt(numOutputSizeRange.min, 10);\n    const val: number = parseInt(numOutputSizeNum.value, 10);\n    const max: number = parseInt(numOutputSizeRange.max, 10);\n\n    if (isNaN(val) === false) {\n        numOutputSizeRange.value = Math.max(min, Math.min(val, max)).toString();\n        return true;\n    }\n\n    return false;\n}\n\nasync function onOutputSizeRangeInput(): Promise<void> {\n    updateOutputSizeRangeToNum();\n    await run();\n}\n\nasync function onOutputSizeNumInput(): Promise<void> {\n    if (updateOutputSizeNumToRange()) {\n        updateOutputSizeRangeToNum();\n    }\n    await run();\n}\n\nfunction updatePublicPartSize(): void {\n    spnPublicPartSize.innerHTML = txtPublicPart.value.length.toString();\n}\n\nfunction updateAlphabetSize(): void {\n    spnAlphabetSize.innerHTML = txtAlphabet.value.length.toString();\n}\n\nfunction updateAlphabetValidityDisplay(isAlphabetValid: boolean): void {\n    if (isAlphabetValid) {\n        txtAlphabet.style.removeProperty('background');\n    } else {\n        txtAlphabet.style.setProperty('background', ui.ERROR_COLOR);\n    }\n}\n\nasync function onAlphabetTextInput(): Promise<void> {\n    const isAlphabetValidResult: boolean = isAlphabetValid(txtAlphabet.value);\n\n    updateAlphabetValidityDisplay(isAlphabetValidResult);\n\n    if (isAlphabetValidResult === false) {\n        return;\n    }\n\n    updateAlphabetSize();\n    await run();\n}\n\nasync function onResetAlphabetButtonClick(): Promise<boolean> {\n    if (resetAlphabet() === false) {\n        return false;\n    }\n\n    await run();\n\n    return true;\n}\n\nasync function onPasswordVersionChanged(): Promise<void> {\n    const passwordGenerator = passwordGenerators[cboPasswordVersion.selectedIndex];\n\n    if (!passwordGenerator) {\n        return;\n    }\n\n    await run();\n}\n\nfunction clearOutputs(): void {\n    ui.clearText(txtResultPassword);\n    storageOutputComponent.clearOutputs();\n    updateResultPasswordLength();\n}\n\nfunction canRun(publicPart?: string): boolean {\n    const alphabet: string = txtAlphabet.value;\n\n    if (isAlphabetValid(alphabet) === false) {\n        return false;\n    }\n\n    publicPart = publicPart || txtPublicPart.value;\n\n    if (privatePartComponent.getPrivatePart().length <= 0 || publicPart.length < 8 || alphabet.length < 2) {\n        return false;\n    }\n\n    return true;\n}\n\nexport async function generatePasswordString(publicPart: string, alphabet: string, version: number, cancellationToken: CancellationToken): Promise<string | null> {\n    if (canRun(publicPart) === false) {\n        return null;\n    }\n\n    const passwordGenerator = findPasswordGeneratorByVersion(version);\n\n    const privatePartString: string = privatePartComponent.getPrivatePart();\n    const privatePrivateBytes: ArrayBuffer = stringUtils.stringToArray(privatePartString);\n    const publicPartBytes: ArrayBuffer = stringUtils.stringToArray(publicPart);\n    const keyBytes: ArrayBuffer = await passwordGenerator.generatePassword(privatePrivateBytes, publicPartBytes, cancellationToken);\n\n    return arrayUtils.toCustomBaseOneWay(keyBytes, alphabet);\n}\n\nconst passwordTaskRunner: TaskRunner<void> = new TaskRunner<void>();\n\nexport async function run(): Promise<void> {\n    if (canRun() === false) {\n        clearOutputs();\n        return;\n    }\n\n    ui.showHide(lblGeneratingPassword, true);\n\n    try {\n        await passwordTaskRunner.cancelAndExecute(runCore);\n    } finally {\n        ui.showHide(lblGeneratingPassword, false);\n    }\n}\n\nasync function runCore(cancellationToken: CancellationToken): Promise<void> {\n    const passwordGenerator = findPasswordGeneratorFromUserInterface();\n\n    const keyString: string | null = await generatePasswordString(txtPublicPart.value, txtAlphabet.value, passwordGenerator.version, cancellationToken);\n    if (keyString === null) {\n        return;\n    }\n\n    txtResultPassword.value = stringUtils.truncate(keyString, Math.max(4, parseInt(numOutputSizeRange.value, 10)));\n\n    updateResultPasswordLength();\n    updatePasswordGenerationParameters();\n\n    copyPasswordFunction();\n}\n\nfunction resetAlphabet(): boolean {\n    txtAlphabet.value = DEFAULT_ALPHABET;\n    updateAlphabetSize();\n\n    const isAlphabetValidResult: boolean = isAlphabetValid(txtAlphabet.value);\n\n    updateAlphabetValidityDisplay(isAlphabetValidResult);\n\n    return isAlphabetValidResult;\n}\n\nasync function onPublicPartTextInput(): Promise<void> {\n    updatePublicPartSize();\n    updatePasswordPublicPartLastUpdate();\n    await run();\n}\n\nfunction setupPasswordGeneratorsDropdown(): void {\n    for (const passwordGenerator of passwordGenerators) {\n        const option = document.createElement('option');\n\n        option.text = `v${passwordGenerator.version}`;\n\n        cboPasswordVersion.appendChild(option);\n    }\n\n    cboPasswordVersion.selectedIndex = cboPasswordVersion.options.length - 1;\n}\n\nfunction clearAll(): boolean {\n    if (onClearPublicPartButtonClick() === false) {\n        return false;\n    }\n\n    ui.clearText(txtResultPassword, true);\n    updateResultPasswordLength();\n    resetAlphabet();\n    numOutputSizeRange.value = DEFAULT_LENGTH.toString();\n    updateOutputSizeRangeToNum();\n    cboPasswordVersion.selectedIndex = cboPasswordVersion.options.length - 1;\n\n    storageOutputComponent.clearMatchingPath();\n    storageOutputComponent.clearUI();\n\n    return true;\n}\n\nfunction fullPathToStoragePath(fullPath: string): string | null {\n    const prefix = '<root>/';\n    const suffix = '/password';\n\n    if (fullPath.startsWith(prefix) === false) {\n        return null;\n    }\n\n    if (fullPath.endsWith(suffix) === false) {\n        return null;\n    }\n\n    return fullPath.substring(prefix.length, fullPath.length - suffix.length);\n}\n\nexport class PasswordComponent implements IComponent, ITabInfo {\n    public readonly name: string = 'Password';\n\n    public getTabButton(): HTMLButtonElement {\n        return btnTabPasswords;\n    }\n\n    public getTabContent(): HTMLElement {\n        return divTabPasswords;\n    }\n\n    public onTabSelected(): void {\n        storageOutputComponent.show();\n        updatePasswordGenerationParameters();\n        txtPublicPart.focus();\n    }\n\n    public getVaultHint(): string {\n        return this.name.toLowerCase();\n    }\n\n    public setParameters(parameterKeys: PlainObject, storageFullPath: string): boolean {\n        if (clearAll() === false) {\n            return false;\n        }\n\n        const storagePath: string | null = fullPathToStoragePath(storageFullPath);\n\n        if (storagePath === null) {\n            console.error(`Failed to retrieve storage path from full path '${storageFullPath}'.`);\n            alert('Failed to retrieve storage path from full path.');\n            return false;\n        }\n\n        if (parameterKeys.customKeys) {\n            storageOutputComponent.setCustomKeysUI(JSON.stringify(parameterKeys.customKeys, null, 4));\n        }\n\n        delete parameterKeys.customKeys;\n\n        txtPublicPart.value = parameterKeys.public;\n        updatePublicPartSize();\n\n        txtAlphabet.value = parameterKeys.alphabet;\n        updateAlphabetValidityDisplay(isAlphabetValid(txtAlphabet.value));\n        updateAlphabetSize();\n\n        numOutputSizeNum.value = parameterKeys.length;\n        if (updateOutputSizeNumToRange() === false) {\n            console.error(`Failed to retrieve length from full path '${storageFullPath}'.`);\n            alert('Failed to retrieve length from full path.');\n            return false;\n        }\n\n        const dropdownIndex = findPasswordDropdownIndexByVersion(parameterKeys.version);\n        if (dropdownIndex < 0) {\n            console.error(`Failed to retrieve version from full path '${storageFullPath}'.`);\n            alert('Failed to retrieve version from full path.');\n            return false;\n        }\n        cboPasswordVersion.selectedIndex = dropdownIndex;\n\n        storageOutputComponent.setPathUI(storagePath);\n        storageOutputComponent.setParameters(parameterKeys, 'password');\n\n        return true;\n    }\n\n    public init(): void {\n        const errorLogsService = serviceManager.getService('errorLogs');\n        const logFunc = errorLogsService.createLogErrorMessageFunction();\n\n        privatePartComponent.registerOnChanged(run);\n\n        // dafuq!?\n        numOutputSizeRange.max = DEFAULT_LENGTH.toString();\n        numOutputSizeRange.value = DEFAULT_LENGTH.toString();\n\n        ui.setupFeedbackButton(btnClearPublicPart, onClearPublicPartButtonClick, logFunc);\n        ui.setupFeedbackButton(btnGeneratePublicPart, onGeneratePublicPartButtonClick, logFunc);\n\n        ui.setupViewButton(txtResultPassword, btnViewResultPassword);\n\n        ui.setupCopyButton(txtPublicPart, btnCopyPublicPart, logFunc);\n        copyPasswordFunction = ui.setupCopyButton(txtResultPassword, btnCopyResultPassword, logFunc);\n\n        numOutputSizeRange.addEventListener('input', onOutputSizeRangeInput);\n        numOutputSizeNum.addEventListener('input', onOutputSizeNumInput);\n\n        txtAlphabet.addEventListener('input', onAlphabetTextInput);\n        ui.setupFeedbackButton(btnResetAlphabet, onResetAlphabetButtonClick, logFunc);\n\n        cboPasswordVersion.addEventListener('input', onPasswordVersionChanged);\n\n        txtPublicPart.addEventListener('input', onPublicPartTextInput);\n\n        ui.showHide(lblGeneratingPassword, false);\n\n        ui.setupShowHideButton(btnShowHidePasswordOptionalFeatures, false, [\n            lblAlphabet,\n            txtAlphabet,\n            spnAlphabetSize,\n            divPasswordAlphabetActions,\n            lblAlphabetLength,\n            numOutputSizeRange,\n            numOutputSizeNum,\n            lblPasswordVersion,\n            cboPasswordVersion,\n        ]);\n\n        updatePublicPartSize();\n        updateOutputSizeRangeToNum();\n        resetAlphabet();\n\n        setupPasswordGeneratorsDropdown();\n\n        btnClearAllPasswordInfo.addEventListener('click', clearAll);\n\n        serviceManager.registerService('password', new PasswordService(this));\n    }\n};\n","import { stringToArray } from '../stringUtils';\nimport { IPasswordGenerator, getDerivedBytes } from '../crypto';\nimport { CancellationToken, ensureNotCancelled } from '../asyncUtils';\n\nexport class PasswordGeneratorV1 implements IPasswordGenerator {\n    private hkdfPurpose: ArrayBuffer;\n    private _description: string;\n\n    public constructor(hkdfPurpose: string) {\n        this.hkdfPurpose = stringToArray(hkdfPurpose);\n        this._description = `HKDF(PBKDF2, HMAC512) [purpose: ${hkdfPurpose}]`;\n    }\n\n    public get version(): number {\n        return 1;\n    }\n\n    public get description(): string {\n        return this._description;\n    }\n\n    public async generatePassword(privatePart: ArrayBuffer, publicPart: ArrayBuffer, cancellationToken: CancellationToken): Promise<ArrayBuffer> {\n        const derivedKey: ArrayBuffer = await getDerivedBytes(privatePart, publicPart, 100_000, cancellationToken);\n\n        ensureNotCancelled(cancellationToken);\n\n        const hmacParameters: HmacImportParams = {\n            name: 'HMAC',\n            hash: { name: 'SHA-512' }\n        };\n\n        const hkdfKey: CryptoKey = await window.crypto.subtle.importKey(\n            'raw',\n            derivedKey,\n            hmacParameters,\n            false,\n            ['sign']\n        );\n\n        ensureNotCancelled(cancellationToken);\n\n        const result: ArrayBuffer = await window.crypto.subtle.sign('HMAC', hkdfKey, this.hkdfPurpose);\n\n        ensureNotCancelled(cancellationToken);\n\n        return result;\n    }\n}\n","import { stringToArray } from '../stringUtils';\nimport { IPasswordGenerator, getDerivedBytes } from '../crypto';\nimport { CancellationToken, ensureNotCancelled } from '../asyncUtils';\n\nexport class PasswordGeneratorV2 implements IPasswordGenerator {\n    private hkdfPurpose: ArrayBuffer;\n    private _description: string;\n\n    public constructor(hkdfPurpose: string) {\n        this.hkdfPurpose = stringToArray(hkdfPurpose);\n        this._description = `HKDF(PBKDF2, HMAC512) [purpose: ${hkdfPurpose}]`;\n    }\n\n    public get version(): number {\n        return 2;\n    }\n\n    public get description(): string {\n        return this._description;\n    }\n\n    public async generatePassword(privatePart: ArrayBuffer, publicPart: ArrayBuffer, cancellationToken: CancellationToken): Promise<ArrayBuffer> {\n        const derivedKey: ArrayBuffer = await getDerivedBytes(privatePart, publicPart, 400_000, cancellationToken);\n\n        ensureNotCancelled(cancellationToken);\n\n        const hmacParameters: HmacImportParams = {\n            name: 'HMAC',\n            hash: { name: 'SHA-512' }\n        };\n\n        const hkdfKey: CryptoKey = await window.crypto.subtle.importKey(\n            'raw',\n            derivedKey,\n            hmacParameters,\n            false,\n            ['sign']\n        );\n\n        ensureNotCancelled(cancellationToken);\n\n        const result: ArrayBuffer = await window.crypto.subtle.sign('HMAC', hkdfKey, this.hkdfPurpose);\n\n        ensureNotCancelled(cancellationToken);\n\n        return result;\n    }\n}\n","import { ICipher } from '../crypto';\nimport * as stringUtils from '../stringUtils';\nimport * as arrayUtils from '../arrayUtils';\nimport { ITabInfo } from '../TabControl';\nimport * as ui from '../ui';\nimport { getPrivatePart } from './privatePartComponent';\nimport * as serviceManager from '../services/serviceManger';\n\nimport { IComponent } from './IComponent';\n\nimport * as storageOutputComponent from './storageOutputComponent';\nimport { ciphers } from './cipherComponent';\n\nimport { CancellationToken } from '../asyncUtils';\n\nconst btnTabReEncrypt: HTMLButtonElement = ui.getElementById('btnTabReEncrypt') as HTMLButtonElement;\nconst divTabReEncrypt: HTMLElement = ui.getElementById('divTabReEncrypt');\n\nconst txtReEncryptSource: HTMLInputElement = ui.getElementById('txtReEncryptSource') as HTMLInputElement;\nconst txtReEncryptTarget: HTMLInputElement = ui.getElementById('txtReEncryptTarget') as HTMLInputElement;\n\nconst cboReEncryptFrom: HTMLSelectElement = ui.getElementById('cboReEncryptFrom') as HTMLSelectElement;\nconst cboReEncryptTo: HTMLSelectElement = ui.getElementById('cboReEncryptTo') as HTMLSelectElement;\nconst btnReEncrypt: HTMLButtonElement = ui.getElementById('btnReEncrypt') as HTMLButtonElement;\n\nconst btnClearReEncryptSource: HTMLButtonElement = ui.getElementById('btnClearReEncryptSource') as HTMLButtonElement;\nconst btnCopyReEncryptTarget: HTMLButtonElement = ui.getElementById('btnCopyReEncryptTarget') as HTMLButtonElement;\nconst btnClearReEncryptTarget: HTMLButtonElement = ui.getElementById('btnClearReEncryptTarget') as HTMLButtonElement;\n\nfunction fillCipherComboBox(cbo: HTMLSelectElement, initialValue: number): void {\n    let cipher: ICipher;\n\n    for (cipher of ciphers) {\n        const item: HTMLOptionElement = document.createElement('option');\n        item.value = cbo.childNodes.length.toString();\n        item.text = `${cipher.description} (v${cipher.version})`;\n        cbo.add(item);\n    }\n\n    cbo.value = initialValue.toString();\n}\n\nfunction clearSourceVisualCue(): void {\n    txtReEncryptSource.style.removeProperty('background-color');\n}\n\nfunction clearTargetVisualCue(): void {\n    txtReEncryptTarget.style.removeProperty('background-color');\n}\n\nfunction setSourceVisualCueError() {\n    txtReEncryptSource.style.setProperty('background-color', ui.ERROR_COLOR);\n}\n\nfunction setTargetVisualCueError() {\n    txtReEncryptTarget.style.setProperty('background-color', ui.ERROR_COLOR);\n}\n\nfunction clearAllVisualCues(): void {\n    clearSourceVisualCue();\n    clearTargetVisualCue();\n}\n\nasync function onReEncryptButtonClick(): Promise<boolean> {\n    ui.clearText(txtReEncryptTarget, true);\n    clearAllVisualCues();\n\n    if (txtReEncryptSource.value.length === 0) {\n        setSourceVisualCueError();\n        return false;\n    }\n\n    if (cboReEncryptFrom.value === cboReEncryptTo.value) {\n        setTargetVisualCueError();\n        return false;\n    }\n\n    const privatePart: string = getPrivatePart();\n    if (privatePart.length === 0) {\n        console.warn('Private part is empty');\n        return false;\n    }\n\n    const sourceCipherIndex = parseInt(cboReEncryptFrom.value, 10);\n    const targetCipherIndex = parseInt(cboReEncryptTo.value, 10);\n\n    const password: ArrayBuffer = stringUtils.stringToArray(privatePart);\n\n    const input: ArrayBuffer = stringUtils.fromBase16(txtReEncryptSource.value);\n    const decrypted: ArrayBuffer = await ciphers[sourceCipherIndex].decrypt(input, password, CancellationToken.none);\n    const reEncrypted: ArrayBuffer = await ciphers[targetCipherIndex].encrypt(decrypted, password, CancellationToken.none);\n\n    txtReEncryptTarget.value = arrayUtils.toBase16(reEncrypted);\n\n    return true;\n}\n\nexport class ReEncryptComponent implements IComponent, ITabInfo {\n    public readonly name: string = 'ReEncrypt';\n\n    public getTabButton(): HTMLButtonElement {\n        return btnTabReEncrypt;\n    }\n\n    public getTabContent(): HTMLElement {\n        return divTabReEncrypt;\n    }\n\n    public onTabSelected() {\n        storageOutputComponent.hide();\n        txtReEncryptSource.focus();\n    }\n\n    public getVaultHint(): string {\n        throw new Error('Not supported.');\n    }\n\n    public init(): void {\n        const errorLogsService = serviceManager.getService('errorLogs');\n        const logFunc = errorLogsService.createLogErrorMessageFunction();\n\n        ui.setupCopyButton(txtReEncryptTarget, btnCopyReEncryptTarget, logFunc);\n\n        // Mais est-ce que ce monde est serieux?\n        fillCipherComboBox(<HTMLSelectElement><any>cboReEncryptFrom, ciphers.length - 2);\n        fillCipherComboBox(<HTMLSelectElement><any>cboReEncryptTo, ciphers.length - 1);\n\n        txtReEncryptSource.addEventListener('input', () => {\n            if (txtReEncryptSource.value.length > 0) {\n                clearSourceVisualCue();\n            }\n        });\n\n        btnClearReEncryptSource.addEventListener('click', () => {\n            ui.clearText(txtReEncryptSource, true);\n        });\n\n        btnClearReEncryptTarget.addEventListener('click', () => {\n            ui.clearText(txtReEncryptTarget, true);\n        });\n\n        ui.setupFeedbackButton(btnReEncrypt, onReEncryptButtonClick, logFunc);\n    }\n}\n","import * as plainObject from '../../PlainObject';\nimport * as stringUtils from '../../stringUtils';\nimport { SearchMatchFunction, PositionMarker } from '../../searchMatchFunctions';\n\nexport const DEEP_MODE_NONE = 0;\nexport const DEEP_MODE_UP = 1;\nexport const DEEP_MODE_DOWN = 2;\n\nconst TREE_ELEMENT_HEIGHT = 30;\n\nconst HORIZONTAL_LINE_VERTICAL_OFFSET = Math.floor(TREE_ELEMENT_HEIGHT / 2);\nconst HORIZONTAL_LINE_LENGTH = 12;\nconst VERTICAL_BAR_OFFSET = 6;\n\nexport interface TreeNodeCreationController {\n    isLeaf(path: string, key: string, value: any): boolean;\n    createTreeNodeContentElements(path: string, key: string, value: any): HTMLElement[];\n}\n\nexport class TreeNode {\n    protected readonly parent: TreeNode | null;\n    protected readonly children: TreeNode[] = [];\n\n    protected readonly rootElement: HTMLElement;\n    protected readonly contentContainerElement: HTMLElement;\n    protected readonly childrenContainerElement: HTMLElement;\n\n    protected readonly treeNodeCreationController: TreeNodeCreationController;\n\n    protected readonly path: string;\n    protected readonly key: string;\n    protected readonly value: any;\n\n    public get element(): HTMLElement {\n        return this.rootElement;\n    }\n\n    public get isVisible(): boolean {\n        return this.rootElement.style.display !== 'none';\n    }\n\n    public getVisibleChildCount(): number {\n        let visibleChildCount = 0;\n\n        for (const child of this.children) {\n            if (child.isVisible) {\n                visibleChildCount += 1;\n            }\n        }\n\n        return visibleChildCount;\n    }\n\n    public getVisibleLeafCount(): number {\n        if (this.isVisible === false) {\n            return 0;\n        }\n\n        let visibleLeafCount = 1;\n\n        for (const child of this.children) {\n            visibleLeafCount += child.getVisibleLeafCount();\n        }\n\n        return visibleLeafCount;\n    }\n\n    private addChild(child: TreeNode) {\n        this.childrenContainerElement.appendChild(child.rootElement);\n        this.children.push(child);\n    }\n\n    private createChildNodes(object: plainObject.PlainObject) {\n        for (const [childKey, childValue] of Object.entries(object)) {\n            const decodedChildKey = stringUtils.escapeAndDecodeUtfString(childKey);\n            const child = new TreeNode(this, `${this.path}/${decodedChildKey}`, decodedChildKey, childValue, this.treeNodeCreationController);\n            this.addChild(child);\n        }\n    }\n\n    constructor(parent: TreeNode | null, path: string, key: string, value: any, treeNodeCreationController: TreeNodeCreationController) {\n        this.parent = parent;\n        this.path = path;\n        this.key = key;\n        this.value = value;\n        this.treeNodeCreationController = treeNodeCreationController;\n\n        this.rootElement = document.createElement('div');\n        this.setRootElementStyle();\n\n        // Construct title DOM element.\n        this.contentContainerElement = document.createElement('div');\n        this.setTitleElementStyle();\n\n        for (const element of this.createTreeNodeContentElements()) {\n            this.contentContainerElement.appendChild(element);\n        }\n\n        this.rootElement.appendChild(this.contentContainerElement);\n\n        // Construct children container DOM element.\n        this.childrenContainerElement = document.createElement('div');\n        this.rootElement.appendChild(this.childrenContainerElement);\n        this.setChildrenContainerElementStyle();\n\n        const isLeaf = treeNodeCreationController.isLeaf(path, key, value);\n\n        if (isLeaf === false && plainObject.isPlainObject(value)) {\n            this.createChildNodes(value);\n        } else if (isLeaf && value.customKeys) {\n            this.createChildNodes(value.customKeys);\n        }\n\n        if (parent) {\n            // Construct lines DOM elements.\n            this.setupLinesElements('#D0D0D0');\n        }\n    }\n\n    private createTreeNodeContentElements(): HTMLElement[] {\n        return this.treeNodeCreationController.createTreeNodeContentElements(this.path, this.key, this.value);\n    }\n\n    private setRootElementStyle(): void {\n        this.rootElement.classList.add('treenode-root');\n        this.rootElement.style.display = 'grid';\n\n        let height = 4; // Gives a bit of top spacing.\n        let childrenOffset = 0;\n\n        if (this.parent) {\n            height = TREE_ELEMENT_HEIGHT;\n        }\n        if (this.parent && this.parent.parent) {\n            childrenOffset = HORIZONTAL_LINE_LENGTH;\n        }\n\n        this.rootElement.style.gridTemplateRows = `${height}px 1fr`;\n        this.rootElement.style.gridTemplateColumns = `${childrenOffset}px ${VERTICAL_BAR_OFFSET}px 1fr`;\n    }\n\n    private verticalLineElement: HTMLElement | null = null;\n\n    private setupLinesElements(color: string): void {\n        const verticalLineElement = document.createElement('div');\n        verticalLineElement.classList.add('treenode-vertical-line');\n        verticalLineElement.style.gridColumn = '2';\n        verticalLineElement.style.gridRow = '2';\n        verticalLineElement.style.width = '100%';\n        verticalLineElement.style.borderRight = `1px solid ${color}`;\n        this.verticalLineElement = verticalLineElement;\n        this.rootElement.appendChild(verticalLineElement);\n\n        if (this.parent && this.parent.parent) {\n            const horizontalLineElement = document.createElement('div');\n            horizontalLineElement.classList.add('treenode-horizontal-line');\n            horizontalLineElement.style.gridColumn = '1';\n            horizontalLineElement.style.gridRow = '1';\n            horizontalLineElement.style.width = '100%';\n            horizontalLineElement.style.height = `${HORIZONTAL_LINE_VERTICAL_OFFSET}px`;\n            horizontalLineElement.style.borderBottom = `1px solid ${color}`;\n            this.rootElement.appendChild(horizontalLineElement);\n        }\n\n        this.updateLines();\n    }\n\n    private updateLines(): void {\n        if (this.verticalLineElement === null) {\n            return;\n        }\n\n        const visibleChildCount = this.getVisibleChildCount();\n\n        if (visibleChildCount === 0) {\n            this.verticalLineElement.style.height = '0px';\n            return;\n        }\n\n        let totalVisibleLeafCount = 1;\n\n        for (let i = 0; i < visibleChildCount - 1; i += 1) {\n            if (this.children[i].isVisible) {\n                totalVisibleLeafCount += this.children[i].getVisibleLeafCount();\n            }\n        }\n\n        const bottomPosition = (totalVisibleLeafCount * TREE_ELEMENT_HEIGHT) - TREE_ELEMENT_HEIGHT + HORIZONTAL_LINE_VERTICAL_OFFSET + 1;\n\n        this.verticalLineElement.style.height = `${bottomPosition}px`;\n    }\n\n    private setTitleElementStyle(): void {\n        if (!this.contentContainerElement) {\n            return;\n        }\n\n        this.contentContainerElement.classList.add('treenode-title');\n        this.contentContainerElement.style.gridColumn = '2 / span 2';\n        this.contentContainerElement.style.gridRow = '1';\n        this.contentContainerElement.style.marginLeft = '3px';\n        this.contentContainerElement.style.alignSelf = 'center';\n    }\n\n    private setChildrenContainerElementStyle(): void {\n        this.childrenContainerElement.classList.add('treenode-children-container');\n        this.childrenContainerElement.style.gridColumn = '3';\n        this.childrenContainerElement.style.gridRow = '2';\n    }\n\n    private resetTitle(deepMode: number): void {\n        if (this.contentContainerElement) {\n            this.contentContainerElement.innerHTML = '';\n            for (const element of this.createTreeNodeContentElements()) {\n                this.contentContainerElement.appendChild(element);\n            }\n        }\n\n        if (deepMode === DEEP_MODE_UP && this.parent) {\n            this.parent.resetTitle(deepMode);\n        }\n\n        if (deepMode === DEEP_MODE_DOWN) {\n            for (const child of this.children) {\n                child.resetTitle(deepMode);\n            }\n        }\n    }\n\n    public show(deepMode: number): void {\n        this.rootElement.style.display = 'grid';\n\n        if (deepMode === DEEP_MODE_UP && this.parent) {\n            this.parent.show(deepMode);\n        }\n\n        if (deepMode === DEEP_MODE_DOWN) {\n            for (const child of this.children) {\n                child.show(deepMode);\n            }\n        }\n\n        this.updateLines();\n    }\n\n    public hide(deepMode: number): void {\n        this.rootElement.style.display = 'none';\n\n        if (deepMode === DEEP_MODE_UP && this.parent) {\n            this.parent.hide(deepMode);\n        }\n\n        if (deepMode === DEEP_MODE_DOWN) {\n            for (const child of this.children) {\n                child.hide(deepMode);\n            }\n        }\n\n        this.updateLines();\n    }\n\n    private static createSpan(text: string, color?: string): HTMLElement {\n        const element = document.createElement('span');\n        if (color) {\n            element.style.backgroundColor = color;\n            element.style.borderRadius = '2px';\n        }\n        element.innerText = text;\n        return element;\n    }\n\n    private static createColoredSpan(text: string, markers: PositionMarker[]): HTMLElement {\n        const root = document.createElement('span');\n\n        let pos = 0;\n\n        for (const marker of markers) {\n            if (marker.pos !== pos) {\n                root.appendChild(TreeNode.createSpan(text.substring(pos, marker.pos)));\n            }\n\n            root.appendChild(TreeNode.createSpan(text.substring(marker.pos, marker.pos + marker.len), '#80C0FF'));\n\n            pos = marker.pos + marker.len;\n        }\n\n        if (pos < text.length) {\n            root.appendChild(TreeNode.createSpan(text.substring(pos, text.length)));\n        }\n\n        return root;\n    }\n\n    private static findLeafElement(element: Element): Element {\n        if (element.children.length === 0) {\n            return element;\n        }\n\n        return TreeNode.findLeafElement(element.children[0]);\n    }\n\n    public filter(searchText: string, matchFunction: SearchMatchFunction): void {\n        if (!searchText) {\n            this.resetTitle(DEEP_MODE_DOWN);\n            this.show(DEEP_MODE_DOWN);\n            this.updateLines();\n            return;\n        }\n\n        if (this.contentContainerElement.childNodes.length === 0) {\n            return;\n        }\n\n        const markers: PositionMarker[] = [];\n\n        const titleElement = TreeNode.findLeafElement(this.contentContainerElement) as HTMLElement;\n\n        const isMatch = matchFunction(titleElement.innerText, searchText, markers);\n\n        if (isMatch) {\n            const child = TreeNode.createColoredSpan(titleElement.innerText, markers);\n\n            titleElement.innerHTML = '';\n            titleElement.appendChild(child);\n\n            this.show(DEEP_MODE_UP);\n            this.show(DEEP_MODE_DOWN);\n        } else {\n            this.resetTitle(DEEP_MODE_DOWN);\n        }\n\n        for (const child of this.children) {\n            child.filter(searchText, matchFunction);\n        }\n\n        this.updateLines();\n    }\n}\n","export interface PositionMarker {\n    pos: number;\n    len: number;\n}\n\nexport type SearchMatchFunction = (lhs: string, rhs: string, markers: PositionMarker[]) => boolean;\n\nfunction indexedFuzzySearchMatchFunction(lhs: string, lhsIndex: number, rhs: string, markers: PositionMarker[]): boolean {\n    if (!rhs) {\n        return true;\n    }\n\n    lhs = lhs.toLowerCase();\n    rhs = rhs.toLowerCase();\n\n    for (let len = rhs.length; len >= 1; len -= 1) {\n        const subWord = rhs.substring(0, len);\n        const foundPos = lhs.indexOf(subWord, lhsIndex);\n\n        if (foundPos >= 0) {\n            markers.push({\n                pos: foundPos,\n                len: subWord.length\n            });\n\n            return indexedFuzzySearchMatchFunction(lhs, foundPos + subWord.length, rhs.substring(len), markers);\n        }\n    }\n\n    return false;\n}\n\nexport function fuzzySearchMatchFunction(lhs: string, rhs: string, markers: PositionMarker[]): boolean {\n    return indexedFuzzySearchMatchFunction(lhs, 0, rhs, markers);\n}\n\nexport function containsSearchMatchFunction(lhs: string, rhs: string, markers: PositionMarker[]): boolean {\n    const index = lhs.toLowerCase().indexOf(rhs.toLowerCase());\n\n    if (index < 0) {\n        return false;\n    }\n\n    markers.push({\n        pos: index,\n        len: rhs.length\n    });\n\n    return true;\n}\n","import { getElementById } from '../../ui';\nimport { IComponent } from '../IComponent';\nimport { ITabInfo } from '../../TabControl';\nimport { IVaultComponent } from '../vaultComponent';\nimport { TreeNode, TreeNodeCreationController, DEEP_MODE_DOWN } from './TreeNode';\nimport * as plainObject from '../../PlainObject';\nimport * as ui from '../../ui';\nimport { fuzzySearchMatchFunction, containsSearchMatchFunction, SearchMatchFunction } from '../../searchMatchFunctions';\nimport * as serviceManager from '../../services/serviceManger';\nimport { PasswordService } from '../../services/passwordService';\nimport { CipherService } from 'services/cipherService';\n\nconst ONE_YEAR_IN_MILLISECONDS = 365 * 24 * 3600 * 1000;\n\nconst btnTabVaultTabTreeView = getElementById('btnTabVaultTabTreeView') as HTMLButtonElement;\nconst divTabVaultTabTreeView = getElementById('divTabVaultTabTreeView');\n\nconst trvVaultTreeView = getElementById('trvVaultTreeView');\nconst txtVaultTreeViewSearch = getElementById('txtVaultTreeViewSearch') as HTMLInputElement;\nconst cboVaultTreeViewSearchType = getElementById('cboVaultTreeViewSearchType') as HTMLSelectElement;\n\nlet rootTreeNode: TreeNode;\n\ninterface SearchMatchFunctionDescription {\n    text: string,\n    function: SearchMatchFunction\n}\n\nconst searchMatchFunctionDescriptions: SearchMatchFunctionDescription[] = [\n    { text: 'Fuzzy', function: fuzzySearchMatchFunction },\n    { text: 'Exact', function: containsSearchMatchFunction },\n];\n\nfunction onSearchVaultInputChanged(): void {\n    if (!rootTreeNode) {\n        return;\n    }\n\n    const index: number = cboVaultTreeViewSearchType.selectedIndex;\n    const searchMatchFunction: SearchMatchFunction = searchMatchFunctionDescriptions[index].function;\n\n    rootTreeNode.hide(DEEP_MODE_DOWN);\n    rootTreeNode.filter(txtVaultTreeViewSearch.value.toLocaleLowerCase(), searchMatchFunction);\n}\n\nfunction populateSearchFunctions(): void {\n    cboVaultTreeViewSearchType.innerHTML = '';\n\n    for (let description of searchMatchFunctionDescriptions) {\n        const option = document.createElement('option');\n        option.text = description.text;\n        cboVaultTreeViewSearchType.appendChild(option);\n    }\n}\n\nclass VaultTreeNodeCreationController implements TreeNodeCreationController {\n    private readonly passwordService: PasswordService;\n    private readonly cipherService: CipherService;\n    private readonly buttonBackgroundColor: string;\n\n    public constructor(private readonly maxTimestampInMilliseconds: number) {\n        this.passwordService = serviceManager.getService('password');\n        this.cipherService = serviceManager.getService('cipher');\n\n        const buttonStyle = window.getComputedStyle(btnTabVaultTabTreeView);\n\n        this.buttonBackgroundColor = buttonStyle.backgroundColor;\n    }\n\n    private async runPassword(value: any): Promise<void> {\n        await this.passwordService.generateAndCopyPasswordToClipboard(\n            value.public,\n            value.alphabet,\n            value.length,\n            value.version,\n        );\n    }\n\n    private editPassword(path: string, value: any): boolean {\n        return this.passwordService.activate(path, value);\n    }\n\n    private async runCipher(path: string, key: string, value: any): Promise<boolean> {\n        return await this.cipherService.activate(path, key, value);\n    }\n\n    private static isPasswordObject(key: string, obj: plainObject.PlainObject): boolean {\n        if (key !== 'password') {\n            return false;\n        }\n\n        if (!obj || !plainObject.isPlainObject(obj) || typeof obj.public !== 'string' || obj.public.length < 4) {\n            return false;\n        }\n\n        return true;\n    }\n\n    private static isCipherObject(obj: plainObject.PlainObject): boolean {\n        if (!obj || !plainObject.isPlainObject(obj)) {\n            return false;\n        }\n\n        if (typeof obj.value !== 'string' || obj.value.length <= 0) {\n            return false;\n        }\n\n        if (typeof obj.version !== 'number' || obj.version < 0) {\n            return false;\n        }\n\n        return true;\n    }\n\n    private static isCiphersObject(key: string, obj: plainObject.PlainObject): boolean {\n        if (key !== 'ciphers') {\n            return false;\n        }\n\n        if (!obj || !plainObject.isPlainObject(obj)) {\n            return false;\n        }\n\n        for (const sub of Object.values(obj)) {\n            if (!VaultTreeNodeCreationController.isCipherObject(sub)) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    private static isHint(key: string, value: any) {\n        if (VaultTreeNodeCreationController.isCiphersObject(key, value) ||\n            VaultTreeNodeCreationController.isCipherObject(value) ||\n            VaultTreeNodeCreationController.isPasswordObject(key, value) ||\n            plainObject.isPlainObject(value)) {\n            return false;\n        }\n\n        return true;\n    }\n\n    public isLeaf(path: string, key: string, value: any): boolean {\n        if (VaultTreeNodeCreationController.isCipherObject(value) ||\n            VaultTreeNodeCreationController.isPasswordObject(key, value)) {\n            return true;\n        }\n\n        return plainObject.isPlainObject(value) === false;\n    }\n\n    private computeTimestampProgress(timestamp: Date): number {\n        const now = Date.now()\n        const then = timestamp.getTime();\n        const diff = now - then;\n\n        const timespan = Math.max(0, Math.min(diff, this.maxTimestampInMilliseconds));\n\n        return timespan / this.maxTimestampInMilliseconds;\n    }\n\n    private static dateToString(date: Date): string {\n        return `${date.getFullYear()}-${date.getMonth() + 1}-${date.getDate()}`;\n    }\n\n    private createButton(text: string, timestamp: Date) {\n        const button = document.createElement('button');\n\n        button.title = `Last modified: ${VaultTreeNodeCreationController.dateToString(timestamp)}`;\n\n        const grid = document.createElement('div');\n        grid.classList.add('content-container');\n\n        const textSpan = document.createElement('span');\n        textSpan.innerText = text;\n        textSpan.classList.add('text');\n        grid.appendChild(textSpan);\n\n        const timestampDiv = document.createElement('div');\n        timestampDiv.classList.add('timestamp');\n        timestampDiv.style.backgroundColor = this.buttonBackgroundColor;\n        timestampDiv.style.width = `${Math.round((1 - this.computeTimestampProgress(timestamp)) * 100)}%`;\n        grid.appendChild(timestampDiv);\n\n        button.appendChild(grid);\n\n        return button;\n    }\n\n    public createTreeNodeContentElements(path: string, key: string, value: any): HTMLElement[] {\n        if (VaultTreeNodeCreationController.isPasswordObject(key, value)) {\n            const version: number = value.version;\n            const isLatest = this.passwordService.isLatestVersion(version);\n\n            const lastModified = new Date(value.datetime);\n\n            const button = this.createButton('Password', lastModified);\n            button.classList.add('password');\n            button.style.justifySelf = 'start';\n            button.style.minWidth = '80px';\n\n            if (isLatest === false) {\n                button.setAttribute('not-latest', `⚠️ Password version ${version}, latest is ${this.passwordService.getLatestVersion()}`);\n                button.classList.add('not-latest');\n            }\n\n            const errorLogsService = serviceManager.getService('errorLogs');\n            const logFunc = errorLogsService.createLogErrorMessageFunction();\n\n            ui.setupFeedbackButton(button, async () => await this.runPassword(value), logFunc);\n\n            const editButton = document.createElement('button');\n            editButton.classList.add('edit-password');\n            editButton.innerText = '✏️';\n            editButton.title = 'Edit password generation details';\n\n            ui.setupFeedbackButton(editButton, () => this.editPassword(path, value), logFunc);\n\n            return [button, editButton];\n        } else if (VaultTreeNodeCreationController.isCipherObject(value)) {\n            const version: number = value.version;\n            const isLatest = this.cipherService.isLatestVersion(version);\n\n            const lastModified = new Date(value.datetime);\n\n            const button = this.createButton(key, lastModified);\n            button.classList.add('cipher');\n            button.style.justifySelf = 'start';\n\n            if (isLatest === false) {\n                button.setAttribute('not-latest', `⚠️ Cipher version ${version}, latest is ${this.cipherService.getLatestVersion()}`);\n                button.classList.add('not-latest');\n            }\n\n            const errorLogsService = serviceManager.getService('errorLogs');\n            const logFunc = errorLogsService.createLogErrorMessageFunction();\n\n            ui.setupFeedbackButton(button, async () => await this.runCipher(path, key, value), logFunc);\n\n            return [button];\n        } else if (VaultTreeNodeCreationController.isHint(key, value)) {\n            const label = document.createElement('span');\n            label.style.justifySelf = 'start';\n            label.innerText = `${key}: ${value}`;\n\n            return [label];\n        }\n\n        const div = document.createElement('div');\n        div.innerText = key;\n        return [div];\n    }\n}\n\nexport class VaultTreeViewComponent implements IComponent, ITabInfo, IVaultComponent {\n    public readonly name: string = 'VaultTreeView';\n\n    public onVaultLoaded(vault: plainObject.PlainObject): void {\n        const maxTimespan = 3 * ONE_YEAR_IN_MILLISECONDS;\n\n        rootTreeNode = new TreeNode(null, '<root>', '', vault, new VaultTreeNodeCreationController(maxTimespan));\n\n        trvVaultTreeView.innerHTML = '';\n        trvVaultTreeView.appendChild(rootTreeNode.element);\n\n        onSearchVaultInputChanged();\n    }\n\n    public getTabButton(): HTMLButtonElement {\n        return btnTabVaultTabTreeView;\n    }\n\n    public getTabContent(): HTMLElement {\n        return divTabVaultTabTreeView;\n    }\n\n    public onTabSelected(): void {\n        txtVaultTreeViewSearch.focus();\n    }\n\n    public getVaultHint(): string {\n        throw new Error('Not supported.');\n    }\n\n    public init(): void {\n        populateSearchFunctions();\n\n        txtVaultTreeViewSearch.addEventListener('input', onSearchVaultInputChanged);\n        cboVaultTreeViewSearchType.addEventListener('change', onSearchVaultInputChanged);\n    }\n}\n","import { getElementById } from '../../ui';\nimport { IComponent } from '../IComponent';\nimport { ITabInfo } from '../../TabControl';\nimport { IVaultComponent } from '../vaultComponent';\nimport * as plainObject from '../../PlainObject';\n\nconst btnTabVaultTabTextView = getElementById('btnTabVaultTabTextView') as HTMLButtonElement;\nconst divTabVaultTabTextView = getElementById('divTabVaultTabTextView');\n\nconst txtVault = getElementById('txtVault') as HTMLInputElement;\n\nexport class VaultTextViewComponent implements IComponent, ITabInfo, IVaultComponent {\n    public readonly name: string = 'VaultTextView';\n\n    public onVaultLoaded(vault: plainObject.PlainObject): void {\n        txtVault.value = JSON.stringify(vault, undefined, 4);\n    }\n\n    public getTabButton(): HTMLButtonElement {\n        return btnTabVaultTabTextView;\n    }\n\n    public getTabContent(): HTMLElement {\n        return divTabVaultTabTextView;\n    }\n\n    public onTabSelected(): void {\n    }\n\n    public getVaultHint(): string {\n        throw new Error('Not supported.');\n    }\n\n    public init(): void {\n    }\n}\n","import { VaultComponent } from '../components/vaultComponent';\n\nexport class VaultService {\n    private readonly vaultComponent: VaultComponent;\n\n    public constructor(vaultComponent: VaultComponent) {\n        this.vaultComponent = vaultComponent;\n    }\n\n    public computeUserPathMatchDepth(path: string): number {\n        return this.vaultComponent.computeUserPathMatchDepth(path);\n    }\n}\n","import { getElementById, setupFeedbackButton } from '../ui';\n\nimport { IComponent } from './IComponent';\nimport { ITabInfo, TabControl } from '../TabControl';\n\nimport * as storageOutputComponent from './storageOutputComponent';\n\nimport { SecureLocalStorage } from '../storages/SecureLocalStorage';\nimport { IVaultStorage } from '../storages/IVaultStorage';\nimport { GitHubPersonalAccessTokenVaultStorage } from '../storages/GitHubVaultStorage';\nimport { hasPrivatePart, protectAndLockPrivatePart, hidePrivatePartContainer } from './privatePartComponent';\nimport * as plainObject from '../PlainObject';\nimport { VaultTreeViewComponent } from './vaultComponents/treeViewComponent';\nimport { VaultTextViewComponent } from './vaultComponents/textViewComponent';\n\nimport * as serviceManager from '../services/serviceManger';\nimport { VaultService } from '../services/vaultService';\n\nexport interface IVaultComponent {\n    onVaultLoaded(vault: plainObject.PlainObject): void;\n}\n\nconst divTabVault = getElementById('divTabVault');\nconst btnTabVault = getElementById('btnTabVault') as HTMLButtonElement;\n\nconst btnRefreshVault = getElementById('btnRefreshVault') as HTMLButtonElement;\nconst btnClearVaultSettings = getElementById('btnClearVaultSettings') as HTMLButtonElement;\nconst btnViewVaultSettings = getElementById('btnViewVaultSettings') as HTMLButtonElement;\n\nconst elements: any[] = [\n    new VaultTreeViewComponent(),\n    new VaultTextViewComponent(),\n];\n\nconst tabs: ITabInfo[] = elements.filter(e => (e as ITabInfo).getTabButton !== undefined);\nconst components: (IComponent & IVaultComponent)[] = elements.filter(e => (e as IComponent).init !== undefined);\n\nconst subTabs = new TabControl(tabs);\n\nlet vaultStorage: IVaultStorage = new GitHubPersonalAccessTokenVaultStorage(new SecureLocalStorage());\n\nlet vaultObject: plainObject.PlainObject | null = null;\n\nfunction computeUserPathMatchDepth(path: string): number {\n    if (vaultObject === null) {\n        return 0;\n    }\n\n    let obj = vaultObject;\n\n    const pathArray = path.split('/');\n\n    for (let i = 0; i < pathArray.length; i += 1) {\n        if (!obj[pathArray[i]]) {\n            return i;\n        }\n\n        // TODO: Filter here to not go further down ItchyObjects.\n\n        obj = obj[pathArray[i]];\n    }\n\n    return pathArray.length;\n}\n\nasync function reloadVault(): Promise<boolean> {\n    let content: string | null = await vaultStorage.getVaultContent();\n\n    if (content === null) {\n        return false;\n    }\n\n    try {\n        let obj = JSON.parse(content) as plainObject.PlainObject;\n        obj = plainObject.objectDeepSort(obj);\n\n        vaultObject = obj;\n\n        let component: IVaultComponent;\n        for (component of components) {\n            component.onVaultLoaded(obj);\n        }\n\n        return true;\n    } catch (error) {\n        vaultObject = null;\n        alert('Failed to parse vault content, it needs to be fixed and be valid JSON data.');\n        const message = (error as Error).message;\n        if (message) {\n            alert(message);\n            console.error(message);\n        }\n        return false;\n    }\n}\n\nasync function onRefreshVaultButtonClick(): Promise<boolean> {\n    if (hasPrivatePart() === false) {\n        alert('You must enter a master key first.');\n        return false;\n    }\n\n    const result: boolean = await reloadVault();\n\n    if (result) {\n        protectAndLockPrivatePart();\n        hidePrivatePartContainer();\n    }\n\n    return result;\n}\n\nfunction onClearVaultSettingsButtonClick(): void {\n    if (prompt('Are you sure you want to clear the vault settings ?\\nType \\'y\\' to accept', '') !== 'y') {\n        return;\n    }\n\n    vaultStorage.clear();\n}\n\nfunction onViewVaultSettingsButtonClick(): void {\n    alert(vaultStorage.getVaultSettings());\n}\n\nexport class VaultComponent implements IComponent, ITabInfo {\n    public readonly name: string = 'Vault';\n\n    public computeUserPathMatchDepth(path: string) {\n        return computeUserPathMatchDepth(path);\n    }\n\n    public getTabButton(): HTMLButtonElement {\n        return btnTabVault;\n    }\n\n    public getTabContent(): HTMLElement {\n        return divTabVault;\n    }\n\n    public onTabSelected(): void {\n        storageOutputComponent.hide();\n        tabs[subTabs.activeTabIndex].onTabSelected();\n    }\n\n    public getVaultHint(): string {\n        throw new Error('Not supported.');\n    }\n\n    public init(): void {\n        const errorLogsService = serviceManager.getService('errorLogs');\n        const logFunc = errorLogsService.createLogErrorMessageFunction();\n\n        setupFeedbackButton(btnRefreshVault, onRefreshVaultButtonClick, logFunc);\n        btnClearVaultSettings.addEventListener('click', onClearVaultSettingsButtonClick);\n        btnViewVaultSettings.addEventListener('click', onViewVaultSettingsButtonClick);\n\n        const vaultService = new VaultService(this);\n        serviceManager.registerService('vault', vaultService);\n\n        let component: IComponent;\n        for (component of components) {\n            component.init();\n        }\n    }\n}\n","import { ErrorLogsComponent } from 'components/errorLogsComponent';\n\nexport class ErrorLogsService {\n    constructor(private errorLogsComponent: ErrorLogsComponent) {\n    }\n\n    public createLogErrorMessageFunction(): (...args: any[]) => void {\n        return (args) => this.logErrorMessage(args);\n    }\n\n    public logErrorMessage(...args: any[]): void {\n        this.errorLogsComponent.logErrorMessage(...args);\n    }\n}\n","import { getElementById } from '../ui';\nimport { ITabInfo } from '../TabControl';\nimport * as serviceManager from '../services/serviceManger';\nimport { ErrorLogsService } from '../services/errorLogsService';\nimport * as storageOutputComponent from './storageOutputComponent';\n\nconst divErrorLogs = getElementById('divErrorLogs');\nconst btnTabErrorLogs = getElementById('btnTabErrorLogs') as HTMLButtonElement;\n\nconst btnClearErrorLogs = getElementById('btnClearErrorLogs') as HTMLButtonElement;\nconst txtErrorLogs = getElementById('txtErrorLogs') as HTMLTextAreaElement;\n\nexport class ErrorLogsComponent implements ITabInfo {\n    constructor() {\n        window.addEventListener('error', (e) => this.onError(e), true);\n        window.addEventListener('unhandledrejection', (e) => this.onUnhandledRejection(e), true);\n\n        btnClearErrorLogs.addEventListener('click', () => {\n            txtErrorLogs.value = '';\n        });\n\n        serviceManager.registerService('errorLogs', new ErrorLogsService(this));\n    }\n\n    public logErrorMessage(...args: any[]): void {\n        if (args.length == 0) {\n            return;\n        }\n\n        const now = new Date().toISOString();\n\n        let message = args[0].toString();\n\n        for (let i = 1; i < args.length; i++) {\n            message += ` ${args[i].toString()}`;\n        }\n\n        txtErrorLogs.value += `[${now}] ${message}\\n\\n`;\n    }\n\n    public onUnhandledRejection(errorEvent: PromiseRejectionEvent): void {\n        this.logErrorMessage(`Promise rejected, reason: ${errorEvent.reason}`);\n    }\n\n    public onError(errorEvent: ErrorEvent): void {\n        this.logErrorMessage(`${errorEvent.message}\\n${errorEvent.toString()}`);\n    }\n\n    getTabButton(): HTMLButtonElement {\n        return btnTabErrorLogs;\n    }\n\n    getTabContent(): HTMLElement {\n        return divErrorLogs;\n    }\n\n    onTabSelected(): void {\n        storageOutputComponent.hide();\n    }\n}\n","import { getElementById } from '../ui';\nimport { TabControl, ITabInfo } from '../TabControl';\n\nimport { IComponent } from './IComponent';\nimport { PrivatePartComponent } from './privatePartComponent';\nimport { PasswordComponent } from './passwordComponent';\nimport { CipherComponent } from './cipherComponent';\nimport { ReEncryptComponent } from './reEncryptComponent';\nimport { VaultComponent } from './vaultComponent';\n\nimport * as storageOutputComponent from './storageOutputComponent';\nimport { ErrorLogsComponent } from './errorLogsComponent';\n\nconst nothingTabInfo: ITabInfo = {\n    getTabButton(): HTMLButtonElement {\n        return getElementById('btnTabNothing') as HTMLButtonElement;\n    },\n    getTabContent(): HTMLElement {\n        return getElementById('divTabNothing');\n    },\n    onTabSelected(): void {\n        storageOutputComponent.hide();\n    }\n}\n\nconst elements: any[] = [\n    nothingTabInfo,\n    new PrivatePartComponent(),\n    new PasswordComponent(),\n    new CipherComponent(),\n    new ReEncryptComponent(),\n    new ErrorLogsComponent(),\n    new storageOutputComponent.StorageOutputComponent(),\n    new VaultComponent(),\n];\n\nconst tabs: ITabInfo[] = elements.filter(e => (e as ITabInfo).getTabButton !== undefined);\nconst components: IComponent[] = elements.filter(e => (e as IComponent).init !== undefined);\n\nconst tabControl = new TabControl(tabs);\n\nexport class RootComponent implements IComponent {\n    public readonly name: string = 'Root';\n\n    public constructor() {\n    }\n\n    public getVaultHint(): string {\n        throw new Error('Not supported.');\n    }\n\n    public init(): void {\n        let component: IComponent;\n        for (component of components) {\n            component.init();\n        }\n    }\n\n    public getActiveComponent(): IComponent | null {\n        const component = tabs[tabControl.activeTabIndex] as any;\n\n        if (component.init !== undefined) {\n            return component as IComponent;\n        }\n\n        return null;\n    }\n}\n\nexport const rootComponent = new RootComponent();\n","import { getElementById } from './ui';\nimport { rootComponent } from './components/rootComponent';\n\ndeclare const COMMITHASH: string;\n\nconst version = COMMITHASH.substring(0, 11);\nconst githubLink = '<a href=\"https://github.com/TanukiSharp/ItchyPassword\" target=\"_blank\">github</a>';\n\ngetElementById('divInfo').innerHTML = `${version}<br/>${githubLink}`;\n\nrootComponent.init();\n"],"names":["ERROR_COLOR","getElementById","elementName","element","document","Error","async","writeToClipboard","text","logFunc","navigator","clipboard","writeText","error","typedError","console","stack","clearText","txt","refocus","value","focus","setupFeedbackButton","button","action","logError","throttleTimeout","clearFunc","duration","timeout","start","undefined","clearTimeout","end","setTimeout","createThrottleTimeout","classList","remove","clickFunction","disabled","actionResult","result","Promise","add","addEventListener","setupCopyButton","showHide","isVisible","style","removeProperty","setProperty","showHideMany","elements","TabControl","tabs","_activeTabIndex","activeTabIndex","this","index","length","setActiveTab","i","getTabButton","tabInfo","getTabContent","onTabSelected","btnProtectTitleForProtect","divPrivatePartContainer","txtPrivatePart","txtPrivatePartConfirmation","btnProtect","spnProtectedConfirmation","spnPrivatePartSize","spnPrivatePartSizeConfirmation","privatePart","onChangedHandlers","getPrivatePart","protectAndLockPrivatePart","innerHTML","title","updatePrivatePartsMatching","onProtectButtonClick","protectPrivatePartAction","delay","reset","overrideDelay","window","onPrivatePartTextInput","onChangedHandler","toString","onPrivatePartConfirmationTextInput","BASE58_ALPHABET","Base58Encoding","name","description","encode","input","alphabet","byteLength","arrayView","DataView","carry","digits","j","getUint8","push","decode","ArrayBuffer","includes","bytes","c","indexOf","Uint8Array","reverse","buffer","BASE62_ALPHABET","availableEncodings","alphabetLength","BigInt","number","arrayBuffer","headeredBuffer","set","createHeaderedBuffer","multiplier","arrayBufferToUnsignedBigInt","remainder","asUintN","byteValue","Number","totalLength","diff","slice","unsignedBigIntToArrayBuffer","_base64Encode","_base64Decode","_base64ToUint6","base64Char","base64Input","blocksSize","inputLength","replace","outputLength","Math","ceil","outputBytes","value24Bits","outputIndex","inputIndex","inputIndexMod4","charCodeAt","inputIndexMod3","_uint6ToBase64","value6Bits","inputBytes","base64Output","inputBytesLength","constrainedShift","String","fromCodePoint","padding","substring","TaskCancelledError","_name","constructor","message","super","ERROR_NAME","Object","setPrototypeOf","prototype","static","CancellationTokenSource","_isCancelled","_token","CancellationToken","isCancelled","token","cancel","source","none","_none","ensureNotCancelled","cancellationToken","encoding","getDerivedBytes","password","salt","iterations","baseKey","crypto","subtle","importKey","algorithm","hash","deriveKey","key","exportKey","truncate","stringToArray","str","TextEncoder","isPlainObject","hasOwnProperty","objectDeepSort","object","output","entries","sort","a","b","localeCompare","services","getService","serviceName","TypeError","service","registerService","instance","GitHubVaultStorageBase","secureLocalStorage","oneTimePassword","currentVaultContentHash","username","repositoryName","vaultFilename","getUsername","getRepositoryName","getVaultFilename","clear","removeItem","LOCAL_STORAGE_KEY_USERNAME","LOCAL_STORAGE_KEY_REPO","LOCAL_STORAGE_KEY_FILENAME","AUTH_TOKEN_KEY_NAME","constructTokenAuthString","constructFetchRequest","method","authHeader","body","headers","JSON","stringify","constructUrl","relativeUrl","BASE_URL","retryOnUnauthorized","url","requestInfo","response","fetch","status","prompt","request","getSetVaultParameter","promptText","defaultValue","localStorage","getItem","setItem","ensureVaultParameters","URL","location","defaultAccountUsername","defaultRepo","hostname","pathElements","pathname","split","resolve","getToken","constructVaultFileUrl","ensureToken","warn","ok","getVaultContent","setVaultContent","responseContent","json","sha","decodedContent","atob","content","trim","newContent","updateMessage","btoa","getVaultSettings","GitHubPersonalAccessTokenVaultStorage","authToken","CipherService","cipherComponent","latestVersion","findLatestCipher","version","isLatestVersion","getLatestVersion","storageFullPath","cipherName","parameterKeys","setParameters","click","RECOMMENDED_ENCODING_NAME","btnTabCiphers","divTabCiphers","ciphers","nonce","getRandomValues","passwordSalt","aesGcmParams","iv","passwordKey","encrypt","payload","derivedKey","decrypt","btnClearAllCipherInfo","txtCipherName","txtCipherSource","txtCipherTarget","cboCipherVersion","cboCipherEncoding","btnEncrypt","btnDecrypt","spnCipherSourceLength","btnCopyCipherSource","btnClearCipherSource","spnCipherTargetLength","btnCopyCipherTarget","btnClearCipherTarget","cipherTargetLastChange","bestCipher","cipher","findCipherEncodingDropdownIndexByName","clearSourceVisualCue","setSourceVisualCueError","clearAllVisualCues","clearCipherTargetLastUpdate","updateCipherSourceLength","innerText","updateCipherTargetLength","setCipherTargetValue","isEncrypt","needDateTimeUpdate","Date","toISOString","updateCipherParameters","encodingIndex","selectedIndex","isValidEncodingIndex","datetime","encryptString","encrypted","decryptStringWithCipher","decrypted","array","TextDecoder","isMatching","rethrowCancelled","onEncryptButtonClick","encryptedString","onDecryptButtonClick","decryptedString","CipherComponent","fullPath","prefix","suffix","startsWith","endsWith","options","encodingName","findEncodingByName","findCipherByVersion","decryptStringWithVersion","alert","storagePath","fullPathToStoragePath","customKeys","findCipherVersionDropdownIndexByVersion","getVaultHint","toLowerCase","init","createLogErrorMessageFunction","option","createElement","appendChild","setupCipherVersionsDropdown","setupCipherEncodingDropdown","SecureLocalStorage","encryptedItem","sortedCiphers","x","divStorageOutput","txtPath","lblMatchingPath","txtParameters","btnPushToVault","txtCustomKeys","_parameterKeys","_parameterPath","vaultStorage","pathToObjectChain","path","chainInfo","separatorIndex","tail","firstPath","remainingPath","node","head","tailParent","onPathTextInput","depth","computeUserPathMatchDepth","matchingPath","position","createMatchingPath","updateMatchingPath","update","onCustomKeysTextInput","updateCustomKeysDisplay","isValid","leaf","obj","parse","parseCustomKeys","keys","deepMerge","target","sourceKey","targetValue","sourceValue","pushToVault","vaultContentData","newData","vaultContent","activeComponent","rootComponent","hint","chars","findNonCharFromStart","findNonCharFromEnd","generateUpdateMessage","newVaultContentData","clearOutputs","parameterPath","setPathUI","setCustomKeysUI","show","hide","clearUI","clearMatchingPath","PasswordService","passwordComponent","CURRENT_PASSWORD_GENERATOR_VERSION","publicPart","DEFAULT_ALPHABET","DEFAULT_LENGTH","keyString","generatePasswordString","max","activate","btnTabPasswords","divTabPasswords","passwordGenerators","hkdfPurpose","_description","hkdfKey","sign","btnClearAllPasswordInfo","txtPublicPart","spnPublicPartSize","btnGeneratePublicPart","btnClearPublicPart","btnCopyPublicPart","btnShowHidePasswordOptionalFeatures","lblAlphabetLength","numOutputSizeRange","numOutputSizeNum","lblAlphabet","txtAlphabet","spnAlphabetSize","divPasswordAlphabetActions","btnResetAlphabet","lblPasswordVersion","cboPasswordVersion","txtResultPassword","spnResultPasswordLength","btnViewResultPassword","btnCopyResultPassword","lblGeneratingPassword","passwordPublicPartLastChange","copyPasswordFunction","onClearPublicPartButtonClick","updatePublicPartSize","updatePasswordPublicPartLastUpdate","updatePasswordGenerationParameters","onGeneratePublicPartButtonClick","randomString","byteCount","generateRandomBytes","run","updateResultPasswordLength","isAlphabetValid","sortedAlphabet","canRun","passwordGenerator","public","updateOutputSizeRangeToNum","updateOutputSizeNumToRange","min","parseInt","val","isNaN","onOutputSizeRangeInput","onOutputSizeNumInput","updateAlphabetSize","updateAlphabetValidityDisplay","onAlphabetTextInput","isAlphabetValidResult","onResetAlphabetButtonClick","resetAlphabet","onPasswordVersionChanged","findPasswordGeneratorByVersion","privatePrivateBytes","publicPartBytes","arrayBufferToUnsignedBigIntWithoutHeader","generatePassword","passwordTaskRunner","currentTokenSource","currentTask","microThreadId","isRunning","throwTaskCanceledError","MAX_SAFE_INTEGER","localMicroThreadId","cancelInternal","taskFactory","localToken","cancelAndExecute","runCore","findPasswordGeneratorFromUserInterface","onPublicPartTextInput","clearAll","btnTabReEncrypt","divTabReEncrypt","txtReEncryptSource","txtReEncryptTarget","cboReEncryptFrom","cboReEncryptTo","btnReEncrypt","btnClearReEncryptSource","btnCopyReEncryptTarget","btnClearReEncryptTarget","fillCipherComboBox","cbo","initialValue","item","childNodes","onReEncryptButtonClick","sourceCipherIndex","targetCipherIndex","reEncrypted","Array","map","call","join","HORIZONTAL_LINE_VERTICAL_OFFSET","floor","TREE_ELEMENT_HEIGHT","TreeNode","parent","children","rootElement","contentContainerElement","childrenContainerElement","treeNodeCreationController","display","getVisibleChildCount","visibleChildCount","child","getVisibleLeafCount","visibleLeafCount","addChild","createChildNodes","childKey","childValue","decodedChildKey","decodeURIComponent","escape","setRootElementStyle","setTitleElementStyle","createTreeNodeContentElements","setChildrenContainerElementStyle","isLeaf","setupLinesElements","height","childrenOffset","gridTemplateRows","gridTemplateColumns","verticalLineElement","color","gridColumn","gridRow","width","borderRight","horizontalLineElement","borderBottom","updateLines","totalVisibleLeafCount","bottomPosition","marginLeft","alignSelf","resetTitle","deepMode","backgroundColor","borderRadius","markers","root","pos","marker","createSpan","len","findLeafElement","filter","searchText","matchFunction","titleElement","createColoredSpan","indexedFuzzySearchMatchFunction","lhs","lhsIndex","rhs","subWord","foundPos","btnTabVaultTabTreeView","divTabVaultTabTreeView","trvVaultTreeView","txtVaultTreeViewSearch","cboVaultTreeViewSearchType","rootTreeNode","searchMatchFunctionDescriptions","function","onSearchVaultInputChanged","searchMatchFunction","toLocaleLowerCase","VaultTreeNodeCreationController","maxTimestampInMilliseconds","passwordService","cipherService","buttonBackgroundColor","buttonStyle","getComputedStyle","generateAndCopyPasswordToClipboard","editPassword","sub","values","isCipherObject","isCiphersObject","isPasswordObject","computeTimestampProgress","timestamp","now","getTime","date","getFullYear","getMonth","getDate","createButton","dateToString","grid","textSpan","timestampDiv","round","isLatest","lastModified","justifySelf","minWidth","setAttribute","runPassword","editButton","runCipher","isHint","label","div","btnTabVaultTabTextView","divTabVaultTabTextView","txtVault","VaultService","vaultComponent","divTabVault","btnTabVault","btnRefreshVault","btnClearVaultSettings","btnViewVaultSettings","onVaultLoaded","vault","populateSearchFunctions","e","components","subTabs","vaultObject","onRefreshVaultButtonClick","component","reloadVault","onClearVaultSettingsButtonClick","onViewVaultSettingsButtonClick","ErrorLogsService","errorLogsComponent","args","logErrorMessage","divErrorLogs","btnTabErrorLogs","btnClearErrorLogs","txtErrorLogs","dropdownIndex","findPasswordDropdownIndexByVersion","onChanged","type","startVisible","setupPasswordGeneratorsDropdown","onError","onUnhandledRejection","errorEvent","reason","pathArray","vaultService","tabControl","getActiveComponent"],"sourceRoot":""}