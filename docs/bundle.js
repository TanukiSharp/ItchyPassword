!function(t){var e={};function n(r){if(e[r])return e[r].exports;var i=e[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)n.d(r,i,function(e){return t[e]}.bind(null,i));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=0)}([function(t,e,n){"use strict";function r(t,e){const n=BigInt(e.length);let r="",i=function(t){const e=t.byteLength,n=new DataView(t,0);let r=0n;for(let t=0;t<e;t+=1)r+=BigInt(n.getUint8(t))*256n**BigInt(t);return r}(t);for(;i>0n;){const t=i%n;i/=n,r+=e[BigInt.asUintN(64,t)]}return r}function i(t){return(new TextEncoder).encode(t).buffer}n.r(e);class a{constructor(t){this.hkdfPurpose=i(t),this._description=`HKDF(PBKDF2, HMAC512) [purpose: ${t}]`}get version(){return 1}get description(){return this._description}async generatePassword(t,e){const n=await l(t,e),r=await crypto.subtle.importKey("raw",n,{name:"HMAC",hash:{name:"SHA-512"}},!1,["sign"]);return await crypto.subtle.sign("HMAC",r,this.hkdfPurpose)}}const o=new Uint8Array([242,207,239,142,19,64,70,73,146,42,222,92,188,136,56,168]).buffer;class s{get version(){return 1}get description(){return"PBKDF2 + AES-GCM"}async encrypt(t,e){const n=new ArrayBuffer(28+t.byteLength),r=new DataView(n,0,12);crypto.getRandomValues(new Uint8Array(n,0,12));const i={name:"AES-GCM",iv:r},a=await crypto.subtle.importKey("raw",await l(e,o),{name:"AES-GCM",length:256},!1,["encrypt"]),s=await crypto.subtle.encrypt(i,a,t);return new Uint8Array(n).set(new Uint8Array(s),12),n}async decrypt(t,e){const n=new DataView(t,0,12),r=new DataView(t,12),i={name:"AES-GCM",iv:n},a=await l(e,o),s=await crypto.subtle.importKey("raw",a,{name:"AES-GCM",length:256},!1,["decrypt"]);return await crypto.subtle.decrypt(i,s,r)}}const u="abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";new a("Password"),new s;async function l(t,e){const n=await crypto.subtle.importKey("raw",t,"PBKDF2",!1,["deriveKey"]),r={name:"PBKDF2",hash:"SHA-512",iterations:1e5,salt:e},i=await crypto.subtle.deriveKey(r,n,{name:"AES-CBC",length:256},!0,["encrypt"]);return await crypto.subtle.exportKey("raw",i)}function c(t=64,e=u){return r(function(t=64){const e=new Uint8Array(t);return crypto.getRandomValues(e).buffer}(t),e)}class d{constructor(t){this.element=t}setText(t,e){this.element.innerHTML=t,this.timeout&&clearTimeout(this.timeout),this.timeout=setTimeout(()=>this.element.innerHTML="",e)}}const p=new a("Password");new s;function y(t){const e=document.getElementById(t);if(null===t)throw new Error(`DOM element '${t}' not found.`);return e}const v="Stores the string in memory and removes it from the UI component. Prevents a physical intruder from copy/pasting the value.",f="Removes the string form memory and re-enables the UI component.",b=y("txtPrivatePart"),h=y("txtPrivatePartConfirmation"),g=y("btnProtect"),m=y("spnProtectedConfirmation"),w=y("txtPath"),P=y("txtPublicPart"),L=y("btnGeneratePublicPart"),S=y("btnClearPublicPart"),M=y("btnCopyPublicPart"),T=y("spnCopyPublicPartFeedback"),x=y("spnPrivatePartSize"),E=y("spnPrivatePartSizeConfirmation"),H=y("numOutputSizeRange"),k=y("numOutputSizeNum"),A=y("txtAlphabet"),C=y("spnAlphabetSize"),O=y("btnResetAlphabet"),D=y("txtResultPassword"),j=y("spnResultPasswordLength"),I=y("btnCopyResultPassword"),K=y("spnCopyResultPasswordFeedback"),F=y("txtParameters"),B=y("txtCustomKeys"),R=64,U="!\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[]^_`abcdefghijklmnopqrstuvwxyz{|}~",V="#D0FFD0",_="#FFD0D0",G=["alphabet","length","public","datetime"];let z,N;function J(){N=P.value.length>0?(new Date).toISOString():void 0}function $(){return void 0!==z?z:b.value}function q(){0!==b.value.length&&(z=b.value,m.innerHTML="Protected",b.value="",h.value="",x.innerHTML="0",E.innerHTML="0",b.disabled=!0,h.disabled=!0,g.innerHTML="Clear and unlock",g.title=f,ct())}function Q(){void 0===z?q():(z=void 0,m.innerHTML="",b.disabled=!1,h.disabled=!1,g.innerHTML="Protect and lock",g.title=v,g.disabled=!0)}H.max=R.toString(),H.value=R.toString(),S.addEventListener("click",()=>{P.value.length>0&&"y"!==prompt("Are you sure you want to clear the public part ?\nType 'y' to accept","")||(P.value="",J(),et())}),L.addEventListener("click",()=>{if(P.value.length>0&&"y"!==prompt("Are you sure you want to generate a new public part ?\nType 'y' to accept",""))return;const t=c();P.value=t,J(),st()}),g.addEventListener("click",()=>{Q()});const W=new d(K),X=new d(T);function Y(t,e,n){e.addEventListener("click",async()=>{await async function(t){try{return await navigator.clipboard.writeText(t),!0}catch(t){return console.error(t.stack||t),!1}}(t.value)?n.setText("Copied",3e3):n.setText('<span style="color: red">Failed to copy</span>',3e3)})}function Z(){j.innerHTML=D.value.length.toString().padStart(2," ")}function tt(t){const e=t.split("");e.sort();for(let t=1;t<e.length;t+=1)if(e[t-1]===e[t])return!1;return!0}function et(){if(!1===ot())return void at();const t=function t(e,n){const r=e.indexOf("/"),i={},a=r>=0?e.substr(0,r):e,o=r>=0?e.substr(r+1):void 0;if(void 0===n){const t={};t[a]=i,n={head:t,tailParent:t,tail:i}}else n.tail[a]=i,n.tailParent=n.tail,n.tail=i;return o?t(o,n):n}(w.value),e=t.tail;e.public=P.value,e.datetime=N;const n=parseInt(k.value,10);n!==R&&(e.length=n);const r=A.value;r!==U&&(e.alphabet=r);const i=function(){if(""===B.value)return{};try{const t=JSON.parse(B.value);return null===t||"Object"!==t.constructor.name?null:t}catch{return null}}();null!==i?B.style.removeProperty("background"):B.style.setProperty("background",_);const a=function(t,e){const n={};if(null!==t)for(const[e,r]of Object.entries(t))!1===G.includes(e)&&(n[e]=r);if(null!==e)for(const[t,r]of Object.entries(e))n[t]=r;return n}(i,e);0===Object.keys(a).length?t.tailParent[Object.keys(t.tailParent)[0]]=null:t.tailParent[Object.keys(t.tailParent)[0]]=a,F.value=JSON.stringify(t.head,void 0,4)}function nt(){k.value=H.value}function rt(){C.innerHTML=A.value.length.toString(),A.value.length.toString().length<2&&(C.innerHTML=C.innerHTML.padStart(2," "))}function it(t){t?A.style.removeProperty("background"):A.style.setProperty("background",_)}function at(){D.value="",F.value="",Z()}function ot(){const t=A.value;return!1!==tt(t)&&!($().length<=0||P.value.length<8||t.length<2)}async function st(){if(et(),!1===ot())return void at();const t=$(),e=P.value,n=i(t),a=i(e),o=r(await p.generatePassword(n,a),A.value);var s,u;D.value=(s=o,u=parseInt(H.value,10),s.length<=u?s:s.substr(0,u)),Z()}async function ut(){A.value=U,rt();const t=tt(A.value);it(t),t&&await st()}!function(t,e){const n=y(e);n.addEventListener("click",()=>{"password"===t.type?(t.type="input",n.innerHTML="Hide"):(t.type="password",n.innerHTML="View")})}(D,"btnViewResultPassword"),Y(P,M,X),Y(D,I,W),H.addEventListener("input",()=>{nt(),st()}),k.addEventListener("input",()=>{!function(){const t=parseInt(H.min,10),e=parseInt(k.value,10),n=parseInt(H.max,10);H.value=Math.max(t,Math.min(e,n)).toString()}(),nt(),st()}),A.addEventListener("input",()=>{const t=tt(A.value);it(t),!1!==t&&(rt(),st())}),O.addEventListener("click",()=>{ut(),rt(),st()});const lt=new class{constructor(t,e){this.action=t,this.delay=e}reset(t){void 0!==this.timeout&&clearTimeout(this.timeout);const e=void 0!==t?t:this.delay;this.timeout=setTimeout(()=>{this.action(),this.timeout=void 0},e)}}(q,6e4);function ct(){h.value===b.value?h.style.setProperty("background",V):h.style.setProperty("background",_)}b.addEventListener("input",()=>{g.disabled=0===b.value.length,x.innerHTML=b.value.length.toString(),ct(),st(),lt.reset()}),h.addEventListener("input",()=>{E.innerHTML=h.value.length.toString(),ct()}),w.addEventListener("input",()=>{et()}),P.addEventListener("input",()=>{J(),et(),st()}),B.addEventListener("input",()=>{et()}),nt(),ut(),ct(),g.title=v}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,