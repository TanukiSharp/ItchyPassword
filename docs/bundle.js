!function(t){var e={};function n(r){if(e[r])return e[r].exports;var i=e[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)n.d(r,i,function(e){return t[e]}.bind(null,i));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=0)}([function(t,e,n){"use strict";function r(t){return(new TextEncoder).encode(t)}function i(t,e){const n=BigInt(e.length);let r="",i=function(t){const e=t.byteLength,n=new DataView(t,0);let r=0n;for(let t=0;t<e;t+=1)r+=BigInt(n.getUint8(t))*256n**BigInt(t);return r}(t);for(;i>0n;){const t=i%n;i/=n,r+=e[BigInt.asUintN(64,t)]}return r}n.r(e);const a="PBKDF2",o="abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";function u(t){const e=document.getElementById(t);if(null===t)throw new Error(`DOM element '${t}' not found.`);return e}const l=u("txtPrivatePart"),s=u("txtPrivatePartConfirmation"),c=u("btnProtect"),d=u("btnClearProtected"),v=u("spnProtectedConfirmation"),f=u("txtPath"),p=u("txtPublicPart"),y=u("btnGeneratePublicPart"),b=u("spnPrivatePartSize"),h=u("spnPrivatePartSizeConfirmation"),g=u("numOutputSizeRange"),m=u("numOutputSizeNum"),P=u("txtAlphabet"),w=u("spnAlphabetSize"),L=u("btnResetAlphabet"),T=u("txtResultPassword"),S=u("spnResultPasswordLength"),x=u("spnCopyResultPasswordFeedback"),M=u("txtParameters"),E=u("txtCustomKeys"),O=64,k="!\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[]^_`abcdefghijklmnopqrstuvwxyz{|}~",H="#D0FFD0",j="#FFD0D0",C=["alphabet","length","public"];let I;function R(){return void 0!==I?I:l.value}function B(){0!==l.value.length&&(I=l.value,v.innerHTML=`Protected, ${I.length} characters`,l.value="",s.value="",b.innerHTML="0",h.innerHTML="0",Q())}function D(){I=void 0,v.innerHTML=""}g.max=O.toString(),g.value=O.toString(),y.addEventListener("click",()=>{const t=function(t=64,e=o){const n=new Uint8Array(t);return crypto.getRandomValues(n),i(n.buffer,o)}();p.value=t,G()}),c.addEventListener("click",()=>{B()}),d.addEventListener("click",()=>{D(),G()});const F=new class{constructor(t){this.element=t}setText(t,e){this.element.innerHTML=t,this.timeout&&clearTimeout(this.timeout),this.timeout=setTimeout(()=>this.element.innerHTML="",e)}}(x);function A(){S.innerHTML=T.value.length.toString().padStart(2," ")}var K;function z(t){const e=t.split("");e.sort();for(let t=1;t<e.length;t+=1)if(e[t-1]===e[t])return!1;return!0}function _(){if(!1===J())return void(M.value="");const t=function t(e,n){const r=e.indexOf("/"),i={},a=r>=0?e.substr(0,r):e,o=r>=0?e.substr(r+1):void 0;if(void 0===n){const t={};t[a]=i,n={head:t,tailParent:t,tail:i}}else n.tail[a]=i,n.tailParent=n.tail,n.tail=i;return o?t(o,n):n}(f.value),e=t.tail;e.public=p.value;const n=parseInt(m.value,10);n!==O&&(e.length=n);const r=P.value;r!==k&&(e.alphabet=r);const i=function(){if(""===E.value)return{};try{const t=JSON.parse(E.value);return null===t||"Object"!==t.constructor.name?null:t}catch{return null}}();null!==i?E.style.removeProperty("background"):E.style.setProperty("background",j);const a=function(t,e){const n={};if(null!=t)for(const[e,r]of Object.entries(t))!1===C.includes(e)&&(n[e]=r);if(null!=e)for(const[t,r]of Object.entries(e))n[t]=r;return n}(i,e);0===Object.keys(a).length?t.tailParent[Object.keys(t.tailParent)[0]]=null:t.tailParent[Object.keys(t.tailParent)[0]]=a,M.value=JSON.stringify(t.head,void 0,4)}function N(){m.value=g.value}function V(){w.innerHTML=P.value.length.toString(),P.value.length.toString().length<2&&(w.innerHTML=w.innerHTML.padStart(2," "))}function U(t){t?P.style.removeProperty("background"):P.style.setProperty("background",j)}function J(){const t=P.value;return!1!==z(t)&&!(R().length<=0||p.value.length<8||t.length<2)}async function G(){if(_(),!1===J())return T.value="",void A();const t=i(await async function(t,e){const n=r(e);if(n.length<8)throw new Error("Public key must be at least 8 bytes long.");const i=await crypto.subtle.importKey("raw",r(t),a,!1,["deriveKey"]),o={name:a,hash:"SHA-512",iterations:1e5,salt:n},u=await crypto.subtle.deriveKey(o,i,{name:"AES-CBC",length:256},!0,["encrypt"]);return await crypto.subtle.exportKey("raw",u)}(R(),p.value),P.value);var e,n;T.value=(e=t,n=parseInt(g.value,10),e.length<=n?e:e.substr(0,n)),A()}async function $(){P.value=k,V();const t=z(P.value);U(t),t&&await G()}!function(t,e){const n=u(e);n.addEventListener("click",()=>{"password"===t.type?(t.type="input",n.innerHTML="Hide"):(t.type="password",n.innerHTML="View")})}(T,"btnViewResultPassword"),K=T,u("btnCopyResultPassword").addEventListener("click",async()=>{await async function(t){try{return await navigator.clipboard.writeText(t),!0}catch(t){return console.error(t.stack||t),!1}}(K.value)?F.setText("Copied",3e3):F.setText('<span style="color: red">Failed to copy</span>',3e3)}),g.addEventListener("input",()=>{N(),G()}),m.addEventListener("input",()=>{!function(){const t=parseInt(g.min,10),e=parseInt(m.value,10),n=parseInt(g.max,10);g.value=Math.max(t,Math.min(e,n)).toString()}(),N(),G()}),P.addEventListener("input",()=>{const t=z(P.value);U(t),!1!==t&&(V(),G())}),L.addEventListener("click",()=>{$(),V(),G()});const q=new class{constructor(t,e){this.action=t,this.delay=e}reset(t){null==this.timeout&&clearTimeout(this.timeout);const e=null!=t?t:this.delay;this.timeout=setTimeout(()=>{this.action(),this.timeout=void 0},e)}}(B,6e4);function Q(){s.value===l.value?s.style.setProperty("background",H):s.style.setProperty("background",j)}l.addEventListener("input",()=>{D(),b.innerHTML=l.value.length.toString(),Q(),G(),q.reset()}),s.addEventListener("input",()=>{h.innerHTML=s.value.length.toString(),Q()}),f.addEventListener("input",()=>{_()}),p.addEventListener("input",()=>{_(),G()}),E.addEventListener("input",()=>{_()}),N(),$(),Q()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,