!function(t){var e={};function n(r){if(e[r])return e[r].exports;var i=e[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)n.d(r,i,function(e){return t[e]}.bind(null,i));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=0)}([function(t,e,n){"use strict";function r(t){const e=document.getElementById(t);if(null===t)throw new Error(`DOM element '${t}' not found.`);return e}n.r(e);const i="#D0FFD0",a="#FFD0D0";const o="Stores the string in memory and removes it from the UI component. Prevents a physical intruder from copy/pasting the value.",s="Removes the string form memory and re-enables the UI component.",u=r("txtPrivatePart"),c=r("txtPrivatePartConfirmation"),l=r("btnProtect"),d=r("spnProtectedConfirmation"),p=r("spnPrivatePartSize"),y=r("spnPrivatePartSizeConfirmation");let v,b=[];function f(){return void 0!==v?v:u.value}function h(){0!==u.value.length&&(v=u.value,d.innerHTML="Protected",u.value="",c.value="",p.innerHTML="0",y.innerHTML="0",u.disabled=!0,c.disabled=!0,l.innerHTML="Clear and unlock",l.title=s,w())}function g(){void 0===v?h():(v=void 0,d.innerHTML="",u.disabled=!1,c.disabled=!1,l.innerHTML="Protect and lock",l.title=o,l.disabled=!0)}l.addEventListener("click",()=>{g()});const m=new class{constructor(t,e){this.action=t,this.delay=e}reset(t){void 0!==this.timeout&&clearTimeout(this.timeout);const e=void 0!==t?t:this.delay;this.timeout=setTimeout(()=>{this.action(),this.timeout=void 0},e)}}(h,6e4);function w(){c.value===u.value?c.style.setProperty("background",i):c.style.setProperty("background",a)}function P(t,e){const n=BigInt(e.length);let r="",i=function(t){const e=t.byteLength,n=new DataView(t,0);let r=0n;for(let t=0;t<e;t+=1)r+=BigInt(n.getUint8(t))*256n**BigInt(t);return r}(t);for(;i>0n;){const t=i%n;i/=n,r+=e[BigInt.asUintN(64,t)]}return r}u.addEventListener("input",()=>{let t;for(t of(l.disabled=0===u.value.length,p.innerHTML=u.value.length.toString(),w(),b))t();m.reset()}),c.addEventListener("input",()=>{y.innerHTML=c.value.length.toString(),w()}),w(),l.title=o;const T="abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";async function L(t,e){const n=await crypto.subtle.importKey("raw",t,"PBKDF2",!1,["deriveKey"]),r={name:"PBKDF2",hash:"SHA-512",iterations:1e5,salt:e},i=await crypto.subtle.deriveKey(r,n,{name:"AES-CBC",length:256},!0,["encrypt"]);return await crypto.subtle.exportKey("raw",i)}function S(t=64,e=T){return P(function(t=64){const e=new Uint8Array(t);return crypto.getRandomValues(e).buffer}(t),e)}function M(t){return(new TextEncoder).encode(t).buffer}class x{constructor(t){this.element=t}setText(t,e){this.element.innerHTML=t,this.timeout&&clearTimeout(this.timeout),this.timeout=setTimeout(()=>this.element.innerHTML="",e)}}var A;A=ut,b.push(A);const C=new class{constructor(t){this.hkdfPurpose=M(t),this._description=`HKDF(PBKDF2, HMAC512) [purpose: ${t}]`}get version(){return 1}get description(){return this._description}async generatePassword(t,e){const n=await L(t,e),r=await crypto.subtle.importKey("raw",n,{name:"HMAC",hash:{name:"SHA-512"}},!1,["sign"]);return await crypto.subtle.sign("HMAC",r,this.hkdfPurpose)}}("Password"),E=r("txtPath"),k=r("txtPublicPart"),H=r("btnGeneratePublicPart"),O=r("btnClearPublicPart"),I=r("btnCopyPublicPart"),D=r("spnCopyPublicPartFeedback"),j=r("numOutputSizeRange"),K=r("numOutputSizeNum"),F=r("txtAlphabet"),B=r("spnAlphabetSize"),U=r("btnResetAlphabet"),R=r("txtResultPassword"),_=r("spnResultPasswordLength"),V=r("btnCopyResultPassword"),G=r("spnCopyResultPasswordFeedback"),N=r("txtParameters"),z=r("txtCustomKeys"),J=64,$="!\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[]^_`abcdefghijklmnopqrstuvwxyz{|}~",q=["alphabet","length","public","datetime"];let Q;function W(){Q=k.value.length>0?(new Date).toISOString():void 0}j.max=J.toString(),j.value=J.toString(),O.addEventListener("click",()=>{k.value.length>0&&"y"!==prompt("Are you sure you want to clear the public part ?\nType 'y' to accept","")||(k.value="",W(),nt())}),H.addEventListener("click",()=>{if(k.value.length>0&&"y"!==prompt("Are you sure you want to generate a new public part ?\nType 'y' to accept",""))return;const t=S();k.value=t,W(),ut()});const X=new x(G),Y=new x(D);function Z(t,e,n){e.addEventListener("click",async()=>{await async function(t){try{return await navigator.clipboard.writeText(t),!0}catch(t){return console.error(t.stack||t),!1}}(t.value)?n.setText("Copied",3e3):n.setText('<span style="color: red">Failed to copy</span>',3e3)})}function tt(){_.innerHTML=R.value.length.toString().padStart(2," ")}function et(t){const e=t.split("");e.sort();for(let t=1;t<e.length;t+=1)if(e[t-1]===e[t])return!1;return!0}function nt(){if(!1===st())return void ot();const t=function t(e,n){const r=e.indexOf("/"),i={},a=r>=0?e.substr(0,r):e,o=r>=0?e.substr(r+1):void 0;if(void 0===n){const t={};t[a]=i,n={head:t,tailParent:t,tail:i}}else n.tail[a]=i,n.tailParent=n.tail,n.tail=i;return o?t(o,n):n}(E.value),e=t.tail;e.public=k.value,e.datetime=Q;const n=parseInt(K.value,10);n!==J&&(e.length=n);const r=F.value;r!==$&&(e.alphabet=r);const i=function(){if(""===z.value)return{};try{const t=JSON.parse(z.value);return null===t||"Object"!==t.constructor.name?null:t}catch{return null}}();null!==i?z.style.removeProperty("background"):z.style.setProperty("background",a);const o=function(t,e){const n={};if(null!==t)for(const[e,r]of Object.entries(t))!1===q.includes(e)&&(n[e]=r);if(null!==e)for(const[t,r]of Object.entries(e))n[t]=r;return n}(i,e);0===Object.keys(o).length?t.tailParent[Object.keys(t.tailParent)[0]]=null:t.tailParent[Object.keys(t.tailParent)[0]]=o,N.value=JSON.stringify(t.head,void 0,4)}function rt(){K.value=j.value}function it(){B.innerHTML=F.value.length.toString(),F.value.length.toString().length<2&&(B.innerHTML=B.innerHTML.padStart(2," "))}function at(t){t?F.style.removeProperty("background"):F.style.setProperty("background",a)}function ot(){R.value="",N.value="",tt()}function st(){const t=F.value;return!1!==et(t)&&!(f().length<=0||k.value.length<8||t.length<2)}async function ut(){if(nt(),!1===st())return void ot();const t=f(),e=k.value,n=M(t),r=M(e),i=P(await C.generatePassword(n,r),F.value);var a,o;R.value=(a=i,o=parseInt(j.value,10),a.length<=o?a:a.substr(0,o)),tt()}async function ct(){F.value=$,it();const t=et(F.value);at(t),t&&await ut()}!function(t,e){const n=r(e);n.addEventListener("click",()=>{"password"===t.type?(t.type="input",n.innerHTML="Hide"):(t.type="password",n.innerHTML="View")})}(R,"btnViewResultPassword"),Z(k,I,Y),Z(R,V,X),j.addEventListener("input",()=>{rt(),ut()}),K.addEventListener("input",()=>{!function(){const t=parseInt(j.min,10),e=parseInt(K.value,10),n=parseInt(j.max,10);j.value=Math.max(t,Math.min(e,n)).toString()}(),rt(),ut()}),F.addEventListener("input",()=>{const t=et(F.value);at(t),!1!==t&&(it(),ut())}),U.addEventListener("click",()=>{ct(),it(),ut()}),E.addEventListener("input",()=>{nt()}),k.addEventListener("input",()=>{W(),nt(),ut()}),z.addEventListener("input",()=>{nt()}),rt(),ct();const lt=new Uint8Array([242,207,239,142,19,64,70,73,146,42,222,92,188,136,56,168]).buffer;const dt=new class{get version(){return 1}get description(){return"PBKDF2 + AES-GCM"}async encrypt(t,e){const n=new ArrayBuffer(28+t.byteLength),r=new DataView(n,0,12);crypto.getRandomValues(new Uint8Array(n,0,12));const i={name:"AES-GCM",iv:r},a=await crypto.subtle.importKey("raw",await L(e,lt),{name:"AES-GCM",length:256},!1,["encrypt"]),o=await crypto.subtle.encrypt(i,a,t);return new Uint8Array(n).set(new Uint8Array(o),12),n}async decrypt(t,e){const n=new DataView(t,0,12),r=new DataView(t,12),i={name:"AES-GCM",iv:n},a=await L(e,lt),o=await crypto.subtle.importKey("raw",a,{name:"AES-GCM",length:256},!1,["decrypt"]);return await crypto.subtle.decrypt(i,o,r)}},pt=r("txtCipherSource"),yt=r("txtCipherTarget"),vt=r("btnEncrypt"),bt=r("btnDecrypt");vt.addEventListener("click",async()=>{if(0===pt.value.length)return;const t=f();if(0===t.length)return;const e=M(pt.value),n=M(t),r=await dt.encrypt(e,n);yt.value=function(t){return Array.prototype.map.call(new Uint8Array(t),t=>("00"+t.toString(16)).slice(-2)).join("")}(r)}),bt.addEventListener("click",async()=>{if(0===pt.value.length)return;const t=f();if(0===t.length)return;const e=function(t){t.length%2!=0&&(t="0"+t);const e=new Uint8Array(t.length/2);for(let n=0;n<e.byteLength;n+=1)e[n]=parseInt(t.substr(2*n,2),16);return e.buffer}(pt.value),n=M(t),r=await dt.decrypt(e,n);yt.value=function(t){return(new TextDecoder).decode(t)}(r)});const ft=r("btnTabNothing"),ht=r("btnTabPasswords"),gt=r("btnTabCiphers");new class{constructor(t){this.tabs=t,this._activeTabIndex=-1;for(let e=0;e<this.tabs.length;e+=1)t[e].button.addEventListener("click",()=>{this.setActiveTab(e)});this.setActiveTab(0)}get activeTabIndex(){return this._activeTabIndex}set activeTabIndex(t){if(t<0||t>=this.tabs.length)throw new Error(`Argument 'index' out of range. Must be in range [0;${this.tabs.length-1}].`);this.setActiveTab(t)}setActiveTab(t){let e;for(e of this.tabs)e.button.style.removeProperty("font-weight"),e.button.style.setProperty("color","#C0C0C0"),e.content.style.setProperty("display","none");this.tabs[t].button.style.setProperty("font-weight","bold"),this.tabs[t].button.style.removeProperty("color"),this.tabs[t].content.style.removeProperty("display"),this._activeTabIndex=t}}([{button:ft,content:r("divTabNothing")},{button:ht,content:r("divTabPasswords")},{button:gt,content:r("divTabCiphers")}]),r("version").innerHTML="7192505f263f567880af0f931fa6a358c0c20cb8".substr(0,11)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,