!function(t){var e={};function n(r){if(e[r])return e[r].exports;var i=e[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)n.d(r,i,function(e){return t[e]}.bind(null,i));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=0)}([function(t,e,n){"use strict";function r(t){return(new TextEncoder).encode(t).buffer}function i(t,e){const n=BigInt(e.length);let r="",i=function(t){const e=t.byteLength,n=new DataView(t,0);let r=0n;for(let t=0;t<e;t+=1)r+=BigInt(n.getUint8(t))*256n**BigInt(t);return r}(t);for(;i>0n;){const t=i%n;i/=n,r+=e[BigInt.asUintN(64,t)]}return r}n.r(e);const a="abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";new Uint8Array([242,207,239,142,19,64,70,73,146,42,222,92,188,136,56,168]).buffer;async function o(t,e){const n=await crypto.subtle.importKey("raw",t,"PBKDF2",!1,["deriveKey"]),r={name:"PBKDF2",hash:"SHA-512",iterations:1e5,salt:e},i=await crypto.subtle.deriveKey(r,n,{name:"AES-CBC",length:256},!0,["encrypt"]);return await crypto.subtle.exportKey("raw",i)}function u(t=64,e=a){return i(function(t=64){const e=new Uint8Array(t);return crypto.getRandomValues(e).buffer}(t),e)}class l{constructor(t){this.element=t}setText(t,e){this.element.innerHTML=t,this.timeout&&clearTimeout(this.timeout),this.timeout=setTimeout(()=>this.element.innerHTML="",e)}}function s(t){const e=document.getElementById(t);if(null===t)throw new Error(`DOM element '${t}' not found.`);return e}const c=s("txtPrivatePart"),d=s("txtPrivatePartConfirmation"),p=s("btnProtect"),v=s("spnProtectedConfirmation"),f=s("txtPath"),y=s("txtPublicPart"),b=s("btnGeneratePublicPart"),g=s("btnClearPublicPart"),h=s("btnCopyPublicPart"),P=s("spnCopyPublicPartFeedback"),m=s("spnPrivatePartSize"),w=s("spnPrivatePartSizeConfirmation"),L=s("numOutputSizeRange"),T=s("numOutputSizeNum"),M=s("txtAlphabet"),S=s("spnAlphabetSize"),x=s("btnResetAlphabet"),H=s("txtResultPassword"),k=s("spnResultPasswordLength"),O=s("btnCopyResultPassword"),E=s("spnCopyResultPasswordFeedback"),C=s("txtParameters"),j=s("txtCustomKeys"),A=64,I="!\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[]^_`abcdefghijklmnopqrstuvwxyz{|}~",F="#D0FFD0",B="#FFD0D0",D=["alphabet","length","public"];let K;function R(){return void 0!==K?K:c.value}function z(){0!==c.value.length&&(K=c.value,v.innerHTML="Protected",c.value="",d.value="",m.innerHTML="0",w.innerHTML="0",c.disabled=!0,d.disabled=!0,p.innerHTML="Clear and unlock",nt())}function _(){void 0===K?z():(K=void 0,v.innerHTML="",c.disabled=!1,d.disabled=!1,p.innerHTML="Protect and lock")}L.max=A.toString(),L.value=A.toString(),g.addEventListener("click",()=>{y.value.length>0&&"y"!==prompt("Are you sure you want to clear the public part ?\nType 'y' to accept","")||(y.value="",q())}),b.addEventListener("click",()=>{if(y.value.length>0&&"y"!==prompt("Are you sure you want to generate a new public part ?\nType 'y' to accept",""))return;const t=u();y.value=t,$()}),p.addEventListener("click",()=>{_()});const N=new l(E),U=new l(P);function V(t,e,n){e.addEventListener("click",async()=>{await async function(t){try{return await navigator.clipboard.writeText(t),!0}catch(t){return console.error(t.stack||t),!1}}(t.value)?n.setText("Copied",3e3):n.setText('<span style="color: red">Failed to copy</span>',3e3)})}function J(){k.innerHTML=H.value.length.toString().padStart(2," ")}function G(t){const e=t.split("");e.sort();for(let t=1;t<e.length;t+=1)if(e[t-1]===e[t])return!1;return!0}function q(){if(!1===Z())return void Y();const t=function t(e,n){const r=e.indexOf("/"),i={},a=r>=0?e.substr(0,r):e,o=r>=0?e.substr(r+1):void 0;if(void 0===n){const t={};t[a]=i,n={head:t,tailParent:t,tail:i}}else n.tail[a]=i,n.tailParent=n.tail,n.tail=i;return o?t(o,n):n}(f.value),e=t.tail;e.public=y.value;const n=parseInt(T.value,10);n!==A&&(e.length=n);const r=M.value;r!==I&&(e.alphabet=r);const i=function(){if(""===j.value)return{};try{const t=JSON.parse(j.value);return null===t||"Object"!==t.constructor.name?null:t}catch{return null}}();null!==i?j.style.removeProperty("background"):j.style.setProperty("background",B);const a=function(t,e){const n={};if(null!==t)for(const[e,r]of Object.entries(t))!1===D.includes(e)&&(n[e]=r);if(null!==e)for(const[t,r]of Object.entries(e))n[t]=r;return n}(i,e);0===Object.keys(a).length?t.tailParent[Object.keys(t.tailParent)[0]]=null:t.tailParent[Object.keys(t.tailParent)[0]]=a,C.value=JSON.stringify(t.head,void 0,4)}function Q(){T.value=L.value}function W(){S.innerHTML=M.value.length.toString(),M.value.length.toString().length<2&&(S.innerHTML=S.innerHTML.padStart(2," "))}function X(t){t?M.style.removeProperty("background"):M.style.setProperty("background",B)}function Y(){H.value="",C.value="",J()}function Z(){const t=M.value;return!1!==G(t)&&!(R().length<=0||y.value.length<8||t.length<2)}async function $(){if(q(),!1===Z())return void Y();const t=R(),e=y.value,n=r(t),a=r(e),u=i(await async function(t,e,n){const i=await o(t,e),a=await crypto.subtle.importKey("raw",i,{name:"HMAC",hash:{name:"SHA-512"}},!1,["sign"]);return await crypto.subtle.sign("HMAC",a,r(n))}(n,a,"Password"),M.value);var l,s;H.value=(l=u,s=parseInt(L.value,10),l.length<=s?l:l.substr(0,s)),J()}async function tt(){M.value=I,W();const t=G(M.value);X(t),t&&await $()}!function(t,e){const n=s(e);n.addEventListener("click",()=>{"password"===t.type?(t.type="input",n.innerHTML="Hide"):(t.type="password",n.innerHTML="View")})}(H,"btnViewResultPassword"),V(y,h,U),V(H,O,N),L.addEventListener("input",()=>{Q(),$()}),T.addEventListener("input",()=>{!function(){const t=parseInt(L.min,10),e=parseInt(T.value,10),n=parseInt(L.max,10);L.value=Math.max(t,Math.min(e,n)).toString()}(),Q(),$()}),M.addEventListener("input",()=>{const t=G(M.value);X(t),!1!==t&&(W(),$())}),x.addEventListener("click",()=>{tt(),W(),$()});const et=new class{constructor(t,e){this.action=t,this.delay=e}reset(t){void 0!==this.timeout&&clearTimeout(this.timeout);const e=void 0!==t?t:this.delay;this.timeout=setTimeout(()=>{this.action(),this.timeout=void 0},e)}}(z,6e4);function nt(){d.value===c.value?d.style.setProperty("background",F):d.style.setProperty("background",B)}c.addEventListener("input",()=>{p.disabled=0===c.value.length,m.innerHTML=c.value.length.toString(),nt(),$(),et.reset()}),d.addEventListener("input",()=>{w.innerHTML=d.value.length.toString(),nt()}),f.addEventListener("input",()=>{q()}),y.addEventListener("input",()=>{q(),$()}),j.addEventListener("input",()=>{q()}),Q(),tt(),nt()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,