!function(t){var e={};function n(r){if(e[r])return e[r].exports;var i=e[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)n.d(r,i,function(e){return t[e]}.bind(null,i));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=0)}([function(t,e,n){"use strict";function r(t,e){const n=BigInt(e.length);let r="",i=function(t){const e=t.byteLength,n=new DataView(t,0);let r=0n;for(let t=0;t<e;t+=1)r+=BigInt(n.getUint8(t))*256n**BigInt(t);return r}(t);for(;i>0n;){const t=i%n;i/=n,r+=e[BigInt.asUintN(64,t)]}return r}function i(t){return(new TextEncoder).encode(t).buffer}n.r(e);class a{constructor(t){this.hkdfPurpose=i(t),this._description=`HKDF(PBKDF2, HMAC512) [purpose: ${t}]`}get version(){return 1}get description(){return this._description}async generatePassword(t,e){const n=await c(t,e),r=await crypto.subtle.importKey("raw",n,{name:"HMAC",hash:{name:"SHA-512"}},!1,["sign"]);return await crypto.subtle.sign("HMAC",r,this.hkdfPurpose)}}const o=new Uint8Array([242,207,239,142,19,64,70,73,146,42,222,92,188,136,56,168]).buffer;class s{get version(){return 1}get description(){return"PBKDF2 + AES-GCM"}async encrypt(t,e){const n=new ArrayBuffer(28+t.byteLength),r=new DataView(n,0,12);crypto.getRandomValues(new Uint8Array(n,0,12));const i={name:"AES-GCM",iv:r},a=await crypto.subtle.importKey("raw",await c(e,o),{name:"AES-GCM",length:256},!1,["encrypt"]),s=await crypto.subtle.encrypt(i,a,t);return new Uint8Array(n).set(new Uint8Array(s),12),n}async decrypt(t,e){const n=new DataView(t,0,12),r=new DataView(t,12),i={name:"AES-GCM",iv:n},a=await c(e,o),s=await crypto.subtle.importKey("raw",a,{name:"AES-GCM",length:256},!1,["decrypt"]);return await crypto.subtle.decrypt(i,s,r)}}const u="abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";new a("Password"),new s;async function c(t,e){const n=await crypto.subtle.importKey("raw",t,"PBKDF2",!1,["deriveKey"]),r={name:"PBKDF2",hash:"SHA-512",iterations:1e5,salt:e},i=await crypto.subtle.deriveKey(r,n,{name:"AES-CBC",length:256},!0,["encrypt"]);return await crypto.subtle.exportKey("raw",i)}function l(t=64,e=u){return r(function(t=64){const e=new Uint8Array(t);return crypto.getRandomValues(e).buffer}(t),e)}class d{constructor(t){this.element=t}setText(t,e){this.element.innerHTML=t,this.timeout&&clearTimeout(this.timeout),this.timeout=setTimeout(()=>this.element.innerHTML="",e)}}const p=new a("Password"),y=new s;function v(t){const e=document.getElementById(t);if(null===t)throw new Error(`DOM element '${t}' not found.`);return e}const f="Stores the string in memory and removes it from the UI component. Prevents a physical intruder from copy/pasting the value.",b="Removes the string form memory and re-enables the UI component.",h=v("txtPrivatePart"),g=v("txtPrivatePartConfirmation"),w=v("btnProtect"),m=v("spnProtectedConfirmation"),P=v("txtPath"),T=v("txtPublicPart"),L=v("btnGeneratePublicPart"),S=v("btnClearPublicPart"),M=v("btnCopyPublicPart"),A=v("spnCopyPublicPartFeedback"),C=v("spnPrivatePartSize"),E=v("spnPrivatePartSizeConfirmation"),x=v("numOutputSizeRange"),k=v("numOutputSizeNum"),H=v("txtAlphabet"),O=v("spnAlphabetSize"),D=v("btnResetAlphabet"),j=v("txtResultPassword"),I=v("spnResultPasswordLength"),K=v("btnCopyResultPassword"),F=v("spnCopyResultPasswordFeedback"),B=v("txtParameters"),U=v("txtCustomKeys"),R=v("btnTabNothing"),V=v("btnTabPasswords"),_=v("btnTabCiphers"),G=v("divTabNothing"),N=v("divTabPasswords"),z=v("divTabCiphers"),J=v("txtCipherSource"),$=v("txtCipherTarget"),q=v("btnEncrypt"),Q=v("btnDecrypt"),W=64,X="!\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[]^_`abcdefghijklmnopqrstuvwxyz{|}~",Y="#D0FFD0",Z="#FFD0D0",tt=["alphabet","length","public","datetime"];x.max=W.toString(),x.value=W.toString();new class{constructor(t){let e;for(e of(this.tabs=t,this.tabs)){const t=e;t.button.addEventListener("click",()=>{this.setActiveTab(t)})}this.setActiveTab(t[0])}setActiveTab(t){let e;for(e of this.tabs)e.button.style.removeProperty("font-weight"),e.button.style.setProperty("color","#C0C0C0"),e.content.style.setProperty("display","none");t.button.style.setProperty("font-weight","bold"),t.button.style.removeProperty("color"),t.content.style.removeProperty("display")}}([{button:R,content:G},{button:V,content:N},{button:_,content:z}]);let et,nt;function rt(){nt=T.value.length>0?(new Date).toISOString():void 0}function it(){return void 0!==et?et:h.value}function at(){0!==h.value.length&&(et=h.value,m.innerHTML="Protected",h.value="",g.value="",C.innerHTML="0",E.innerHTML="0",h.disabled=!0,g.disabled=!0,w.innerHTML="Clear and unlock",w.title=b,Pt())}function ot(){void 0===et?at():(et=void 0,m.innerHTML="",h.disabled=!1,g.disabled=!1,w.innerHTML="Protect and lock",w.title=f,w.disabled=!0)}q.addEventListener("click",async()=>{if(0===J.value.length)return;const t=it();if(0===t.length)return;const e=i(J.value),n=i(t),r=await y.encrypt(e,n);$.value=function(t){return Array.prototype.map.call(new Uint8Array(t),t=>("00"+t.toString(16)).slice(-2)).join("")}(r)}),Q.addEventListener("click",async()=>{if(0===J.value.length)return;const t=it();if(0===t.length)return;const e=function(t){t.length%2!=0&&(t="0"+t);const e=new Uint8Array(t.length/2);for(let n=0;n<e.byteLength;n+=1)e[n]=parseInt(t.substr(2*n,2),16);return e.buffer}(J.value),n=i(t),r=await y.decrypt(e,n);$.value=function(t){return(new TextDecoder).decode(t)}(r)}),S.addEventListener("click",()=>{T.value.length>0&&"y"!==prompt("Are you sure you want to clear the public part ?\nType 'y' to accept","")||(T.value="",rt(),pt())}),L.addEventListener("click",()=>{if(T.value.length>0&&"y"!==prompt("Are you sure you want to generate a new public part ?\nType 'y' to accept",""))return;const t=l();T.value=t,rt(),gt()}),w.addEventListener("click",()=>{ot()});const st=new d(F),ut=new d(A);function ct(t,e,n){e.addEventListener("click",async()=>{await async function(t){try{return await navigator.clipboard.writeText(t),!0}catch(t){return console.error(t.stack||t),!1}}(t.value)?n.setText("Copied",3e3):n.setText('<span style="color: red">Failed to copy</span>',3e3)})}function lt(){I.innerHTML=j.value.length.toString().padStart(2," ")}function dt(t){const e=t.split("");e.sort();for(let t=1;t<e.length;t+=1)if(e[t-1]===e[t])return!1;return!0}function pt(){if(!1===ht())return void bt();const t=function t(e,n){const r=e.indexOf("/"),i={},a=r>=0?e.substr(0,r):e,o=r>=0?e.substr(r+1):void 0;if(void 0===n){const t={};t[a]=i,n={head:t,tailParent:t,tail:i}}else n.tail[a]=i,n.tailParent=n.tail,n.tail=i;return o?t(o,n):n}(P.value),e=t.tail;e.public=T.value,e.datetime=nt;const n=parseInt(k.value,10);n!==W&&(e.length=n);const r=H.value;r!==X&&(e.alphabet=r);const i=function(){if(""===U.value)return{};try{const t=JSON.parse(U.value);return null===t||"Object"!==t.constructor.name?null:t}catch{return null}}();null!==i?U.style.removeProperty("background"):U.style.setProperty("background",Z);const a=function(t,e){const n={};if(null!==t)for(const[e,r]of Object.entries(t))!1===tt.includes(e)&&(n[e]=r);if(null!==e)for(const[t,r]of Object.entries(e))n[t]=r;return n}(i,e);0===Object.keys(a).length?t.tailParent[Object.keys(t.tailParent)[0]]=null:t.tailParent[Object.keys(t.tailParent)[0]]=a,B.value=JSON.stringify(t.head,void 0,4)}function yt(){k.value=x.value}function vt(){O.innerHTML=H.value.length.toString(),H.value.length.toString().length<2&&(O.innerHTML=O.innerHTML.padStart(2," "))}function ft(t){t?H.style.removeProperty("background"):H.style.setProperty("background",Z)}function bt(){j.value="",B.value="",lt()}function ht(){const t=H.value;return!1!==dt(t)&&!(it().length<=0||T.value.length<8||t.length<2)}async function gt(){if(pt(),!1===ht())return void bt();const t=it(),e=T.value,n=i(t),a=i(e),o=r(await p.generatePassword(n,a),H.value);var s,u;j.value=(s=o,u=parseInt(x.value,10),s.length<=u?s:s.substr(0,u)),lt()}async function wt(){H.value=X,vt();const t=dt(H.value);ft(t),t&&await gt()}!function(t,e){const n=v(e);n.addEventListener("click",()=>{"password"===t.type?(t.type="input",n.innerHTML="Hide"):(t.type="password",n.innerHTML="View")})}(j,"btnViewResultPassword"),ct(T,M,ut),ct(j,K,st),x.addEventListener("input",()=>{yt(),gt()}),k.addEventListener("input",()=>{!function(){const t=parseInt(x.min,10),e=parseInt(k.value,10),n=parseInt(x.max,10);x.value=Math.max(t,Math.min(e,n)).toString()}(),yt(),gt()}),H.addEventListener("input",()=>{const t=dt(H.value);ft(t),!1!==t&&(vt(),gt())}),D.addEventListener("click",()=>{wt(),vt(),gt()});const mt=new class{constructor(t,e){this.action=t,this.delay=e}reset(t){void 0!==this.timeout&&clearTimeout(this.timeout);const e=void 0!==t?t:this.delay;this.timeout=setTimeout(()=>{this.action(),this.timeout=void 0},e)}}(at,6e4);function Pt(){g.value===h.value?g.style.setProperty("background",Y):g.style.setProperty("background",Z)}h.addEventListener("input",()=>{w.disabled=0===h.value.length,C.innerHTML=h.value.length.toString(),Pt(),gt(),mt.reset()}),g.addEventListener("input",()=>{E.innerHTML=g.value.length.toString(),Pt()}),P.addEventListener("input",()=>{pt()}),T.addEventListener("input",()=>{rt(),pt(),gt()}),U.addEventListener("input",()=>{pt()}),yt(),wt(),Pt(),w.title=f}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FycmF5VXRpbHMudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3N0cmluZ1V0aWxzLnRzIiwid2VicGFjazovLy8uL3NyYy9wYXNzd29yZEdlbmVyYXRvcnMvdjEudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NpcGhlcnMvdjEudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NyeXB0by50cyIsIndlYnBhY2s6Ly8vLi9zcmMvVmlzdWFsRmVlZGJhY2sudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3VpLnRzIiwid2VicGFjazovLy8uL3NyYy9UYWJDb250cm9sLnRzIiwid2VicGFjazovLy8uL3NyYy9UaW1lZEFjdGlvbi50cyJdLCJuYW1lcyI6WyJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiZXhwb3J0cyIsIm1vZHVsZSIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsInRvQ3VzdG9tQmFzZSIsImJ5dGVzIiwiYWxwaGFiZXQiLCJhbHBoYWJldExlbmd0aCIsIkJpZ0ludCIsImxlbmd0aCIsInJlc3VsdCIsIm51bWJlciIsImFycmF5QnVmZmVyIiwiYnl0ZUxlbmd0aCIsImFycmF5VmlldyIsIkRhdGFWaWV3IiwiZ2V0VWludDgiLCJhcnJheUJ1ZmZlclRvVW5zaWduZWRCaWdJbnQiLCJyZW1haW5kZXIiLCJhc1VpbnROIiwic3RyaW5nVG9BcnJheSIsInN0ciIsIlRleHRFbmNvZGVyIiwiZW5jb2RlIiwiYnVmZmVyIiwiaGtkZlB1cnBvc2UiLCJ0aGlzIiwiX2Rlc2NyaXB0aW9uIiwicHJpdmF0ZVBhcnQiLCJwdWJsaWNQYXJ0IiwiZGVyaXZlZEtleSIsImdldERlcml2ZWRCeXRlcyIsImhrZGZLZXkiLCJjcnlwdG8iLCJzdWJ0bGUiLCJpbXBvcnRLZXkiLCJoYXNoIiwic2lnbiIsImVuY3J5cHRpb25LZXlEZXJpdmF0aW9uU2FsdCIsIlVpbnQ4QXJyYXkiLCJpbnB1dCIsInBhc3N3b3JkIiwib3V0cHV0IiwiQXJyYXlCdWZmZXIiLCJub25jZSIsImdldFJhbmRvbVZhbHVlcyIsImFlc0djbVBhcmFtcyIsIml2IiwicGFzc3dvcmRLZXkiLCJlbmNyeXB0Iiwic2V0IiwicGF5bG9hZCIsImRlY3J5cHQiLCJCQVNFNjJfQUxQSEFCRVQiLCJhc3luYyIsInNhbHQiLCJiYXNlS2V5IiwiYWxnb3JpdGhtIiwiaXRlcmF0aW9ucyIsImRlcml2ZUtleSIsImV4cG9ydEtleSIsImdlbmVyYXRlUmFuZG9tU3RyaW5nIiwiYnl0ZUNvdW50IiwiYXJyYXkiLCJnZW5lcmF0ZVJhbmRvbUJ5dGVzIiwiVmlzdWFsRmVlZGJhY2siLCJlbGVtZW50IiwidGV4dCIsImR1cmF0aW9uIiwiaW5uZXJIVE1MIiwidGltZW91dCIsImNsZWFyVGltZW91dCIsInNldFRpbWVvdXQiLCJwYXNzd29yZEdlbmVyYXRvciIsImNpcGhlciIsImdldEVsZW1lbnRCeUlkIiwiZWxlbWVudE5hbWUiLCJkb2N1bWVudCIsIkVycm9yIiwiYnRuUHJvdGVjdFRpdGxlRm9yUHJvdGVjdCIsImJ0blByb3RlY3RUaXRsZUZvckNsZWFyIiwidHh0UHJpdmF0ZVBhcnQiLCJ0eHRQcml2YXRlUGFydENvbmZpcm1hdGlvbiIsImJ0blByb3RlY3QiLCJzcG5Qcm90ZWN0ZWRDb25maXJtYXRpb24iLCJ0eHRQYXRoIiwidHh0UHVibGljUGFydCIsImJ0bkdlbmVyYXRlUHVibGljUGFydCIsImJ0bkNsZWFyUHVibGljUGFydCIsImJ0bkNvcHlQdWJsaWNQYXJ0Iiwic3BuQ29weVB1YmxpY1BhcnRGZWVkYmFjayIsInNwblByaXZhdGVQYXJ0U2l6ZSIsInNwblByaXZhdGVQYXJ0U2l6ZUNvbmZpcm1hdGlvbiIsIm51bU91dHB1dFNpemVSYW5nZSIsIm51bU91dHB1dFNpemVOdW0iLCJ0eHRBbHBoYWJldCIsInNwbkFscGhhYmV0U2l6ZSIsImJ0blJlc2V0QWxwaGFiZXQiLCJ0eHRSZXN1bHRQYXNzd29yZCIsInNwblJlc3VsdFBhc3N3b3JkTGVuZ3RoIiwiYnRuQ29weVJlc3VsdFBhc3N3b3JkIiwic3BuQ29weVJlc3VsdFBhc3N3b3JkRmVlZGJhY2siLCJ0eHRQYXJhbWV0ZXJzIiwidHh0Q3VzdG9tS2V5cyIsImJ0blRhYk5vdGhpbmciLCJidG5UYWJQYXNzd29yZHMiLCJidG5UYWJDaXBoZXJzIiwiZGl2VGFiTm90aGluZyIsImRpdlRhYlBhc3N3b3JkcyIsImRpdlRhYkNpcGhlcnMiLCJ0eHRDaXBoZXJTb3VyY2UiLCJ0eHRDaXBoZXJUYXJnZXQiLCJidG5FbmNyeXB0IiwiYnRuRGVjcnlwdCIsIkRFRkFVTFRfTEVOR1RIIiwiREVGQVVMVF9BTFBIQUJFVCIsIlNVQ0NFU1NfQ09MT1IiLCJFUlJPUl9DT0xPUiIsIlJFU0VSVkVEX0tFWVMiLCJtYXgiLCJ0b1N0cmluZyIsInRhYnMiLCJ0YWJJbmZvIiwibG9jYWxUYWJJbmZvIiwiYnV0dG9uIiwiYWRkRXZlbnRMaXN0ZW5lciIsInNldEFjdGl2ZVRhYiIsImFjdGl2ZVRhYkluZm8iLCJzdHlsZSIsInJlbW92ZVByb3BlcnR5Iiwic2V0UHJvcGVydHkiLCJjb250ZW50IiwicGFzc3dvcmRQdWJsaWNQYXJ0TGFzdENoYW5nZSIsInVwZGF0ZVBhc3N3b3JkUHVibGljUGFydExhc3RVcGRhdGUiLCJEYXRlIiwidG9JU09TdHJpbmciLCJ1bmRlZmluZWQiLCJnZXRQcml2YXRlUGFydCIsInByb3RlY3RBbmRMb2NrUHJpdmF0ZVBhcnQiLCJkaXNhYmxlZCIsInRpdGxlIiwidXBkYXRlUHJpdmF0ZVBhcnRzTWF0Y2hpbmciLCJ0b2dnbGVQcml2YXRlUGFydFByb3RlY3Rpb24iLCJlbmNyeXB0ZWQiLCJBcnJheSIsIm1hcCIsIngiLCJzbGljZSIsImpvaW4iLCJwYXJzZUludCIsInN1YnN0ciIsImRlY3J5cHRlZCIsIlRleHREZWNvZGVyIiwiZGVjb2RlIiwicHJvbXB0IiwidXBkYXRlUGFzc3dvcmRHZW5lcmF0aW9uUGFyYW1ldGVycyIsInJhbmRvbVN0cmluZyIsInJ1biIsImNvcHlSZXN1bHRQYXNzd29yZFRvQ2xpcGJvYXJkRmVlZGJhY2tPYmplY3QiLCJjb3B5UHVibGljUGFydFRvQ2xpcGJvYXJkRmVlZGJhY2tPYmplY3QiLCJzZXR1cENvcHlCdXR0b24iLCJ0eHQiLCJmZWVkYmFjayIsIm5hdmlnYXRvciIsImNsaXBib2FyZCIsIndyaXRlVGV4dCIsImVycm9yIiwiY29uc29sZSIsInN0YWNrIiwid3JpdGVUb0NsaXBib2FyZCIsInNldFRleHQiLCJ1cGRhdGVSZXN1bHRQYXNzd29yZExlbmd0aCIsInBhZFN0YXJ0IiwiaXNBbHBoYWJldFZhbGlkIiwic29ydGVkQWxwaGFiZXQiLCJzcGxpdCIsInNvcnQiLCJjYW5SdW4iLCJjbGVhck91dHB1dHMiLCJjaGFpbkluZm8iLCJwYXRoVG9PYmplY3RDaGFpbiIsInBhdGgiLCJzZXBhcmF0b3JJbmRleCIsImluZGV4T2YiLCJ0YWlsIiwiZmlyc3RQYXRoIiwicmVtYWluaW5nUGF0aCIsIm5vZGUiLCJoZWFkIiwidGFpbFBhcmVudCIsImxlYWYiLCJwdWJsaWMiLCJkYXRldGltZSIsIm51bWVyaWNWYWx1ZSIsImN1c3RvbUtleXMiLCJvYmoiLCJKU09OIiwicGFyc2UiLCJjb25zdHJ1Y3RvciIsInBhcnNlQ3VzdG9tS2V5cyIsInJlc3VsdFBhcmFtZXRlcnMiLCJzb3VyY2UiLCJ0YXJnZXQiLCJlbnRyaWVzIiwiaW5jbHVkZXMiLCJzaGFsbG93TWVyZ2UiLCJrZXlzIiwic3RyaW5naWZ5IiwidXBkYXRlT3V0cHV0U2l6ZVJhbmdlVG9OdW0iLCJ1cGRhdGVBbHBoYWJldFNpemUiLCJ1cGRhdGVBbHBoYWJldFZhbGlkaXR5RGlzcGxheSIsInByaXZhdGVQYXJ0U3RyaW5nIiwicHVibGljUGFydFN0cmluZyIsInByaXZhdGVQcml2YXRlQnl0ZXMiLCJwdWJsaWNQYXJ0Qnl0ZXMiLCJrZXlTdHJpbmciLCJnZW5lcmF0ZVBhc3N3b3JkIiwicmVzZXRBbHBoYWJldCIsImlzQWxwaGFiZXRWYWxpZFJlc3VsdCIsImJ1dHRvbk5hbWUiLCJidG4iLCJ0eXBlIiwic2V0dXBWaWV3QnV0dG9uIiwibWluIiwidmFsIiwiTWF0aCIsInVwZGF0ZU91dHB1dFNpemVOdW1Ub1JhbmdlIiwicHJvdGVjdFByaXZhdGVQYXJ0QWN0aW9uIiwiYWN0aW9uIiwiZGVsYXkiLCJvdmVycmlkZURlbGF5IiwicmVzZXQiXSwibWFwcGluZ3MiOiJhQUNFLElBQUlBLEVBQW1CLEdBR3ZCLFNBQVNDLEVBQW9CQyxHQUc1QixHQUFHRixFQUFpQkUsR0FDbkIsT0FBT0YsRUFBaUJFLEdBQVVDLFFBR25DLElBQUlDLEVBQVNKLEVBQWlCRSxHQUFZLENBQ3pDRyxFQUFHSCxFQUNISSxHQUFHLEVBQ0hILFFBQVMsSUFVVixPQU5BSSxFQUFRTCxHQUFVTSxLQUFLSixFQUFPRCxRQUFTQyxFQUFRQSxFQUFPRCxRQUFTRixHQUcvREcsRUFBT0UsR0FBSSxFQUdKRixFQUFPRCxRQUtmRixFQUFvQlEsRUFBSUYsRUFHeEJOLEVBQW9CUyxFQUFJVixFQUd4QkMsRUFBb0JVLEVBQUksU0FBU1IsRUFBU1MsRUFBTUMsR0FDM0NaLEVBQW9CYSxFQUFFWCxFQUFTUyxJQUNsQ0csT0FBT0MsZUFBZWIsRUFBU1MsRUFBTSxDQUFFSyxZQUFZLEVBQU1DLElBQUtMLEtBS2hFWixFQUFvQmtCLEVBQUksU0FBU2hCLEdBQ1gsb0JBQVhpQixRQUEwQkEsT0FBT0MsYUFDMUNOLE9BQU9DLGVBQWViLEVBQVNpQixPQUFPQyxZQUFhLENBQUVDLE1BQU8sV0FFN0RQLE9BQU9DLGVBQWVi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QixNQUFNK0osT0FBMEI3RixJQUFsQjhGLEVBQThCQSxFQUFnQjVNLEtBQUsyTSxNQUVqRTNNLEtBQUs0QyxRQUFVRSxXQUFXLEtBQ3RCOUMsS0FBSzBNLFNBQ0wxTSxLQUFLNEMsYUFBVWtFLEdBQ2hCNkYsS0ZzaEJtRDNGLEdBMWRkLEtBcWVoRCxTQUFTRyxLQUNEM0QsRUFBMkI3RixRQUFVNEYsRUFBZTVGLE1BQ3BENkYsRUFBMkI4QyxNQUFNRSxZQUFZLGFBQWNkLEdBRTNEbEMsRUFBMkI4QyxNQUFNRSxZQUFZLGFBQWNiLEdBYm5FcEMsRUFBZTRDLGlCQUFpQixRQUFTLEtBQ3JDMUMsRUFBV3dELFNBQTJDLElBQWhDMUQsRUFBZTVGLE1BQU1vQixPQUUzQ2tGLEVBQW1CdEIsVUFBWVksRUFBZTVGLE1BQU1vQixPQUFPK0csV0FDM0RxQixLQUNBZ0IsS0FDQXNFLEdBQXlCSSxVQVc3QnJKLEVBQTJCMkMsaUJBQWlCLFFBQVMsS0FDakRqQyxFQUErQnZCLFVBQVlhLEVBQTJCN0YsTUFBTW9CLE9BQU8rRyxXQUNuRnFCLE9BR0p4RCxFQUFRd0MsaUJBQWlCLFFBQVMsS0FDOUI4QixPQUdKckUsRUFBY3VDLGlCQUFpQixRQUFTLEtBQ3BDUSxLQUNBc0IsS0FDQUUsT0FHSnRELEVBQWNzQixpQkFBaUIsUUFBUyxLQUNwQzhCLE9BR0pxRCxLQUNBUyxLQUNBNUUsS0FDQTFELEVBQVd5RCxNQUFRN0QiLCJmaWxlIjoiYnVuZGxlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDApO1xuIiwiZXhwb3J0IGZ1bmN0aW9uIGFycmF5VG9TdHJpbmcoYXJyYXk6IEFycmF5QnVmZmVyKTogc3RyaW5nIHtcbiAgICBjb25zdCBkZWNvZGVyID0gbmV3IFRleHREZWNvZGVyKC8qJ3V0Zi04JyovKTtcbiAgICByZXR1cm4gZGVjb2Rlci5kZWNvZGUoYXJyYXkpO1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIGNvcHkoc291cmNlOiBVaW50OEFycmF5LCBzb3VyY2VJbmRleDogbnVtYmVyLCB0YXJnZXQ6IFVpbnQ4QXJyYXksIHRhcmdldEluZGV4OiBudW1iZXIsIGxlbmd0aDogbnVtYmVyKTogdm9pZCB7XG4gICAgZm9yIChsZXQgaTogbnVtYmVyID0gMDsgaSA8IGxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIHRhcmdldFtpICsgdGFyZ2V0SW5kZXhdID0gc291cmNlW2kgKyBzb3VyY2VJbmRleF07XG4gICAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gYXJyYXlCdWZmZXJUb1Vuc2lnbmVkQmlnSW50KGFycmF5QnVmZmVyOiBBcnJheUJ1ZmZlcik6IGJpZ2ludCB7XG4gICAgY29uc3QgbGVuZ3RoOiBudW1iZXIgPSBhcnJheUJ1ZmZlci5ieXRlTGVuZ3RoO1xuICAgIGNvbnN0IGFycmF5VmlldzogRGF0YVZpZXcgPSBuZXcgRGF0YVZpZXcoYXJyYXlCdWZmZXIsIDApO1xuXG4gICAgbGV0IHJlc3VsdDogYmlnaW50ID0gMG47XG5cbiAgICBmb3IgKGxldCBpOiBudW1iZXIgPSAwOyBpIDwgbGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgcmVzdWx0ICs9IEJpZ0ludChhcnJheVZpZXcuZ2V0VWludDgoaSkpICogKDI1Nm4gKiogQmlnSW50KGkpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdG9DdXN0b21CYXNlKGJ5dGVzOiBBcnJheUJ1ZmZlciwgYWxwaGFiZXQ6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgY29uc3QgYWxwaGFiZXRMZW5ndGg6IGJpZ2ludCA9IEJpZ0ludChhbHBoYWJldC5sZW5ndGgpO1xuXG4gICAgbGV0IHJlc3VsdDogc3RyaW5nID0gJyc7XG4gICAgbGV0IG51bWJlcjogYmlnaW50ID0gYXJyYXlCdWZmZXJUb1Vuc2lnbmVkQmlnSW50KGJ5dGVzKTtcblxuICAgIHdoaWxlIChudW1iZXIgPiAwbilcbiAgICB7XG4gICAgICAgIGNvbnN0IHJlbWFpbmRlcjogYmlnaW50ID0gbnVtYmVyICUgYWxwaGFiZXRMZW5ndGg7XG4gICAgICAgIG51bWJlciAvPSBhbHBoYWJldExlbmd0aDtcblxuICAgICAgICBjb25zdCBpbmRleDogbnVtYmVyID0gPG51bWJlcj48YW55PkJpZ0ludC5hc1VpbnROKDY0LCByZW1haW5kZXIpO1xuXG4gICAgICAgIHJlc3VsdCArPSBhbHBoYWJldFtpbmRleF07XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRvQmFzZTE2KGJ1ZmZlcjogQXJyYXlCdWZmZXIpOiBzdHJpbmcge1xuICAgIHJldHVybiBBcnJheS5wcm90b3R5cGUubWFwLmNhbGwoXG4gICAgICAgIG5ldyBVaW50OEFycmF5KGJ1ZmZlciksXG4gICAgICAgIHggPT4gKCcwMCcgKyB4LnRvU3RyaW5nKDE2KSkuc2xpY2UoLTIpXG4gICAgKS5qb2luKCcnKTtcbn1cbiIsImV4cG9ydCBmdW5jdGlvbiB0cnVuY2F0ZShpbnB1dDogc3RyaW5nLCBsZW5ndGg6IG51bWJlcik6IHN0cmluZyB7XG4gICAgaWYgKGlucHV0Lmxlbmd0aCA8PSBsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIGlucHV0O1xuICAgIH1cblxuICAgIHJldHVybiBpbnB1dC5zdWJzdHIoMCwgbGVuZ3RoKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHN0cmluZ1RvQXJyYXkoc3RyOiBzdHJpbmcpOiBBcnJheUJ1ZmZlciB7XG4gICAgY29uc3QgZW5jb2RlciA9IG5ldyBUZXh0RW5jb2RlcigvKid1dGYtOCcqLyk7XG4gICAgcmV0dXJuIGVuY29kZXIuZW5jb2RlKHN0cikuYnVmZmVyO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZnJvbUJhc2UxNihzdHI6IHN0cmluZyk6IEFycmF5QnVmZmVyIHtcbiAgICBpZiAoc3RyLmxlbmd0aCAlIDIgIT09IDApIHtcbiAgICAgICAgc3RyID0gJzAnICsgc3RyO1xuICAgIH1cblxuICAgIGNvbnN0IHJlc3VsdDogVWludDhBcnJheSA9IG5ldyBVaW50OEFycmF5KHN0ci5sZW5ndGggLyAyKTtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcmVzdWx0LmJ5dGVMZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICByZXN1bHRbaV0gPSBwYXJzZUludChzdHIuc3Vic3RyKGkgKiAyLCAyKSwgMTYpO1xuICAgIH1cblxuICAgIHJldHVybiByZXN1bHQuYnVmZmVyO1xufVxuIiwiaW1wb3J0IHsgc3RyaW5nVG9BcnJheSB9IGZyb20gJy4uL3N0cmluZ1V0aWxzJztcbmltcG9ydCB7IElQYXNzd29yZEdlbmVyYXRvciwgZ2V0RGVyaXZlZEJ5dGVzIH0gZnJvbSAnLi4vY3J5cHRvJztcblxuZXhwb3J0IGNsYXNzIFBhc3N3b3JkR2VuZXJhdG9yVjEgaW1wbGVtZW50cyBJUGFzc3dvcmRHZW5lcmF0b3Ige1xuICAgIHByaXZhdGUgaGtkZlB1cnBvc2U6IEFycmF5QnVmZmVyO1xuICAgIHByaXZhdGUgX2Rlc2NyaXB0aW9uOiBzdHJpbmc7XG5cbiAgICBwdWJsaWMgY29uc3RydWN0b3IoaGtkZlB1cnBvc2U6IHN0cmluZykge1xuICAgICAgICB0aGlzLmhrZGZQdXJwb3NlID0gc3RyaW5nVG9BcnJheShoa2RmUHVycG9zZSk7XG4gICAgICAgIHRoaXMuX2Rlc2NyaXB0aW9uID0gYEhLREYoUEJLREYyLCBITUFDNTEyKSBbcHVycG9zZTogJHtoa2RmUHVycG9zZX1dYDtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0IHZlcnNpb24oKTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIDE7XG4gICAgfVxuXG4gICAgcHVibGljIGdldCBkZXNjcmlwdGlvbigpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gdGhpcy5fZGVzY3JpcHRpb247XG4gICAgfVxuXG4gICAgcHVibGljIGFzeW5jIGdlbmVyYXRlUGFzc3dvcmQocHJpdmF0ZVBhcnQ6IEFycmF5QnVmZmVyLCBwdWJsaWNQYXJ0OiBBcnJheUJ1ZmZlcik6IFByb21pc2U8QXJyYXlCdWZmZXI+IHtcbiAgICAgICAgY29uc3QgZGVyaXZlZEtleTogQXJyYXlCdWZmZXIgPSBhd2FpdCBnZXREZXJpdmVkQnl0ZXMocHJpdmF0ZVBhcnQsIHB1YmxpY1BhcnQpO1xuXG4gICAgICAgIGNvbnN0IGhtYWNQYXJhbWV0ZXJzOiBIbWFjSW1wb3J0UGFyYW1zID0ge1xuICAgICAgICAgICAgbmFtZTogJ0hNQUMnLFxuICAgICAgICAgICAgaGFzaDogeyBuYW1lOiAnU0hBLTUxMicgfVxuICAgICAgICB9O1xuXG4gICAgICAgIGNvbnN0IGhrZGZLZXk6IENyeXB0b0tleSA9IGF3YWl0IGNyeXB0by5zdWJ0bGUuaW1wb3J0S2V5KFxuICAgICAgICAgICAgJ3JhdycsXG4gICAgICAgICAgICBkZXJpdmVkS2V5LFxuICAgICAgICAgICAgaG1hY1BhcmFtZXRlcnMsXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIFsnc2lnbiddXG4gICAgICAgICk7XG5cbiAgICAgICAgcmV0dXJuIGF3YWl0IGNyeXB0by5zdWJ0bGUuc2lnbignSE1BQycsIGhrZGZLZXksIHRoaXMuaGtkZlB1cnBvc2UpO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IElDaXBoZXIsIGdldERlcml2ZWRCeXRlcyB9IGZyb20gJy4uL2NyeXB0byc7XG5cbmNvbnN0IGVuY3J5cHRpb25LZXlEZXJpdmF0aW9uU2FsdDogQXJyYXlCdWZmZXIgPSBuZXcgVWludDhBcnJheShbIDB4ZjIsIDB4Y2YsIDB4ZWYsIDB4OGUsIDB4MTMsIDB4NDAsIDB4NDYsIDB4NDksIDB4OTIsIDB4MmEsIDB4ZGUsIDB4NWMsIDB4YmMsIDB4ODgsIDB4MzgsIDB4YTggXSkuYnVmZmVyO1xuXG5leHBvcnQgY2xhc3MgQ2lwaGVyVjEgaW1wbGVtZW50cyBJQ2lwaGVyIHtcbiAgICBwdWJsaWMgZ2V0IHZlcnNpb24oKTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIDE7XG4gICAgfVxuXG4gICAgcHVibGljIGdldCBkZXNjcmlwdGlvbigpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gJ1BCS0RGMiArIEFFUy1HQ00nO1xuICAgIH1cblxuICAgIGFzeW5jIGVuY3J5cHQoaW5wdXQ6IEFycmF5QnVmZmVyLCBwYXNzd29yZDogQXJyYXlCdWZmZXIpOiBQcm9taXNlPEFycmF5QnVmZmVyPiB7XG4gICAgICAgIGNvbnN0IG91dHB1dDogQXJyYXlCdWZmZXIgPSBuZXcgQXJyYXlCdWZmZXIoMTIgKyAxNiArIGlucHV0LmJ5dGVMZW5ndGgpO1xuXG4gICAgICAgIGNvbnN0IG5vbmNlOiBEYXRhVmlldyA9IG5ldyBEYXRhVmlldyhvdXRwdXQsIDAsIDEyKTtcbiAgICAgICAgY3J5cHRvLmdldFJhbmRvbVZhbHVlcyhuZXcgVWludDhBcnJheShvdXRwdXQsIDAsIDEyKSk7XG5cbiAgICAgICAgY29uc3QgYWVzR2NtUGFyYW1zOiBBZXNHY21QYXJhbXMgPSB7XG4gICAgICAgICAgICBuYW1lOiAnQUVTLUdDTScsXG4gICAgICAgICAgICBpdjogbm9uY2VcbiAgICAgICAgfTtcblxuICAgICAgICBjb25zdCBhZXNLZXlBbGdvcml0aG06IEFlc0tleUFsZ29yaXRobSA9IHtcbiAgICAgICAgICAgIG5hbWU6ICdBRVMtR0NNJyxcbiAgICAgICAgICAgIGxlbmd0aDogMjU2XG4gICAgICAgIH07XG5cbiAgICAgICAgY29uc3QgcGFzc3dvcmRLZXk6IENyeXB0b0tleSA9IGF3YWl0IGNyeXB0by5zdWJ0bGUuaW1wb3J0S2V5KFxuICAgICAgICAgICAgJ3JhdycsXG4gICAgICAgICAgICBhd2FpdCBnZXREZXJpdmVkQnl0ZXMocGFzc3dvcmQsIGVuY3J5cHRpb25LZXlEZXJpdmF0aW9uU2FsdCksXG4gICAgICAgICAgICBhZXNLZXlBbGdvcml0aG0sXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIFsnZW5jcnlwdCddXG4gICAgICAgICk7XG5cbiAgICAgICAgY29uc3QgcmVzdWx0OiBBcnJheUJ1ZmZlciA9IGF3YWl0IGNyeXB0by5zdWJ0bGUuZW5jcnlwdChhZXNHY21QYXJhbXMsIHBhc3N3b3JkS2V5LCBpbnB1dCk7XG5cbiAgICAgICAgbmV3IFVpbnQ4QXJyYXkob3V0cHV0KS5zZXQobmV3IFVpbnQ4QXJyYXkocmVzdWx0KSwgMTIpO1xuXG4gICAgICAgIHJldHVybiBvdXRwdXQ7XG4gICAgfVxuXG4gICAgYXN5bmMgZGVjcnlwdChpbnB1dDogQXJyYXlCdWZmZXIsIHBhc3N3b3JkOiBBcnJheUJ1ZmZlcik6IFByb21pc2U8QXJyYXlCdWZmZXI+IHtcbiAgICAgICAgY29uc3Qgbm9uY2U6IERhdGFWaWV3ID0gbmV3IERhdGFWaWV3KGlucHV0LCAwLCAxMik7XG4gICAgICAgIGNvbnN0IHBheWxvYWQ6IERhdGFWaWV3ID0gbmV3IERhdGFWaWV3KGlucHV0LCAxMik7XG5cbiAgICAgICAgY29uc3QgYWVzR2NtUGFyYW1zOiBBZXNHY21QYXJhbXMgPSB7XG4gICAgICAgICAgICBuYW1lOiAnQUVTLUdDTScsXG4gICAgICAgICAgICBpdjogbm9uY2VcbiAgICAgICAgfTtcblxuICAgICAgICBjb25zdCBhZXNLZXlBbGdvcml0aG06IEFlc0tleUFsZ29yaXRobSA9IHtcbiAgICAgICAgICAgIG5hbWU6ICdBRVMtR0NNJyxcbiAgICAgICAgICAgIGxlbmd0aDogMjU2XG4gICAgICAgIH07XG5cbiAgICAgICAgY29uc3QgZGVyaXZlZEtleTogQXJyYXlCdWZmZXIgPSBhd2FpdCBnZXREZXJpdmVkQnl0ZXMocGFzc3dvcmQsIGVuY3J5cHRpb25LZXlEZXJpdmF0aW9uU2FsdCk7XG5cbiAgICAgICAgY29uc3QgcGFzc3dvcmRLZXk6IENyeXB0b0tleSA9IGF3YWl0IGNyeXB0by5zdWJ0bGUuaW1wb3J0S2V5KFxuICAgICAgICAgICAgJ3JhdycsXG4gICAgICAgICAgICBkZXJpdmVkS2V5LFxuICAgICAgICAgICAgYWVzS2V5QWxnb3JpdGhtLFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICBbJ2RlY3J5cHQnXVxuICAgICAgICApO1xuXG4gICAgICAgIHJldHVybiBhd2FpdCBjcnlwdG8uc3VidGxlLmRlY3J5cHQoYWVzR2NtUGFyYW1zLCBwYXNzd29yZEtleSwgcGF5bG9hZCk7XG4gICAgfVxufVxuIiwiaW1wb3J0ICogYXMgYXJyYXlVdGlscyBmcm9tICcuL2FycmF5VXRpbHMnO1xuaW1wb3J0IHsgUGFzc3dvcmRHZW5lcmF0b3JWMSB9IGZyb20gJy4vcGFzc3dvcmRHZW5lcmF0b3JzL3YxJztcbmltcG9ydCB7IENpcGhlclYxIH0gZnJvbSAnLi9jaXBoZXJzL3YxJztcblxuZXhwb3J0IGNvbnN0IEJBU0U2Ml9BTFBIQUJFVDogc3RyaW5nID0gJ2FiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6QUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVowMTIzNDU2Nzg5JztcblxuZXhwb3J0IGludGVyZmFjZSBJUGFzc3dvcmRHZW5lcmF0b3Ige1xuICAgIHJlYWRvbmx5IHZlcnNpb246IG51bWJlcjtcbiAgICByZWFkb25seSBkZXNjcmlwdGlvbjogc3RyaW5nO1xuICAgIGdlbmVyYXRlUGFzc3dvcmQocHJpdmF0ZVBhcnQ6IEFycmF5QnVmZmVyLCBwdWJsaWNQYXJ0OiBBcnJheUJ1ZmZlcik6IFByb21pc2U8QXJyYXlCdWZmZXI+O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIElDaXBoZXIge1xuICAgIHJlYWRvbmx5IHZlcnNpb246IG51bWJlcjtcbiAgICByZWFkb25seSBkZXNjcmlwdGlvbjogc3RyaW5nO1xuICAgIGVuY3J5cHQoaW5wdXQ6IEFycmF5QnVmZmVyLCBwYXNzd29yZDogQXJyYXlCdWZmZXIpOiBQcm9taXNlPEFycmF5QnVmZmVyPjtcbiAgICBkZWNyeXB0KGlucHV0OiBBcnJheUJ1ZmZlciwgcGFzc3dvcmQ6IEFycmF5QnVmZmVyKTogUHJvbWlzZTxBcnJheUJ1ZmZlcj47XG59XG5cbmV4cG9ydCBjb25zdCBwYXNzd29yZEdlbmVyYXRvcnM6IElQYXNzd29yZEdlbmVyYXRvcltdID0gW1xuICAgIG5ldyBQYXNzd29yZEdlbmVyYXRvclYxKCdQYXNzd29yZCcpLFxuXTtcblxuZXhwb3J0IGNvbnN0IGNpcGhlcnM6IElDaXBoZXJbXSA9IFtcbiAgICBuZXcgQ2lwaGVyVjEoKSxcbl07XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXREZXJpdmVkQnl0ZXMocGFzc3dvcmQ6IEFycmF5QnVmZmVyLCBzYWx0OiBBcnJheUJ1ZmZlcik6IFByb21pc2U8QXJyYXlCdWZmZXI+IHtcbiAgICBjb25zdCBiYXNlS2V5OiBDcnlwdG9LZXkgPSBhd2FpdCBjcnlwdG8uc3VidGxlLmltcG9ydEtleShcbiAgICAgICAgJ3JhdycsXG4gICAgICAgIHBhc3N3b3JkLFxuICAgICAgICAnUEJLREYyJyxcbiAgICAgICAgZmFsc2UsXG4gICAgICAgIFsnZGVyaXZlS2V5J11cbiAgICApO1xuXG4gICAgY29uc3QgYWxnb3JpdGhtOiBQYmtkZjJQYXJhbXMgPSB7XG4gICAgICAgIG5hbWU6ICdQQktERjInLFxuICAgICAgICBoYXNoOiAnU0hBLTUxMicsXG4gICAgICAgIGl0ZXJhdGlvbnM6IDEwMDAwMCxcbiAgICAgICAgc2FsdFxuICAgIH07XG5cbiAgICBjb25zdCBkZXJpdmVkS2V5VHlwZTogQWVzRGVyaXZlZEtleVBhcmFtcyA9IHtcbiAgICAgICAgbmFtZTogJ0FFUy1DQkMnLFxuICAgICAgICBsZW5ndGg6IDI1NlxuICAgIH07XG5cbiAgICBjb25zdCByZXN1bHQ6IENyeXB0b0tleSA9IGF3YWl0IGNyeXB0by5zdWJ0bGUuZGVyaXZlS2V5KFxuICAgICAgICBhbGdvcml0aG0sXG4gICAgICAgIGJhc2VLZXksXG4gICAgICAgIGRlcml2ZWRLZXlUeXBlLFxuICAgICAgICB0cnVlLFxuICAgICAgICBbJ2VuY3J5cHQnXVxuICAgICk7XG5cbiAgICBjb25zdCBrZXk6IEFycmF5QnVmZmVyID0gYXdhaXQgY3J5cHRvLnN1YnRsZS5leHBvcnRLZXkoJ3JhdycsIHJlc3VsdCk7XG5cbiAgICByZXR1cm4ga2V5O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2VuZXJhdGVSYW5kb21CeXRlcyhieXRlQ291bnQ6IG51bWJlciA9IDY0KTogQXJyYXlCdWZmZXIge1xuICAgIGNvbnN0IGFycmF5OiBVaW50OEFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoYnl0ZUNvdW50KTtcbiAgICByZXR1cm4gY3J5cHRvLmdldFJhbmRvbVZhbHVlcyhhcnJheSkuYnVmZmVyO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2VuZXJhdGVSYW5kb21TdHJpbmcoYnl0ZUNvdW50OiBudW1iZXIgPSA2NCwgYWxwaGFiZXQ6IHN0cmluZyA9IEJBU0U2Ml9BTFBIQUJFVCk6IHN0cmluZyB7XG4gICAgY29uc3QgYXJyYXk6IEFycmF5QnVmZmVyID0gZ2VuZXJhdGVSYW5kb21CeXRlcyhieXRlQ291bnQpO1xuICAgIHJldHVybiBhcnJheVV0aWxzLnRvQ3VzdG9tQmFzZShhcnJheSwgYWxwaGFiZXQpO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgVmlzdWFsRmVlZGJhY2sge1xuICAgIHByaXZhdGUgZWxlbWVudDogSFRNTEVsZW1lbnQ7XG4gICAgcHJpdmF0ZSB0aW1lb3V0OiBudW1iZXIgfCB1bmRlZmluZWQ7XG5cbiAgICBwdWJsaWMgY29uc3RydWN0b3IoZWxlbWVudDogSFRNTEVsZW1lbnQpIHtcbiAgICAgICAgdGhpcy5lbGVtZW50ID0gZWxlbWVudDtcbiAgICB9XG5cbiAgICBwdWJsaWMgc2V0VGV4dCh0ZXh0OiBzdHJpbmcsIGR1cmF0aW9uOiBudW1iZXIpIHtcbiAgICAgICAgdGhpcy5lbGVtZW50LmlubmVySFRNTCA9IHRleHQ7XG4gICAgICAgIGlmICh0aGlzLnRpbWVvdXQpIHtcbiAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aGlzLnRpbWVvdXQpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMudGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4gdGhpcy5lbGVtZW50LmlubmVySFRNTCA9ICcnLCBkdXJhdGlvbik7XG4gICAgfVxufVxuIiwiaW1wb3J0ICogYXMgY3J5cHRvIGZyb20gJy4vY3J5cHRvJztcbmltcG9ydCAqIGFzIHN0cmluZ1V0aWxzIGZyb20gJy4vc3RyaW5nVXRpbHMnO1xuaW1wb3J0ICogYXMgYXJyYXlVdGlscyBmcm9tICcuL2FycmF5VXRpbHMnO1xuXG5pbXBvcnQgVmlzdWFsRmVlZGJhY2sgZnJvbSAnLi9WaXN1YWxGZWVkYmFjayc7XG5pbXBvcnQgVGltZWRBY3Rpb24gZnJvbSAnLi9UaW1lZEFjdGlvbic7XG5pbXBvcnQgeyBQbGFpbk9iamVjdCB9IGZyb20gJy4vUGxhaW5PYmplY3QnO1xuXG5pbXBvcnQgeyBQYXNzd29yZEdlbmVyYXRvclYxIH0gZnJvbSAnLi9wYXNzd29yZEdlbmVyYXRvcnMvdjEnO1xuaW1wb3J0IHsgQ2lwaGVyVjEgfSBmcm9tICcuL2NpcGhlcnMvdjEnO1xuXG5pbXBvcnQgeyBJU3RvcmFnZSB9IGZyb20gJy4vc3RvcmFnZXMvSVN0b3JhZ2UnO1xuaW1wb3J0IHsgR2l0SHViU3RvcmFnZSB9IGZyb20gJy4vc3RvcmFnZXMvR2l0SHViU3RvcmFnZSc7XG5pbXBvcnQgeyBUYWJDb250cm9sIH0gZnJvbSAnLi9UYWJDb250cm9sJztcblxuY29uc3QgcGFzc3dvcmRHZW5lcmF0b3I6IGNyeXB0by5JUGFzc3dvcmRHZW5lcmF0b3IgPSBuZXcgUGFzc3dvcmRHZW5lcmF0b3JWMSgnUGFzc3dvcmQnKTtcbmNvbnN0IGNpcGhlcjogY3J5cHRvLklDaXBoZXIgPSBuZXcgQ2lwaGVyVjEoKTtcblxuZnVuY3Rpb24gZ2V0RWxlbWVudEJ5SWQoZWxlbWVudE5hbWU6IHN0cmluZyk6IEhUTUxJbnB1dEVsZW1lbnQge1xuICAgIGNvbnN0IGVsZW1lbnQ6IEhUTUxFbGVtZW50fG51bGwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChlbGVtZW50TmFtZSk7XG5cbiAgICBpZiAoZWxlbWVudE5hbWUgPT09IG51bGwpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBET00gZWxlbWVudCAnJHtlbGVtZW50TmFtZX0nIG5vdCBmb3VuZC5gKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZWxlbWVudCBhcyBIVE1MSW5wdXRFbGVtZW50O1xufVxuXG5jb25zdCBidG5Qcm90ZWN0VGl0bGVGb3JQcm90ZWN0ID0gJ1N0b3JlcyB0aGUgc3RyaW5nIGluIG1lbW9yeSBhbmQgcmVtb3ZlcyBpdCBmcm9tIHRoZSBVSSBjb21wb25lbnQuIFByZXZlbnRzIGEgcGh5c2ljYWwgaW50cnVkZXIgZnJvbSBjb3B5L3Bhc3RpbmcgdGhlIHZhbHVlLic7XG5jb25zdCBidG5Qcm90ZWN0VGl0bGVGb3JDbGVhciA9ICdSZW1vdmVzIHRoZSBzdHJpbmcgZm9ybSBtZW1vcnkgYW5kIHJlLWVuYWJsZXMgdGhlIFVJIGNvbXBvbmVudC4nO1xuXG5jb25zdCB0eHRQcml2YXRlUGFydDogSFRNTElucHV0RWxlbWVudCA9IGdldEVsZW1lbnRCeUlkKCd0eHRQcml2YXRlUGFydCcpO1xuY29uc3QgdHh0UHJpdmF0ZVBhcnRDb25maXJtYXRpb246IEhUTUxJbnB1dEVsZW1lbnQgPSBnZXRFbGVtZW50QnlJZCgndHh0UHJpdmF0ZVBhcnRDb25maXJtYXRpb24nKTtcbmNvbnN0IGJ0blByb3RlY3Q6IEhUTUxJbnB1dEVsZW1lbnQgPSBnZXRFbGVtZW50QnlJZCgnYnRuUHJvdGVjdCcpO1xuY29uc3Qgc3BuUHJvdGVjdGVkQ29uZmlybWF0aW9uOiBIVE1MSW5wdXRFbGVtZW50ID0gZ2V0RWxlbWVudEJ5SWQoJ3NwblByb3RlY3RlZENvbmZpcm1hdGlvbicpO1xuY29uc3QgdHh0UGF0aDogSFRNTElucHV0RWxlbWVudCA9IGdldEVsZW1lbnRCeUlkKCd0eHRQYXRoJyk7XG5jb25zdCB0eHRQdWJsaWNQYXJ0OiBIVE1MSW5wdXRFbGVtZW50ID0gZ2V0RWxlbWVudEJ5SWQoJ3R4dFB1YmxpY1BhcnQnKTtcbmNvbnN0IGJ0bkdlbmVyYXRlUHVibGljUGFydDogSFRNTElucHV0RWxlbWVudCA9IGdldEVsZW1lbnRCeUlkKCdidG5HZW5lcmF0ZVB1YmxpY1BhcnQnKTtcbmNvbnN0IGJ0bkNsZWFyUHVibGljUGFydDogSFRNTElucHV0RWxlbWVudCA9IGdldEVsZW1lbnRCeUlkKCdidG5DbGVhclB1YmxpY1BhcnQnKTtcbmNvbnN0IGJ0bkNvcHlQdWJsaWNQYXJ0OiBIVE1MSW5wdXRFbGVtZW50ID0gZ2V0RWxlbWVudEJ5SWQoJ2J0bkNvcHlQdWJsaWNQYXJ0Jyk7XG5jb25zdCBzcG5Db3B5UHVibGljUGFydEZlZWRiYWNrOiBIVE1MSW5wdXRFbGVtZW50ID0gZ2V0RWxlbWVudEJ5SWQoJ3NwbkNvcHlQdWJsaWNQYXJ0RmVlZGJhY2snKTtcblxuY29uc3Qgc3BuUHJpdmF0ZVBhcnRTaXplOiBIVE1MSW5wdXRFbGVtZW50ID0gZ2V0RWxlbWVudEJ5SWQoJ3NwblByaXZhdGVQYXJ0U2l6ZScpO1xuY29uc3Qgc3BuUHJpdmF0ZVBhcnRTaXplQ29uZmlybWF0aW9uOiBIVE1MSW5wdXRFbGVtZW50ID0gZ2V0RWxlbWVudEJ5SWQoJ3NwblByaXZhdGVQYXJ0U2l6ZUNvbmZpcm1hdGlvbicpO1xuXG5jb25zdCBudW1PdXRwdXRTaXplUmFuZ2U6IEhUTUxJbnB1dEVsZW1lbnQgPSBnZXRFbGVtZW50QnlJZCgnbnVtT3V0cHV0U2l6ZVJhbmdlJyk7XG5jb25zdCBudW1PdXRwdXRTaXplTnVtOiBIVE1MSW5wdXRFbGVtZW50ID0gZ2V0RWxlbWVudEJ5SWQoJ251bU91dHB1dFNpemVOdW0nKTtcblxuY29uc3QgdHh0QWxwaGFiZXQ6IEhUTUxJbnB1dEVsZW1lbnQgPSBnZXRFbGVtZW50QnlJZCgndHh0QWxwaGFiZXQnKTtcbmNvbnN0IHNwbkFscGhhYmV0U2l6ZTogSFRNTElucHV0RWxlbWVudCA9IGdldEVsZW1lbnRCeUlkKCdzcG5BbHBoYWJldFNpemUnKTtcbmNvbnN0IGJ0blJlc2V0QWxwaGFiZXQ6IEhUTUxJbnB1dEVsZW1lbnQgPSBnZXRFbGVtZW50QnlJZCgnYnRuUmVzZXRBbHBoYWJldCcpO1xuXG5jb25zdCB0eHRSZXN1bHRQYXNzd29yZDogSFRNTElucHV0RWxlbWVudCA9IGdldEVsZW1lbnRCeUlkKCd0eHRSZXN1bHRQYXNzd29yZCcpO1xuY29uc3Qgc3BuUmVzdWx0UGFzc3dvcmRMZW5ndGg6IEhUTUxJbnB1dEVsZW1lbnQgPSBnZXRFbGVtZW50QnlJZCgnc3BuUmVzdWx0UGFzc3dvcmRMZW5ndGgnKTtcbmNvbnN0IGJ0bkNvcHlSZXN1bHRQYXNzd29yZDogSFRNTElucHV0RWxlbWVudCA9IGdldEVsZW1lbnRCeUlkKCdidG5Db3B5UmVzdWx0UGFzc3dvcmQnKTtcbmNvbnN0IHNwbkNvcHlSZXN1bHRQYXNzd29yZEZlZWRiYWNrOiBIVE1MSW5wdXRFbGVtZW50ID0gZ2V0RWxlbWVudEJ5SWQoJ3NwbkNvcHlSZXN1bHRQYXNzd29yZEZlZWRiYWNrJyk7XG5cbmNvbnN0IHR4dFBhcmFtZXRlcnM6IEhUTUxJbnB1dEVsZW1lbnQgPSBnZXRFbGVtZW50QnlJZCgndHh0UGFyYW1ldGVycycpO1xuY29uc3QgdHh0Q3VzdG9tS2V5czogSFRNTElucHV0RWxlbWVudCA9IGdldEVsZW1lbnRCeUlkKCd0eHRDdXN0b21LZXlzJyk7XG5cbmNvbnN0IGJ0blRhYk5vdGhpbmc6IEhUTUxJbnB1dEVsZW1lbnQgPSBnZXRFbGVtZW50QnlJZCgnYnRuVGFiTm90aGluZycpO1xuY29uc3QgYnRuVGFiUGFzc3dvcmRzOiBIVE1MSW5wdXRFbGVtZW50ID0gZ2V0RWxlbWVudEJ5SWQoJ2J0blRhYlBhc3N3b3JkcycpO1xuY29uc3QgYnRuVGFiQ2lwaGVyczogSFRNTElucHV0RWxlbWVudCA9IGdldEVsZW1lbnRCeUlkKCdidG5UYWJDaXBoZXJzJyk7XG5jb25zdCBkaXZUYWJOb3RoaW5nOiBIVE1MSW5wdXRFbGVtZW50ID0gZ2V0RWxlbWVudEJ5SWQoJ2RpdlRhYk5vdGhpbmcnKTtcbmNvbnN0IGRpdlRhYlBhc3N3b3JkczogSFRNTElucHV0RWxlbWVudCA9IGdldEVsZW1lbnRCeUlkKCdkaXZUYWJQYXNzd29yZHMnKTtcbmNvbnN0IGRpdlRhYkNpcGhlcnM6IEhUTUxJbnB1dEVsZW1lbnQgPSBnZXRFbGVtZW50QnlJZCgnZGl2VGFiQ2lwaGVycycpO1xuXG5jb25zdCB0eHRDaXBoZXJTb3VyY2U6IEhUTUxJbnB1dEVsZW1lbnQgPSBnZXRFbGVtZW50QnlJZCgndHh0Q2lwaGVyU291cmNlJyk7XG5jb25zdCB0eHRDaXBoZXJUYXJnZXQ6IEhUTUxJbnB1dEVsZW1lbnQgPSBnZXRFbGVtZW50QnlJZCgndHh0Q2lwaGVyVGFyZ2V0Jyk7XG5jb25zdCBidG5FbmNyeXB0OiBIVE1MSW5wdXRFbGVtZW50ID0gZ2V0RWxlbWVudEJ5SWQoJ2J0bkVuY3J5cHQnKTtcbmNvbnN0IGJ0bkRlY3J5cHQ6IEhUTUxJbnB1dEVsZW1lbnQgPSBnZXRFbGVtZW50QnlJZCgnYnRuRGVjcnlwdCcpO1xuXG5jb25zdCBERUZBVUxUX0xFTkdUSDogbnVtYmVyID0gNjQ7XG5jb25zdCBERUZBVUxUX0FMUEhBQkVUOiBzdHJpbmcgPSAnIVwiIyQlJlxcJygpKissLS4vMDEyMzQ1Njc4OTo7PD0+P0BBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWltdXl9gYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXp7fH1+JztcblxuY29uc3QgUFJJVkFURV9QQVJUX1BST1RFQ1RJT05fVElNRU9VVDogbnVtYmVyID0gNjAgKiAxMDAwO1xuXG5jb25zdCBTVUNDRVNTX0NPTE9SOiBzdHJpbmcgPSAnI0QwRkZEMCc7XG5jb25zdCBFUlJPUl9DT0xPUjogc3RyaW5nID0gJyNGRkQwRDAnO1xuXG5jb25zdCBSRVNFUlZFRF9LRVlTOiBzdHJpbmdbXSA9IFsnYWxwaGFiZXQnLCAnbGVuZ3RoJywgJ3B1YmxpYycsICdkYXRldGltZSddO1xuXG4vLyBkYWZ1cSE/XG5udW1PdXRwdXRTaXplUmFuZ2UubWF4ID0gREVGQVVMVF9MRU5HVEgudG9TdHJpbmcoKTtcbm51bU91dHB1dFNpemVSYW5nZS52YWx1ZSA9IERFRkFVTFRfTEVOR1RILnRvU3RyaW5nKCk7XG5cbi8vIGJ0blRhYlBhc3N3b3Jkcy5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbi8vICAgICBidG5UYWJQYXNzd29yZHMuc3R5bGUuc2V0UHJvcGVydHkoJ2ZvbnQtd2VpZ2h0JywgJ2JvbGQnKTtcbi8vICAgICBidG5UYWJQYXNzd29yZHMuc3R5bGUucmVtb3ZlUHJvcGVydHkoJ2NvbG9yJyk7XG4vLyAgICAgYnRuVGFiQ2lwaGVycy5zdHlsZS5yZW1vdmVQcm9wZXJ0eSgnZm9udC13ZWlnaHQnKTtcbi8vICAgICBidG5UYWJDaXBoZXJzLnN0eWxlLnNldFByb3BlcnR5KCdjb2xvcicsICcjQzBDMEMwJyk7XG4vLyAgICAgZGl2VGFiUGFzc3dvcmRzLnN0eWxlLnJlbW92ZVByb3BlcnR5KCdkaXNwbGF5Jyk7XG4vLyAgICAgZGl2VGFiQ2lwaGVycy5zdHlsZS5zZXRQcm9wZXJ0eSgnZGlzcGxheScsICdub25lJyk7XG4vLyB9KTtcblxuLy8gYnRuVGFiQ2lwaGVycy5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbi8vICAgICBidG5UYWJQYXNzd29yZHMuc3R5bGUucmVtb3ZlUHJvcGVydHkoJ2ZvbnQtd2VpZ2h0Jyk7XG4vLyAgICAgYnRuVGFiUGFzc3dvcmRzLnN0eWxlLnNldFByb3BlcnR5KCdjb2xvcicsICcjQzBDMEMwJyk7XG4vLyAgICAgYnRuVGFiQ2lwaGVycy5zdHlsZS5zZXRQcm9wZXJ0eSgnZm9udC13ZWlnaHQnLCAnYm9sZCcpO1xuLy8gICAgIGJ0blRhYkNpcGhlcnMuc3R5bGUucmVtb3ZlUHJvcGVydHkoJ2NvbG9yJyk7XG4vLyAgICAgZGl2VGFiUGFzc3dvcmRzLnN0eWxlLnNldFByb3BlcnR5KCdkaXNwbGF5JywgJ25vbmUnKTtcbi8vICAgICBkaXZUYWJDaXBoZXJzLnN0eWxlLnJlbW92ZVByb3BlcnR5KCdkaXNwbGF5Jyk7XG4vLyB9KTtcblxuLy8gYnRuVGFiUGFzc3dvcmRzLnN0eWxlLnNldFByb3BlcnR5KCdmb250LXdlaWdodCcsICdib2xkJyk7XG4vLyBidG5UYWJDaXBoZXJzLnN0eWxlLnNldFByb3BlcnR5KCdjb2xvcicsICcjQzBDMEMwJyk7XG5cbmNvbnN0IHRhYkNvbnRyb2w6IFRhYkNvbnRyb2wgPSBuZXcgVGFiQ29udHJvbChbXG4gICAgeyBidXR0b246IGJ0blRhYk5vdGhpbmcsIGNvbnRlbnQ6IGRpdlRhYk5vdGhpbmcgfSxcbiAgICB7IGJ1dHRvbjogYnRuVGFiUGFzc3dvcmRzLCBjb250ZW50OiBkaXZUYWJQYXNzd29yZHMgfSxcbiAgICB7IGJ1dHRvbjogYnRuVGFiQ2lwaGVycywgY29udGVudDogZGl2VGFiQ2lwaGVycyB9XG5dKTtcblxuYnRuRW5jcnlwdC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGFzeW5jICgpID0+IHtcbiAgICBpZiAodHh0Q2lwaGVyU291cmNlLnZhbHVlLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgcHJpdmF0ZVBhcnQ6IHN0cmluZyA9IGdldFByaXZhdGVQYXJ0KCk7XG4gICAgaWYgKHByaXZhdGVQYXJ0Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgaW5wdXQ6IEFycmF5QnVmZmVyID0gc3RyaW5nVXRpbHMuc3RyaW5nVG9BcnJheSh0eHRDaXBoZXJTb3VyY2UudmFsdWUpO1xuICAgIGNvbnN0IHBhc3N3b3JkOiBBcnJheUJ1ZmZlciA9IHN0cmluZ1V0aWxzLnN0cmluZ1RvQXJyYXkocHJpdmF0ZVBhcnQpO1xuXG4gICAgY29uc3QgZW5jcnlwdGVkOiBBcnJheUJ1ZmZlciA9IGF3YWl0IGNpcGhlci5lbmNyeXB0KGlucHV0LCBwYXNzd29yZCk7XG5cbiAgICB0eHRDaXBoZXJUYXJnZXQudmFsdWUgPSBhcnJheVV0aWxzLnRvQmFzZTE2KGVuY3J5cHRlZCk7XG59KTtcblxuYnRuRGVjcnlwdC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGFzeW5jICgpID0+IHtcbiAgICBpZiAodHh0Q2lwaGVyU291cmNlLnZhbHVlLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgcHJpdmF0ZVBhcnQ6IHN0cmluZyA9IGdldFByaXZhdGVQYXJ0KCk7XG4gICAgaWYgKHByaXZhdGVQYXJ0Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgaW5wdXQ6IEFycmF5QnVmZmVyID0gc3RyaW5nVXRpbHMuZnJvbUJhc2UxNih0eHRDaXBoZXJTb3VyY2UudmFsdWUpO1xuICAgIGNvbnN0IHBhc3N3b3JkOiBBcnJheUJ1ZmZlciA9IHN0cmluZ1V0aWxzLnN0cmluZ1RvQXJyYXkocHJpdmF0ZVBhcnQpO1xuXG4gICAgY29uc3QgZGVjcnlwdGVkOiBBcnJheUJ1ZmZlciA9IGF3YWl0IGNpcGhlci5kZWNyeXB0KGlucHV0LCBwYXNzd29yZCk7XG5cbiAgICB0eHRDaXBoZXJUYXJnZXQudmFsdWUgPSBhcnJheVV0aWxzLmFycmF5VG9TdHJpbmcoZGVjcnlwdGVkKTtcbn0pO1xuXG5sZXQgcHJpdmF0ZVBhcnQ6IHN0cmluZyB8IHVuZGVmaW5lZDtcbmxldCBwYXNzd29yZFB1YmxpY1BhcnRMYXN0Q2hhbmdlOiBzdHJpbmcgfCB1bmRlZmluZWQ7XG5cbmJ0bkNsZWFyUHVibGljUGFydC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICBpZiAodHh0UHVibGljUGFydC52YWx1ZS5sZW5ndGggPiAwKSB7XG4gICAgICAgIGlmIChwcm9tcHQoJ0FyZSB5b3Ugc3VyZSB5b3Ugd2FudCB0byBjbGVhciB0aGUgcHVibGljIHBhcnQgP1xcblR5cGUgXFwneVxcJyB0byBhY2NlcHQnLCAnJykgIT09ICd5Jykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdHh0UHVibGljUGFydC52YWx1ZSA9ICcnO1xuXG4gICAgdXBkYXRlUGFzc3dvcmRQdWJsaWNQYXJ0TGFzdFVwZGF0ZSgpO1xuICAgIHVwZGF0ZVBhc3N3b3JkR2VuZXJhdGlvblBhcmFtZXRlcnMoKTtcbn0pO1xuXG5idG5HZW5lcmF0ZVB1YmxpY1BhcnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgaWYgKHR4dFB1YmxpY1BhcnQudmFsdWUubGVuZ3RoID4gMCkge1xuICAgICAgICBpZiAocHJvbXB0KCdBcmUgeW91IHN1cmUgeW91IHdhbnQgdG8gZ2VuZXJhdGUgYSBuZXcgcHVibGljIHBhcnQgP1xcblR5cGUgXFwneVxcJyB0byBhY2NlcHQnLCAnJykgIT09ICd5Jykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgY29uc3QgcmFuZG9tU3RyaW5nOiBzdHJpbmcgPSBjcnlwdG8uZ2VuZXJhdGVSYW5kb21TdHJpbmcoKTtcbiAgICB0eHRQdWJsaWNQYXJ0LnZhbHVlID0gcmFuZG9tU3RyaW5nO1xuXG4gICAgdXBkYXRlUGFzc3dvcmRQdWJsaWNQYXJ0TGFzdFVwZGF0ZSgpO1xuXG4gICAgcnVuKCk7XG59KTtcblxuZnVuY3Rpb24gdXBkYXRlUGFzc3dvcmRQdWJsaWNQYXJ0TGFzdFVwZGF0ZSgpOiB2b2lkIHtcbiAgICBpZiAodHh0UHVibGljUGFydC52YWx1ZS5sZW5ndGggPiAwKSB7XG4gICAgICAgIHBhc3N3b3JkUHVibGljUGFydExhc3RDaGFuZ2UgPSBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcGFzc3dvcmRQdWJsaWNQYXJ0TGFzdENoYW5nZSA9IHVuZGVmaW5lZDtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGdldFByaXZhdGVQYXJ0KCk6IHN0cmluZyB7XG4gICAgaWYgKHByaXZhdGVQYXJ0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIHByaXZhdGVQYXJ0O1xuICAgIH1cbiAgICByZXR1cm4gdHh0UHJpdmF0ZVBhcnQudmFsdWU7XG59XG5cbmZ1bmN0aW9uIHByb3RlY3RBbmRMb2NrUHJpdmF0ZVBhcnQoKTogdm9pZCB7XG4gICAgaWYgKHR4dFByaXZhdGVQYXJ0LnZhbHVlLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgcHJpdmF0ZVBhcnQgPSB0eHRQcml2YXRlUGFydC52YWx1ZTtcbiAgICBzcG5Qcm90ZWN0ZWRDb25maXJtYXRpb24uaW5uZXJIVE1MID0gJ1Byb3RlY3RlZCc7XG5cbiAgICB0eHRQcml2YXRlUGFydC52YWx1ZSA9ICcnO1xuICAgIHR4dFByaXZhdGVQYXJ0Q29uZmlybWF0aW9uLnZhbHVlID0gJyc7XG4gICAgc3BuUHJpdmF0ZVBhcnRTaXplLmlubmVySFRNTCA9ICcwJztcbiAgICBzcG5Qcml2YXRlUGFydFNpemVDb25maXJtYXRpb24uaW5uZXJIVE1MID0gJzAnO1xuXG4gICAgdHh0UHJpdmF0ZVBhcnQuZGlzYWJsZWQgPSB0cnVlO1xuICAgIHR4dFByaXZhdGVQYXJ0Q29uZmlybWF0aW9uLmRpc2FibGVkID0gdHJ1ZTtcblxuICAgIGJ0blByb3RlY3QuaW5uZXJIVE1MID0gJ0NsZWFyIGFuZCB1bmxvY2snO1xuICAgIGJ0blByb3RlY3QudGl0bGUgPSBidG5Qcm90ZWN0VGl0bGVGb3JDbGVhcjtcblxuICAgIHVwZGF0ZVByaXZhdGVQYXJ0c01hdGNoaW5nKCk7XG59XG5cbmZ1bmN0aW9uIGNsZWFyQW5kVW5Mb2NrUHJpdmF0ZVBhcnQoKTogdm9pZCB7XG4gICAgcHJpdmF0ZVBhcnQgPSB1bmRlZmluZWQ7XG4gICAgc3BuUHJvdGVjdGVkQ29uZmlybWF0aW9uLmlubmVySFRNTCA9ICcnO1xuXG4gICAgdHh0UHJpdmF0ZVBhcnQuZGlzYWJsZWQgPSBmYWxzZTtcbiAgICB0eHRQcml2YXRlUGFydENvbmZpcm1hdGlvbi5kaXNhYmxlZCA9IGZhbHNlO1xuXG4gICAgYnRuUHJvdGVjdC5pbm5lckhUTUwgPSAnUHJvdGVjdCBhbmQgbG9jayc7XG4gICAgYnRuUHJvdGVjdC50aXRsZSA9IGJ0blByb3RlY3RUaXRsZUZvclByb3RlY3Q7XG4gICAgYnRuUHJvdGVjdC5kaXNhYmxlZCA9IHRydWU7XG59XG5cbmZ1bmN0aW9uIHRvZ2dsZVByaXZhdGVQYXJ0UHJvdGVjdGlvbigpOiB2b2lkIHtcbiAgICBpZiAocHJpdmF0ZVBhcnQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBwcm90ZWN0QW5kTG9ja1ByaXZhdGVQYXJ0KCk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgY2xlYXJBbmRVbkxvY2tQcml2YXRlUGFydCgpO1xuICAgIH1cbn1cblxuYnRuUHJvdGVjdC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICB0b2dnbGVQcml2YXRlUGFydFByb3RlY3Rpb24oKTtcbn0pO1xuXG5mdW5jdGlvbiB1cGRhdGVDdXN0b21LZXlzRGlzcGxheShpc1ZhbGlkOiBib29sZWFuKTogdm9pZCB7XG4gICAgaWYgKGlzVmFsaWQpIHtcbiAgICAgICAgdHh0Q3VzdG9tS2V5cy5zdHlsZS5yZW1vdmVQcm9wZXJ0eSgnYmFja2dyb3VuZCcpO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdHh0Q3VzdG9tS2V5cy5zdHlsZS5zZXRQcm9wZXJ0eSgnYmFja2dyb3VuZCcsIEVSUk9SX0NPTE9SKTtcbn1cblxuZnVuY3Rpb24gcGFyc2VDdXN0b21LZXlzKCk6IFBsYWluT2JqZWN0IHwgbnVsbCB7XG4gICAgaWYgKHR4dEN1c3RvbUtleXMudmFsdWUgPT09ICcnKSB7XG4gICAgICAgIHJldHVybiB7fTtcbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgICBjb25zdCBvYmo6IGFueSA9IEpTT04ucGFyc2UodHh0Q3VzdG9tS2V5cy52YWx1ZSk7XG4gICAgICAgIGlmIChvYmogPT09IG51bGwgfHwgb2JqLmNvbnN0cnVjdG9yLm5hbWUgIT09ICdPYmplY3QnKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb2JqIGFzIFBsYWluT2JqZWN0O1xuICAgIH0gY2F0Y2gge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIHNoYWxsb3dNZXJnZShzb3VyY2U6IFBsYWluT2JqZWN0IHwgbnVsbCwgdGFyZ2V0OiBQbGFpbk9iamVjdCB8IG51bGwpOiBQbGFpbk9iamVjdCB7XG4gICAgY29uc3QgcmVzdWx0OiBQbGFpbk9iamVjdCA9IHt9O1xuXG4gICAgaWYgKHNvdXJjZSAhPT0gbnVsbCkge1xuICAgICAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhzb3VyY2UpKSB7XG4gICAgICAgICAgICBpZiAoUkVTRVJWRURfS0VZUy5pbmNsdWRlcyhrZXkpID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIHJlc3VsdFtrZXldID0gdmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodGFyZ2V0ICE9PSBudWxsKSB7XG4gICAgICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKHRhcmdldCkpIHtcbiAgICAgICAgICAgIHJlc3VsdFtrZXldID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiBkZWVwTWVyZ2Uoc291cmNlOiBQbGFpbk9iamVjdCwgdGFyZ2V0OiBQbGFpbk9iamVjdCk6IHZvaWQge1xuICAgIGZvciAoY29uc3Qgc291cmNlS2V5IG9mIE9iamVjdC5rZXlzKHNvdXJjZSkpIHtcbiAgICAgICAgY29uc3QgdGFyZ2V0VmFsdWU6IGFueSA9IHRhcmdldFtzb3VyY2VLZXldO1xuICAgICAgICBjb25zdCBzb3VyY2VWYWx1ZTogYW55ID0gc291cmNlW3NvdXJjZUtleV07XG5cbiAgICAgICAgaWYgKHRhcmdldFZhbHVlID09PSB1bmRlZmluZWQgfHxcbiAgICAgICAgICAgIHRhcmdldFZhbHVlID09PSBudWxsIHx8XG4gICAgICAgICAgICB0YXJnZXRWYWx1ZS5jb25zdHJ1Y3Rvci5uYW1lICE9PSAnT2JqZWN0JyB8fFxuICAgICAgICAgICAgc291cmNlVmFsdWUuY29uc3RydWN0b3IubmFtZSAhPT0gJ09iamVjdCcpIHtcbiAgICAgICAgICAgIHRhcmdldFtzb3VyY2VLZXldID0gc291cmNlVmFsdWU7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGRlZXBNZXJnZShzb3VyY2VWYWx1ZSwgdGFyZ2V0VmFsdWUpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gc2V0dXBWaWV3QnV0dG9uKHR4dDogSFRNTElucHV0RWxlbWVudCwgYnV0dG9uTmFtZTogc3RyaW5nKTogdm9pZCB7XG4gICAgY29uc3QgYnRuOiBIVE1MSW5wdXRFbGVtZW50ID0gZ2V0RWxlbWVudEJ5SWQoYnV0dG9uTmFtZSk7XG4gICAgYnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgICBpZiAodHh0LnR5cGUgPT09ICdwYXNzd29yZCcpIHtcbiAgICAgICAgICAgIHR4dC50eXBlID0gJ2lucHV0JztcbiAgICAgICAgICAgIGJ0bi5pbm5lckhUTUwgPSAnSGlkZSc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0eHQudHlwZSA9ICdwYXNzd29yZCc7XG4gICAgICAgICAgICBidG4uaW5uZXJIVE1MID0gJ1ZpZXcnO1xuICAgICAgICB9XG4gICAgfSk7XG59XG5cbmNvbnN0IGNvcHlSZXN1bHRQYXNzd29yZFRvQ2xpcGJvYXJkRmVlZGJhY2tPYmplY3Q6IFZpc3VhbEZlZWRiYWNrID0gbmV3IFZpc3VhbEZlZWRiYWNrKHNwbkNvcHlSZXN1bHRQYXNzd29yZEZlZWRiYWNrKTtcbmNvbnN0IGNvcHlQdWJsaWNQYXJ0VG9DbGlwYm9hcmRGZWVkYmFja09iamVjdDogVmlzdWFsRmVlZGJhY2sgPSBuZXcgVmlzdWFsRmVlZGJhY2soc3BuQ29weVB1YmxpY1BhcnRGZWVkYmFjayk7XG5cbmFzeW5jIGZ1bmN0aW9uIHdyaXRlVG9DbGlwYm9hcmQodGV4dDogc3RyaW5nKTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgdHJ5IHtcbiAgICAgICAgYXdhaXQgbmF2aWdhdG9yLmNsaXBib2FyZC53cml0ZVRleHQodGV4dCk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3Iuc3RhY2sgfHwgZXJyb3IpO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBzZXR1cENvcHlCdXR0b24odHh0OiBIVE1MSW5wdXRFbGVtZW50LCBidXR0b246IEhUTUxJbnB1dEVsZW1lbnQsIGZlZWRiYWNrOiBWaXN1YWxGZWVkYmFjayk6IHZvaWQge1xuICAgIGJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGFzeW5jICgpID0+IHtcbiAgICAgICAgaWYgKGF3YWl0IHdyaXRlVG9DbGlwYm9hcmQodHh0LnZhbHVlKSkge1xuICAgICAgICAgICAgZmVlZGJhY2suc2V0VGV4dCgnQ29waWVkJywgMzAwMCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBmZWVkYmFjay5zZXRUZXh0KCc8c3BhbiBzdHlsZT1cImNvbG9yOiByZWRcIj5GYWlsZWQgdG8gY29weTwvc3Bhbj4nLCAzMDAwKTtcbiAgICAgICAgfVxuICAgIH0pO1xufVxuXG5mdW5jdGlvbiB1cGRhdGVSZXN1bHRQYXNzd29yZExlbmd0aCgpIHtcbiAgICBzcG5SZXN1bHRQYXNzd29yZExlbmd0aC5pbm5lckhUTUwgPSB0eHRSZXN1bHRQYXNzd29yZC52YWx1ZS5sZW5ndGgudG9TdHJpbmcoKS5wYWRTdGFydCgyLCAnICcpO1xufVxuXG5zZXR1cFZpZXdCdXR0b24odHh0UmVzdWx0UGFzc3dvcmQsICdidG5WaWV3UmVzdWx0UGFzc3dvcmQnKTtcblxuc2V0dXBDb3B5QnV0dG9uKHR4dFB1YmxpY1BhcnQsIGJ0bkNvcHlQdWJsaWNQYXJ0LCBjb3B5UHVibGljUGFydFRvQ2xpcGJvYXJkRmVlZGJhY2tPYmplY3QpO1xuc2V0dXBDb3B5QnV0dG9uKHR4dFJlc3VsdFBhc3N3b3JkLCBidG5Db3B5UmVzdWx0UGFzc3dvcmQsIGNvcHlSZXN1bHRQYXNzd29yZFRvQ2xpcGJvYXJkRmVlZGJhY2tPYmplY3QpO1xuXG5mdW5jdGlvbiBpc0FscGhhYmV0VmFsaWQoYWxwaGFiZXQ6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgIGNvbnN0IHNvcnRlZEFscGhhYmV0OiBzdHJpbmdbXSA9IGFscGhhYmV0LnNwbGl0KCcnKTtcbiAgICBzb3J0ZWRBbHBoYWJldC5zb3J0KCk7XG5cbiAgICBmb3IgKGxldCBpOiBudW1iZXIgPSAxOyBpIDwgc29ydGVkQWxwaGFiZXQubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgaWYgKHNvcnRlZEFscGhhYmV0W2kgLSAxXSA9PT0gc29ydGVkQWxwaGFiZXRbaV0pIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0cnVlO1xufVxuXG50eXBlIElDaGFpbkluZm8gPSB7XG4gICAgaGVhZDogUGxhaW5PYmplY3QsXG4gICAgdGFpbFBhcmVudDogUGxhaW5PYmplY3QsXG4gICAgdGFpbDogUGxhaW5PYmplY3Rcbn07XG5cbi8vIFRyYW5zZm9ybXMgYSBwYXRoIGxpa2UgXCJhL2IvYy9kXCIgaW50byBhIGhpZXJhcmNoeSBvZiBvYmplY3RzIGxpa2UgeyBcImFcIjogeyBcImJcIjogeyBcImNcIjogeyBcImRcIjoge30gfSB9IH0gfVxuLy8gRnJvbSB0aGUgcmVzdWx0IG9iamVjdCwgaGVhZCBpcyB0aGUgcm9vdCBvYmplY3QgdGhhdCBjb250YWlucyBcImFcIiwgdGFpbCBpcyB0aGUgdmFsdWUgb2YgXCJkXCIsIGFuZCB0YWlsUGFyZW50IGlzIHRoZSB2YWx1ZSBvZiBcImNcIlxuZnVuY3Rpb24gcGF0aFRvT2JqZWN0Q2hhaW4ocGF0aDogc3RyaW5nLCBjaGFpbkluZm86IElDaGFpbkluZm8gfCB1bmRlZmluZWQgPSB1bmRlZmluZWQpOiBJQ2hhaW5JbmZvIHtcbiAgICBjb25zdCBzZXBhcmF0b3JJbmRleDogbnVtYmVyID0gcGF0aC5pbmRleE9mKCcvJyk7XG5cbiAgICBjb25zdCB0YWlsOiBQbGFpbk9iamVjdCA9IHt9O1xuXG4gICAgY29uc3QgZmlyc3RQYXRoOiBzdHJpbmcgPSBzZXBhcmF0b3JJbmRleCA+PSAwID8gcGF0aC5zdWJzdHIoMCwgc2VwYXJhdG9ySW5kZXgpIDogcGF0aDtcbiAgICBjb25zdCByZW1haW5pbmdQYXRoOiBzdHJpbmcgfCB1bmRlZmluZWQgPSBzZXBhcmF0b3JJbmRleCA+PSAwID8gcGF0aC5zdWJzdHIoc2VwYXJhdG9ySW5kZXggKyAxKSA6IHVuZGVmaW5lZDtcblxuICAgIGlmIChjaGFpbkluZm8gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBjb25zdCBub2RlOiBQbGFpbk9iamVjdCA9IHt9O1xuICAgICAgICBub2RlW2ZpcnN0UGF0aF0gPSB0YWlsO1xuICAgICAgICBjaGFpbkluZm8gPSB7XG4gICAgICAgICAgICBoZWFkOiBub2RlLFxuICAgICAgICAgICAgdGFpbFBhcmVudDogbm9kZSxcbiAgICAgICAgICAgIHRhaWxcbiAgICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBjaGFpbkluZm8udGFpbFtmaXJzdFBhdGhdID0gdGFpbDtcbiAgICAgICAgY2hhaW5JbmZvLnRhaWxQYXJlbnQgPSBjaGFpbkluZm8udGFpbDtcbiAgICAgICAgY2hhaW5JbmZvLnRhaWwgPSB0YWlsO1xuICAgIH1cblxuICAgIGlmIChyZW1haW5pbmdQYXRoKSB7XG4gICAgICAgIHJldHVybiBwYXRoVG9PYmplY3RDaGFpbihyZW1haW5pbmdQYXRoLCBjaGFpbkluZm8pO1xuICAgIH1cblxuICAgIHJldHVybiBjaGFpbkluZm87XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZVBhc3N3b3JkR2VuZXJhdGlvblBhcmFtZXRlcnMoKTogdm9pZCB7XG4gICAgaWYgKGNhblJ1bigpID09PSBmYWxzZSkge1xuICAgICAgICBjbGVhck91dHB1dHMoKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IGNoYWluSW5mbzogSUNoYWluSW5mbyA9IHBhdGhUb09iamVjdENoYWluKHR4dFBhdGgudmFsdWUpO1xuICAgIGNvbnN0IGxlYWY6IFBsYWluT2JqZWN0ID0gY2hhaW5JbmZvLnRhaWw7XG5cbiAgICBsZWFmLnB1YmxpYyA9IHR4dFB1YmxpY1BhcnQudmFsdWU7XG4gICAgbGVhZi5kYXRldGltZSA9IHBhc3N3b3JkUHVibGljUGFydExhc3RDaGFuZ2U7XG5cbiAgICBjb25zdCBudW1lcmljVmFsdWU6IG51bWJlciA9IHBhcnNlSW50KG51bU91dHB1dFNpemVOdW0udmFsdWUsIDEwKTtcbiAgICBpZiAobnVtZXJpY1ZhbHVlICE9PSBERUZBVUxUX0xFTkdUSCkge1xuICAgICAgICBsZWFmLmxlbmd0aCA9IG51bWVyaWNWYWx1ZTtcbiAgICB9XG5cbiAgICBjb25zdCBhbHBoYWJldDogc3RyaW5nID0gdHh0QWxwaGFiZXQudmFsdWU7XG4gICAgaWYgKGFscGhhYmV0ICE9PSBERUZBVUxUX0FMUEhBQkVUKSB7XG4gICAgICAgIGxlYWYuYWxwaGFiZXQgPSBhbHBoYWJldDtcbiAgICB9XG5cbiAgICBjb25zdCBjdXN0b21LZXlzOiBQbGFpbk9iamVjdCB8IG51bGwgPSBwYXJzZUN1c3RvbUtleXMoKTtcbiAgICB1cGRhdGVDdXN0b21LZXlzRGlzcGxheShjdXN0b21LZXlzICE9PSBudWxsKTtcbiAgICBjb25zdCByZXN1bHRQYXJhbWV0ZXJzOiBQbGFpbk9iamVjdCA9IHNoYWxsb3dNZXJnZShjdXN0b21LZXlzLCBsZWFmKTtcblxuICAgIGlmIChPYmplY3Qua2V5cyhyZXN1bHRQYXJhbWV0ZXJzKS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgLy8gU2V0IHRoZSB2YWx1ZSBvZiB0aGUgZmlyc3QgKHNpbmdsZSkgcHJvcGVydHkgb2YgdGhlIG9iamVjdCB0byBudWxsLlxuICAgICAgICBjaGFpbkluZm8udGFpbFBhcmVudFtPYmplY3Qua2V5cyhjaGFpbkluZm8udGFpbFBhcmVudClbMF1dID0gbnVsbDtcbiAgICB9IGVsc2Uge1xuICAgICAgICBjaGFpbkluZm8udGFpbFBhcmVudFtPYmplY3Qua2V5cyhjaGFpbkluZm8udGFpbFBhcmVudClbMF1dID0gcmVzdWx0UGFyYW1ldGVycztcbiAgICB9XG5cbiAgICB0eHRQYXJhbWV0ZXJzLnZhbHVlID0gSlNPTi5zdHJpbmdpZnkoY2hhaW5JbmZvLmhlYWQsIHVuZGVmaW5lZCwgNCk7XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZU91dHB1dFNpemVSYW5nZVRvTnVtKCk6IHZvaWQge1xuICAgIG51bU91dHB1dFNpemVOdW0udmFsdWUgPSBudW1PdXRwdXRTaXplUmFuZ2UudmFsdWU7XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZU91dHB1dFNpemVOdW1Ub1JhbmdlKCk6IHZvaWQge1xuICAgIGNvbnN0IG1pbjogbnVtYmVyID0gcGFyc2VJbnQobnVtT3V0cHV0U2l6ZVJhbmdlLm1pbiwgMTApO1xuICAgIGNvbnN0IHZhbDogbnVtYmVyID0gcGFyc2VJbnQobnVtT3V0cHV0U2l6ZU51bS52YWx1ZSwgMTApO1xuICAgIGNvbnN0IG1heDogbnVtYmVyID0gcGFyc2VJbnQobnVtT3V0cHV0U2l6ZVJhbmdlLm1heCwgMTApO1xuICAgIG51bU91dHB1dFNpemVSYW5nZS52YWx1ZSA9IE1hdGgubWF4KG1pbiwgTWF0aC5taW4odmFsLCBtYXgpKS50b1N0cmluZygpO1xufVxuXG5udW1PdXRwdXRTaXplUmFuZ2UuYWRkRXZlbnRMaXN0ZW5lcignaW5wdXQnLCAoKSA9PiB7XG4gICAgdXBkYXRlT3V0cHV0U2l6ZVJhbmdlVG9OdW0oKTtcbiAgICBydW4oKTtcbn0pO1xuXG5udW1PdXRwdXRTaXplTnVtLmFkZEV2ZW50TGlzdGVuZXIoJ2lucHV0JywgKCkgPT4ge1xuICAgIHVwZGF0ZU91dHB1dFNpemVOdW1Ub1JhbmdlKCk7XG4gICAgdXBkYXRlT3V0cHV0U2l6ZVJhbmdlVG9OdW0oKTtcbiAgICBydW4oKTtcbn0pO1xuXG5mdW5jdGlvbiB1cGRhdGVBbHBoYWJldFNpemUoKTogdm9pZCB7XG4gICAgc3BuQWxwaGFiZXRTaXplLmlubmVySFRNTCA9IHR4dEFscGhhYmV0LnZhbHVlLmxlbmd0aC50b1N0cmluZygpO1xuXG4gICAgY29uc3QgYWxwaGFiZXRTaXplRGlnaXRDb3VudDogbnVtYmVyID0gdHh0QWxwaGFiZXQudmFsdWUubGVuZ3RoLnRvU3RyaW5nKCkubGVuZ3RoO1xuICAgIGlmIChhbHBoYWJldFNpemVEaWdpdENvdW50IDwgMikge1xuICAgICAgICAvLyBBZGQgYSBzcGFjZSB0byBrZWVwIGEgbmljZSB2aXN1YWwgYWxpZ25tZW50LlxuICAgICAgICBzcG5BbHBoYWJldFNpemUuaW5uZXJIVE1MID0gc3BuQWxwaGFiZXRTaXplLmlubmVySFRNTC5wYWRTdGFydCgyLCAnICcpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gdXBkYXRlQWxwaGFiZXRWYWxpZGl0eURpc3BsYXkoaXNBbHBoYWJldFZhbGlkOiBib29sZWFuKTogdm9pZCB7XG4gICAgaWYgKGlzQWxwaGFiZXRWYWxpZCkge1xuICAgICAgICB0eHRBbHBoYWJldC5zdHlsZS5yZW1vdmVQcm9wZXJ0eSgnYmFja2dyb3VuZCcpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHR4dEFscGhhYmV0LnN0eWxlLnNldFByb3BlcnR5KCdiYWNrZ3JvdW5kJywgRVJST1JfQ09MT1IpO1xuICAgIH1cbn1cblxudHh0QWxwaGFiZXQuYWRkRXZlbnRMaXN0ZW5lcignaW5wdXQnLCAoKSA9PiB7XG4gICAgY29uc3QgaXNBbHBoYWJldFZhbGlkUmVzdWx0OiBib29sZWFuID0gaXNBbHBoYWJldFZhbGlkKHR4dEFscGhhYmV0LnZhbHVlKTtcblxuICAgIHVwZGF0ZUFscGhhYmV0VmFsaWRpdHlEaXNwbGF5KGlzQWxwaGFiZXRWYWxpZFJlc3VsdCk7XG5cbiAgICBpZiAoaXNBbHBoYWJldFZhbGlkUmVzdWx0ID09PSBmYWxzZSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdXBkYXRlQWxwaGFiZXRTaXplKCk7XG4gICAgcnVuKCk7XG59KTtcblxuYnRuUmVzZXRBbHBoYWJldC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICByZXNldEFscGhhYmV0KCk7XG4gICAgdXBkYXRlQWxwaGFiZXRTaXplKCk7XG4gICAgcnVuKCk7XG59KTtcblxuZnVuY3Rpb24gY2xlYXJPdXRwdXRzKCk6IHZvaWQge1xuICAgIHR4dFJlc3VsdFBhc3N3b3JkLnZhbHVlID0gJyc7XG4gICAgdHh0UGFyYW1ldGVycy52YWx1ZSA9ICcnO1xuXG4gICAgdXBkYXRlUmVzdWx0UGFzc3dvcmRMZW5ndGgoKTtcbn1cblxuZnVuY3Rpb24gY2FuUnVuKCk6IGJvb2xlYW4ge1xuICAgIGNvbnN0IGFscGhhYmV0OiBzdHJpbmcgPSB0eHRBbHBoYWJldC52YWx1ZTtcblxuICAgIGlmIChpc0FscGhhYmV0VmFsaWQoYWxwaGFiZXQpID09PSBmYWxzZSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgaWYgKGdldFByaXZhdGVQYXJ0KCkubGVuZ3RoIDw9IDAgfHwgdHh0UHVibGljUGFydC52YWx1ZS5sZW5ndGggPCA4IHx8IGFscGhhYmV0Lmxlbmd0aCA8IDIpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHJldHVybiB0cnVlO1xufVxuXG5hc3luYyBmdW5jdGlvbiBydW4oKSB7XG4gICAgdXBkYXRlUGFzc3dvcmRHZW5lcmF0aW9uUGFyYW1ldGVycygpO1xuXG4gICAgaWYgKGNhblJ1bigpID09PSBmYWxzZSkge1xuICAgICAgICBjbGVhck91dHB1dHMoKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IHByaXZhdGVQYXJ0U3RyaW5nOiBzdHJpbmcgPSBnZXRQcml2YXRlUGFydCgpO1xuICAgIGNvbnN0IHB1YmxpY1BhcnRTdHJpbmcgPSB0eHRQdWJsaWNQYXJ0LnZhbHVlO1xuXG4gICAgY29uc3QgcHJpdmF0ZVByaXZhdGVCeXRlczogQXJyYXlCdWZmZXIgPSBzdHJpbmdVdGlscy5zdHJpbmdUb0FycmF5KHByaXZhdGVQYXJ0U3RyaW5nKTtcbiAgICBjb25zdCBwdWJsaWNQYXJ0Qnl0ZXM6IEFycmF5QnVmZmVyID0gc3RyaW5nVXRpbHMuc3RyaW5nVG9BcnJheShwdWJsaWNQYXJ0U3RyaW5nKTtcblxuICAgIGNvbnN0IGtleUJ5dGVzOiBBcnJheUJ1ZmZlciA9IGF3YWl0IHBhc3N3b3JkR2VuZXJhdG9yLmdlbmVyYXRlUGFzc3dvcmQocHJpdmF0ZVByaXZhdGVCeXRlcywgcHVibGljUGFydEJ5dGVzKTtcblxuICAgIGNvbnN0IGtleVN0cmluZzogc3RyaW5nID0gYXJyYXlVdGlscy50b0N1c3RvbUJhc2Uoa2V5Qnl0ZXMsIHR4dEFscGhhYmV0LnZhbHVlKTtcbiAgICB0eHRSZXN1bHRQYXNzd29yZC52YWx1ZSA9IHN0cmluZ1V0aWxzLnRydW5jYXRlKGtleVN0cmluZywgcGFyc2VJbnQobnVtT3V0cHV0U2l6ZVJhbmdlLnZhbHVlLCAxMCkpO1xuXG4gICAgdXBkYXRlUmVzdWx0UGFzc3dvcmRMZW5ndGgoKTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gcmVzZXRBbHBoYWJldCgpIHtcbiAgICB0eHRBbHBoYWJldC52YWx1ZSA9IERFRkFVTFRfQUxQSEFCRVQ7XG4gICAgdXBkYXRlQWxwaGFiZXRTaXplKCk7XG5cbiAgICBjb25zdCBpc0FscGhhYmV0VmFsaWRSZXN1bHQ6IGJvb2xlYW4gPSBpc0FscGhhYmV0VmFsaWQodHh0QWxwaGFiZXQudmFsdWUpO1xuXG4gICAgdXBkYXRlQWxwaGFiZXRWYWxpZGl0eURpc3BsYXkoaXNBbHBoYWJldFZhbGlkUmVzdWx0KTtcblxuICAgIGlmIChpc0FscGhhYmV0VmFsaWRSZXN1bHQpIHtcbiAgICAgICAgYXdhaXQgcnVuKCk7XG4gICAgfVxufVxuXG5jb25zdCBwcm90ZWN0UHJpdmF0ZVBhcnRBY3Rpb246IFRpbWVkQWN0aW9uID0gbmV3IFRpbWVkQWN0aW9uKHByb3RlY3RBbmRMb2NrUHJpdmF0ZVBhcnQsIFBSSVZBVEVfUEFSVF9QUk9URUNUSU9OX1RJTUVPVVQpO1xuXG50eHRQcml2YXRlUGFydC5hZGRFdmVudExpc3RlbmVyKCdpbnB1dCcsICgpID0+IHtcbiAgICBidG5Qcm90ZWN0LmRpc2FibGVkID0gdHh0UHJpdmF0ZVBhcnQudmFsdWUubGVuZ3RoID09PSAwO1xuXG4gICAgc3BuUHJpdmF0ZVBhcnRTaXplLmlubmVySFRNTCA9IHR4dFByaXZhdGVQYXJ0LnZhbHVlLmxlbmd0aC50b1N0cmluZygpO1xuICAgIHVwZGF0ZVByaXZhdGVQYXJ0c01hdGNoaW5nKCk7XG4gICAgcnVuKCk7XG4gICAgcHJvdGVjdFByaXZhdGVQYXJ0QWN0aW9uLnJlc2V0KCk7XG59KTtcblxuZnVuY3Rpb24gdXBkYXRlUHJpdmF0ZVBhcnRzTWF0Y2hpbmcoKTogdm9pZCB7XG4gICAgaWYgKHR4dFByaXZhdGVQYXJ0Q29uZmlybWF0aW9uLnZhbHVlID09PSB0eHRQcml2YXRlUGFydC52YWx1ZSkge1xuICAgICAgICB0eHRQcml2YXRlUGFydENvbmZpcm1hdGlvbi5zdHlsZS5zZXRQcm9wZXJ0eSgnYmFja2dyb3VuZCcsIFNVQ0NFU1NfQ09MT1IpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHR4dFByaXZhdGVQYXJ0Q29uZmlybWF0aW9uLnN0eWxlLnNldFByb3BlcnR5KCdiYWNrZ3JvdW5kJywgRVJST1JfQ09MT1IpO1xuICAgIH1cbn07XG5cbnR4dFByaXZhdGVQYXJ0Q29uZmlybWF0aW9uLmFkZEV2ZW50TGlzdGVuZXIoJ2lucHV0JywgKCkgPT4ge1xuICAgIHNwblByaXZhdGVQYXJ0U2l6ZUNvbmZpcm1hdGlvbi5pbm5lckhUTUwgPSB0eHRQcml2YXRlUGFydENvbmZpcm1hdGlvbi52YWx1ZS5sZW5ndGgudG9TdHJpbmcoKTtcbiAgICB1cGRhdGVQcml2YXRlUGFydHNNYXRjaGluZygpO1xufSk7XG5cbnR4dFBhdGguYWRkRXZlbnRMaXN0ZW5lcignaW5wdXQnLCAoKSA9PiB7XG4gICAgdXBkYXRlUGFzc3dvcmRHZW5lcmF0aW9uUGFyYW1ldGVycygpO1xufSk7XG5cbnR4dFB1YmxpY1BhcnQuYWRkRXZlbnRMaXN0ZW5lcignaW5wdXQnLCAoKSA9PiB7XG4gICAgdXBkYXRlUGFzc3dvcmRQdWJsaWNQYXJ0TGFzdFVwZGF0ZSgpO1xuICAgIHVwZGF0ZVBhc3N3b3JkR2VuZXJhdGlvblBhcmFtZXRlcnMoKTtcbiAgICBydW4oKTtcbn0pO1xuXG50eHRDdXN0b21LZXlzLmFkZEV2ZW50TGlzdGVuZXIoJ2lucHV0JywgKCkgPT4ge1xuICAgIHVwZGF0ZVBhc3N3b3JkR2VuZXJhdGlvblBhcmFtZXRlcnMoKTtcbn0pO1xuXG51cGRhdGVPdXRwdXRTaXplUmFuZ2VUb051bSgpO1xucmVzZXRBbHBoYWJldCgpO1xudXBkYXRlUHJpdmF0ZVBhcnRzTWF0Y2hpbmcoKTtcbmJ0blByb3RlY3QudGl0bGUgPSBidG5Qcm90ZWN0VGl0bGVGb3JQcm90ZWN0O1xuIiwiZXhwb3J0IGludGVyZmFjZSBJVGFiSW5mbyB7XG4gICAgYnV0dG9uOiBIVE1MSW5wdXRFbGVtZW50LFxuICAgIGNvbnRlbnQ6IEhUTUxJbnB1dEVsZW1lbnRcbn1cblxuZXhwb3J0IGNsYXNzIFRhYkNvbnRyb2wge1xuICAgIHB1YmxpYyBjb25zdHJ1Y3Rvcihwcml2YXRlIHRhYnM6IElUYWJJbmZvW10pIHtcbiAgICAgICAgbGV0IHRhYkluZm86IElUYWJJbmZvO1xuICAgICAgICBmb3IgKHRhYkluZm8gb2YgdGhpcy50YWJzKSB7XG4gICAgICAgICAgICBjb25zdCBsb2NhbFRhYkluZm86IElUYWJJbmZvID0gdGFiSW5mbztcbiAgICAgICAgICAgIGxvY2FsVGFiSW5mby5idXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRBY3RpdmVUYWIobG9jYWxUYWJJbmZvKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5zZXRBY3RpdmVUYWIodGFic1swXSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzZXRBY3RpdmVUYWIoYWN0aXZlVGFiSW5mbzogSVRhYkluZm8pIHtcbiAgICAgICAgbGV0IHRhYkluZm86IElUYWJJbmZvO1xuXG4gICAgICAgIGZvciAodGFiSW5mbyBvZiB0aGlzLnRhYnMpIHtcbiAgICAgICAgICAgIHRhYkluZm8uYnV0dG9uLnN0eWxlLnJlbW92ZVByb3BlcnR5KCdmb250LXdlaWdodCcpO1xuICAgICAgICAgICAgdGFiSW5mby5idXR0b24uc3R5bGUuc2V0UHJvcGVydHkoJ2NvbG9yJywgJyNDMEMwQzAnKTtcbiAgICAgICAgICAgIHRhYkluZm8uY29udGVudC5zdHlsZS5zZXRQcm9wZXJ0eSgnZGlzcGxheScsICdub25lJyk7XG4gICAgICAgIH1cblxuICAgICAgICBhY3RpdmVUYWJJbmZvLmJ1dHRvbi5zdHlsZS5zZXRQcm9wZXJ0eSgnZm9udC13ZWlnaHQnLCAnYm9sZCcpO1xuICAgICAgICBhY3RpdmVUYWJJbmZvLmJ1dHRvbi5zdHlsZS5yZW1vdmVQcm9wZXJ0eSgnY29sb3InKTtcbiAgICAgICAgYWN0aXZlVGFiSW5mby5jb250ZW50LnN0eWxlLnJlbW92ZVByb3BlcnR5KCdkaXNwbGF5Jyk7XG4gICAgfVxufVxuIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgVGltZWRBY3Rpb24ge1xuICAgIHByaXZhdGUgdGltZW91dDogbnVtYmVyIHwgdW5kZWZpbmVkO1xuICAgIHB1YmxpYyBjb25zdHJ1Y3Rvcihwcml2YXRlIGFjdGlvbjogRnVuY3Rpb24sIHByaXZhdGUgZGVsYXk6IG51bWJlcikge1xuICAgIH1cblxuICAgIHB1YmxpYyByZXNldChvdmVycmlkZURlbGF5OiBudW1iZXIgfCB1bmRlZmluZWQgPSB1bmRlZmluZWQpOiB2b2lkIHtcbiAgICAgICAgaWYgKHRoaXMudGltZW91dCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBjbGVhclRpbWVvdXQodGhpcy50aW1lb3V0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGRlbGF5ID0gb3ZlcnJpZGVEZWxheSAhPT0gdW5kZWZpbmVkID8gb3ZlcnJpZGVEZWxheSA6IHRoaXMuZGVsYXk7XG5cbiAgICAgICAgdGhpcy50aW1lb3V0ID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmFjdGlvbigpO1xuICAgICAgICAgICAgdGhpcy50aW1lb3V0ID0gdW5kZWZpbmVkO1xuICAgICAgICB9LCBkZWxheSk7XG4gICAgfVxufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==