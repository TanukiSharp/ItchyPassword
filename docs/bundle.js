!function(t){var e={};function n(r){if(e[r])return e[r].exports;var i=e[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)n.d(r,i,function(e){return t[e]}.bind(null,i));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=0)}([function(t,e,n){"use strict";function r(t){return(new TextEncoder).encode(t)}function i(t,e){const n=BigInt(e.length);let r="",i=function(t){const e=t.byteLength,n=new DataView(t,0);let r=0n;for(let t=0;t<e;t+=1)r+=BigInt(n.getUint8(t))*256n**BigInt(t);return r}(t);for(;i>0n;){const t=i%n;i/=n,r+=e[BigInt.asUintN(64,t)]}return r}n.r(e);const a="PBKDF2",o="SHA-512",u="abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";class s{constructor(t){this.element=t}setText(t,e){this.element.innerHTML=t,this.timeout&&clearTimeout(this.timeout),this.timeout=setTimeout(()=>this.element.innerHTML="",e)}}function l(t){const e=document.getElementById(t);if(null===t)throw new Error(`DOM element '${t}' not found.`);return e}const c=l("txtPrivatePart"),d=l("txtPrivatePartConfirmation"),p=l("btnProtect"),v=l("btnClearProtected"),f=l("spnProtectedConfirmation"),y=l("txtPath"),b=l("txtPublicPart"),h=l("btnGeneratePublicPart"),g=l("btnCopyPublicPart"),m=l("spnCopyPublicPartFeedback"),P=l("spnPrivatePartSize"),w=l("spnPrivatePartSizeConfirmation"),L=l("numOutputSizeRange"),T=l("numOutputSizeNum"),S=l("txtAlphabet"),x=l("spnAlphabetSize"),M=l("btnResetAlphabet"),k=l("txtResultPassword"),E=l("spnResultPasswordLength"),O=l("btnCopyResultPassword"),H=l("spnCopyResultPasswordFeedback"),C=l("txtParameters"),j=l("txtCustomKeys"),I=64,A="!\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[]^_`abcdefghijklmnopqrstuvwxyz{|}~",F="#D0FFD0",R="#FFD0D0",B=["alphabet","length","public"];let D;function K(){return void 0!==D?D:c.value}function z(){0!==c.value.length&&(D=c.value,f.innerHTML=`Protected, ${D.length} characters`,c.value="",d.value="",P.innerHTML="0",w.innerHTML="0",et())}function _(){D=void 0,f.innerHTML=""}L.max=I.toString(),L.value=I.toString(),h.addEventListener("click",()=>{const t=function(t=64,e=u){const n=new Uint8Array(t);return crypto.getRandomValues(n),i(n.buffer,u)}();b.value=t,Y()}),p.addEventListener("click",()=>{z()}),v.addEventListener("click",()=>{_(),Y()});const N=new s(H),V=new s(m);function U(t,e,n){e.addEventListener("click",async()=>{await async function(t){try{return await navigator.clipboard.writeText(t),!0}catch(t){return console.error(t.stack||t),!1}}(t.value)?n.setText("Copied",3e3):n.setText('<span style="color: red">Failed to copy</span>',3e3)})}function J(){E.innerHTML=k.value.length.toString().padStart(2," ")}function G(t){const e=t.split("");e.sort();for(let t=1;t<e.length;t+=1)if(e[t-1]===e[t])return!1;return!0}function $(){if(!1===X())return void(C.value="");const t=function t(e,n){const r=e.indexOf("/"),i={},a=r>=0?e.substr(0,r):e,o=r>=0?e.substr(r+1):void 0;if(void 0===n){const t={};t[a]=i,n={head:t,tailParent:t,tail:i}}else n.tail[a]=i,n.tailParent=n.tail,n.tail=i;return o?t(o,n):n}(y.value),e=t.tail;e.public=b.value;const n=parseInt(T.value,10);n!==I&&(e.length=n);const r=S.value;r!==A&&(e.alphabet=r);const i=function(){if(""===j.value)return{};try{const t=JSON.parse(j.value);return null===t||"Object"!==t.constructor.name?null:t}catch{return null}}();null!==i?j.style.removeProperty("background"):j.style.setProperty("background",R);const a=function(t,e){const n={};if(null!==t)for(const[e,r]of Object.entries(t))!1===B.includes(e)&&(n[e]=r);if(null!==e)for(const[t,r]of Object.entries(e))n[t]=r;return n}(i,e);0===Object.keys(a).length?t.tailParent[Object.keys(t.tailParent)[0]]=null:t.tailParent[Object.keys(t.tailParent)[0]]=a,C.value=JSON.stringify(t.head,void 0,4)}function q(){T.value=L.value}function Q(){x.innerHTML=S.value.length.toString(),S.value.length.toString().length<2&&(x.innerHTML=x.innerHTML.padStart(2," "))}function W(t){t?S.style.removeProperty("background"):S.style.setProperty("background",R)}function X(){const t=S.value;return!1!==G(t)&&!(K().length<=0||b.value.length<8||t.length<2)}async function Y(){if($(),!1===X())return k.value="",void J();const t=i(await async function(t,e,n){const i=r(e),u=r(n);if(i.length<8)throw new Error("Public key must be at least 8 bytes long.");const s=await crypto.subtle.importKey("raw",r(t),a,!1,["deriveKey"]),l={name:a,hash:o,iterations:1e5,salt:i},c=await crypto.subtle.deriveKey(l,s,{name:"AES-CBC",length:256},!0,["encrypt"]),d=await crypto.subtle.exportKey("raw",c),p={name:"HMAC",hash:{name:o}},v=await crypto.subtle.importKey("raw",d,p,!1,["sign"]);return await crypto.subtle.sign("HMAC",v,u)}(K(),b.value,"Password"),S.value);var e,n;k.value=(e=t,n=parseInt(L.value,10),e.length<=n?e:e.substr(0,n)),J()}async function Z(){S.value=A,Q();const t=G(S.value);W(t),t&&await Y()}!function(t,e){const n=l(e);n.addEventListener("click",()=>{"password"===t.type?(t.type="input",n.innerHTML="Hide"):(t.type="password",n.innerHTML="View")})}(k,"btnViewResultPassword"),U(b,g,V),U(k,O,N),L.addEventListener("input",()=>{q(),Y()}),T.addEventListener("input",()=>{!function(){const t=parseInt(L.min,10),e=parseInt(T.value,10),n=parseInt(L.max,10);L.value=Math.max(t,Math.min(e,n)).toString()}(),q(),Y()}),S.addEventListener("input",()=>{const t=G(S.value);W(t),!1!==t&&(Q(),Y())}),M.addEventListener("click",()=>{Z(),Q(),Y()});const tt=new class{constructor(t,e){this.action=t,this.delay=e}reset(t){void 0===this.timeout&&clearTimeout(this.timeout);const e=void 0!==t?t:this.delay;this.timeout=setTimeout(()=>{this.action(),this.timeout=void 0},e)}}(z,6e4);function et(){d.value===c.value?d.style.setProperty("background",F):d.style.setProperty("background",R)}c.addEventListener("input",()=>{_(),P.innerHTML=c.value.length.toString(),et(),Y(),tt.reset()}),d.addEventListener("input",()=>{w.innerHTML=d.value.length.toString(),et()}),y.addEventListener("input",()=>{$()}),b.addEventListener("input",()=>{$(),Y()}),j.addEventListener("input",()=>{$()}),q(),Z(),et()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,