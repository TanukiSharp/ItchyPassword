!function(t){var e={};function n(r){if(e[r])return e[r].exports;var i=e[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)n.d(r,i,function(e){return t[e]}.bind(null,i));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=0)}([function(t,e,n){"use strict";function r(t,e){const n=BigInt(e.length);let r="",i=function(t){const e=t.byteLength,n=new DataView(t,0);let r=0n;for(let t=0;t<e;t+=1)r+=BigInt(n.getUint8(t))*256n**BigInt(t);return r}(t);for(;i>0n;){const t=i%n;i/=n,r+=e[BigInt.asUintN(64,t)]}return r}function i(t){return(new TextEncoder).encode(t).buffer}n.r(e);class o{constructor(t){this.hkdfPurpose=i(t),this._description=`HKDF(PBKDF2, HMAC512) [purpose: ${t}]`}get version(){return 1}get description(){return this._description}async generatePassword(t,e){const n=await u(t,e),r=await crypto.subtle.importKey("raw",n,{name:"HMAC",hash:{name:"SHA-512"}},!1,["sign"]);return await crypto.subtle.sign("HMAC",r,this.hkdfPurpose)}}const a=new Uint8Array([242,207,239,142,19,64,70,73,146,42,222,92,188,136,56,168]).buffer;class s{get version(){return 1}get description(){return"PBKDF2 + AES-GCM"}async encrypt(t,e){const n=new ArrayBuffer(28+t.byteLength),r=new DataView(n,0,12);crypto.getRandomValues(new Uint8Array(n,0,12));const i={name:"AES-GCM",iv:r},o=await crypto.subtle.importKey("raw",await u(e,a),{name:"AES-GCM",length:256},!1,["encrypt"]),s=await crypto.subtle.encrypt(i,o,t);return new Uint8Array(n).set(new Uint8Array(s),12),n}async decrypt(t,e){const n=new DataView(t,0,12),r=new DataView(t,12),i={name:"AES-GCM",iv:n},o=await u(e,a),s=await crypto.subtle.importKey("raw",o,{name:"AES-GCM",length:256},!1,["decrypt"]);return await crypto.subtle.decrypt(i,s,r)}}const l="abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";new o("Password"),new s;async function u(t,e){const n=await crypto.subtle.importKey("raw",t,"PBKDF2",!1,["deriveKey"]),r={name:"PBKDF2",hash:"SHA-512",iterations:1e5,salt:e},i=await crypto.subtle.deriveKey(r,n,{name:"AES-CBC",length:256},!0,["encrypt"]);return await crypto.subtle.exportKey("raw",i)}function c(t=64,e=l){return r(function(t=64){const e=new Uint8Array(t);return crypto.getRandomValues(e).buffer}(t),e)}class d{constructor(t){this.element=t}setText(t,e){this.element.innerHTML=t,this.timeout&&clearTimeout(this.timeout),this.timeout=setTimeout(()=>this.element.innerHTML="",e)}}const p=new o("Password"),y=new s;function v(t){const e=document.getElementById(t);if(null===t)throw new Error(`DOM element '${t}' not found.`);return e}const f="Stores the string in memory and removes it from the UI component. Prevents a physical intruder from copy/pasting the value.",b="Removes the string form memory and re-enables the UI component.",h=v("txtPrivatePart"),g=v("txtPrivatePartConfirmation"),w=v("btnProtect"),m=v("spnProtectedConfirmation"),P=v("txtPath"),L=v("txtPublicPart"),S=v("btnGeneratePublicPart"),T=v("btnClearPublicPart"),C=v("btnCopyPublicPart"),M=v("spnCopyPublicPartFeedback"),E=v("spnPrivatePartSize"),k=v("spnPrivatePartSizeConfirmation"),x=v("numOutputSizeRange"),A=v("numOutputSizeNum"),H=v("txtAlphabet"),O=v("spnAlphabetSize"),D=v("btnResetAlphabet"),j=v("txtResultPassword"),I=v("spnResultPasswordLength"),K=v("btnCopyResultPassword"),F=v("spnCopyResultPasswordFeedback"),B=v("txtParameters"),U=v("txtCustomKeys"),R=v("btnTabPasswords"),V=v("btnTabCiphers"),_=v("divTabPasswords"),G=v("divTabCiphers"),z=v("txtCipherSource"),N=v("txtCipherTarget"),J=v("btnEncrypt"),$=v("btnDecrypt"),q=64,Q="!\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[]^_`abcdefghijklmnopqrstuvwxyz{|}~",W="#D0FFD0",X="#FFD0D0",Y=["alphabet","length","public","datetime"];let Z,tt;function et(){tt=L.value.length>0?(new Date).toISOString():void 0}function nt(){return void 0!==Z?Z:h.value}function rt(){0!==h.value.length&&(Z=h.value,m.innerHTML="Protected",h.value="",g.value="",E.innerHTML="0",k.innerHTML="0",h.disabled=!0,g.disabled=!0,w.innerHTML="Clear and unlock",w.title=b,wt())}function it(){void 0===Z?rt():(Z=void 0,m.innerHTML="",h.disabled=!1,g.disabled=!1,w.innerHTML="Protect and lock",w.title=f,w.disabled=!0)}x.max=q.toString(),x.value=q.toString(),R.addEventListener("click",()=>{R.style.setProperty("font-weight","bold"),R.style.removeProperty("color"),V.style.removeProperty("font-weight"),V.style.setProperty("color","#C0C0C0"),_.style.removeProperty("display"),G.style.setProperty("display","none")}),V.addEventListener("click",()=>{R.style.removeProperty("font-weight"),R.style.setProperty("color","#C0C0C0"),V.style.setProperty("font-weight","bold"),V.style.removeProperty("color"),_.style.setProperty("display","none"),G.style.removeProperty("display")}),R.style.setProperty("font-weight","bold"),V.style.setProperty("color","#C0C0C0"),J.addEventListener("click",async()=>{if(0===z.value.length)return;const t=nt();if(0===t.length)return;const e=i(z.value),n=i(t),r=await y.encrypt(e,n);N.value=function(t){return Array.prototype.map.call(new Uint8Array(t),t=>("00"+t.toString(16)).slice(-2)).join("")}(r)}),$.addEventListener("click",async()=>{if(0===z.value.length)return;const t=nt();if(0===t.length)return;const e=function(t){t.length%2!=0&&(t="0"+t);const e=new Uint8Array(t.length/2);for(let n=0;n<e.byteLength;n+=1)e[n]=parseInt(t.substr(2*n,2),16);return e.buffer}(z.value),n=i(t),r=await y.decrypt(e,n);N.value=function(t){return(new TextDecoder).decode(t)}(r)}),T.addEventListener("click",()=>{L.value.length>0&&"y"!==prompt("Are you sure you want to clear the public part ?\nType 'y' to accept","")||(L.value="",et(),ct())}),S.addEventListener("click",()=>{if(L.value.length>0&&"y"!==prompt("Are you sure you want to generate a new public part ?\nType 'y' to accept",""))return;const t=c();L.value=t,et(),bt()}),w.addEventListener("click",()=>{it()});const ot=new d(F),at=new d(M);function st(t,e,n){e.addEventListener("click",async()=>{await async function(t){try{return await navigator.clipboard.writeText(t),!0}catch(t){return console.error(t.stack||t),!1}}(t.value)?n.setText("Copied",3e3):n.setText('<span style="color: red">Failed to copy</span>',3e3)})}function lt(){I.innerHTML=j.value.length.toString().padStart(2," ")}function ut(t){const e=t.split("");e.sort();for(let t=1;t<e.length;t+=1)if(e[t-1]===e[t])return!1;return!0}function ct(){if(!1===ft())return void vt();const t=function t(e,n){const r=e.indexOf("/"),i={},o=r>=0?e.substr(0,r):e,a=r>=0?e.substr(r+1):void 0;if(void 0===n){const t={};t[o]=i,n={head:t,tailParent:t,tail:i}}else n.tail[o]=i,n.tailParent=n.tail,n.tail=i;return a?t(a,n):n}(P.value),e=t.tail;e.public=L.value,e.datetime=tt;const n=parseInt(A.value,10);n!==q&&(e.length=n);const r=H.value;r!==Q&&(e.alphabet=r);const i=function(){if(""===U.value)return{};try{const t=JSON.parse(U.value);return null===t||"Object"!==t.constructor.name?null:t}catch{return null}}();null!==i?U.style.removeProperty("background"):U.style.setProperty("background",X);const o=function(t,e){const n={};if(null!==t)for(const[e,r]of Object.entries(t))!1===Y.includes(e)&&(n[e]=r);if(null!==e)for(const[t,r]of Object.entries(e))n[t]=r;return n}(i,e);0===Object.keys(o).length?t.tailParent[Object.keys(t.tailParent)[0]]=null:t.tailParent[Object.keys(t.tailParent)[0]]=o,B.value=JSON.stringify(t.head,void 0,4)}function dt(){A.value=x.value}function pt(){O.innerHTML=H.value.length.toString(),H.value.length.toString().length<2&&(O.innerHTML=O.innerHTML.padStart(2," "))}function yt(t){t?H.style.removeProperty("background"):H.style.setProperty("background",X)}function vt(){j.value="",B.value="",lt()}function ft(){const t=H.value;return!1!==ut(t)&&!(nt().length<=0||L.value.length<8||t.length<2)}async function bt(){if(ct(),!1===ft())return void vt();const t=nt(),e=L.value,n=i(t),o=i(e),a=r(await p.generatePassword(n,o),H.value);var s,l;j.value=(s=a,l=parseInt(x.value,10),s.length<=l?s:s.substr(0,l)),lt()}async function ht(){H.value=Q,pt();const t=ut(H.value);yt(t),t&&await bt()}!function(t,e){const n=v(e);n.addEventListener("click",()=>{"password"===t.type?(t.type="input",n.innerHTML="Hide"):(t.type="password",n.innerHTML="View")})}(j,"btnViewResultPassword"),st(L,C,at),st(j,K,ot),x.addEventListener("input",()=>{dt(),bt()}),A.addEventListener("input",()=>{!function(){const t=parseInt(x.min,10),e=parseInt(A.value,10),n=parseInt(x.max,10);x.value=Math.max(t,Math.min(e,n)).toString()}(),dt(),bt()}),H.addEventListener("input",()=>{const t=ut(H.value);yt(t),!1!==t&&(pt(),bt())}),D.addEventListener("click",()=>{ht(),pt(),bt()});const gt=new class{constructor(t,e){this.action=t,this.delay=e}reset(t){void 0!==this.timeout&&clearTimeout(this.timeout);const e=void 0!==t?t:this.delay;this.timeout=setTimeout(()=>{this.action(),this.timeout=void 0},e)}}(rt,6e4);function wt(){g.value===h.value?g.style.setProperty("background",W):g.style.setProperty("background",X)}h.addEventListener("input",()=>{w.disabled=0===h.value.length,E.innerHTML=h.value.length.toString(),wt(),bt(),gt.reset()}),g.addEventListener("input",()=>{k.innerHTML=g.value.length.toString(),wt()}),P.addEventListener("input",()=>{ct()}),L.addEventListener("input",()=>{et(),ct(),bt()}),U.addEventListener("input",()=>{ct()}),dt(),ht(),wt(),w.title=f}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,