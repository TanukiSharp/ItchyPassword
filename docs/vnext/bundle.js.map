{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://itchy-password/./src/ui.ts","webpack://itchy-password/./src/TabControl.ts","webpack://itchy-password/./src/components/privatePartComponent.ts","webpack://itchy-password/./src/TimedAction.ts","webpack://itchy-password/./src/arrayUtils.ts","webpack://itchy-password/./src/asyncUtils.ts","webpack://itchy-password/./src/crypto.ts","webpack://itchy-password/./src/stringUtils.ts","webpack://itchy-password/./src/PlainObject.ts","webpack://itchy-password/./src/services/serviceManger.ts","webpack://itchy-password/./src/storages/GitHubVaultStorage.ts","webpack://itchy-password/./src/ciphers/v2.ts","webpack://itchy-password/./src/services/cipherService.ts","webpack://itchy-password/./src/components/cipherComponent.ts","webpack://itchy-password/./src/storages/SecureLocalStorage.ts","webpack://itchy-password/./src/components/storageOutputComponent.ts","webpack://itchy-password/./src/services/passwordService.ts","webpack://itchy-password/./src/components/passwordComponent.ts","webpack://itchy-password/./src/passwordGenerators/v1.ts","webpack://itchy-password/./src/passwordGenerators/v2.ts","webpack://itchy-password/./src/ciphers/v1.ts","webpack://itchy-password/./src/components/reEncryptComponent.ts","webpack://itchy-password/./src/components/vaultComponents/TreeNode.ts","webpack://itchy-password/./src/searchMatchFunctions.ts","webpack://itchy-password/./src/components/vaultComponents/treeViewComponent.ts","webpack://itchy-password/./src/components/vaultComponents/textViewComponent.ts","webpack://itchy-password/./src/services/vaultService.ts","webpack://itchy-password/./src/components/vaultComponent.ts","webpack://itchy-password/./src/services/errorLogsService.ts","webpack://itchy-password/./src/components/errorLogsComponent.ts","webpack://itchy-password/./src/components/rootComponent.ts","webpack://itchy-password/./src/index.ts"],"sourcesContent":["export const SUCCESS_COLOR: string = '#D0FFD0';\nexport const ERROR_COLOR: string = '#FFD0D0';\n\nexport function getElementById(elementName: string): HTMLElement {\n    const element: HTMLElement|null = document.getElementById(elementName);\n\n    if (elementName === null) {\n        throw new Error(`DOM element '${elementName}' not found.`);\n    }\n\n    return element as HTMLElement;\n}\n\nexport async function writeToClipboard(text: string, logFunc?: (..._: any[]) => void): Promise<boolean> {\n    try {\n        await navigator.clipboard.writeText(text);\n        return true;\n    } catch (error) {\n        const typedError = error as Error;\n        console.error(typedError.stack || error);\n        logFunc?.(typedError.stack || error);\n        return false;\n    }\n}\n\nexport function clearText(txt: HTMLInputElement, refocus: boolean = false): void {\n    txt.value = '';\n    if (refocus) {\n        txt.focus();\n    }\n}\n\ninterface ThrottleTimeout {\n    start: Function;\n    end: Function;\n}\n\nfunction createThrottleTimeout(clearFunc: Function, duration: number): ThrottleTimeout {\n    let timeout: number | undefined = undefined;\n\n    return {\n        start: () => {\n            if (timeout !== undefined) {\n                clearTimeout(timeout);\n                timeout = undefined;\n            }\n            clearFunc();\n        },\n        end: () => {\n            if (timeout !== undefined) {\n                clearTimeout(timeout);\n            }\n            timeout = setTimeout(clearFunc, duration);\n        }\n    };\n}\n\nexport type FeedbackButtonAsyncFunction = () => Promise<boolean> | boolean | Promise<void> | void;\n\nexport function setupFeedbackButton(button: HTMLButtonElement, action: FeedbackButtonAsyncFunction, logError?: (error: any) => any): () => void {\n    const throttleTimeout: ThrottleTimeout = createThrottleTimeout(() => {\n        button.classList.remove('good-flash');\n        button.classList.remove('bad-flash');\n    }, 1000);\n\n    const clickFunction = async () => {\n        button.disabled = true;\n        throttleTimeout.start();\n\n        try {\n            const actionResult = action();\n\n            let result;\n            if (actionResult instanceof Promise) {\n                result = await actionResult;\n            } else {\n                result = actionResult;\n            }\n\n            if (result === undefined || result === true) {\n                button.classList.add('good-flash');\n            } else {\n                button.classList.add('bad-flash');\n            }\n        } catch (error) {\n            const typedError = error as Error;\n            button.classList.add('bad-flash');\n            console.error(typedError.stack || error);\n            logError?.(typedError.stack || error);\n        } finally {\n            throttleTimeout.end();\n            button.disabled = false;\n        }\n    };\n\n    button.addEventListener('click', clickFunction);\n\n    return clickFunction;\n}\n\nexport function setupCopyButton(txt: HTMLInputElement, button: HTMLButtonElement, logFunc?: (..._: any[]) => void): () => void {\n    return setupFeedbackButton(button, () => writeToClipboard(txt.value), logFunc);\n}\n\nexport function setupViewButton(txt: HTMLInputElement, button: HTMLButtonElement): void {\n    button.addEventListener('click', () => {\n        if (txt.type === 'password') {\n            txt.type = 'input';\n            button.innerHTML = 'Hide';\n        } else {\n            txt.type = 'password';\n            button.innerHTML = 'View';\n        }\n    });\n}\n\nexport function showHide(element: HTMLElement, isVisible: boolean): void {\n    if (isVisible) {\n        element.style.removeProperty('display');\n    } else {\n        element.style.setProperty('display', 'none');\n    }\n}\n\nexport function showHideMany(elements: HTMLElement[], isVisible: boolean): void {\n    for (const element of elements) {\n        showHide(element, isVisible);\n    }\n}\n\nexport function setupShowHideButton(button: HTMLButtonElement, startVisible: boolean, elements: HTMLElement[]): void {\n    let isVisible = startVisible;\n    button.addEventListener('click', function () {\n        isVisible = !isVisible;\n        showHideMany(elements, isVisible);\n    });\n    showHideMany(elements, isVisible);\n}\n","export interface ITabInfo {\n    getTabButton(): HTMLButtonElement;\n    getTabContent(): HTMLElement;\n    onTabSelected(): void;\n}\n\nexport class TabControl {\n    private _activeTabIndex: number = -1;\n\n    public get activeTabIndex(): number {\n        return this._activeTabIndex;\n    }\n\n    public set activeTabIndex(index: number) {\n        if (index < 0 || index >= this.tabs.length) {\n            throw new Error(`Argument 'index' out of range. Must be in range [0;${this.tabs.length - 1}].`);\n        }\n        this.setActiveTab(index);\n    }\n\n    public constructor(private tabs: ITabInfo[]) {\n        for (let i = 0; i < this.tabs.length; i += 1) {\n            tabs[i].getTabButton().addEventListener('click', () => {\n                this.setActiveTab(i);\n            });\n        }\n\n        this.setActiveTab(0);\n    }\n\n    private setActiveTab(activeTabIndex: number) {\n        if (activeTabIndex === this._activeTabIndex) {\n            return;\n        }\n\n        let tabInfo: ITabInfo;\n\n        for (tabInfo of this.tabs) {\n            const button = tabInfo.getTabButton();\n            button.style.removeProperty('font-weight');\n            button.style.setProperty('color', '#C0C0C0');\n\n            tabInfo.getTabContent().style.setProperty('display', 'none');\n        }\n\n        const button = this.tabs[activeTabIndex].getTabButton();\n        button.style.setProperty('font-weight', 'bold');\n        button.style.removeProperty('color');\n\n        this.tabs[activeTabIndex].getTabContent().style.removeProperty('display');\n\n        this._activeTabIndex = activeTabIndex;\n\n        this.tabs[activeTabIndex].onTabSelected();\n    }\n}\n","import * as ui from '../ui';\n\nimport { TimedAction } from '../TimedAction';\nimport { IComponent } from './IComponent';\n\nconst btnProtectTitleForProtect = 'Stores the string in memory and removes it from the UI component. Prevents a physical intruder from copy/pasting the value.';\nconst btnProtectTitleForClear = 'Removes the string form memory and re-enables the UI component.';\n\nconst txtPrivatePart = ui.getElementById('txtPrivatePart') as HTMLInputElement;\nconst txtPrivatePartConfirmation = ui.getElementById('txtPrivatePartConfirmation') as HTMLInputElement;\nconst btnProtect = ui.getElementById('btnProtect') as HTMLButtonElement;\nconst spnProtectedConfirmation = ui.getElementById('spnProtectedConfirmation');\n\nconst spnPrivatePartSize = ui.getElementById('spnPrivatePartSize');\nconst spnPrivatePartSizeConfirmation = ui.getElementById('spnPrivatePartSizeConfirmation');\n\nconst PRIVATE_PART_PROTECTION_TIMEOUT: number = 60 * 1000;\n\nlet privatePart: string | undefined;\n\nconst onChangedHandlers: (() => void)[] = [];\n\nexport function registerOnChanged(onChanged: () => void) {\n    onChangedHandlers.push(onChanged);\n}\n\nexport function hasPrivatePart(): boolean {\n    return getPrivatePart().length > 0;\n}\n\nexport function getPrivatePart(): string {\n    if (privatePart !== undefined) {\n        return privatePart;\n    }\n    return txtPrivatePart.value;\n}\n\nexport function protectAndLockPrivatePart(): void {\n    if (txtPrivatePart.value.length === 0) {\n        return;\n    }\n\n    privatePart = txtPrivatePart.value;\n    spnProtectedConfirmation.innerHTML = 'Protected';\n\n    ui.clearText(txtPrivatePart);\n\n    ui.clearText(txtPrivatePartConfirmation);\n    spnPrivatePartSize.innerHTML = '0';\n    spnPrivatePartSizeConfirmation.innerHTML = '0';\n\n    txtPrivatePart.disabled = true;\n    txtPrivatePartConfirmation.disabled = true;\n\n    btnProtect.innerHTML = 'Clear and unlock';\n    btnProtect.title = btnProtectTitleForClear;\n\n    updatePrivatePartsMatching();\n}\n\nfunction clearAndUnLockPrivatePart(): void {\n    privatePart = undefined;\n    spnProtectedConfirmation.innerHTML = '';\n\n    txtPrivatePart.disabled = false;\n    txtPrivatePartConfirmation.disabled = false;\n\n    btnProtect.innerHTML = 'Protect and lock';\n    btnProtect.title = btnProtectTitleForProtect;\n    btnProtect.disabled = true;\n}\n\nfunction togglePrivatePartProtection(): void {\n    if (privatePart === undefined) {\n        protectAndLockPrivatePart();\n    } else {\n        clearAndUnLockPrivatePart();\n    }\n}\n\nfunction onProtectButtonClick() {\n    togglePrivatePartProtection();\n}\n\nconst protectPrivatePartAction: TimedAction = new TimedAction(protectAndLockPrivatePart, PRIVATE_PART_PROTECTION_TIMEOUT);\n\nfunction onPrivatePartTextInput(): void {\n    btnProtect.disabled = txtPrivatePart.value.length === 0;\n\n    spnPrivatePartSize.innerHTML = txtPrivatePart.value.length.toString();\n    updatePrivatePartsMatching();\n\n    let onChangedHandler: () => void;\n    for (onChangedHandler of onChangedHandlers) {\n        onChangedHandler();\n    }\n\n    protectPrivatePartAction.reset();\n}\n\nfunction updatePrivatePartsMatching(): void {\n    if (txtPrivatePartConfirmation.value === txtPrivatePart.value) {\n        txtPrivatePartConfirmation.style.setProperty('background', ui.SUCCESS_COLOR);\n    } else {\n        txtPrivatePartConfirmation.style.setProperty('background', ui.ERROR_COLOR);\n    }\n};\n\nfunction onPrivatePartConfirmationTextInput(): void {\n    spnPrivatePartSizeConfirmation.innerHTML = txtPrivatePartConfirmation.value.length.toString();\n    protectPrivatePartAction.reset();\n    updatePrivatePartsMatching();\n}\n\nexport class PrivatePartComponent implements IComponent {\n    public readonly name: string = 'PrivatePart';\n\n    public getVaultHint(): string {\n        throw new Error('Not supported.');\n    }\n\n    public init(): void {\n        btnProtect.addEventListener('click', onProtectButtonClick);\n        txtPrivatePart.addEventListener('input', onPrivatePartTextInput);\n        txtPrivatePartConfirmation.addEventListener('input', onPrivatePartConfirmationTextInput);\n\n        updatePrivatePartsMatching();\n        btnProtect.title = btnProtectTitleForProtect;\n        txtPrivatePart.focus();\n    }\n}\n","export class TimedAction {\n    private timeout: number | undefined;\n\n    public constructor(private action: Function, private delay: number) {\n    }\n\n    public reset(overrideDelay: number | undefined = undefined): void {\n        if (this.timeout !== undefined) {\n            clearTimeout(this.timeout);\n        }\n\n        const delay = overrideDelay !== undefined ? overrideDelay : this.delay;\n\n        this.timeout = window.setTimeout(() => {\n            this.action();\n            this.timeout = undefined;\n        }, delay);\n    }\n}\n","export function arrayToString(array: ArrayBuffer): string {\n    const decoder = new TextDecoder(/*'utf-8'*/);\n    return decoder.decode(array);\n};\n\nexport function copy(source: Uint8Array, sourceIndex: number, target: Uint8Array, targetIndex: number, length: number): void {\n    for (let i: number = 0; i < length; i += 1) {\n        target[i + targetIndex] = source[i + sourceIndex];\n    }\n}\n\nfunction createHeaderedBuffer(buffer: ArrayBuffer): ArrayBuffer {\n    if (buffer.byteLength > 0xFFFF) {\n        throw new Error(`Buffer too large: ${buffer.byteLength} bytes`);\n    }\n\n    let length = buffer.byteLength;\n    const headeredBuffer: Uint8Array = new Uint8Array(2 + buffer.byteLength);\n\n    for (let i: number = 0; i < 2; i += 1) {\n        headeredBuffer[i] = length % 256;\n        length /= 256;\n    }\n\n    headeredBuffer.set(new Uint8Array(buffer), 2);\n\n    return headeredBuffer.buffer;\n}\n\nfunction arrayBufferToUnsignedBigIntWithoutHeader(arrayBuffer: ArrayBuffer): bigint {\n    const length: number = arrayBuffer.byteLength;\n    const arrayView: DataView = new DataView(arrayBuffer, 0);\n\n    let result: bigint = 0n;\n    let multiplier: bigint = 1n;\n\n    for (let i: number = 0; i < length; i += 1) {\n        result += BigInt(arrayView.getUint8(i)) * multiplier;\n        multiplier *= 256n;\n    }\n\n    return result;\n}\n\nfunction arrayBufferToUnsignedBigInt(arrayBuffer: ArrayBuffer): bigint {\n    arrayBuffer = createHeaderedBuffer(arrayBuffer);\n\n    const length: number = arrayBuffer.byteLength;\n    const arrayView: DataView = new DataView(arrayBuffer, 0);\n\n    let result: bigint = 0n;\n    let multiplier: bigint = 1n;\n\n    for (let i: number = 0; i < length; i += 1) {\n        result += BigInt(arrayView.getUint8(i)) * multiplier;\n        multiplier *= 256n;\n    }\n\n    return result;\n}\n\nexport function unsignedBigIntToArrayBuffer(number: bigint): ArrayBuffer {\n    const result: Array<number> = [];\n\n    while (number > 0n)\n    {\n        const remainder: bigint = number % 256n;\n        number /= 256n;\n\n        const byteValue: number = Number(<any>BigInt.asUintN(8, remainder));\n\n        result.push(byteValue);\n    }\n\n    let totalLength: number = result[0];\n    if (result.length > 1) { // For case where original buffer is of length 1 and contains 0.\n        totalLength += result[1] * 256;\n    }\n\n    // The varable 'result' contains 2 bytes of size header.\n    const diff = totalLength - (result.length - 2);\n\n    for (let i: number = 0; i < diff; i += 1) {\n        result.push(0);\n    }\n\n    return new Uint8Array(result.slice(2)).buffer;\n}\n\n// This is a one way encoding in the sense that decoding is not always deterministic.\n// This can be used to generate strings where decoding it doesn't matter.\nexport function toCustomBaseOneWay(bytes: ArrayBuffer, alphabet: string): string {\n    const alphabetLength: bigint = BigInt(alphabet.length);\n\n    let result: string = '';\n    let number: bigint = arrayBufferToUnsignedBigIntWithoutHeader(bytes);\n\n    while (number > 0n)\n    {\n        const remainder: bigint = number % alphabetLength;\n        number /= alphabetLength;\n\n        const index: number = <number><any>BigInt.asUintN(8, remainder);\n\n        result += alphabet[index];\n    }\n\n    return result;\n}\n\nexport function toCustomBase(bytes: ArrayBuffer, alphabet: string): string {\n    const alphabetLength: bigint = BigInt(alphabet.length);\n\n    let result: string = '';\n    let number: bigint = arrayBufferToUnsignedBigInt(bytes);\n\n    while (number > 0n)\n    {\n        const remainder: bigint = number % alphabetLength;\n        number /= alphabetLength;\n\n        const index: number = <number><any>BigInt.asUintN(8, remainder);\n\n        result += alphabet[index];\n    }\n\n    return result;\n}\n\nexport function fromCustomBase(input: string, alphabet: string): ArrayBuffer {\n    const alphabetLength: bigint = BigInt(alphabet.length);\n\n    let number: bigint = 0n;\n    let multiplier: bigint = 1n;\n\n    for (let i: number = 0; i < input.length; i += 1) {\n        const value: bigint = BigInt(alphabet.indexOf(input[i]));\n\n        number += value * multiplier;\n        multiplier *= alphabetLength;\n    }\n\n    return unsignedBigIntToArrayBuffer(number);\n}\n\nexport function toBase16(buffer: ArrayBuffer): string {\n    return Array.prototype.map.call(\n        new Uint8Array(buffer),\n        x => ('00' + x.toString(16)).slice(-2)\n    ).join('');\n}\n","export class TaskCancelledError extends Error {\n    private _name: string;\n\n    public get name(): string {\n        return this._name;\n    }\n\n    constructor(message?: string) {\n        super(message);\n        this._name = TaskCancelledError.ERROR_NAME;\n        Object.setPrototypeOf(this, new.target.prototype);\n    }\n\n    public static readonly ERROR_NAME: string = 'TaskCancelledError';\n\n    public static isMatching(error: Error) {\n        return error && error.name === TaskCancelledError.ERROR_NAME;\n    }\n}\n\nexport class CancellationTokenSource {\n    private _isCancelled: boolean = false;\n    private _token: CancellationToken;\n\n    constructor() {\n        this._token = new CancellationToken(this);\n    }\n\n    public get isCancelled(): boolean {\n        return this._isCancelled;\n    }\n\n    public get token(): CancellationToken {\n        return this._token;\n    }\n\n    public cancel(): void {\n        this._isCancelled = true;\n    }\n}\n\nexport class CancellationToken {\n    private static _none: CancellationToken | null = null;\n    public static get none(): CancellationToken {\n        if (CancellationToken._none === null) {\n            CancellationToken._none = new CancellationToken(new CancellationTokenSource());\n        }\n        return CancellationToken._none;\n    }\n\n    constructor(private source: CancellationTokenSource) {\n    }\n\n    public get isCancelled(): boolean {\n        return this.source.isCancelled;\n    }\n}\n\nexport function ensureNotCancelled(cancellationToken: CancellationToken): void {\n    if (cancellationToken.isCancelled) {\n        throw new TaskCancelledError();\n    }\n}\n\nexport function rethrowCancelled(error: Error): void {\n    if (TaskCancelledError.isMatching(error)) {\n        throw error;\n    }\n}\n\nexport type TaskFactory<T> = (cancellationToken: CancellationToken) => Promise<T>;\n\n// Manages the lifetime of a single task, and automatically cancels the previous when running a new one.\n// It also awaits for previous task to be fully terminated before running the new one.\nexport class TaskRunner<TValue> {\n    private currentTokenSource: CancellationTokenSource | null = null;\n    private currentTask: Promise<TValue | undefined> | null = null;\n    private microThreadId: number = 0;\n\n    // Gets a value indicating whether a task is currently running or not.\n    public get isRunning(): boolean {\n        return this.currentTask !== null;\n    }\n\n    // Cancels the currently running task, if any.\n    // Returns true if no one called cancelInternal() when it returns.\n    private async cancelInternal(throwTaskCanceledError: boolean): Promise<boolean> {\n        if (this.microThreadId === Number.MAX_SAFE_INTEGER) {\n            this.microThreadId = 0;\n        } else {\n            this.microThreadId = this.microThreadId + 1;\n        }\n\n        const localMicroThreadId: number = this.microThreadId;\n\n        // This corresponds to the end of cancelAndExecute().\n        if (this.currentTask === null) {\n            return true;\n        }\n\n        if (this.currentTokenSource !== null) {\n            this.currentTokenSource.cancel();\n\n            // The above currentTokenSource.cancel() can run the finally block of cancelAndExecute() and set currentTask to null.\n            if (this.currentTask !== null) {\n                try {\n                    await this.currentTask;\n                } catch (error) {\n                    if (TaskCancelledError.isMatching(error as Error)) {\n                        if (throwTaskCanceledError) {\n                            throw error;\n                        }\n                    } else {\n                        throw error;\n                    }\n                }\n            }\n        }\n\n        return localMicroThreadId === this.microThreadId;\n    }\n\n    // Cancels the currently running task, if any.\n    // throwTaskCanceledError: Pass true allow to throw a TaskCancelledError.\n    // Returns a Promise that completes when the current job is fully cancelled.\n    public async cancel(throwTaskCanceledError: boolean = false): Promise<void> {\n        await this.cancelInternal(throwTaskCanceledError);\n    }\n\n    // Cancels the current task if any, and runs a new one.\n    // T: Type of value returned by the task to run.\n    // taskFactory: A task producer that receives a CancellationToken.\n    // throwTaskCanceledError: Pass true allow to throw a TaskCancelledError.\n    // Returns the task produced by the taskFactory.\n    public async cancelAndExecute(taskFactory: TaskFactory<TValue>, throwTaskCanceledError: boolean = false): Promise<TValue | undefined> {\n        if (await this.cancelInternal(throwTaskCanceledError) === false) {\n            if (throwTaskCanceledError === false) {\n                return undefined;\n            }\n            throw new TaskCancelledError();\n        }\n\n        var localToken = new CancellationTokenSource();\n        this.currentTokenSource = localToken;\n\n        try {\n            this.currentTask = taskFactory(this.currentTokenSource.token);\n            return await this.currentTask;\n        } catch (error) {\n            if (TaskCancelledError.isMatching(error as Error) && throwTaskCanceledError === false) {\n                return undefined;\n            }\n            throw error;\n        } finally {\n            this.currentTask = null;\n        }\n    }\n}\n","import * as arrayUtils from './arrayUtils';\nimport { CancellationToken, ensureNotCancelled } from './asyncUtils';\n\nexport const BASE62_ALPHABET: string = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\n\nexport interface IPasswordGenerator {\n    readonly version: number;\n    readonly description: string;\n    generatePassword(privatePart: ArrayBuffer, publicPart: ArrayBuffer, cancellationToken: CancellationToken): Promise<ArrayBuffer>;\n}\n\nexport interface ICipher {\n    readonly version: number;\n    readonly description: string;\n    encrypt(input: ArrayBuffer, password: ArrayBuffer, cancellationToken: CancellationToken): Promise<ArrayBuffer>;\n    decrypt(input: ArrayBuffer, password: ArrayBuffer, cancellationToken: CancellationToken): Promise<ArrayBuffer>;\n}\n\nexport async function getDerivedBytes(password: ArrayBuffer, salt: ArrayBuffer, iterations: number, cancellationToken: CancellationToken): Promise<ArrayBuffer> {\n    const baseKey: CryptoKey = await window.crypto.subtle.importKey(\n        'raw',\n        password,\n        'PBKDF2',\n        false,\n        ['deriveKey']\n    );\n\n    ensureNotCancelled(cancellationToken);\n\n    const algorithm: Pbkdf2Params = {\n        name: 'PBKDF2',\n        hash: 'SHA-512',\n        iterations: iterations,\n        salt\n    };\n\n    const derivedKeyType: AesDerivedKeyParams = {\n        name: 'AES-GCM', // Using AES-CBC or AES-GCM here produces the same result.\n        length: 256\n    };\n\n    const result: CryptoKey = await window.crypto.subtle.deriveKey(\n        algorithm,\n        baseKey,\n        derivedKeyType,\n        true,\n        ['encrypt']\n    );\n\n    ensureNotCancelled(cancellationToken);\n\n    const key: ArrayBuffer = await window.crypto.subtle.exportKey('raw', result);\n\n    ensureNotCancelled(cancellationToken);\n\n    return key;\n}\n\nexport function generateRandomBytes(byteCount: number = 64): ArrayBuffer {\n    const array: Uint8Array = new Uint8Array(byteCount);\n    return crypto.getRandomValues(array).buffer;\n}\n\nexport function generateRandomString(byteCount: number = 64, alphabet: string = BASE62_ALPHABET): string {\n    const array: ArrayBuffer = generateRandomBytes(byteCount);\n    return arrayUtils.toCustomBaseOneWay(array, alphabet);\n}\n","function findNonCharFromStart(value: string, chars: string[]): number {\n    for (let i = 0; i < value.length; i += 1) {\n        if (chars.includes(value[i]) === false) {\n            return i;\n        }\n    }\n\n    return value.length;\n}\n\nfunction findNonCharFromEnd(value: string, chars: string[]): number {\n    for (let i = value.length - 1; i >= 0; i -= 1) {\n        if (chars.includes(value[i]) === false) {\n            return i + 1;\n        }\n    }\n\n    return value.length;\n}\n\nexport function trim(value: string, ...chars: string[]): string {\n    const start: number = findNonCharFromStart(value, chars);\n    const end: number = findNonCharFromEnd(value, chars);\n\n    return value.substring(start, end);\n}\n\nexport function truncate(input: string, length: number): string {\n    if (input.length <= length) {\n        return input;\n    }\n\n    return input.substring(0, length);\n}\n\nexport function stringToArray(str: string): ArrayBuffer {\n    const encoder = new TextEncoder(/*'utf-8'*/);\n    return encoder.encode(str).buffer;\n}\n\nexport function fromBase16(str: string): ArrayBuffer {\n    if (str.length % 2 !== 0) {\n        str = '0' + str;\n    }\n\n    const result: Uint8Array = new Uint8Array(str.length / 2);\n\n    for (let i = 0; i < result.byteLength; i += 1) {\n        const position = i * 2;\n        result[i] = parseInt(str.substring(position, position + 2), 16);\n    }\n\n    return result.buffer;\n}\n","export type PlainObject = { [key: string]: any };\n\nexport function isPlainObject(value: any): boolean {\n    return value !== undefined &&\n        value !== null &&\n        value.hasOwnProperty('constructor') === false &&\n        value.constructor.name === 'Object';\n}\n\nexport function objectDeepSort(object: PlainObject): PlainObject {\n    const output: PlainObject = {};\n\n    for (const [key, value] of Object.entries(object).sort((a, b) => a[0].localeCompare(b[0]))) {\n        output[key] = isPlainObject(value) ? objectDeepSort(value) : value;\n    }\n\n    return output;\n}\n","type ServiceContainer = { [key: string]: any };\n\nconst services: ServiceContainer = {};\n\nexport function listServices(): string[] {\n    return Object.keys(services);\n}\n\nexport function getService(serviceName: string): any {\n    if (!serviceName) {\n        throw new TypeError(`Argument 'serviceName' is mandatory.`);\n    }\n\n    const service = services[serviceName];\n\n    if (service === undefined) {\n        throw new Error(`Service '${serviceName}' is not registered.`);\n    }\n\n    return service;\n}\n\nexport function registerService(serviceName: string, instance: any): void {\n    if (!serviceName) {\n        throw new TypeError(`Argument 'serviceName' is mandatory.`);\n    }\n    if (instance === undefined) {\n        throw new TypeError(`Argument 'instance' cannot be undefined.`);\n    }\n\n    if (services[serviceName] !== undefined) {\n        throw new Error(`Service '${serviceName}' is already registered.`);\n    }\n\n    services[serviceName] = instance;\n}\n","import * as passwordComponent from '../components/passwordComponent';\n\nimport { SecureLocalStorage } from './SecureLocalStorage';\nimport { IVaultStorage } from './IVaultStorage';\nimport { PlainObject } from '../PlainObject';\n\nimport { CancellationToken } from '../asyncUtils';\n\ninterface IApp {\n    name: string;\n}\n\ninterface IAuthorization {\n    id: number;\n    app: IApp;\n}\n\ninterface IGitHubContent {\n    sha: string;\n    content: string;\n}\n\nabstract class GitHubVaultStorageBase implements IVaultStorage {\n    static BASE_URL: string = 'https://api.github.com';\n    static AUTH_TOKEN_KEY_NAME: string = 'GitHubVaultStorageBase.AuthToken';\n\n    private token: string | null = null;\n    private oneTimePassword: string | null = null;\n    private currentVaultContentHash: string | null = null;\n\n    private username: string | null = null;\n    private repositoryName: string | null = null;\n    private vaultFilename: string | null = null;\n\n    static LOCAL_STORAGE_KEY_USERNAME: string = 'GitHubVaultStorageBase.Username';\n    static LOCAL_STORAGE_KEY_REPO: string = 'GitHubVaultStorageBase.Repository';\n    static LOCAL_STORAGE_KEY_FILENAME: string = 'GitHubVaultStorageBase.Filename';\n\n    protected getUsername(): string | null {\n        return this.username;\n    }\n\n    protected getRepositoryName(): string | null {\n        return this.repositoryName;\n    }\n\n    protected getVaultFilename(): string | null {\n        return this.vaultFilename;\n    }\n\n    public constructor(protected secureLocalStorage: SecureLocalStorage) {\n    }\n\n    public clear(): void {\n        this.secureLocalStorage.removeItem(GitHubApiVaultStorage.LOCAL_STORAGE_KEY_USERNAME);\n        this.secureLocalStorage.removeItem(GitHubApiVaultStorage.LOCAL_STORAGE_KEY_REPO);\n        this.secureLocalStorage.removeItem(GitHubApiVaultStorage.LOCAL_STORAGE_KEY_FILENAME);\n\n        this.secureLocalStorage.removeItem(GitHubVaultStorageBase.AUTH_TOKEN_KEY_NAME);\n    }\n\n    private constructTokenAuthString(): string {\n        return `token ${this.token}`;\n    }\n\n    private constructFetchRequest(method: string, authHeader: string, body: any): RequestInit {\n        const headers: PlainObject = {\n            'Accept': 'application/vnd.github.v3+json',\n            'Content-Type': 'application/json',\n            'Authorization': authHeader\n        };\n\n        if (this.oneTimePassword) {\n            headers['x-github-otp'] = this.oneTimePassword;\n        }\n\n        return {\n            method,\n            headers,\n            body: body ? JSON.stringify(body) : undefined\n        };\n    }\n\n    private constructUrl(relativeUrl: string): string {\n        return `${GitHubVaultStorageBase.BASE_URL}${relativeUrl}`;\n    }\n\n    protected async request(retryOnUnauthorized: boolean, method: string, relativeUrl: string, authHeader: string, body: any = undefined): Promise<Response | null> {\n        const url: string = this.constructUrl(relativeUrl);\n        const requestInfo: RequestInit = this.constructFetchRequest(method, authHeader, body);\n\n        let response: Response = await fetch(url, requestInfo);\n\n        if (response.status === 401 && retryOnUnauthorized) {\n            this.oneTimePassword = prompt('Input your 2FA code:');\n\n            if (!this.oneTimePassword) {\n                return null;\n            }\n\n            return await this.request(retryOnUnauthorized, method, relativeUrl, authHeader, body);\n        }\n\n        return response;\n    }\n\n    protected getSetVaultParameter(key: string, promptText: string, defaultValue?: string): string | null {\n        let value: string | null = window.localStorage.getItem(key);\n\n        if (value) {\n            return value;\n        }\n\n        value = prompt(promptText, defaultValue);\n\n        if (!value) {\n            return null;\n        }\n\n        window.localStorage.setItem(key, value);\n\n        return value;\n    }\n\n    protected ensureVaultParameters(): Promise<boolean> {\n        const url = new URL(window.location.toString());\n\n        let defaultAccountUsername = '';\n        let defaultRepo = '';\n\n        if (url.hostname === 'github.com') {\n            const pathElements = url.pathname.split('/');\n            if (pathElements.length >= 3) {\n                defaultAccountUsername = pathElements[1];\n                defaultRepo = `${pathElements[2]}Vault`;\n            }\n        }\n\n        if (!defaultRepo) {\n            defaultRepo = 'ItchyPasswordVault';\n        }\n\n        const username = this.getSetVaultParameter(GitHubVaultStorageBase.LOCAL_STORAGE_KEY_USERNAME, 'GitHub account username:', defaultAccountUsername);\n        if (!username) {\n            return Promise.resolve(false);\n        }\n        this.username = username;\n\n        const repositoryName: string | null = this.getSetVaultParameter(GitHubVaultStorageBase.LOCAL_STORAGE_KEY_REPO, 'Vault GitHub repository name:', defaultRepo);\n        if (!repositoryName) {\n            return Promise.resolve(false);\n        }\n        this.repositoryName = repositoryName;\n\n        const vaultFilename: string | null = this.getSetVaultParameter(GitHubVaultStorageBase.LOCAL_STORAGE_KEY_FILENAME, 'Vault filename:', 'vault.json');\n        if (!vaultFilename) {\n            return Promise.resolve(false);\n        }\n        this.vaultFilename = vaultFilename;\n\n        return Promise.resolve(true);\n    }\n\n    protected abstract getToken(): Promise<string | null>;\n\n    private async ensureToken(): Promise<boolean> {\n        let token: string | null = await this.secureLocalStorage.getItem(GitHubVaultStorageBase.AUTH_TOKEN_KEY_NAME);\n\n        if (token === null) {\n            token = await this.getToken();\n        }\n\n        if (!token) {\n            return false;\n        }\n\n        await this.secureLocalStorage.setItem(GitHubVaultStorageBase.AUTH_TOKEN_KEY_NAME, token);\n\n        this.token = token;\n\n        return true;\n    }\n\n    private constructVaultFileUrl() {\n        return `/repos/${this.username}/${this.repositoryName}/contents/${this.vaultFilename}`;\n    }\n\n    public async getVaultContent(): Promise<string | null> {\n        if (await this.ensureVaultParameters() === false) {\n            return null;\n        }\n        if (await this.ensureToken() === false) {\n            return null;\n        }\n\n        const url: string = this.constructVaultFileUrl();\n        const response: Response | null = await this.request(false, 'GET', url, this.constructTokenAuthString());\n\n        if (response === null) {\n            console.warn('Fetching vault content aborted.');\n            return null;\n        }\n\n        if (response.ok === false) {\n            if (response.status === 401) {\n                this.secureLocalStorage.removeItem(GitHubVaultStorageBase.AUTH_TOKEN_KEY_NAME);\n                this.token = null;\n                this.oneTimePassword = null;\n\n                return await this.getVaultContent();\n            } else if (response.status === 404) {\n                if (await this.setVaultContent('{}', '[ItchyPassword] Creation of vault file')) {\n                    return '{}';\n                }\n                return null;\n            }\n\n            console.error(`Failed to fetch vault file '${this.vaultFilename}'.`, response);\n\n            return null;\n        }\n\n        const responseContent: IGitHubContent = await response.json();\n\n        this.currentVaultContentHash = responseContent.sha;\n\n        const decodedContent = atob(responseContent.content);\n\n        if (decodedContent.trim() === '') {\n            return '{}';\n        }\n\n        return decodedContent;\n    }\n\n    public async setVaultContent(newContent: string, updateMessage: string): Promise<boolean> {\n        if (await this.ensureVaultParameters() === false) {\n            return false;\n        }\n        if (await this.ensureToken() === false) {\n            return false;\n        }\n\n        const body = {\n            message: updateMessage,\n            content: btoa(newContent),\n            sha: this.currentVaultContentHash\n        };\n\n        const url: string = this.constructVaultFileUrl();\n        const response: Response | null = await this.request(false, 'PUT', url, this.constructTokenAuthString(), body);\n\n        if (response === null) {\n            console.warn('Push new vault content aborted.');\n            return false;\n        }\n\n        const responseContent: any = await response.json();\n\n        if (response.ok === false) {\n            console.error(`Failed to create/update vault file '${this.vaultFilename}'.`, response, responseContent);\n            return false;\n        }\n\n        this.currentVaultContentHash = (responseContent.content as IGitHubContent).sha;\n\n        return true;\n    }\n\n    public getVaultSettings(): string {\n        const username = window.localStorage.getItem(GitHubVaultStorageBase.LOCAL_STORAGE_KEY_USERNAME);\n        const repositoryName = window.localStorage.getItem(GitHubVaultStorageBase.LOCAL_STORAGE_KEY_REPO);\n        const vaultFilename = window.localStorage.getItem(GitHubVaultStorageBase.LOCAL_STORAGE_KEY_FILENAME);\n\n        const usernameDisplay = username == null ? '<null>' : `'${username}'`;\n        const repositoryNameDisplay = repositoryName == null ? '<null>' : `'${repositoryName}'`;\n        const vaultFilenameDisplay = vaultFilename == null ? '<null>' : `'${vaultFilename}'`;\n\n        return `username: ${usernameDisplay}\\nrepository name: ${repositoryNameDisplay}\\nvault filename: ${vaultFilenameDisplay}`;\n    }\n}\n\n// ================================================================================================\n\nexport class GitHubPersonalAccessTokenVaultStorage extends GitHubVaultStorageBase {\n    protected getToken(): Promise<string | null> {\n        const authToken: string | null = prompt('Personal access token:');\n        return Promise.resolve(authToken);\n    }\n}\n\n// ================================================================================================\n\nexport class GitHubApiVaultStorage extends GitHubVaultStorageBase {\n    static AUTHORIZATION_NAME: string = 'github.com/TanukiSharp/ItchyPassword';\n\n    static LOCAL_STORAGE_KEY_PASSWORD_PUBLIC: string = 'GitHubApiVaultStorage.PasswordPublicPart';\n    static LOCAL_STORAGE_KEY_PASSWORD_LENGTH: string = 'GitHubApiVaultStorage.PasswordLength';\n    static LOCAL_STORAGE_KEY_BROWSER_NAME: string = 'GitHubApiVaultStorage.BrowserName';\n\n    private basicAuthHeader: string | null = null;\n    private authorizationName: string | null = null;\n\n    public constructor(secureLocalStorage: SecureLocalStorage) {\n        super(secureLocalStorage);\n    }\n\n    public clear(): void {\n        super.clear();\n\n        this.secureLocalStorage.removeItem(GitHubApiVaultStorage.LOCAL_STORAGE_KEY_PASSWORD_PUBLIC);\n        this.secureLocalStorage.removeItem(GitHubApiVaultStorage.LOCAL_STORAGE_KEY_PASSWORD_LENGTH);\n        this.secureLocalStorage.removeItem(GitHubApiVaultStorage.LOCAL_STORAGE_KEY_BROWSER_NAME);\n    }\n\n    private constructBasicAuthString(username: string, password: string): string {\n        console.log('username:', username);\n        console.log('password:', password);\n\n        const authString = btoa(`${username}:${password}`);\n        return `Basic ${authString}`;\n    }\n\n    private async listAuthorizations(): Promise<IAuthorization[] | null> {\n        if (!this.basicAuthHeader) {\n            return null;\n        }\n\n        const response: Response | null = await this.request(true, 'GET', '/authorizations', this.basicAuthHeader);\n\n        if (response === null) {\n            console.warn('List authorizations aborted.');\n            return null;\n        }\n\n        if (response.ok === false) {\n            console.error('Failed to list authorizations.', response);\n            return null;\n        }\n\n        return await response.json();\n    }\n\n    private async deleteAuthorization(authorization: IAuthorization): Promise<boolean> {\n        if (!this.basicAuthHeader) {\n            return false;\n        }\n\n        const response: Response | null = await this.request(true, 'DELETE', `/authorizations/${authorization.id}`, this.basicAuthHeader);\n\n        if (response === null) {\n            console.warn('Delete authorization aborted.');\n            return false;\n        }\n\n        if (response.ok === false) {\n            console.error(`Failed to delete authorization '${authorization.id}'.`, response);\n        }\n\n        return response.ok;\n    }\n\n    private async createAuthorization(): Promise<string | null> {\n        if (!this.authorizationName) {\n            return null;\n        }\n\n        if (!this.basicAuthHeader) {\n            return null;\n        }\n\n        const body: PlainObject = {\n            scopes: ['repo'],\n            note: this.authorizationName\n        };\n\n        const response: Response | null = await this.request(true, 'POST', '/authorizations', this.basicAuthHeader, body);\n\n        if (response === null) {\n            console.warn('Create new authorization aborted.');\n            return null;\n        }\n\n        if (response.ok === false) {\n            console.error('Failed to create new authorization.', response);\n            return null;\n        }\n\n        return (await response.json()).token as string;\n    }\n\n    private findAuthorization(authorizations: IAuthorization[]): IAuthorization | null {\n        if (!this.authorizationName) {\n            return null;\n        }\n\n        for (const authorization of authorizations) {\n            if (authorization.app && authorization.app.name === this.authorizationName) {\n                return authorization;\n            }\n        }\n\n        return null;\n    }\n\n    // protected async ensureVaultParameters(): Promise<boolean> {\n    //     if (await super.ensureVaultParameters() === false) {\n    //         return false;\n    //     }\n\n    //     const username: string | null = this.getUsername();\n    //     if (!username) {\n    //         return false;\n    //     }\n\n    //     const passwordPublicPart: string | null = this.getSetVaultParameter(GitHubApiVaultStorage.LOCAL_STORAGE_KEY_PASSWORD_PUBLIC, 'GitHub account password public part:');\n    //     if (!passwordPublicPart) {\n    //         return false;\n    //     }\n\n    //     const passwordLengthString: string | null = this.getSetVaultParameter(GitHubApiVaultStorage.LOCAL_STORAGE_KEY_PASSWORD_LENGTH, 'GitHub account password length:');\n    //     if (!passwordLengthString) {\n    //         return false;\n    //     }\n\n    //     const passwordLength: number = parseInt(passwordLengthString, 10);\n    //     if (Number.isSafeInteger(passwordLength) === false || passwordLength <= 0) {\n    //         return false;\n    //     }\n\n    //     let password: string | null = await passwordComponent.generatePasswordString(\n    //         passwordPublicPart,\n    //         passwordComponent.DEFAULT_ALPHABET,\n    //         passwordComponent.CURRENT_PASSWORD_GENERATOR_VERSION,\n    //         CancellationToken.none\n    //     );\n\n    //     if (!password) {\n    //         return false;\n    //     }\n\n    //     this.basicAuthHeader = this.constructBasicAuthString(username, password.substring(0, passwordLength));\n\n    //     const browserName: string | null = this.getSetVaultParameter(GitHubApiVaultStorage.LOCAL_STORAGE_KEY_BROWSER_NAME, 'Current device/browser name:');\n    //     if (!browserName) {\n    //         return false;\n    //     }\n\n    //     this.authorizationName = `${GitHubApiVaultStorage.AUTHORIZATION_NAME} (${browserName})`;\n\n    //     return true;\n    // }\n\n    protected async getToken(): Promise<string | null> {\n        const authorizations: IAuthorization[] | null = await this.listAuthorizations();\n\n        if (authorizations === null) {\n            return null;\n        }\n\n        const authorization: IAuthorization | null = this.findAuthorization(authorizations);\n\n        if (authorization !== null) {\n            if (await this.deleteAuthorization(authorization) === false) {\n                return null;\n            }\n        }\n\n        return await this.createAuthorization();\n    }\n}\n","import { ICipher, getDerivedBytes } from '../crypto';\nimport { CancellationToken, ensureNotCancelled } from '../asyncUtils';\n\nexport class CipherV2 implements ICipher {\n    private iterations: number = 100000;\n\n    public get version(): number {\n        return 2;\n    }\n\n    public get description(): string {\n        return 'PBKDF2 + AES-GCM';\n    }\n\n    async encrypt(input: ArrayBuffer, password: ArrayBuffer, cancellationToken: CancellationToken): Promise<ArrayBuffer> {\n        const output: ArrayBuffer = new ArrayBuffer(12 + 16 + 16 + input.byteLength);\n\n        const nonce: Uint8Array = crypto.getRandomValues(new Uint8Array(output, 0, 12));\n        const passwordSalt: Uint8Array = crypto.getRandomValues(new Uint8Array(output, 12, 16));\n\n        const aesGcmParams: AesGcmParams = {\n            name: 'AES-GCM',\n            iv: nonce\n        };\n\n        const aesKeyAlgorithm: AesKeyAlgorithm = {\n            name: 'AES-GCM',\n            length: 256\n        };\n\n        const passwordKey: CryptoKey = await window.crypto.subtle.importKey(\n            'raw',\n            await getDerivedBytes(password, passwordSalt, this.iterations, cancellationToken),\n            aesKeyAlgorithm,\n            false,\n            ['encrypt']\n        );\n\n        ensureNotCancelled(cancellationToken);\n\n        const result: ArrayBuffer = await window.crypto.subtle.encrypt(aesGcmParams, passwordKey, input);\n\n        ensureNotCancelled(cancellationToken);\n\n        new Uint8Array(output).set(new Uint8Array(result), 12 + 16);\n\n        return output;\n    }\n\n    async decrypt(input: ArrayBuffer, password: ArrayBuffer, cancellationToken: CancellationToken): Promise<ArrayBuffer> {\n        const nonce: Uint8Array = new Uint8Array(input, 0, 12);\n        const passwordSalt: Uint8Array = new Uint8Array(input, 12, 16);\n        const payload: Uint8Array = new Uint8Array(input, 12 + 16);\n\n        const aesGcmParams: AesGcmParams = {\n            name: 'AES-GCM',\n            iv: nonce\n        };\n\n        const aesKeyAlgorithm: AesKeyAlgorithm = {\n            name: 'AES-GCM',\n            length: 256\n        };\n\n        const derivedKey: ArrayBuffer = await getDerivedBytes(password, passwordSalt, this.iterations, cancellationToken);\n\n        ensureNotCancelled(cancellationToken);\n\n        const passwordKey: CryptoKey = await window.crypto.subtle.importKey(\n            'raw',\n            derivedKey,\n            aesKeyAlgorithm,\n            false,\n            ['decrypt']\n        );\n\n        ensureNotCancelled(cancellationToken);\n\n        const result: ArrayBuffer = await window.crypto.subtle.decrypt(aesGcmParams, passwordKey, payload);\n\n        ensureNotCancelled(cancellationToken);\n\n        return result;\n    }\n}\n","import { PlainObject } from 'PlainObject';\nimport { CipherComponent } from '../components/cipherComponent';\n\nexport class CipherService {\n    public constructor(private readonly cipherComponent: CipherComponent) {\n    }\n\n    public async activate(storageFullPath: string, cipherName: string, parameterKeys: PlainObject): Promise<boolean> {\n        if (await this.cipherComponent.setParameters(cipherName, parameterKeys, storageFullPath) === false) {\n            return false;\n        }\n\n        this.cipherComponent.getTabButton().click();\n\n        return true;\n    }\n}\n","import * as crypto from '../crypto';\nimport * as stringUtils from '../stringUtils';\nimport * as arrayUtils from '../arrayUtils';\n\nimport * as ui from '../ui';\nimport { getPrivatePart } from './privatePartComponent';\n\nimport { CipherV2 } from '../ciphers/v2';\nimport { ITabInfo } from '../TabControl';\nimport { IComponent } from './IComponent';\n\nimport * as storageOutputComponent from './storageOutputComponent';\n\nimport * as serviceManager from '../services/serviceManger';\nimport { CipherService } from '../services/cipherService';\n\nimport { CancellationToken, ensureNotCancelled, rethrowCancelled } from '../asyncUtils';\nimport { PlainObject } from '../PlainObject';\n\nconst btnTabCiphers = ui.getElementById('btnTabCiphers') as HTMLButtonElement;\nconst divTabCiphers = ui.getElementById('divTabCiphers');\n\nconst cipher: crypto.ICipher = new CipherV2();\n\nconst btnClearAllCipherInfo = ui.getElementById('btnClearAllCipherInfo') as HTMLButtonElement;\n\nconst txtCipherName = ui.getElementById('txtCipherName') as HTMLInputElement;\nconst txtCipherSource = ui.getElementById('txtCipherSource') as HTMLInputElement;\nconst txtCipherTarget = ui.getElementById('txtCipherTarget') as HTMLInputElement;\n\nconst btnEncrypt = ui.getElementById('btnEncrypt') as HTMLButtonElement;\nconst btnDecrypt = ui.getElementById('btnDecrypt') as HTMLButtonElement;\n\nconst btnCopyCipherSource = ui.getElementById('btnCopyCipherSource') as HTMLButtonElement;\nconst btnClearCipherSource = ui.getElementById('btnClearCipherSource') as HTMLButtonElement;\nconst btnCopyCipherTarget = ui.getElementById('btnCopyCipherTarget') as HTMLButtonElement;\nconst btnClearCipherTarget = ui.getElementById('btnClearCipherTarget') as HTMLButtonElement;\n\nlet cipherTargetLastChange: string | undefined;\n\nfunction clearSourceVisualCue(): void {\n    txtCipherSource.style.removeProperty('background-color');\n}\n\nfunction clearTargetVisualCue(): void {\n    txtCipherTarget.style.removeProperty('background-color');\n}\n\nfunction setSourceVisualCueError() {\n    txtCipherSource.style.setProperty('background-color', ui.ERROR_COLOR);\n}\n\nfunction setTargetVisualCueError() {\n    txtCipherTarget.style.setProperty('background-color', ui.ERROR_COLOR);\n}\n\nfunction clearAllVisualCues(): void {\n    clearSourceVisualCue();\n    clearTargetVisualCue();\n}\n\nfunction clearCipherTargetLastUpdate(): void {\n    cipherTargetLastChange = undefined;\n}\n\nfunction updateCipherTargetLastUpdate(): void {\n    cipherTargetLastChange = new Date().toISOString();\n}\n\nfunction setCipherTargetValue(value: string, isEncrypt: boolean): void {\n    const needDateTimeUpdate = value.length > 0 && txtCipherTarget.value !== value;\n\n    txtCipherTarget.value = value;\n\n    if (needDateTimeUpdate && isEncrypt) {\n        updateCipherTargetLastUpdate();\n    } else {\n        clearCipherTargetLastUpdate();\n    }\n\n    onCipherTargetChanged();\n}\n\nfunction onCipherTargetChanged(): void {\n    updateCipherParameters();\n}\n\nfunction updateCipherParameters(): void {\n    if (txtCipherTarget.value === '' || txtCipherName.value === '') {\n        storageOutputComponent.clearOutputs();\n        return;\n    }\n\n    const cipherParameters = {\n        datetime: cipherTargetLastChange,\n        version: cipher.version,\n        value: txtCipherTarget.value\n    }\n\n    const path = `ciphers/${txtCipherName.value}`;\n\n    storageOutputComponent.setParameters(cipherParameters, path);\n}\n\nexport async function encryptString(value: string, cancellationToken: CancellationToken): Promise<string | null> {\n    const privatePart: string = getPrivatePart();\n    if (privatePart.length === 0) {\n        console.warn('Private part is empty');\n        return null;\n    }\n\n    const input: ArrayBuffer = stringUtils.stringToArray(value);\n    const password: ArrayBuffer = stringUtils.stringToArray(privatePart);\n\n    const encrypted: ArrayBuffer = await cipher.encrypt(input, password, cancellationToken);\n\n    ensureNotCancelled(cancellationToken);\n\n    return arrayUtils.toCustomBase(encrypted, crypto.BASE62_ALPHABET);\n}\n\nexport async function decryptString(value: string, cancellationToken: CancellationToken): Promise<string | null> {\n    const privatePart: string = getPrivatePart();\n    if (privatePart.length === 0) {\n        console.warn('Private part is empty');\n        return null;\n    }\n\n    try {\n        const input: ArrayBuffer = arrayUtils.fromCustomBase(value, crypto.BASE62_ALPHABET);\n        const password: ArrayBuffer = stringUtils.stringToArray(privatePart);\n\n        const decrypted: ArrayBuffer = await cipher.decrypt(input, password, cancellationToken);\n\n        ensureNotCancelled(cancellationToken);\n\n        return arrayUtils.arrayToString(decrypted);\n    } catch (error) {\n        const typedError = error as Error;\n\n        rethrowCancelled(typedError);\n\n        console.warn(`Failed to decrypt${typedError.message ? `, error: ${typedError.message}` : ', no error message'}`);\n        return null;\n    }\n}\n\nasync function onEncryptButtonClick(): Promise<boolean> {\n    txtCipherSource.focus();\n    setCipherTargetValue('', true);\n    clearAllVisualCues();\n\n    if (txtCipherSource.value.length === 0) {\n        setSourceVisualCueError();\n        return false;\n    }\n\n    const encryptedString: string | null = await encryptString(txtCipherSource.value, CancellationToken.none);\n\n    if (encryptedString === null) {\n        return false;\n    }\n\n    setCipherTargetValue(encryptedString, true);\n    updateCipherParameters();\n\n    return true;\n}\n\nasync function onDecryptButtonClick(): Promise<boolean> {\n    txtCipherSource.focus();\n    setCipherTargetValue('', false);\n    clearAllVisualCues();\n\n    if (txtCipherSource.value.length === 0) {\n        setSourceVisualCueError();\n        return false;\n    }\n\n    const decryptedString: string | null = await decryptString(txtCipherSource.value, CancellationToken.none);\n\n    if (decryptedString === null) {\n        setTargetVisualCueError();\n        return false;\n    }\n\n    setCipherTargetValue(decryptedString, false);\n\n    return true;\n}\n\nexport class CipherComponent implements IComponent, ITabInfo {\n    public readonly name: string = 'Cipher';\n\n    public getTabButton(): HTMLButtonElement {\n        return btnTabCiphers;\n    }\n\n    public getTabContent(): HTMLElement {\n        return divTabCiphers;\n    }\n\n    public onTabSelected(): void {\n        storageOutputComponent.show();\n        updateCipherParameters();\n        txtCipherName.focus();\n    }\n\n    private static fullPathToStoragePath(fullPath: string, cipherName: string): string | null {\n        const prefix = '<root>/';\n        const suffix = `/ciphers/${cipherName}`;\n\n        if (fullPath.startsWith(prefix) === false) {\n            return null;\n        }\n\n        if (fullPath.endsWith(suffix) === false) {\n            return null;\n        }\n\n        return fullPath.substring(prefix.length, fullPath.length - suffix.length);\n    }\n\n    public async setParameters(cipherName: string, parameterKeys: PlainObject, storageFullPath: string): Promise<boolean> {\n        txtCipherName.value = '';\n        txtCipherSource.value = '';\n        txtCipherTarget.value = '';\n        storageOutputComponent.setPathUI('');\n        storageOutputComponent.setCustomKeysUI('');\n\n        const decrypted: string | null = await decryptString(parameterKeys.value, CancellationToken.none);\n\n        if (decrypted === null) {\n            alert(`Failed to decrypt cipher '${cipherName}'.`);\n            return false;\n        }\n\n        const storagePath: string | null = CipherComponent.fullPathToStoragePath(storageFullPath, cipherName);\n\n        if (storagePath === null) {\n            console.error(`Failed to retrieve storage path from full path '${storageFullPath}'.`);\n            alert('Failed to retrieve storage path from full path.');\n            return false;\n        }\n\n        if (parameterKeys.customKeys) {\n            storageOutputComponent.setCustomKeysUI(JSON.stringify(parameterKeys.customKeys, null, 4));\n        }\n\n        delete parameterKeys.customKeys;\n\n        txtCipherName.value = cipherName;\n        txtCipherSource.value = decrypted;\n\n        storageOutputComponent.setPathUI(storagePath);\n        storageOutputComponent.setParameters(parameterKeys, `ciphers/${cipherName}`);\n\n        return true;\n    }\n\n    public getVaultHint(): string {\n        return `${this.name.toLowerCase()} '${txtCipherName.value}'`;\n    }\n\n    public init(): void {\n        const errorLogsService = serviceManager.getService('errorLogs');\n        const logFunc = errorLogsService.createLogErrorMessageFunction();\n\n        ui.setupCopyButton(txtCipherSource, btnCopyCipherSource, logFunc);\n        ui.setupCopyButton(txtCipherTarget, btnCopyCipherTarget, logFunc);\n\n        ui.setupFeedbackButton(btnEncrypt, onEncryptButtonClick, logFunc);\n        ui.setupFeedbackButton(btnDecrypt, onDecryptButtonClick, logFunc);\n\n        txtCipherName.addEventListener('input', () => {\n            updateCipherParameters();\n        });\n\n        txtCipherSource.addEventListener('input', () => {\n            if (txtCipherSource.value.length > 0) {\n                clearSourceVisualCue();\n            }\n        });\n\n        btnClearAllCipherInfo.addEventListener('click', () => {\n            txtCipherName.value = '';\n            txtCipherSource.value = '';\n            txtCipherTarget.value = '';\n            storageOutputComponent.clearMatchingPath();\n            clearCipherTargetLastUpdate();\n            clearAllVisualCues();\n\n            storageOutputComponent.clearUI();\n        });\n\n        btnClearCipherSource.addEventListener('click', () => {\n            ui.clearText(txtCipherSource, true);\n        });\n\n        btnClearCipherTarget.addEventListener('click', () => {\n            setCipherTargetValue('', false);\n        });\n\n        serviceManager.registerService('cipher', new CipherService(this));\n    }\n}\n","import * as cipherComponent from '../components/cipherComponent';\nimport { CancellationToken } from '../asyncUtils';\n\nexport interface IAsyncStorage {\n    readonly length: number;\n    clear(): void;\n    getItem(key: string): Promise<string | null>;\n    key(index: number): string | null;\n    removeItem(key: string): void;\n    setItem(key: string, value: string): Promise<void>;\n}\n\nexport class SecureLocalStorage implements IAsyncStorage {\n    get length(): number {\n        return window.localStorage.length;\n    }\n\n    clear(): void {\n        window.localStorage.clear();\n    }\n\n    key(index: number): string | null {\n        return window.localStorage.key(index);\n    }\n\n    removeItem(key: string): void {\n        window.localStorage.removeItem(key);\n    }\n\n    async getItem(key: string): Promise<string | null> {\n        const encryptedItem: string | null = window.localStorage.getItem(key);\n\n        if (encryptedItem === null) {\n            return null;\n        }\n\n        return await cipherComponent.decryptString(encryptedItem, CancellationToken.none);\n    }\n\n    async setItem(key: string, value: string): Promise<void> {\n        const encrypted: string | null = await cipherComponent.encryptString(value, CancellationToken.none);\n\n        if (encrypted === null) {\n            console.error('Failed to encrypt value. (nothing stored)');\n            return;\n        }\n\n        window.localStorage.setItem(key, encrypted);\n    }\n}\n","import * as ui from '../ui';\nimport * as stringUtils from '../stringUtils';\nimport { PlainObject, objectDeepSort } from '../PlainObject';\nimport { IComponent } from './IComponent';\nimport { rootComponent, RootComponent } from './rootComponent';\nimport * as serviceManager from '../services/serviceManger';\nimport { VaultService } from '../services/vaultService';\n\nimport { IVaultStorage } from '../storages/IVaultStorage';\nimport { GitHubPersonalAccessTokenVaultStorage } from '../storages/GitHubVaultStorage';\nimport { SecureLocalStorage } from '../storages/SecureLocalStorage';\n\nconst divStorageOutput: HTMLElement = ui.getElementById('divStorageOutput');\n\nconst txtPath: HTMLInputElement = ui.getElementById('txtPath') as HTMLInputElement;\nconst lblMatchingPath: HTMLElement = ui.getElementById('lblMatchingPath');\n\nconst txtParameters: HTMLInputElement = ui.getElementById('txtParameters') as HTMLInputElement;\nconst btnPushToVault: HTMLButtonElement = ui.getElementById('btnPushToVault') as HTMLButtonElement;\nconst txtCustomKeys: HTMLInputElement = ui.getElementById('txtCustomKeys') as HTMLInputElement;\n\nlet vaultStorage: IVaultStorage = new GitHubPersonalAccessTokenVaultStorage(new SecureLocalStorage());\n\ntype IChainInfo = {\n    head: PlainObject,\n    tailParent: PlainObject,\n    tail: PlainObject\n};\n\n// Transforms a path like \"a/b/c/d\" into a hierarchy of objects like { \"a\": { \"b\": { \"c\": { \"d\": {} } } } }\n// From the result object, head is the root object that contains \"a\", tail is the value of \"d\", and tailParent is the value of \"c\"\nfunction pathToObjectChain(path: string, chainInfo: IChainInfo | undefined = undefined): IChainInfo {\n    const separatorIndex: number = path.indexOf('/');\n\n    const tail: PlainObject = {};\n\n    const firstPath: string = separatorIndex >= 0 ? path.substring(0, separatorIndex) : path;\n    const remainingPath: string | undefined = separatorIndex >= 0 ? path.substring(separatorIndex + 1) : undefined;\n\n    if (chainInfo === undefined) {\n        const node: PlainObject = {};\n        node[firstPath] = tail;\n        chainInfo = {\n            head: node,\n            tailParent: node,\n            tail\n        };\n    } else {\n        chainInfo.tail[firstPath] = tail;\n        chainInfo.tailParent = chainInfo.tail;\n        chainInfo.tail = tail;\n    }\n\n    if (remainingPath) {\n        return pathToObjectChain(remainingPath, chainInfo);\n    }\n\n    return chainInfo;\n}\n\nfunction createMatchingPath(path: string, depth: number): string {\n    let position = 0;\n\n    for (let i = 0; i < depth; i += 1) {\n        position = path.indexOf('/', position);\n        if (position < 0) {\n            position = path.length + 1;\n            break;\n        }\n        position += 1;\n    }\n\n    return path.substring(0, position - 1);\n}\n\nfunction updateMatchingPath(): void {\n    const vaultService: VaultService = serviceManager.getService('vault');\n\n    const depth = vaultService.computeUserPathMatchDepth(txtPath.value);\n\n    if (depth > 0) {\n        const matchingPath = createMatchingPath(txtPath.value, depth);\n        lblMatchingPath.innerText = matchingPath;\n    } else {\n        lblMatchingPath.innerText = '';\n    }\n}\n\nfunction onPathTextInput() {\n    updateMatchingPath();\n    update();\n}\n\nfunction onCustomKeysTextInput(): void {\n    update();\n}\n\nfunction updateCustomKeysDisplay(isValid: boolean): void {\n    if (isValid) {\n        txtCustomKeys.style.removeProperty('background');\n        return;\n    }\n\n    txtCustomKeys.style.setProperty('background', ui.ERROR_COLOR);\n}\n\nfunction parseCustomKeys(): PlainObject | null {\n    if (txtCustomKeys.value === '') {\n        return null;\n    }\n\n    try {\n        const obj: any = JSON.parse(txtCustomKeys.value);\n        if (obj === null || obj.constructor.name !== 'Object') {\n            return null;\n        }\n        return obj as PlainObject;\n    } catch {\n        return null;\n    }\n}\n\nfunction update(): void {\n    if (_parameterKeys === undefined || _parameterPath === undefined) {\n        return;\n    }\n\n    const chainInfo: IChainInfo = pathToObjectChain(`${txtPath.value}/${_parameterPath}`);\n    const leaf: PlainObject = chainInfo.tail;\n\n    for (const [key, value] of Object.entries(_parameterKeys)) {\n        leaf[key] = value;\n    }\n\n    const customKeys: PlainObject | null = parseCustomKeys();\n\n    updateCustomKeysDisplay(txtCustomKeys.value === '' || customKeys !== null);\n\n    if (customKeys !== null) {\n        leaf.customKeys = customKeys;\n    }\n\n    if (Object.keys(leaf).length === 0) {\n        // Remove the leaf object.\n        chainInfo.tailParent[Object.keys(chainInfo.tailParent)[0]] = null;\n    }\n\n    txtParameters.value = JSON.stringify(objectDeepSort(chainInfo.head), undefined, 4);\n}\n\nfunction deepMerge(source: PlainObject, target: PlainObject): void {\n    for (const sourceKey of Object.keys(source)) {\n        const targetValue: any = target[sourceKey];\n        const sourceValue: any = source[sourceKey];\n\n        if (targetValue === undefined ||\n            targetValue === null ||\n            targetValue.constructor.name !== 'Object' ||\n            sourceValue.constructor.name !== 'Object') {\n            target[sourceKey] = sourceValue;\n            continue;\n        }\n\n        deepMerge(sourceValue, targetValue);\n    }\n}\n\nfunction generateUpdateMessage() {\n    const activeComponent: IComponent | null = (rootComponent as RootComponent).getActiveComponent();\n\n    if (activeComponent === null) {\n        throw new Error('Could not determine active component.');\n    }\n\n    let hint: string = activeComponent.getVaultHint();\n\n    const matchingPath: string = lblMatchingPath.innerText;\n    const fullPath: string = txtPath.value;\n\n    if (!matchingPath) {\n        return `Added ${hint} for '${fullPath}'`;\n    }\n\n    if (matchingPath === fullPath) {\n        return `Updated ${hint} for '${fullPath}'`;\n    }\n\n    const remainingPath: string = stringUtils.trim(fullPath.substring(matchingPath.length), '/');\n\n    return `Updated ${hint} for '${matchingPath}' adding '${remainingPath}'`;\n}\n\nasync function pushToVault(): Promise<boolean> {\n    const vaultContentData: string | null = await vaultStorage.getVaultContent();\n\n    if (vaultContentData === null) {\n        return false;\n    }\n\n    const newData = JSON.parse(txtParameters.value);\n    let vaultContent = JSON.parse(vaultContentData);\n\n    // Keep deepMerge despite now all properties are explicitly defined, because of\n    // the datetime property that really need to be overwritten only if it exists.\n    deepMerge(newData, vaultContent);\n\n    const message: string = generateUpdateMessage();\n\n    const newVaultContentData: string = JSON.stringify(objectDeepSort(vaultContent), undefined, 4) + '\\n';\n\n    await vaultStorage.setVaultContent(newVaultContentData, `[ItchyPassword] ${message}`);\n\n    return true;\n}\n\nexport function clearOutputs(): void {\n    _parameterKeys = undefined;\n    _parameterPath = undefined;\n    ui.clearText(txtParameters);\n}\n\nlet _parameterKeys: PlainObject | undefined;\nlet _parameterPath: string | undefined;\n\nexport function setParameters(parameterKeys: PlainObject, parameterPath: string) {\n    _parameterKeys = parameterKeys;\n    _parameterPath = parameterPath;\n    update();\n}\n\nexport function setPathUI(path: string) {\n    txtPath.value = path;\n    onPathTextInput();\n}\n\nexport function setCustomKeysUI(customKeys: string) {\n    txtCustomKeys.value = customKeys;\n}\n\nexport function show(): void {\n    divStorageOutput.style.setProperty('display', 'initial');\n}\n\nexport function hide(): void {\n    divStorageOutput.style.setProperty('display', 'none');\n}\n\nexport function clearUI(): void {\n    txtPath.value = '';\n    txtParameters.value = '';\n    txtCustomKeys.value = '';\n    _parameterKeys = undefined;\n    _parameterPath = undefined;\n    updateCustomKeysDisplay(true);\n}\n\nexport function clearMatchingPath(): void {\n    lblMatchingPath.innerText = '';\n}\n\nexport class StorageOutputComponent implements IComponent {\n    public readonly name: string = 'StorageOutput';\n\n    public getVaultHint(): string {\n        throw new Error('Not supported.');\n    }\n\n    public init(): void {\n        const errorLogsService = serviceManager.getService('errorLogs');\n        const logFunc = errorLogsService.createLogErrorMessageFunction();\n\n        txtCustomKeys.addEventListener('input', onCustomKeysTextInput);\n        ui.setupFeedbackButton(btnPushToVault, pushToVault, logFunc);\n        txtPath.addEventListener('input', onPathTextInput);\n    }\n}\n","import { CancellationToken } from '../asyncUtils';\nimport * as stringUtils from '../stringUtils';\nimport * as ui from '../ui';\nimport * as passwordComponent from '../components/passwordComponent';\nimport * as serviceManager from './serviceManger';\n\nexport class PasswordService {\n    async generateAndCopyPasswordToClipboard(publicPart: string, alphabet?: string, length?: number, version?: number): Promise<boolean> {\n        alphabet = alphabet !== undefined ? alphabet : passwordComponent.DEFAULT_ALPHABET;\n        length = length !== undefined ? length : passwordComponent.DEFAULT_LENGTH;\n        version = version !== undefined ? version : passwordComponent.CURRENT_PASSWORD_GENERATOR_VERSION;\n\n        const keyString: string | null = await passwordComponent.generatePasswordString(publicPart, alphabet, version, CancellationToken.none);\n\n        if (keyString === null) {\n            return false;\n        }\n\n        const password = stringUtils.truncate(keyString, Math.max(4, length));\n\n        const errorLogsService = serviceManager.getService('errorLogs');\n        const logFunc = errorLogsService.createLogErrorMessageFunction();\n\n        return await ui.writeToClipboard(password, logFunc);\n    }\n}\n","import * as ui from '../ui';\nimport * as privatePartComponent from './privatePartComponent';\n\nimport * as crypto from '../crypto';\nimport * as stringUtils from '../stringUtils';\nimport * as arrayUtils from '../arrayUtils';\n\nimport { PlainObject } from '../PlainObject';\nimport { PasswordGeneratorV1 } from '../passwordGenerators/v1';\nimport { PasswordGeneratorV2 } from '../passwordGenerators/v2';\nimport { ITabInfo } from '../TabControl';\nimport { IComponent } from './IComponent';\n\nimport * as storageOutputComponent from './storageOutputComponent';\n\nimport { CancellationToken, TaskRunner } from '../asyncUtils';\n\nimport * as serviceManager from '../services/serviceManger';\nimport { PasswordService } from '../services/passwordService';\n\nconst btnTabPasswords = ui.getElementById('btnTabPasswords') as HTMLButtonElement;\nconst divTabPasswords = ui.getElementById('divTabPasswords');\n\nconst passwordGenerators: crypto.IPasswordGenerator[] = [\n    new PasswordGeneratorV1('Password'),\n    new PasswordGeneratorV2('Password'),\n];\n\nexport const CURRENT_PASSWORD_GENERATOR_VERSION = 2;\n\nconst btnClearAllPasswordInfo = ui.getElementById('btnClearAllPasswordInfo') as HTMLButtonElement;\n\nconst txtPublicPart = ui.getElementById('txtPublicPart') as HTMLInputElement;\nconst spnPublicPartSize = ui.getElementById('spnPublicPartSize');\nconst btnGeneratePublicPart = ui.getElementById('btnGeneratePublicPart') as HTMLButtonElement;\nconst btnClearPublicPart = ui.getElementById('btnClearPublicPart') as HTMLButtonElement;\nconst btnCopyPublicPart = ui.getElementById('btnCopyPublicPart') as HTMLButtonElement;\nconst btnShowHidePasswordOptionalFeatures = ui.getElementById('btnShowHidePasswordOptionalFeatures') as HTMLButtonElement;\n\nconst lblAlphabetLength = ui.getElementById('lblAlphabetLength');\nconst numOutputSizeRange = ui.getElementById('numOutputSizeRange') as HTMLInputElement;\nconst numOutputSizeNum = ui.getElementById('numOutputSizeNum') as HTMLInputElement;\n\nconst lblAlphabet = ui.getElementById('lblAlphabet');\nconst txtAlphabet = ui.getElementById('txtAlphabet') as HTMLInputElement;\nconst spnAlphabetSize = ui.getElementById('spnAlphabetSize');\nconst divPasswordAlphabetActions = ui.getElementById('divPasswordAlphabetActions');\nconst btnResetAlphabet = ui.getElementById('btnResetAlphabet') as HTMLButtonElement;\n\nconst lblPasswordVersion = ui.getElementById('lblPasswordVersion');\nconst cboPasswordVersion = ui.getElementById('cboPasswordVersion') as HTMLSelectElement;\n\nconst txtResultPassword = ui.getElementById('txtResultPassword') as HTMLInputElement;\nconst spnResultPasswordLength = ui.getElementById('spnResultPasswordLength');\nconst btnViewResultPassword = ui.getElementById('btnViewResultPassword') as HTMLButtonElement;\nconst btnCopyResultPassword = ui.getElementById('btnCopyResultPassword') as HTMLButtonElement;\nconst lblGeneratingPassword = ui.getElementById('lblGeneratingPassword');\n\nexport const DEFAULT_LENGTH: number = 64;\nexport const DEFAULT_ALPHABET: string = '!\"#$%&\\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[]^_`abcdefghijklmnopqrstuvwxyz{|}~';\n\nlet passwordPublicPartLastChange: string | undefined;\nlet copyPasswordFunction: () => void;\n\nfunction findPasswordGeneratorByVersion(version: number): crypto.IPasswordGenerator {\n    for (const passwordGenerator of passwordGenerators) {\n        if (passwordGenerator?.version === version) {\n            return passwordGenerator;\n        }\n    }\n\n    throw new Error(`Failed to find password generator version ${version}`);\n}\n\nfunction findPasswordGeneratorFromUserInterface(): crypto.IPasswordGenerator {\n    const passwordGenerator = passwordGenerators[cboPasswordVersion.selectedIndex];\n\n    if (!passwordGenerator) {\n        throw new Error(`Failed to find password generator version from index ${cboPasswordVersion.selectedIndex}`);\n    }\n\n    return passwordGenerator;\n}\n\nfunction onClearPublicPartButtonClick(): boolean {\n    if (txtPublicPart.value.length > 0) {\n        if (prompt('Are you sure you want to clear the public part ?\\nType \\'y\\' to accept', '') !== 'y') {\n            return false;\n        }\n    }\n\n    ui.clearText(txtPublicPart, true);\n\n    updatePublicPartSize();\n\n    updatePasswordPublicPartLastUpdate();\n    updatePasswordGenerationParameters();\n\n    return true;\n}\n\nfunction onGeneratePublicPartButtonClick(): boolean {\n    if (txtPublicPart.value.length > 0) {\n        if (prompt('Are you sure you want to generate a new public part ?\\nType \\'y\\' to accept', '') !== 'y') {\n            return false;\n        }\n    }\n\n    const randomString: string = crypto.generateRandomString();\n    txtPublicPart.value = randomString;\n    updatePublicPartSize();\n\n    updatePasswordPublicPartLastUpdate();\n\n    run();\n\n    return true;\n}\n\nfunction updatePasswordPublicPartLastUpdate(): void {\n    if (txtPublicPart.value.length > 0) {\n        passwordPublicPartLastChange = new Date().toISOString();\n    } else {\n        passwordPublicPartLastChange = undefined;\n    }\n}\n\nfunction updateResultPasswordLength(): void {\n    spnResultPasswordLength.innerHTML = txtResultPassword.value.length.toString();\n}\n\nfunction isAlphabetValid(alphabet: string): boolean {\n    const sortedAlphabet: string[] = alphabet.split('');\n    sortedAlphabet.sort();\n\n    for (let i: number = 1; i < sortedAlphabet.length; i += 1) {\n        if (sortedAlphabet[i - 1] === sortedAlphabet[i]) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nfunction updatePasswordGenerationParameters(): void {\n    if (canRun() === false) {\n        clearOutputs();\n        return;\n    }\n\n    const passwordGenerator = passwordGenerators[cboPasswordVersion.selectedIndex];\n\n    if (!passwordGenerator) {\n        throw new Error('Invalid selected password generator version.');\n    }\n\n    const passwordParamters: PlainObject = {\n        public: txtPublicPart.value,\n        datetime: passwordPublicPartLastChange,\n        version: passwordGenerator.version,\n        length: txtResultPassword.value.length,\n        alphabet: txtAlphabet.value\n    };\n\n    storageOutputComponent.setParameters(passwordParamters, 'password');\n}\n\nfunction updateOutputSizeRangeToNum(): void {\n    numOutputSizeNum.value = numOutputSizeRange.value;\n}\n\nfunction updateOutputSizeNumToRange(): boolean {\n    const min: number = parseInt(numOutputSizeRange.min, 10);\n    const val: number = parseInt(numOutputSizeNum.value, 10);\n    const max: number = parseInt(numOutputSizeRange.max, 10);\n\n    if (isNaN(val) === false) {\n        numOutputSizeRange.value = Math.max(min, Math.min(val, max)).toString();\n        return true;\n    }\n\n    return false;\n}\n\nasync function onOutputSizeRangeInput(): Promise<void> {\n    updateOutputSizeRangeToNum();\n    await run();\n}\n\nasync function onOutputSizeNumInput(): Promise<void> {\n    if (updateOutputSizeNumToRange()) {\n        updateOutputSizeRangeToNum();\n    }\n    await run();\n}\n\nfunction updatePublicPartSize(): void {\n    spnPublicPartSize.innerHTML = txtPublicPart.value.length.toString();\n}\n\nfunction updateAlphabetSize(): void {\n    spnAlphabetSize.innerHTML = txtAlphabet.value.length.toString();\n}\n\nfunction updateAlphabetValidityDisplay(isAlphabetValid: boolean): void {\n    if (isAlphabetValid) {\n        txtAlphabet.style.removeProperty('background');\n    } else {\n        txtAlphabet.style.setProperty('background', ui.ERROR_COLOR);\n    }\n}\n\nasync function onAlphabetTextInput(): Promise<void> {\n    const isAlphabetValidResult: boolean = isAlphabetValid(txtAlphabet.value);\n\n    updateAlphabetValidityDisplay(isAlphabetValidResult);\n\n    if (isAlphabetValidResult === false) {\n        return;\n    }\n\n    updateAlphabetSize();\n    await run();\n}\n\nasync function onResetAlphabetButtonClick(): Promise<boolean> {\n    if (resetAlphabet() === false) {\n        return false;\n    }\n\n    await run();\n\n    return true;\n}\n\nasync function onPasswordVersionChanged(): Promise<void> {\n    const passwordGenerator = passwordGenerators[cboPasswordVersion.selectedIndex];\n\n    if (!passwordGenerator) {\n        return;\n    }\n\n    await run();\n}\n\nfunction clearOutputs(): void {\n    ui.clearText(txtResultPassword);\n    storageOutputComponent.clearOutputs();\n    updateResultPasswordLength();\n}\n\nfunction canRun(publicPart?: string): boolean {\n    const alphabet: string = txtAlphabet.value;\n\n    if (isAlphabetValid(alphabet) === false) {\n        return false;\n    }\n\n    publicPart = publicPart || txtPublicPart.value;\n\n    if (privatePartComponent.getPrivatePart().length <= 0 || publicPart.length < 8 || alphabet.length < 2) {\n        return false;\n    }\n\n    return true;\n}\n\nexport async function generatePasswordString(publicPart: string, alphabet: string, version: number, cancellationToken: CancellationToken): Promise<string | null> {\n    if (canRun(publicPart) === false) {\n        return null;\n    }\n\n    const passwordGenerator = findPasswordGeneratorByVersion(version);\n\n    const privatePartString: string = privatePartComponent.getPrivatePart();\n    const privatePrivateBytes: ArrayBuffer = stringUtils.stringToArray(privatePartString);\n    const publicPartBytes: ArrayBuffer = stringUtils.stringToArray(publicPart);\n    const keyBytes: ArrayBuffer = await passwordGenerator.generatePassword(privatePrivateBytes, publicPartBytes, cancellationToken);\n\n    return arrayUtils.toCustomBaseOneWay(keyBytes, alphabet);\n}\n\nconst passwordTaskRunner: TaskRunner<void> = new TaskRunner<void>();\n\nexport async function run(): Promise<void> {\n    if (canRun() === false) {\n        clearOutputs();\n        return;\n    }\n\n    ui.showHide(lblGeneratingPassword, true);\n\n    try {\n        await passwordTaskRunner.cancelAndExecute(runCore);\n    } finally {\n        ui.showHide(lblGeneratingPassword, false);\n    }\n}\n\nasync function runCore(cancellationToken: CancellationToken): Promise<void> {\n    const passwordGenerator = findPasswordGeneratorFromUserInterface();\n\n    const keyString: string | null = await generatePasswordString(txtPublicPart.value, txtAlphabet.value, passwordGenerator.version, cancellationToken);\n    if (keyString === null) {\n        return;\n    }\n\n    txtResultPassword.value = stringUtils.truncate(keyString, Math.max(4, parseInt(numOutputSizeRange.value, 10)));\n\n    updateResultPasswordLength();\n    updatePasswordGenerationParameters();\n\n    copyPasswordFunction();\n}\n\nfunction resetAlphabet(): boolean {\n    txtAlphabet.value = DEFAULT_ALPHABET;\n    updateAlphabetSize();\n\n    const isAlphabetValidResult: boolean = isAlphabetValid(txtAlphabet.value);\n\n    updateAlphabetValidityDisplay(isAlphabetValidResult);\n\n    return isAlphabetValidResult;\n}\n\nasync function onPublicPartTextInput(): Promise<void> {\n    updatePublicPartSize();\n    updatePasswordPublicPartLastUpdate();\n    await run();\n}\n\nfunction setupPasswordGeneratorsDropdown(): void {\n    for (const passwordGenerator of passwordGenerators) {\n        const option = document.createElement('option');\n\n        option.text = `v${passwordGenerator.version}`;\n\n        cboPasswordVersion.appendChild(option);\n    }\n\n    cboPasswordVersion.selectedIndex = cboPasswordVersion.options.length - 1;\n}\n\nexport class PasswordComponent implements IComponent, ITabInfo {\n    public readonly name: string = 'Password';\n\n    public getTabButton(): HTMLButtonElement {\n        return btnTabPasswords;\n    }\n\n    public getTabContent(): HTMLElement {\n        return divTabPasswords;\n    }\n\n    public onTabSelected(): void {\n        storageOutputComponent.show();\n        updatePasswordGenerationParameters();\n        txtPublicPart.focus();\n    }\n\n    public getVaultHint(): string {\n        return this.name.toLowerCase();\n    }\n\n    public init(): void {\n        const errorLogsService = serviceManager.getService('errorLogs');\n        const logFunc = errorLogsService.createLogErrorMessageFunction();\n\n        privatePartComponent.registerOnChanged(run);\n\n        // dafuq!?\n        numOutputSizeRange.max = DEFAULT_LENGTH.toString();\n        numOutputSizeRange.value = DEFAULT_LENGTH.toString();\n\n        ui.setupFeedbackButton(btnClearPublicPart, onClearPublicPartButtonClick, logFunc);\n        ui.setupFeedbackButton(btnGeneratePublicPart, onGeneratePublicPartButtonClick, logFunc);\n\n        ui.setupViewButton(txtResultPassword, btnViewResultPassword);\n\n        ui.setupCopyButton(txtPublicPart, btnCopyPublicPart, logFunc);\n        copyPasswordFunction = ui.setupCopyButton(txtResultPassword, btnCopyResultPassword, logFunc);\n\n        numOutputSizeRange.addEventListener('input', onOutputSizeRangeInput);\n        numOutputSizeNum.addEventListener('input', onOutputSizeNumInput);\n\n        txtAlphabet.addEventListener('input', onAlphabetTextInput);\n        ui.setupFeedbackButton(btnResetAlphabet, onResetAlphabetButtonClick, logFunc);\n\n        cboPasswordVersion.addEventListener('input', onPasswordVersionChanged);\n\n        txtPublicPart.addEventListener('input', onPublicPartTextInput);\n\n        ui.showHide(lblGeneratingPassword, false);\n\n        ui.setupShowHideButton(btnShowHidePasswordOptionalFeatures, false, [\n            lblAlphabet,\n            txtAlphabet,\n            spnAlphabetSize,\n            divPasswordAlphabetActions,\n            lblAlphabetLength,\n            numOutputSizeRange,\n            numOutputSizeNum,\n            lblPasswordVersion,\n            cboPasswordVersion,\n        ]);\n\n        updatePublicPartSize();\n        updateOutputSizeRangeToNum();\n        resetAlphabet();\n\n        setupPasswordGeneratorsDropdown();\n\n        btnClearAllPasswordInfo.addEventListener('click', () => {\n            if (onClearPublicPartButtonClick() === false) {\n                return;\n            }\n\n            txtResultPassword.value = '';\n            updateResultPasswordLength();\n            cboPasswordVersion.selectedIndex = cboPasswordVersion.options.length - 1;\n\n            storageOutputComponent.clearMatchingPath();\n            storageOutputComponent.clearUI();\n        });\n\n        serviceManager.registerService('password', new PasswordService());\n    }\n};\n","import { stringToArray } from '../stringUtils';\nimport { IPasswordGenerator, getDerivedBytes } from '../crypto';\nimport { CancellationToken, ensureNotCancelled } from '../asyncUtils';\n\nexport class PasswordGeneratorV1 implements IPasswordGenerator {\n    private hkdfPurpose: ArrayBuffer;\n    private _description: string;\n\n    public constructor(hkdfPurpose: string) {\n        this.hkdfPurpose = stringToArray(hkdfPurpose);\n        this._description = `HKDF(PBKDF2, HMAC512) [purpose: ${hkdfPurpose}]`;\n    }\n\n    public get version(): number {\n        return 1;\n    }\n\n    public get description(): string {\n        return this._description;\n    }\n\n    public async generatePassword(privatePart: ArrayBuffer, publicPart: ArrayBuffer, cancellationToken: CancellationToken): Promise<ArrayBuffer> {\n        const derivedKey: ArrayBuffer = await getDerivedBytes(privatePart, publicPart, 100000, cancellationToken);\n\n        ensureNotCancelled(cancellationToken);\n\n        const hmacParameters: HmacImportParams = {\n            name: 'HMAC',\n            hash: { name: 'SHA-512' }\n        };\n\n        const hkdfKey: CryptoKey = await window.crypto.subtle.importKey(\n            'raw',\n            derivedKey,\n            hmacParameters,\n            false,\n            ['sign']\n        );\n\n        ensureNotCancelled(cancellationToken);\n\n        const result: ArrayBuffer = await window.crypto.subtle.sign('HMAC', hkdfKey, this.hkdfPurpose);\n\n        ensureNotCancelled(cancellationToken);\n\n        return result;\n    }\n}\n","import { stringToArray } from '../stringUtils';\nimport { IPasswordGenerator, getDerivedBytes } from '../crypto';\nimport { CancellationToken, ensureNotCancelled } from '../asyncUtils';\n\nexport class PasswordGeneratorV2 implements IPasswordGenerator {\n    private hkdfPurpose: ArrayBuffer;\n    private _description: string;\n\n    public constructor(hkdfPurpose: string) {\n        this.hkdfPurpose = stringToArray(hkdfPurpose);\n        this._description = `HKDF(PBKDF2, HMAC512) [purpose: ${hkdfPurpose}]`;\n    }\n\n    public get version(): number {\n        return 2;\n    }\n\n    public get description(): string {\n        return this._description;\n    }\n\n    public async generatePassword(privatePart: ArrayBuffer, publicPart: ArrayBuffer, cancellationToken: CancellationToken): Promise<ArrayBuffer> {\n        const derivedKey: ArrayBuffer = await getDerivedBytes(privatePart, publicPart, 400_000, cancellationToken);\n\n        ensureNotCancelled(cancellationToken);\n\n        const hmacParameters: HmacImportParams = {\n            name: 'HMAC',\n            hash: { name: 'SHA-512' }\n        };\n\n        const hkdfKey: CryptoKey = await window.crypto.subtle.importKey(\n            'raw',\n            derivedKey,\n            hmacParameters,\n            false,\n            ['sign']\n        );\n\n        ensureNotCancelled(cancellationToken);\n\n        const result: ArrayBuffer = await window.crypto.subtle.sign('HMAC', hkdfKey, this.hkdfPurpose);\n\n        ensureNotCancelled(cancellationToken);\n\n        return result;\n    }\n}\n","import { ICipher, getDerivedBytes } from '../crypto';\nimport { CancellationToken, ensureNotCancelled } from '../asyncUtils';\n\nconst encryptionKeyDerivationSalt: ArrayBuffer = new Uint8Array([ 0xf2, 0xcf, 0xef, 0x8e, 0x13, 0x40, 0x46, 0x49, 0x92, 0x2a, 0xde, 0x5c, 0xbc, 0x88, 0x38, 0xa8 ]).buffer;\n\nexport class CipherV1 implements ICipher {\n    private iterations: number = 100000;\n\n    public get version(): number {\n        return 1;\n    }\n\n    public get description(): string {\n        return 'PBKDF2 + AES-GCM';\n    }\n\n    async encrypt(input: ArrayBuffer, password: ArrayBuffer, cancellationToken: CancellationToken): Promise<ArrayBuffer> {\n        const output: ArrayBuffer = new ArrayBuffer(12 + 16 + input.byteLength);\n\n        const nonce: DataView = new DataView(output, 0, 12);\n        crypto.getRandomValues(new Uint8Array(output, 0, 12));\n\n        const aesGcmParams: AesGcmParams = {\n            name: 'AES-GCM',\n            iv: nonce\n        };\n\n        const aesKeyAlgorithm: AesKeyAlgorithm = {\n            name: 'AES-GCM',\n            length: 256\n        };\n\n        const passwordKey: CryptoKey = await window.crypto.subtle.importKey(\n            'raw',\n            await getDerivedBytes(password, encryptionKeyDerivationSalt, this.iterations, cancellationToken),\n            aesKeyAlgorithm,\n            false,\n            ['encrypt']\n        );\n\n        ensureNotCancelled(cancellationToken);\n\n        const result: ArrayBuffer = await window.crypto.subtle.encrypt(aesGcmParams, passwordKey, input);\n\n        ensureNotCancelled(cancellationToken);\n\n        new Uint8Array(output).set(new Uint8Array(result), 12);\n\n        return output;\n    }\n\n    async decrypt(input: ArrayBuffer, password: ArrayBuffer, cancellationToken: CancellationToken): Promise<ArrayBuffer> {\n        const nonce: DataView = new DataView(input, 0, 12);\n        const payload: DataView = new DataView(input, 12);\n\n        const aesGcmParams: AesGcmParams = {\n            name: 'AES-GCM',\n            iv: nonce\n        };\n\n        const aesKeyAlgorithm: AesKeyAlgorithm = {\n            name: 'AES-GCM',\n            length: 256\n        };\n\n        const derivedKey: ArrayBuffer = await getDerivedBytes(password, encryptionKeyDerivationSalt, this.iterations, cancellationToken);\n\n        ensureNotCancelled(cancellationToken);\n\n        const passwordKey: CryptoKey = await window.crypto.subtle.importKey(\n            'raw',\n            derivedKey,\n            aesKeyAlgorithm,\n            false,\n            ['decrypt']\n        );\n\n        ensureNotCancelled(cancellationToken);\n\n        const result: ArrayBuffer = await window.crypto.subtle.decrypt(aesGcmParams, passwordKey, payload);\n\n        ensureNotCancelled(cancellationToken);\n\n        return result;\n    }\n}\n","import { ICipher } from '../crypto';\nimport * as stringUtils from '../stringUtils';\nimport * as arrayUtils from '../arrayUtils';\nimport { ITabInfo } from '../TabControl';\nimport * as ui from '../ui';\nimport { getPrivatePart } from './privatePartComponent';\nimport * as serviceManager from '../services/serviceManger';\n\nimport { CipherV1 } from '../ciphers/v1';\nimport { CipherV2 } from '../ciphers/v2';\nimport { IComponent } from './IComponent';\n\nimport * as storageOutputComponent from './storageOutputComponent';\n\nimport { CancellationToken } from '../asyncUtils';\n\nconst ciphers: ICipher[] = [\n    new CipherV1(),\n    new CipherV2()\n];\n\nconst btnTabReEncrypt: HTMLButtonElement = ui.getElementById('btnTabReEncrypt') as HTMLButtonElement;\nconst divTabReEncrypt: HTMLElement = ui.getElementById('divTabReEncrypt');\n\nconst txtReEncryptSource: HTMLInputElement = ui.getElementById('txtReEncryptSource') as HTMLInputElement;\nconst txtReEncryptTarget: HTMLInputElement = ui.getElementById('txtReEncryptTarget') as HTMLInputElement;\n\nconst cboReEncryptFrom: HTMLSelectElement = ui.getElementById('cboReEncryptFrom') as HTMLSelectElement;\nconst cboReEncryptTo: HTMLSelectElement = ui.getElementById('cboReEncryptTo') as HTMLSelectElement;\nconst btnReEncrypt: HTMLButtonElement = ui.getElementById('btnReEncrypt') as HTMLButtonElement;\n\nconst btnClearReEncryptSource: HTMLButtonElement = ui.getElementById('btnClearReEncryptSource') as HTMLButtonElement;\nconst btnCopyReEncryptTarget: HTMLButtonElement = ui.getElementById('btnCopyReEncryptTarget') as HTMLButtonElement;\nconst btnClearReEncryptTarget: HTMLButtonElement = ui.getElementById('btnClearReEncryptTarget') as HTMLButtonElement;\n\nfunction fillCipherComboBox(cbo: HTMLSelectElement, initialValue: number): void {\n    let cipher: ICipher;\n\n    for (cipher of ciphers) {\n        const item: HTMLOptionElement = document.createElement('option');\n        item.value = cbo.childNodes.length.toString();\n        item.text = `${cipher.description} (v${cipher.version})`;\n        cbo.add(item);\n    }\n\n    cbo.value = initialValue.toString();\n}\n\nfunction clearSourceVisualCue(): void {\n    txtReEncryptSource.style.removeProperty('background-color');\n}\n\nfunction clearTargetVisualCue(): void {\n    txtReEncryptTarget.style.removeProperty('background-color');\n}\n\nfunction setSourceVisualCueError() {\n    txtReEncryptSource.style.setProperty('background-color', ui.ERROR_COLOR);\n}\n\nfunction setTargetVisualCueError() {\n    txtReEncryptTarget.style.setProperty('background-color', ui.ERROR_COLOR);\n}\n\nfunction clearAllVisualCues(): void {\n    clearSourceVisualCue();\n    clearTargetVisualCue();\n}\n\nasync function onReEncryptButtonClick(): Promise<boolean> {\n    ui.clearText(txtReEncryptTarget, true);\n    clearAllVisualCues();\n\n    if (txtReEncryptSource.value.length === 0) {\n        setSourceVisualCueError();\n        return false;\n    }\n\n    if (cboReEncryptFrom.value === cboReEncryptTo.value) {\n        setTargetVisualCueError();\n        return false;\n    }\n\n    const privatePart: string = getPrivatePart();\n    if (privatePart.length === 0) {\n        console.warn('Private part is empty');\n        return false;\n    }\n\n    const sourceCipherIndex = parseInt(cboReEncryptFrom.value, 10);\n    const targetCipherIndex = parseInt(cboReEncryptTo.value, 10);\n\n    const password: ArrayBuffer = stringUtils.stringToArray(privatePart);\n\n    const input: ArrayBuffer = stringUtils.fromBase16(txtReEncryptSource.value);\n    const decrypted: ArrayBuffer = await ciphers[sourceCipherIndex].decrypt(input, password, CancellationToken.none);\n    const reEncrypted: ArrayBuffer = await ciphers[targetCipherIndex].encrypt(decrypted, password, CancellationToken.none);\n\n    txtReEncryptTarget.value = arrayUtils.toBase16(reEncrypted);\n\n    return true;\n}\n\nexport class ReEncryptComponent implements IComponent, ITabInfo {\n    public readonly name: string = 'ReEncrypt';\n\n    public getTabButton(): HTMLButtonElement {\n        return btnTabReEncrypt;\n    }\n\n    public getTabContent(): HTMLElement {\n        return divTabReEncrypt;\n    }\n\n    public onTabSelected() {\n        storageOutputComponent.hide();\n        txtReEncryptSource.focus();\n    }\n\n    public getVaultHint(): string {\n        throw new Error('Not supported.');\n    }\n\n    public init(): void {\n        const errorLogsService = serviceManager.getService('errorLogs');\n        const logFunc = errorLogsService.createLogErrorMessageFunction();\n\n        ui.setupCopyButton(txtReEncryptTarget, btnCopyReEncryptTarget, logFunc);\n\n        // Mais est-ce que ce monde est serieux?\n        fillCipherComboBox(<HTMLSelectElement><any>cboReEncryptFrom, ciphers.length - 2);\n        fillCipherComboBox(<HTMLSelectElement><any>cboReEncryptTo, ciphers.length - 1);\n\n        txtReEncryptSource.addEventListener('input', () => {\n            if (txtReEncryptSource.value.length > 0) {\n                clearSourceVisualCue();\n            }\n        });\n\n        btnClearReEncryptSource.addEventListener('click', () => {\n            ui.clearText(txtReEncryptSource, true);\n        });\n\n        btnClearReEncryptTarget.addEventListener('click', () => {\n            ui.clearText(txtReEncryptTarget, true);\n        });\n\n        ui.setupFeedbackButton(btnReEncrypt, onReEncryptButtonClick, logFunc);\n    }\n}\n","import * as plainObject from '../../PlainObject';\nimport { SearchMatchFunction, PositionMarker } from '../../searchMatchFunctions';\n\nexport const DEEP_MODE_NONE = 0;\nexport const DEEP_MODE_UP = 1;\nexport const DEEP_MODE_DOWN = 2;\n\nconst TREE_ELEMENT_HEIGHT = 30;\n\nconst HORIZONTAL_LINE_VERTICAL_OFFSET = Math.floor(TREE_ELEMENT_HEIGHT / 2);\nconst HORIZONTAL_LINE_LENGTH = 12;\nconst VERTICAL_BAR_OFFSET = 6;\n\nexport interface TreeNodeCreationController {\n    isLeaf(path: string, key: string, value: any): boolean;\n    createTreeNodeContentElement(path: string, key: string, value: any): HTMLElement;\n}\n\nexport class TreeNode {\n    protected readonly parent: TreeNode | null;\n    protected readonly children: TreeNode[] = [];\n\n    protected readonly rootElement: HTMLElement;\n    protected readonly titleElement: HTMLElement;\n    protected readonly childrenContainerElement: HTMLElement;\n\n    protected readonly treeNodeCreationController: TreeNodeCreationController;\n\n    protected readonly path: string;\n    protected readonly key: string;\n    protected readonly value: any;\n\n    public get element(): HTMLElement {\n        return this.rootElement;\n    }\n\n    public get isVisible(): boolean {\n        return this.rootElement.style.display !== 'none';\n    }\n\n    public getVisibleChildCount(): number {\n        let visibleChildCount = 0;\n\n        for (const child of this.children) {\n            if (child.isVisible) {\n                visibleChildCount += 1;\n            }\n        }\n\n        return visibleChildCount;\n    }\n\n    public getVisibleLeafCount(): number {\n        if (this.isVisible === false) {\n            return 0;\n        }\n\n        let visibleLeafCount = 1;\n\n        for (const child of this.children) {\n            visibleLeafCount += child.getVisibleLeafCount();\n        }\n\n        return visibleLeafCount;\n    }\n\n    private addChild(child: TreeNode) {\n        this.childrenContainerElement.appendChild(child.rootElement);\n        this.children.push(child);\n    }\n\n    private createChildNodes(object: plainObject.PlainObject) {\n        for (const [childKey, childValue] of Object.entries(object)) {\n            const child = new TreeNode(this, `${this.path}/${childKey}`, childKey, childValue, this.treeNodeCreationController);\n            this.addChild(child);\n        }\n}\n\n    constructor(parent: TreeNode | null, path: string, key: string, value: any, treeNodeCreationController: TreeNodeCreationController) {\n        this.parent = parent;\n        this.path = path;\n        this.key = key;\n        this.value = value;\n        this.treeNodeCreationController = treeNodeCreationController;\n\n        this.rootElement = document.createElement('div');\n        this.setRootElementStyle();\n\n        // Construct title DOM element.\n        this.titleElement = document.createElement('div');\n        this.setTitleElementStyle();\n\n        this.titleElement.appendChild(this.createTreeNodeContentElement());\n\n        this.rootElement.appendChild(this.titleElement);\n\n        // Construct children container DOM element.\n        this.childrenContainerElement = document.createElement('div');\n        this.rootElement.appendChild(this.childrenContainerElement);\n        this.setChildrenContainerElementStyle();\n\n        const isLeaf = treeNodeCreationController.isLeaf(path, key, value);\n\n        if (isLeaf === false && plainObject.isPlainObject(value)) {\n            this.createChildNodes(value);\n        } else if (isLeaf && value.customKeys) {\n            this.createChildNodes(value.customKeys);\n        }\n\n        if (parent) {\n            // Construct lines DOM elements.\n            this.setupLinesElements('#D0D0D0');\n        }\n    }\n\n    private createTreeNodeContentElement(): HTMLElement {\n        return this.treeNodeCreationController.createTreeNodeContentElement(this.path, this.key, this.value);\n    }\n\n    private setRootElementStyle(): void {\n        this.rootElement.classList.add('treenode-root');\n        this.rootElement.style.display = 'grid';\n\n        let height = 4; // Gives a bit of top spacing.\n        let childrenOffset = 0;\n\n        if (this.parent) {\n            height = TREE_ELEMENT_HEIGHT;\n        }\n        if (this.parent && this.parent.parent) {\n            childrenOffset = HORIZONTAL_LINE_LENGTH;\n        }\n\n        this.rootElement.style.gridTemplateRows = `${height}px 1fr`;\n        this.rootElement.style.gridTemplateColumns = `${childrenOffset}px ${VERTICAL_BAR_OFFSET}px 1fr`;\n    }\n\n    private verticalLineElement: HTMLElement | null = null;\n\n    private setupLinesElements(color: string): void {\n        const verticalLineElement = document.createElement('div');\n        verticalLineElement.classList.add('treenode-vertical-line');\n        verticalLineElement.style.gridColumn = '2';\n        verticalLineElement.style.gridRow = '2';\n        verticalLineElement.style.width = '100%';\n        verticalLineElement.style.borderRight = `1px solid ${color}`;\n        this.verticalLineElement = verticalLineElement;\n        this.rootElement.appendChild(verticalLineElement);\n\n        if (this.parent && this.parent.parent) {\n            const horizontalLineElement = document.createElement('div');\n            horizontalLineElement.classList.add('treenode-horizontal-line');\n            horizontalLineElement.style.gridColumn = '1';\n            horizontalLineElement.style.gridRow = '1';\n            horizontalLineElement.style.width = '100%';\n            horizontalLineElement.style.height = `${HORIZONTAL_LINE_VERTICAL_OFFSET}px`;\n            horizontalLineElement.style.borderBottom = `1px solid ${color}`;\n            this.rootElement.appendChild(horizontalLineElement);\n        }\n\n        this.updateLines();\n    }\n\n    private updateLines(): void {\n        if (this.verticalLineElement === null) {\n            return;\n        }\n\n        const visibleChildCount = this.getVisibleChildCount();\n\n        if (visibleChildCount === 0) {\n            this.verticalLineElement.style.height = '0px';\n            return;\n        }\n\n        let totalVisibleLeafCount = 1;\n\n        for (let i = 0; i < visibleChildCount - 1; i += 1) {\n            if (this.children[i].isVisible) {\n                totalVisibleLeafCount += this.children[i].getVisibleLeafCount();\n            }\n        }\n\n        const bottomPosition = (totalVisibleLeafCount * TREE_ELEMENT_HEIGHT) - TREE_ELEMENT_HEIGHT + HORIZONTAL_LINE_VERTICAL_OFFSET + 1;\n\n        this.verticalLineElement.style.height = `${bottomPosition}px`;\n    }\n\n    private setTitleElementStyle(): void {\n        if (!this.titleElement) {\n            return;\n        }\n\n        this.titleElement.classList.add('treenode-title');\n        this.titleElement.style.gridColumn = '2 / span 2';\n        this.titleElement.style.gridRow = '1';\n        this.titleElement.style.marginLeft = '3px';\n        this.titleElement.style.alignSelf = 'center';\n    }\n\n    private setChildrenContainerElementStyle(): void {\n        this.childrenContainerElement.classList.add('treenode-children-container');\n        this.childrenContainerElement.style.gridColumn = '3';\n        this.childrenContainerElement.style.gridRow = '2';\n    }\n\n    private resetTitle(deepMode: number): void {\n        if (this.titleElement) {\n            this.titleElement.innerHTML = '';\n            this.titleElement.appendChild(this.createTreeNodeContentElement());\n        }\n\n        if (deepMode === DEEP_MODE_UP && this.parent) {\n            this.parent.resetTitle(deepMode);\n        }\n\n        if (deepMode === DEEP_MODE_DOWN) {\n            for (const child of this.children) {\n                child.resetTitle(deepMode);\n            }\n        }\n    }\n\n    public show(deepMode: number): void {\n        this.rootElement.style.display = 'grid';\n\n        if (deepMode === DEEP_MODE_UP && this.parent) {\n            this.parent.show(deepMode);\n        }\n\n        if (deepMode === DEEP_MODE_DOWN) {\n            for (const child of this.children) {\n                child.show(deepMode);\n            }\n        }\n\n        this.updateLines();\n    }\n\n    public hide(deepMode: number): void {\n        this.rootElement.style.display = 'none';\n\n        if (deepMode === DEEP_MODE_UP && this.parent) {\n            this.parent.hide(deepMode);\n        }\n\n        if (deepMode === DEEP_MODE_DOWN) {\n            for (const child of this.children) {\n                child.hide(deepMode);\n            }\n        }\n\n        this.updateLines();\n    }\n\n    private static createSpan(text: string, color?: string): HTMLElement {\n        const element = document.createElement('span');\n        if (color) {\n            element.style.backgroundColor = color;\n            element.style.borderRadius = '2px';\n        }\n        element.innerText = text;\n        return element;\n    }\n\n    private static createColoredSpan(text: string, markers: PositionMarker[]): HTMLElement {\n        const root = document.createElement('span');\n\n        let pos = 0;\n\n        for (const marker of markers) {\n            if (marker.pos !== pos) {\n                root.appendChild(TreeNode.createSpan(text.substring(pos, marker.pos)));\n            }\n\n            root.appendChild(TreeNode.createSpan(text.substring(marker.pos, marker.pos + marker.len), '#80C0FF'));\n\n            pos = marker.pos + marker.len;\n        }\n\n        if (pos < text.length) {\n            root.appendChild(TreeNode.createSpan(text.substring(pos, text.length)));\n        }\n\n        return root;\n    }\n\n    private static findLeafElement(element: Element): Element {\n        if (element.children.length === 0) {\n            return element;\n        }\n\n        return TreeNode.findLeafElement(element.children[0]);\n    }\n\n    public filter(searchText: string, matchFunction: SearchMatchFunction): void {\n        if (!searchText) {\n            this.resetTitle(DEEP_MODE_DOWN);\n            this.show(DEEP_MODE_DOWN);\n            this.updateLines();\n            return;\n        }\n\n        const markers: PositionMarker[] = [];\n        const isMatch = matchFunction(this.titleElement.innerText, searchText, markers);\n\n        if (isMatch) {\n            if (this.titleElement) {\n                const element = TreeNode.findLeafElement(this.titleElement);\n                element.innerHTML = '';\n                const title = this.createTreeNodeContentElement();\n                element.appendChild(TreeNode.createColoredSpan(title.innerText, markers));\n            }\n\n            this.show(DEEP_MODE_UP);\n            this.show(DEEP_MODE_DOWN);\n        } else {\n            this.resetTitle(DEEP_MODE_DOWN);\n        }\n\n        for (const child of this.children) {\n            child.filter(searchText, matchFunction);\n        }\n\n        this.updateLines();\n    }\n}\n","export interface PositionMarker {\n    pos: number;\n    len: number;\n}\n\nexport type SearchMatchFunction = (lhs: string, rhs: string, markers: PositionMarker[]) => boolean;\n\nfunction indexedAggresiveSearchMatchFunction(lhs: string, lhsIndex: number, rhs: string, markers: PositionMarker[]): boolean {\n    if (!rhs) {\n        return true;\n    }\n\n    lhs = lhs.toLowerCase();\n    rhs = rhs.toLowerCase();\n\n    for (let len = rhs.length; len >= 1; len -= 1) {\n        const subWord = rhs.substring(0, len);\n        const foundPos = lhs.indexOf(subWord, lhsIndex);\n\n        if (foundPos >= 0) {\n            markers.push({\n                pos: foundPos,\n                len: subWord.length\n            });\n\n            return indexedAggresiveSearchMatchFunction(lhs, foundPos + subWord.length, rhs.substring(len), markers);\n        }\n    }\n\n    return false;\n}\n\nexport function aggresiveSearchMatchFunction(lhs: string, rhs: string, markers: PositionMarker[]): boolean {\n    return indexedAggresiveSearchMatchFunction(lhs, 0, rhs, markers);\n}\n\nexport function containsSearchMatchFunction(lhs: string, rhs: string, markers: PositionMarker[]): boolean {\n    const index = lhs.toLowerCase().indexOf(rhs.toLowerCase());\n\n    if (index < 0) {\n        return false;\n    }\n\n    markers.push({\n        pos: index,\n        len: rhs.length\n    });\n\n    return true;\n}\n","import { getElementById } from '../../ui';\nimport { IComponent } from '../IComponent';\nimport { ITabInfo } from '../../TabControl';\nimport { IVaultComponent } from '../vaultComponent';\nimport { TreeNode, TreeNodeCreationController, DEEP_MODE_DOWN } from './TreeNode';\nimport * as plainObject from '../../PlainObject';\nimport * as ui from '../../ui';\nimport { aggresiveSearchMatchFunction, containsSearchMatchFunction, SearchMatchFunction } from '../../searchMatchFunctions';\nimport * as serviceManager from '../../services/serviceManger';\nimport { PasswordService } from '../../services/passwordService';\nimport { CipherService } from 'services/cipherService';\n\nconst btnTabVaultTabTreeView = getElementById('btnTabVaultTabTreeView') as HTMLButtonElement;\nconst divTabVaultTabTreeView = getElementById('divTabVaultTabTreeView');\n\nconst trvVaultTreeView = getElementById('trvVaultTreeView');\nconst txtVaultTreeViewSearch = getElementById('txtVaultTreeViewSearch') as HTMLInputElement;\nconst cboVaultTreeViewSearchType = getElementById('cboVaultTreeViewSearchType') as HTMLSelectElement;\n\nlet rootTreeNode: TreeNode;\n\ninterface SearchMatchFunctionDescription {\n    text: string,\n    function: SearchMatchFunction\n}\n\nconst searchMatchFunctionDescriptions: SearchMatchFunctionDescription[] = [\n    { text: 'Aggresive', function: aggresiveSearchMatchFunction },\n    { text: 'Regular', function: containsSearchMatchFunction },\n];\n\nfunction onSearchVaultInputChanged(): void {\n    if (!rootTreeNode) {\n        return;\n    }\n\n    const index: number = cboVaultTreeViewSearchType.selectedIndex;\n    const searchMatchFunction: SearchMatchFunction = searchMatchFunctionDescriptions[index].function;\n\n    rootTreeNode.hide(DEEP_MODE_DOWN);\n    rootTreeNode.filter(txtVaultTreeViewSearch.value.toLocaleLowerCase(), searchMatchFunction);\n}\n\nfunction populateSearchFunctions(): void {\n    cboVaultTreeViewSearchType.innerHTML = '';\n\n    for (let description of searchMatchFunctionDescriptions) {\n        const option = document.createElement('option');\n        option.text = description.text;\n        cboVaultTreeViewSearchType.appendChild(option);\n    }\n}\n\nclass VaultTreeNodeCreationController implements TreeNodeCreationController {\n    private readonly passwordService: PasswordService;\n\n    public constructor() {\n        this.passwordService = serviceManager.getService('password');\n    }\n\n    private async runPassword(value: any): Promise<void> {\n        await this.passwordService.generateAndCopyPasswordToClipboard(value.public, value.alphabet, value.length);\n    }\n\n    private async runCipher(path: string, key: string, value: any): Promise<boolean> {\n        const cipherService: CipherService | null = serviceManager.getService('cipher');\n\n        if (cipherService === null) {\n            return false;\n        }\n\n        return await cipherService.activate(path, key, value);\n    }\n\n    private static isPasswordObject(key: string, obj: plainObject.PlainObject): boolean {\n        if (key !== 'password') {\n            return false;\n        }\n\n        if (!obj || !plainObject.isPlainObject(obj) || typeof obj.public !== 'string' || obj.public.length < 4) {\n            return false;\n        }\n\n        return true;\n    }\n\n    private static isCipherObject(obj: plainObject.PlainObject): boolean {\n        if (!obj || !plainObject.isPlainObject(obj)) {\n            return false;\n        }\n\n        if (typeof obj.value !== 'string' || obj.value.length <= 0) {\n            return false;\n        }\n\n        if (typeof obj.version !== 'number' || obj.version < 0) {\n            return false;\n        }\n\n        return true;\n    }\n\n    private static isCiphersObject(key: string, obj: plainObject.PlainObject): boolean {\n        if (key !== 'ciphers') {\n            return false;\n        }\n\n        if (!obj || !plainObject.isPlainObject(obj)) {\n            return false;\n        }\n\n        for (const sub of Object.values(obj)) {\n            if (!VaultTreeNodeCreationController.isCipherObject(sub)) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    private static isHint(key: string, value: any) {\n        if (VaultTreeNodeCreationController.isCiphersObject(key, value) ||\n            VaultTreeNodeCreationController.isCipherObject(value) ||\n            VaultTreeNodeCreationController.isPasswordObject(key, value) ||\n            plainObject.isPlainObject(value)) {\n            return false;\n        }\n\n        return true;\n    }\n\n    public isLeaf(path: string, key: string, value: any): boolean {\n        if (VaultTreeNodeCreationController.isCipherObject(value) ||\n            VaultTreeNodeCreationController.isPasswordObject(key, value)) {\n            return true;\n        }\n\n        return plainObject.isPlainObject(value) === false;\n    }\n\n    createTreeNodeContentElement(path: string, key: string, value: any): HTMLElement {\n        if (VaultTreeNodeCreationController.isPasswordObject(key, value)) {\n            const button = document.createElement('button');\n            button.style.justifySelf = 'start';\n            button.style.minWidth = '80px';\n            button.innerText = 'Password';\n\n            const errorLogsService = serviceManager.getService('errorLogs');\n            const logFunc = errorLogsService.createLogErrorMessageFunction();\n\n            ui.setupFeedbackButton(button, async () => await this.runPassword(value), logFunc);\n\n            return button;\n        } else if (VaultTreeNodeCreationController.isCipherObject(value)) {\n            const button = document.createElement('button');\n            button.style.justifySelf = 'start';\n            button.innerText = key;\n            button.title = 'Open in ciphers';\n\n            const errorLogsService = serviceManager.getService('errorLogs');\n            const logFunc = errorLogsService.createLogErrorMessageFunction();\n\n            ui.setupFeedbackButton(button, async () => await this.runCipher(path, key, value), logFunc);\n\n            return button;\n        } else if (VaultTreeNodeCreationController.isHint(key, value)) {\n            const label = document.createElement('span');\n            label.style.justifySelf = 'start';\n            label.innerText = `${key}: ${value}`;\n\n            return label;\n        }\n\n        const div = document.createElement('div');\n        div.innerText = key;\n        return div;\n    }\n}\n\nexport class VaultTreeViewComponent implements IComponent, ITabInfo, IVaultComponent {\n    public readonly name: string = 'VaultTreeView';\n\n    public onVaultLoaded(vault: plainObject.PlainObject): void {\n        rootTreeNode = new TreeNode(null, '<root>', '', vault, new VaultTreeNodeCreationController());\n\n        trvVaultTreeView.innerHTML = '';\n        trvVaultTreeView.appendChild(rootTreeNode.element);\n\n        onSearchVaultInputChanged();\n    }\n\n    public getTabButton(): HTMLButtonElement {\n        return btnTabVaultTabTreeView;\n    }\n\n    public getTabContent(): HTMLElement {\n        return divTabVaultTabTreeView;\n    }\n\n    public onTabSelected(): void {\n        txtVaultTreeViewSearch.focus();\n    }\n\n    public getVaultHint(): string {\n        throw new Error('Not supported.');\n    }\n\n    public init(): void {\n        populateSearchFunctions();\n\n        txtVaultTreeViewSearch.addEventListener('input', onSearchVaultInputChanged);\n        cboVaultTreeViewSearchType.addEventListener('change', onSearchVaultInputChanged);\n    }\n}\n","import { getElementById } from '../../ui';\nimport { IComponent } from '../IComponent';\nimport { ITabInfo } from '../../TabControl';\nimport { IVaultComponent } from '../vaultComponent';\nimport * as plainObject from '../../PlainObject';\n\nconst btnTabVaultTabTextView = getElementById('btnTabVaultTabTextView') as HTMLButtonElement;\nconst divTabVaultTabTextView = getElementById('divTabVaultTabTextView');\n\nconst txtVault = getElementById('txtVault') as HTMLInputElement;\n\nexport class VaultTextViewComponent implements IComponent, ITabInfo, IVaultComponent {\n    public readonly name: string = 'VaultTextView';\n\n    public onVaultLoaded(vault: plainObject.PlainObject): void {\n        txtVault.value = JSON.stringify(vault, undefined, 4);\n    }\n\n    public getTabButton(): HTMLButtonElement {\n        return btnTabVaultTabTextView;\n    }\n\n    public getTabContent(): HTMLElement {\n        return divTabVaultTabTextView;\n    }\n\n    public onTabSelected(): void {\n    }\n\n    public getVaultHint(): string {\n        throw new Error('Not supported.');\n    }\n\n    public init(): void {\n    }\n}\n","import { VaultComponent } from '../components/vaultComponent';\n\nexport class VaultService {\n    private readonly vaultComponent: VaultComponent;\n\n    public constructor(vaultComponent: VaultComponent) {\n        this.vaultComponent = vaultComponent;\n    }\n\n    public computeUserPathMatchDepth(path: string): number {\n        return this.vaultComponent.computeUserPathMatchDepth(path);\n    }\n}\n","import { getElementById, setupFeedbackButton } from '../ui';\n\nimport { IComponent } from './IComponent';\nimport { ITabInfo, TabControl } from '../TabControl';\n\nimport * as storageOutputComponent from './storageOutputComponent';\n\nimport { SecureLocalStorage } from '../storages/SecureLocalStorage';\nimport { IVaultStorage } from '../storages/IVaultStorage';\nimport { GitHubPersonalAccessTokenVaultStorage } from '../storages/GitHubVaultStorage';\nimport { hasPrivatePart, protectAndLockPrivatePart } from './privatePartComponent';\nimport * as plainObject from '../PlainObject';\nimport { VaultTreeViewComponent } from './vaultComponents/treeViewComponent';\nimport { VaultTextViewComponent } from './vaultComponents/textViewComponent';\n\nimport * as serviceManager from '../services/serviceManger';\nimport { VaultService } from '../services/vaultService';\n\nexport interface IVaultComponent {\n    onVaultLoaded(vault: plainObject.PlainObject): void;\n}\n\nconst divTabVault = getElementById('divTabVault');\nconst btnTabVault = getElementById('btnTabVault') as HTMLButtonElement;\n\nconst btnRefreshVault = getElementById('btnRefreshVault') as HTMLButtonElement;\nconst btnClearVaultSettings = getElementById('btnClearVaultSettings') as HTMLButtonElement;\nconst btnViewVaultSettings = getElementById('btnViewVaultSettings') as HTMLButtonElement;\n\nconst elements: any[] = [\n    new VaultTreeViewComponent(),\n    new VaultTextViewComponent(),\n];\n\nconst tabs: ITabInfo[] = elements.filter(e => (e as ITabInfo).getTabButton !== undefined);\nconst components: (IComponent & IVaultComponent)[] = elements.filter(e => (e as IComponent).init !== undefined);\n\nconst subTabs = new TabControl(tabs);\n\nlet vaultStorage: IVaultStorage = new GitHubPersonalAccessTokenVaultStorage(new SecureLocalStorage());\n\nlet vaultObject: plainObject.PlainObject | null = null;\n\nfunction computeUserPathMatchDepth(path: string): number {\n    if (vaultObject === null) {\n        return 0;\n    }\n\n    let obj = vaultObject;\n\n    const pathArray = path.split('/');\n\n    for (let i = 0; i < pathArray.length; i += 1) {\n        if (!obj[pathArray[i]]) {\n            return i;\n        }\n\n        // TODO: Filter here to not go further down ItchyObjects.\n\n        obj = obj[pathArray[i]];\n    }\n\n    return pathArray.length;\n}\n\nasync function reloadVault(): Promise<boolean> {\n    let content: string | null = await vaultStorage.getVaultContent();\n\n    if (content === null) {\n        return false;\n    }\n\n    try {\n        let obj = JSON.parse(content) as plainObject.PlainObject;\n        obj = plainObject.objectDeepSort(obj);\n\n        vaultObject = obj;\n\n        let component: IVaultComponent;\n        for (component of components) {\n            component.onVaultLoaded(obj);\n        }\n\n        return true;\n    } catch (error) {\n        vaultObject = null;\n        alert('Failed to parse vault content, it needs to be fixed and be valid JSON data.');\n        const message = (error as Error).message;\n        if (message) {\n            alert(message);\n            console.error(message);\n        }\n        return false;\n    }\n}\n\nasync function onRefreshVaultButtonClick(): Promise<boolean> {\n    if (hasPrivatePart() === false) {\n        alert('You must enter a master key first.');\n        return false;\n    }\n\n    const result: boolean = await reloadVault();\n\n    if (result) {\n        protectAndLockPrivatePart();\n    }\n\n    return result;\n}\n\nfunction onClearVaultSettingsButtonClick(): void {\n    if (prompt('Are you sure you want to clear the vault settings ?\\nType \\'y\\' to accept', '') !== 'y') {\n        return;\n    }\n\n    vaultStorage.clear();\n}\n\nfunction onViewVaultSettingsButtonClick(): void {\n    alert(vaultStorage.getVaultSettings());\n}\n\nexport class VaultComponent implements IComponent, ITabInfo {\n    public readonly name: string = 'Vault';\n\n    public computeUserPathMatchDepth(path: string) {\n        return computeUserPathMatchDepth(path);\n    }\n\n    public getTabButton(): HTMLButtonElement {\n        return btnTabVault;\n    }\n\n    public getTabContent(): HTMLElement {\n        return divTabVault;\n    }\n\n    public onTabSelected(): void {\n        storageOutputComponent.hide();\n        tabs[subTabs.activeTabIndex].onTabSelected();\n    }\n\n    public getVaultHint(): string {\n        throw new Error('Not supported.');\n    }\n\n    public init(): void {\n        const errorLogsService = serviceManager.getService('errorLogs');\n        const logFunc = errorLogsService.createLogErrorMessageFunction();\n\n        setupFeedbackButton(btnRefreshVault, onRefreshVaultButtonClick, logFunc);\n        btnClearVaultSettings.addEventListener('click', onClearVaultSettingsButtonClick);\n        btnViewVaultSettings.addEventListener('click', onViewVaultSettingsButtonClick);\n\n        const vaultService = new VaultService(this);\n        serviceManager.registerService('vault', vaultService);\n\n        let component: IComponent;\n        for (component of components) {\n            component.init();\n        }\n    }\n}\n","import { ErrorLogsComponent } from 'components/errorLogsComponent';\n\nexport class ErrorLogsService {\n    constructor(private errorLogsComponent: ErrorLogsComponent) {\n    }\n\n    public createLogErrorMessageFunction(): (...args: any[]) => void {\n        return (args) => this.logErrorMessage(args);\n    }\n\n    public logErrorMessage(...args: any[]): void {\n        this.errorLogsComponent.logErrorMessage(...args);\n    }\n}\n","import { getElementById } from '../ui';\nimport { ITabInfo } from '../TabControl';\nimport * as serviceManager from '../services/serviceManger';\nimport { ErrorLogsService } from '../services/errorLogsService';\nimport * as storageOutputComponent from './storageOutputComponent';\n\nconst divErrorLogs = getElementById('divErrorLogs');\nconst btnTabErrorLogs = getElementById('btnTabErrorLogs') as HTMLButtonElement;\n\nconst btnClearErrorLogs = getElementById('btnClearErrorLogs') as HTMLButtonElement;\nconst txtErrorLogs = getElementById('txtErrorLogs') as HTMLTextAreaElement;\n\nexport class ErrorLogsComponent implements ITabInfo {\n    constructor() {\n        window.addEventListener('error', (e) => this.onError(e), true);\n        window.addEventListener('unhandledrejection', (e) => this.onUnhandledRejection(e), true);\n\n        btnClearErrorLogs.addEventListener('click', () => {\n            txtErrorLogs.value = '';\n        });\n\n        serviceManager.registerService('errorLogs', new ErrorLogsService(this));\n    }\n\n    public logErrorMessage(...args: any[]): void {\n        if (args.length == 0) {\n            return;\n        }\n\n        const now = new Date().toISOString();\n\n        let message = args[0].toString();\n\n        for (let i = 1; i < args.length; i++) {\n            message += ` ${args[i].toString()}`;\n        }\n\n        txtErrorLogs.value += `[${now}] ${message}\\n\\n`;\n    }\n\n    public onUnhandledRejection(errorEvent: PromiseRejectionEvent): void {\n        this.logErrorMessage(`Promise rejected, reason: ${errorEvent.reason}`);\n    }\n\n    public onError(errorEvent: ErrorEvent): void {\n        this.logErrorMessage(`${errorEvent.message}\\n${errorEvent.toString()}`);\n    }\n\n    getTabButton(): HTMLButtonElement {\n        return btnTabErrorLogs;\n    }\n\n    getTabContent(): HTMLElement {\n        return divErrorLogs;\n    }\n\n    onTabSelected(): void {\n        storageOutputComponent.hide();\n    }\n}\n","import { getElementById } from '../ui';\nimport { TabControl, ITabInfo } from '../TabControl';\n\nimport { IComponent } from './IComponent';\nimport { PrivatePartComponent } from './privatePartComponent';\nimport { PasswordComponent } from './passwordComponent';\nimport { CipherComponent } from './cipherComponent';\nimport { ReEncryptComponent } from './reEncryptComponent';\nimport { VaultComponent } from './vaultComponent';\n\nimport * as storageOutputComponent from './storageOutputComponent';\nimport { ErrorLogsComponent } from './errorLogsComponent';\n\nconst nothingTabInfo: ITabInfo = {\n    getTabButton(): HTMLButtonElement {\n        return getElementById('btnTabNothing') as HTMLButtonElement;\n    },\n    getTabContent(): HTMLElement {\n        return getElementById('divTabNothing');\n    },\n    onTabSelected(): void {\n        storageOutputComponent.hide();\n    }\n}\n\nconst elements: any[] = [\n    nothingTabInfo,\n    new PrivatePartComponent(),\n    new PasswordComponent(),\n    new CipherComponent(),\n    new ReEncryptComponent(),\n    new ErrorLogsComponent(),\n    new storageOutputComponent.StorageOutputComponent(),\n    new VaultComponent(),\n];\n\nconst tabs: ITabInfo[] = elements.filter(e => (e as ITabInfo).getTabButton !== undefined);\nconst components: IComponent[] = elements.filter(e => (e as IComponent).init !== undefined);\n\nconst tabControl = new TabControl(tabs);\n\nexport class RootComponent implements IComponent {\n    public readonly name: string = 'Root';\n\n    public constructor() {\n    }\n\n    public getVaultHint(): string {\n        throw new Error('Not supported.');\n    }\n\n    public init(): void {\n        let component: IComponent;\n        for (component of components) {\n            component.init();\n        }\n    }\n\n    public getActiveComponent(): IComponent | null {\n        const component = tabs[tabControl.activeTabIndex] as any;\n\n        if (component.init !== undefined) {\n            return component as IComponent;\n        }\n\n        return null;\n    }\n}\n\nexport const rootComponent = new RootComponent();\n","import { getElementById } from './ui';\nimport { rootComponent } from './components/rootComponent';\n\ndeclare const COMMITHASH: string;\n\nconst version = COMMITHASH.substring(0, 11);\nconst githubLink = '<a href=\"https://github.com/TanukiSharp/ItchyPassword\" target=\"_blank\">github</a>';\n\ngetElementById('divInfo').innerHTML = `${version}<br/>${githubLink}`;\n\nrootComponent.init();\n"],"names":["ERROR_COLOR","getElementById","elementName","element","document","Error","async","writeToClipboard","text","logFunc","navigator","clipboard","writeText","error","typedError","console","stack","clearText","txt","refocus","value","focus","setupFeedbackButton","button","action","logError","throttleTimeout","clearFunc","duration","timeout","start","undefined","clearTimeout","end","setTimeout","createThrottleTimeout","classList","remove","clickFunction","disabled","actionResult","result","Promise","add","addEventListener","setupCopyButton","showHide","isVisible","style","removeProperty","setProperty","showHideMany","elements","TabControl","tabs","_activeTabIndex","activeTabIndex","this","index","length","setActiveTab","i","getTabButton","tabInfo","getTabContent","onTabSelected","btnProtectTitleForProtect","txtPrivatePart","txtPrivatePartConfirmation","btnProtect","spnProtectedConfirmation","spnPrivatePartSize","spnPrivatePartSizeConfirmation","privatePart","onChangedHandlers","getPrivatePart","protectAndLockPrivatePart","innerHTML","title","updatePrivatePartsMatching","onProtectButtonClick","protectPrivatePartAction","delay","reset","overrideDelay","window","onPrivatePartTextInput","onChangedHandler","toString","onPrivatePartConfirmationTextInput","toCustomBaseOneWay","bytes","alphabet","alphabetLength","BigInt","number","arrayBuffer","byteLength","arrayView","DataView","multiplier","getUint8","arrayBufferToUnsignedBigIntWithoutHeader","remainder","asUintN","TaskCancelledError","_name","name","constructor","message","super","ERROR_NAME","Object","setPrototypeOf","prototype","static","CancellationTokenSource","_isCancelled","_token","CancellationToken","isCancelled","token","cancel","source","none","_none","ensureNotCancelled","cancellationToken","BASE62_ALPHABET","getDerivedBytes","password","salt","iterations","baseKey","crypto","subtle","importKey","algorithm","hash","deriveKey","key","exportKey","truncate","input","substring","stringToArray","str","TextEncoder","encode","buffer","isPlainObject","hasOwnProperty","objectDeepSort","object","output","entries","sort","a","b","localeCompare","services","getService","serviceName","TypeError","service","registerService","instance","GitHubVaultStorageBase","secureLocalStorage","oneTimePassword","currentVaultContentHash","username","repositoryName","vaultFilename","getUsername","getRepositoryName","getVaultFilename","clear","removeItem","GitHubApiVaultStorage","LOCAL_STORAGE_KEY_USERNAME","LOCAL_STORAGE_KEY_REPO","LOCAL_STORAGE_KEY_FILENAME","AUTH_TOKEN_KEY_NAME","constructTokenAuthString","constructFetchRequest","method","authHeader","body","headers","JSON","stringify","constructUrl","relativeUrl","BASE_URL","retryOnUnauthorized","url","requestInfo","response","fetch","status","prompt","request","getSetVaultParameter","promptText","defaultValue","localStorage","getItem","setItem","ensureVaultParameters","URL","location","defaultAccountUsername","defaultRepo","hostname","pathElements","pathname","split","resolve","getToken","constructVaultFileUrl","ensureToken","warn","ok","getVaultContent","setVaultContent","responseContent","json","sha","decodedContent","atob","content","trim","newContent","updateMessage","btoa","getVaultSettings","GitHubPersonalAccessTokenVaultStorage","authToken","basicAuthHeader","authorizationName","LOCAL_STORAGE_KEY_PASSWORD_PUBLIC","LOCAL_STORAGE_KEY_PASSWORD_LENGTH","LOCAL_STORAGE_KEY_BROWSER_NAME","constructBasicAuthString","log","authorization","id","scopes","note","findAuthorization","authorizations","app","listAuthorizations","deleteAuthorization","createAuthorization","CipherV2","version","description","ArrayBuffer","nonce","getRandomValues","Uint8Array","passwordSalt","aesGcmParams","iv","passwordKey","encrypt","set","payload","derivedKey","decrypt","CipherService","cipherComponent","storageFullPath","cipherName","parameterKeys","setParameters","click","btnTabCiphers","divTabCiphers","cipher","btnClearAllCipherInfo","txtCipherName","txtCipherSource","txtCipherTarget","btnEncrypt","btnDecrypt","btnCopyCipherSource","btnClearCipherSource","btnCopyCipherTarget","btnClearCipherTarget","cipherTargetLastChange","clearSourceVisualCue","setSourceVisualCueError","clearAllVisualCues","clearCipherTargetLastUpdate","setCipherTargetValue","isEncrypt","needDateTimeUpdate","Date","toISOString","updateCipherParameters","datetime","encryptString","encrypted","headeredBuffer","createHeaderedBuffer","arrayBufferToUnsignedBigInt","decryptString","indexOf","byteValue","Number","push","totalLength","diff","slice","unsignedBigIntToArrayBuffer","decrypted","array","TextDecoder","decode","isMatching","rethrowCancelled","onEncryptButtonClick","encryptedString","onDecryptButtonClick","decryptedString","CipherComponent","fullPath","prefix","suffix","startsWith","endsWith","alert","storagePath","fullPathToStoragePath","customKeys","getVaultHint","toLowerCase","init","createLogErrorMessageFunction","SecureLocalStorage","encryptedItem","divStorageOutput","txtPath","lblMatchingPath","txtParameters","btnPushToVault","txtCustomKeys","_parameterKeys","_parameterPath","vaultStorage","pathToObjectChain","path","chainInfo","separatorIndex","tail","firstPath","remainingPath","node","head","tailParent","onPathTextInput","depth","computeUserPathMatchDepth","matchingPath","position","createMatchingPath","innerText","updateMatchingPath","update","onCustomKeysTextInput","updateCustomKeysDisplay","isValid","leaf","obj","parse","parseCustomKeys","keys","deepMerge","target","sourceKey","targetValue","sourceValue","pushToVault","vaultContentData","newData","vaultContent","activeComponent","rootComponent","hint","chars","includes","findNonCharFromStart","findNonCharFromEnd","generateUpdateMessage","newVaultContentData","clearOutputs","parameterPath","setPathUI","setCustomKeysUI","show","hide","clearUI","clearMatchingPath","PasswordService","publicPart","keyString","Math","max","btnTabPasswords","divTabPasswords","passwordGenerators","hkdfPurpose","_description","hkdfKey","sign","CURRENT_PASSWORD_GENERATOR_VERSION","btnClearAllPasswordInfo","txtPublicPart","spnPublicPartSize","btnGeneratePublicPart","btnClearPublicPart","btnCopyPublicPart","btnShowHidePasswordOptionalFeatures","lblAlphabetLength","numOutputSizeRange","numOutputSizeNum","lblAlphabet","txtAlphabet","spnAlphabetSize","divPasswordAlphabetActions","btnResetAlphabet","lblPasswordVersion","cboPasswordVersion","txtResultPassword","spnResultPasswordLength","btnViewResultPassword","btnCopyResultPassword","lblGeneratingPassword","DEFAULT_LENGTH","DEFAULT_ALPHABET","passwordPublicPartLastChange","copyPasswordFunction","onClearPublicPartButtonClick","updatePublicPartSize","updatePasswordPublicPartLastUpdate","updatePasswordGenerationParameters","onGeneratePublicPartButtonClick","randomString","byteCount","generateRandomBytes","run","updateResultPasswordLength","isAlphabetValid","sortedAlphabet","canRun","passwordGenerator","selectedIndex","public","updateOutputSizeRangeToNum","onOutputSizeRangeInput","onOutputSizeNumInput","min","parseInt","val","isNaN","updateOutputSizeNumToRange","updateAlphabetSize","updateAlphabetValidityDisplay","onAlphabetTextInput","isAlphabetValidResult","onResetAlphabetButtonClick","resetAlphabet","onPasswordVersionChanged","generatePasswordString","findPasswordGeneratorByVersion","privatePrivateBytes","publicPartBytes","generatePassword","passwordTaskRunner","currentTokenSource","currentTask","microThreadId","isRunning","throwTaskCanceledError","MAX_SAFE_INTEGER","localMicroThreadId","cancelInternal","taskFactory","localToken","cancelAndExecute","runCore","findPasswordGeneratorFromUserInterface","onPublicPartTextInput","encryptionKeyDerivationSalt","ciphers","btnTabReEncrypt","divTabReEncrypt","txtReEncryptSource","txtReEncryptTarget","cboReEncryptFrom","cboReEncryptTo","btnReEncrypt","btnClearReEncryptSource","btnCopyReEncryptTarget","btnClearReEncryptTarget","fillCipherComboBox","cbo","initialValue","item","createElement","childNodes","onReEncryptButtonClick","sourceCipherIndex","targetCipherIndex","reEncrypted","Array","map","call","x","join","HORIZONTAL_LINE_VERTICAL_OFFSET","floor","TREE_ELEMENT_HEIGHT","TreeNode","parent","children","rootElement","titleElement","childrenContainerElement","treeNodeCreationController","display","getVisibleChildCount","visibleChildCount","child","getVisibleLeafCount","visibleLeafCount","addChild","appendChild","createChildNodes","childKey","childValue","setRootElementStyle","setTitleElementStyle","createTreeNodeContentElement","setChildrenContainerElementStyle","isLeaf","setupLinesElements","height","childrenOffset","gridTemplateRows","gridTemplateColumns","verticalLineElement","color","gridColumn","gridRow","width","borderRight","horizontalLineElement","borderBottom","updateLines","totalVisibleLeafCount","bottomPosition","marginLeft","alignSelf","resetTitle","deepMode","backgroundColor","borderRadius","markers","root","pos","marker","createSpan","len","findLeafElement","filter","searchText","matchFunction","createColoredSpan","indexedAggresiveSearchMatchFunction","lhs","lhsIndex","rhs","subWord","foundPos","btnTabVaultTabTreeView","divTabVaultTabTreeView","trvVaultTreeView","txtVaultTreeViewSearch","cboVaultTreeViewSearchType","rootTreeNode","searchMatchFunctionDescriptions","function","onSearchVaultInputChanged","searchMatchFunction","toLocaleLowerCase","VaultTreeNodeCreationController","passwordService","generateAndCopyPasswordToClipboard","cipherService","activate","sub","values","isCipherObject","isCiphersObject","isPasswordObject","justifySelf","minWidth","runPassword","runCipher","isHint","label","div","btnTabVaultTabTextView","divTabVaultTabTextView","txtVault","VaultService","vaultComponent","divTabVault","btnTabVault","btnRefreshVault","btnClearVaultSettings","btnViewVaultSettings","onVaultLoaded","vault","option","populateSearchFunctions","e","components","subTabs","vaultObject","onRefreshVaultButtonClick","component","reloadVault","onClearVaultSettingsButtonClick","onViewVaultSettingsButtonClick","ErrorLogsService","errorLogsComponent","args","logErrorMessage","divErrorLogs","btnTabErrorLogs","btnClearErrorLogs","txtErrorLogs","onChanged","type","startVisible","options","setupPasswordGeneratorsDropdown","onError","onUnhandledRejection","now","errorEvent","reason","pathArray","vaultService","tabControl","getActiveComponent"],"sourceRoot":""}