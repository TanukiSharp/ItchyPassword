{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://itchy-password/./src/ui.ts","webpack://itchy-password/./src/TabControl.ts","webpack://itchy-password/./src/components/privatePartComponent.ts","webpack://itchy-password/./src/TimedAction.ts","webpack://itchy-password/./src/arrayUtils.ts","webpack://itchy-password/./src/asyncUtils.ts","webpack://itchy-password/./src/crypto.ts","webpack://itchy-password/./src/stringUtils.ts","webpack://itchy-password/./src/PlainObject.ts","webpack://itchy-password/./src/services/serviceManger.ts","webpack://itchy-password/./src/storages/GitHubVaultStorage.ts","webpack://itchy-password/./src/ciphers/v2.ts","webpack://itchy-password/./src/ciphers/v3.ts","webpack://itchy-password/./src/services/cipherService.ts","webpack://itchy-password/./src/components/cipherComponent.ts","webpack://itchy-password/./src/storages/SecureLocalStorage.ts","webpack://itchy-password/./src/components/storageOutputComponent.ts","webpack://itchy-password/./src/services/passwordService.ts","webpack://itchy-password/./src/components/passwordComponent.ts","webpack://itchy-password/./src/passwordGenerators/v1.ts","webpack://itchy-password/./src/passwordGenerators/v2.ts","webpack://itchy-password/./src/components/reEncryptComponent.ts","webpack://itchy-password/./src/components/vaultComponents/TreeNode.ts","webpack://itchy-password/./src/searchMatchFunctions.ts","webpack://itchy-password/./src/components/vaultComponents/treeViewComponent.ts","webpack://itchy-password/./src/components/vaultComponents/textViewComponent.ts","webpack://itchy-password/./src/services/vaultService.ts","webpack://itchy-password/./src/components/vaultComponent.ts","webpack://itchy-password/./src/services/errorLogsService.ts","webpack://itchy-password/./src/components/errorLogsComponent.ts","webpack://itchy-password/./src/components/rootComponent.ts","webpack://itchy-password/./src/index.ts"],"sourcesContent":["export const SUCCESS_COLOR: string = '#D0FFD0';\nexport const ERROR_COLOR: string = '#FFD0D0';\n\nexport function getElementById(elementName: string): HTMLElement {\n    const element: HTMLElement|null = document.getElementById(elementName);\n\n    if (elementName === null) {\n        throw new Error(`DOM element '${elementName}' not found.`);\n    }\n\n    return element as HTMLElement;\n}\n\nexport async function writeToClipboard(text: string, logFunc?: (..._: any[]) => void): Promise<boolean> {\n    try {\n        await navigator.clipboard.writeText(text);\n        return true;\n    } catch (error) {\n        const typedError = error as Error;\n        console.error(typedError.stack || error);\n        logFunc?.(typedError.stack || error);\n        return false;\n    }\n}\n\nexport function clearText(txt: HTMLInputElement, refocus: boolean = false): void {\n    txt.value = '';\n    if (refocus) {\n        txt.focus();\n    }\n}\n\ninterface ThrottleTimeout {\n    start: Function;\n    end: Function;\n}\n\nfunction createThrottleTimeout(clearFunc: Function, duration: number): ThrottleTimeout {\n    let timeout: number | undefined = undefined;\n\n    return {\n        start: () => {\n            if (timeout !== undefined) {\n                clearTimeout(timeout);\n                timeout = undefined;\n            }\n            clearFunc();\n        },\n        end: () => {\n            if (timeout !== undefined) {\n                clearTimeout(timeout);\n            }\n            timeout = setTimeout(clearFunc, duration);\n        }\n    };\n}\n\nexport type FeedbackButtonAsyncFunction = () => Promise<boolean> | boolean | Promise<void> | void;\n\nexport function setupFeedbackButton(button: HTMLButtonElement, action: FeedbackButtonAsyncFunction, logError?: (error: any) => any): () => void {\n    const throttleTimeout: ThrottleTimeout = createThrottleTimeout(() => {\n        button.classList.remove('good-flash');\n        button.classList.remove('bad-flash');\n    }, 1000);\n\n    const clickFunction = async () => {\n        button.disabled = true;\n        throttleTimeout.start();\n\n        try {\n            const actionResult = action();\n\n            let result;\n            if (actionResult instanceof Promise) {\n                result = await actionResult;\n            } else {\n                result = actionResult;\n            }\n\n            if (result === undefined || result === true) {\n                button.classList.add('good-flash');\n            } else {\n                button.classList.add('bad-flash');\n            }\n        } catch (error) {\n            const typedError = error as Error;\n            button.classList.add('bad-flash');\n            console.error(typedError.stack || error);\n            logError?.(typedError.stack || error);\n        } finally {\n            throttleTimeout.end();\n            button.disabled = false;\n        }\n    };\n\n    button.addEventListener('click', clickFunction);\n\n    return clickFunction;\n}\n\nexport function setupCopyButton(txt: HTMLInputElement, button: HTMLButtonElement, logFunc?: (..._: any[]) => void): () => void {\n    return setupFeedbackButton(button, () => writeToClipboard(txt.value), logFunc);\n}\n\nexport function setupViewButton(txt: HTMLInputElement, button: HTMLButtonElement): void {\n    button.addEventListener('click', () => {\n        if (txt.type === 'password') {\n            txt.type = 'input';\n            button.innerHTML = 'Hide';\n        } else {\n            txt.type = 'password';\n            button.innerHTML = 'View';\n        }\n    });\n}\n\nexport function showHide(element: HTMLElement, isVisible: boolean): void {\n    if (isVisible) {\n        element.style.removeProperty('display');\n    } else {\n        element.style.setProperty('display', 'none');\n    }\n}\n\nexport function showHideMany(elements: HTMLElement[], isVisible: boolean): void {\n    for (const element of elements) {\n        showHide(element, isVisible);\n    }\n}\n\nexport function setupShowHideButton(button: HTMLButtonElement, startVisible: boolean, elements: HTMLElement[]): void {\n    let isVisible = startVisible;\n    button.addEventListener('click', function () {\n        isVisible = !isVisible;\n        showHideMany(elements, isVisible);\n    });\n    showHideMany(elements, isVisible);\n}\n","export interface ITabInfo {\n    getTabButton(): HTMLButtonElement;\n    getTabContent(): HTMLElement;\n    onTabSelected(): void;\n}\n\nexport class TabControl {\n    private _activeTabIndex: number = -1;\n\n    public get activeTabIndex(): number {\n        return this._activeTabIndex;\n    }\n\n    public set activeTabIndex(index: number) {\n        if (index < 0 || index >= this.tabs.length) {\n            throw new Error(`Argument 'index' out of range. Must be in range [0;${this.tabs.length - 1}].`);\n        }\n        this.setActiveTab(index);\n    }\n\n    public constructor(private tabs: ITabInfo[]) {\n        for (let i = 0; i < this.tabs.length; i += 1) {\n            tabs[i].getTabButton().addEventListener('click', () => {\n                this.setActiveTab(i);\n            });\n        }\n\n        this.setActiveTab(0);\n    }\n\n    private setActiveTab(activeTabIndex: number) {\n        if (activeTabIndex === this._activeTabIndex) {\n            return;\n        }\n\n        let tabInfo: ITabInfo;\n\n        for (tabInfo of this.tabs) {\n            const button = tabInfo.getTabButton();\n            button.style.removeProperty('font-weight');\n            button.style.setProperty('color', '#C0C0C0');\n\n            tabInfo.getTabContent().style.setProperty('display', 'none');\n        }\n\n        const button = this.tabs[activeTabIndex].getTabButton();\n        button.style.setProperty('font-weight', 'bold');\n        button.style.removeProperty('color');\n\n        this.tabs[activeTabIndex].getTabContent().style.removeProperty('display');\n\n        this._activeTabIndex = activeTabIndex;\n\n        this.tabs[activeTabIndex].onTabSelected();\n    }\n}\n","import * as ui from '../ui';\n\nimport { TimedAction } from '../TimedAction';\nimport { IComponent } from './IComponent';\n\nconst btnProtectTitleForProtect = 'Stores the string in memory and removes it from the UI component. Prevents a physical intruder from copy/pasting the value.';\nconst btnProtectTitleForClear = 'Removes the string form memory and re-enables the UI component.';\n\nconst txtPrivatePart = ui.getElementById('txtPrivatePart') as HTMLInputElement;\nconst txtPrivatePartConfirmation = ui.getElementById('txtPrivatePartConfirmation') as HTMLInputElement;\nconst btnProtect = ui.getElementById('btnProtect') as HTMLButtonElement;\nconst spnProtectedConfirmation = ui.getElementById('spnProtectedConfirmation');\n\nconst spnPrivatePartSize = ui.getElementById('spnPrivatePartSize');\nconst spnPrivatePartSizeConfirmation = ui.getElementById('spnPrivatePartSizeConfirmation');\n\nconst PRIVATE_PART_PROTECTION_TIMEOUT: number = 60 * 1000;\n\nlet privatePart: string | undefined;\n\nconst onChangedHandlers: (() => void)[] = [];\n\nexport function registerOnChanged(onChanged: () => void) {\n    onChangedHandlers.push(onChanged);\n}\n\nexport function hasPrivatePart(): boolean {\n    return getPrivatePart().length > 0;\n}\n\nexport function getPrivatePart(): string {\n    if (privatePart !== undefined) {\n        return privatePart;\n    }\n    return txtPrivatePart.value;\n}\n\nexport function protectAndLockPrivatePart(): void {\n    if (txtPrivatePart.value.length === 0) {\n        return;\n    }\n\n    privatePart = txtPrivatePart.value;\n    spnProtectedConfirmation.innerHTML = 'Protected';\n\n    ui.clearText(txtPrivatePart);\n\n    ui.clearText(txtPrivatePartConfirmation);\n    spnPrivatePartSize.innerHTML = '0';\n    spnPrivatePartSizeConfirmation.innerHTML = '0';\n\n    txtPrivatePart.disabled = true;\n    txtPrivatePartConfirmation.disabled = true;\n\n    btnProtect.innerHTML = 'Clear and unlock';\n    btnProtect.title = btnProtectTitleForClear;\n\n    updatePrivatePartsMatching();\n}\n\nfunction clearAndUnLockPrivatePart(): void {\n    privatePart = undefined;\n    spnProtectedConfirmation.innerHTML = '';\n\n    txtPrivatePart.disabled = false;\n    txtPrivatePartConfirmation.disabled = false;\n\n    btnProtect.innerHTML = 'Protect and lock';\n    btnProtect.title = btnProtectTitleForProtect;\n    btnProtect.disabled = true;\n}\n\nfunction togglePrivatePartProtection(): void {\n    if (privatePart === undefined) {\n        protectAndLockPrivatePart();\n    } else {\n        clearAndUnLockPrivatePart();\n    }\n}\n\nfunction onProtectButtonClick() {\n    togglePrivatePartProtection();\n}\n\nconst protectPrivatePartAction: TimedAction = new TimedAction(protectAndLockPrivatePart, PRIVATE_PART_PROTECTION_TIMEOUT);\n\nfunction onPrivatePartTextInput(): void {\n    btnProtect.disabled = txtPrivatePart.value.length === 0;\n\n    spnPrivatePartSize.innerHTML = txtPrivatePart.value.length.toString();\n    updatePrivatePartsMatching();\n\n    let onChangedHandler: () => void;\n    for (onChangedHandler of onChangedHandlers) {\n        onChangedHandler();\n    }\n\n    protectPrivatePartAction.reset();\n}\n\nfunction updatePrivatePartsMatching(): void {\n    if (txtPrivatePartConfirmation.value === txtPrivatePart.value) {\n        txtPrivatePartConfirmation.style.setProperty('background', ui.SUCCESS_COLOR);\n    } else {\n        txtPrivatePartConfirmation.style.setProperty('background', ui.ERROR_COLOR);\n    }\n};\n\nfunction onPrivatePartConfirmationTextInput(): void {\n    spnPrivatePartSizeConfirmation.innerHTML = txtPrivatePartConfirmation.value.length.toString();\n    protectPrivatePartAction.reset();\n    updatePrivatePartsMatching();\n}\n\nexport class PrivatePartComponent implements IComponent {\n    public readonly name: string = 'PrivatePart';\n\n    public getVaultHint(): string {\n        throw new Error('Not supported.');\n    }\n\n    public init(): void {\n        btnProtect.addEventListener('click', onProtectButtonClick);\n        txtPrivatePart.addEventListener('input', onPrivatePartTextInput);\n        txtPrivatePartConfirmation.addEventListener('input', onPrivatePartConfirmationTextInput);\n\n        updatePrivatePartsMatching();\n        btnProtect.title = btnProtectTitleForProtect;\n        txtPrivatePart.focus();\n    }\n}\n","export class TimedAction {\n    private timeout: number | undefined;\n\n    public constructor(private action: Function, private delay: number) {\n    }\n\n    public reset(overrideDelay: number | undefined = undefined): void {\n        if (this.timeout !== undefined) {\n            clearTimeout(this.timeout);\n        }\n\n        const delay = overrideDelay !== undefined ? overrideDelay : this.delay;\n\n        this.timeout = window.setTimeout(() => {\n            this.action();\n            this.timeout = undefined;\n        }, delay);\n    }\n}\n","export function arrayToString(array: ArrayBuffer): string {\n    const decoder = new TextDecoder(/*'utf-8'*/);\n    return decoder.decode(array);\n};\n\nexport function copy(source: Uint8Array, sourceIndex: number, target: Uint8Array, targetIndex: number, length: number): void {\n    for (let i: number = 0; i < length; i += 1) {\n        target[i + targetIndex] = source[i + sourceIndex];\n    }\n}\n\nfunction createHeaderedBuffer(buffer: ArrayBuffer): ArrayBuffer {\n    if (buffer.byteLength > 0xFFFF) {\n        throw new Error(`Buffer too large: ${buffer.byteLength} bytes`);\n    }\n\n    let length = buffer.byteLength;\n    const headeredBuffer: Uint8Array = new Uint8Array(2 + buffer.byteLength);\n\n    for (let i: number = 0; i < 2; i += 1) {\n        headeredBuffer[i] = length % 256;\n        length /= 256;\n    }\n\n    headeredBuffer.set(new Uint8Array(buffer), 2);\n\n    return headeredBuffer.buffer;\n}\n\nfunction arrayBufferToUnsignedBigIntWithoutHeader(arrayBuffer: ArrayBuffer): bigint {\n    const length: number = arrayBuffer.byteLength;\n    const arrayView: DataView = new DataView(arrayBuffer, 0);\n\n    let result: bigint = 0n;\n    let multiplier: bigint = 1n;\n\n    for (let i: number = 0; i < length; i += 1) {\n        result += BigInt(arrayView.getUint8(i)) * multiplier;\n        multiplier *= 256n;\n    }\n\n    return result;\n}\n\nfunction arrayBufferToUnsignedBigInt(arrayBuffer: ArrayBuffer): bigint {\n    arrayBuffer = createHeaderedBuffer(arrayBuffer);\n\n    const length: number = arrayBuffer.byteLength;\n    const arrayView: DataView = new DataView(arrayBuffer, 0);\n\n    let result: bigint = 0n;\n    let multiplier: bigint = 1n;\n\n    for (let i: number = 0; i < length; i += 1) {\n        result += BigInt(arrayView.getUint8(i)) * multiplier;\n        multiplier *= 256n;\n    }\n\n    return result;\n}\n\nexport function unsignedBigIntToArrayBuffer(number: bigint): ArrayBuffer {\n    const result: Array<number> = [];\n\n    while (number > 0n)\n    {\n        const remainder: bigint = number % 256n;\n        number /= 256n;\n\n        const byteValue: number = Number(<any>BigInt.asUintN(8, remainder));\n\n        result.push(byteValue);\n    }\n\n    let totalLength: number = result[0];\n    if (result.length > 1) { // For case where original buffer is of length 1 and contains 0.\n        totalLength += result[1] * 256;\n    }\n\n    // The varable 'result' contains 2 bytes of size header.\n    const diff = totalLength - (result.length - 2);\n\n    for (let i: number = 0; i < diff; i += 1) {\n        result.push(0);\n    }\n\n    return new Uint8Array(result.slice(2)).buffer;\n}\n\n// This is a one way encoding in the sense that decoding is not always deterministic.\n// This can be used to generate strings where decoding it doesn't matter.\nexport function toCustomBaseOneWay(bytes: ArrayBuffer, alphabet: string): string {\n    const alphabetLength: bigint = BigInt(alphabet.length);\n\n    let result: string = '';\n    let number: bigint = arrayBufferToUnsignedBigIntWithoutHeader(bytes);\n\n    while (number > 0n)\n    {\n        const remainder: bigint = number % alphabetLength;\n        number /= alphabetLength;\n\n        const index: number = <number><any>BigInt.asUintN(8, remainder);\n\n        result += alphabet[index];\n    }\n\n    return result;\n}\n\nexport function toCustomBase(bytes: ArrayBuffer, alphabet: string): string {\n    const alphabetLength: bigint = BigInt(alphabet.length);\n\n    let result: string = '';\n    let number: bigint = arrayBufferToUnsignedBigInt(bytes);\n\n    while (number > 0n)\n    {\n        const remainder: bigint = number % alphabetLength;\n        number /= alphabetLength;\n\n        const index: number = <number><any>BigInt.asUintN(8, remainder);\n\n        result += alphabet[index];\n    }\n\n    return result;\n}\n\nexport function fromCustomBase(input: string, alphabet: string): ArrayBuffer {\n    const alphabetLength: bigint = BigInt(alphabet.length);\n\n    let number: bigint = 0n;\n    let multiplier: bigint = 1n;\n\n    for (let i: number = 0; i < input.length; i += 1) {\n        const value: bigint = BigInt(alphabet.indexOf(input[i]));\n\n        number += value * multiplier;\n        multiplier *= alphabetLength;\n    }\n\n    return unsignedBigIntToArrayBuffer(number);\n}\n\nexport function toBase16(buffer: ArrayBuffer): string {\n    return Array.prototype.map.call(\n        new Uint8Array(buffer),\n        x => ('00' + x.toString(16)).slice(-2)\n    ).join('');\n}\n","export class TaskCancelledError extends Error {\n    private _name: string;\n\n    public get name(): string {\n        return this._name;\n    }\n\n    constructor(message?: string) {\n        super(message);\n        this._name = TaskCancelledError.ERROR_NAME;\n        Object.setPrototypeOf(this, new.target.prototype);\n    }\n\n    public static readonly ERROR_NAME: string = 'TaskCancelledError';\n\n    public static isMatching(error: Error) {\n        return error && error.name === TaskCancelledError.ERROR_NAME;\n    }\n}\n\nexport class CancellationTokenSource {\n    private _isCancelled: boolean = false;\n    private _token: CancellationToken;\n\n    constructor() {\n        this._token = new CancellationToken(this);\n    }\n\n    public get isCancelled(): boolean {\n        return this._isCancelled;\n    }\n\n    public get token(): CancellationToken {\n        return this._token;\n    }\n\n    public cancel(): void {\n        this._isCancelled = true;\n    }\n}\n\nexport class CancellationToken {\n    private static _none: CancellationToken | null = null;\n    public static get none(): CancellationToken {\n        if (CancellationToken._none === null) {\n            CancellationToken._none = new CancellationToken(new CancellationTokenSource());\n        }\n        return CancellationToken._none;\n    }\n\n    constructor(private source: CancellationTokenSource) {\n    }\n\n    public get isCancelled(): boolean {\n        return this.source.isCancelled;\n    }\n}\n\nexport function ensureNotCancelled(cancellationToken: CancellationToken): void {\n    if (cancellationToken.isCancelled) {\n        throw new TaskCancelledError();\n    }\n}\n\nexport function rethrowCancelled(error: Error): void {\n    if (TaskCancelledError.isMatching(error)) {\n        throw error;\n    }\n}\n\nexport type TaskFactory<T> = (cancellationToken: CancellationToken) => Promise<T>;\n\n// Manages the lifetime of a single task, and automatically cancels the previous when running a new one.\n// It also awaits for previous task to be fully terminated before running the new one.\nexport class TaskRunner<TValue> {\n    private currentTokenSource: CancellationTokenSource | null = null;\n    private currentTask: Promise<TValue | undefined> | null = null;\n    private microThreadId: number = 0;\n\n    // Gets a value indicating whether a task is currently running or not.\n    public get isRunning(): boolean {\n        return this.currentTask !== null;\n    }\n\n    // Cancels the currently running task, if any.\n    // Returns true if no one called cancelInternal() when it returns.\n    private async cancelInternal(throwTaskCanceledError: boolean): Promise<boolean> {\n        if (this.microThreadId === Number.MAX_SAFE_INTEGER) {\n            this.microThreadId = 0;\n        } else {\n            this.microThreadId = this.microThreadId + 1;\n        }\n\n        const localMicroThreadId: number = this.microThreadId;\n\n        // This corresponds to the end of cancelAndExecute().\n        if (this.currentTask === null) {\n            return true;\n        }\n\n        if (this.currentTokenSource !== null) {\n            this.currentTokenSource.cancel();\n\n            // The above currentTokenSource.cancel() can run the finally block of cancelAndExecute() and set currentTask to null.\n            if (this.currentTask !== null) {\n                try {\n                    await this.currentTask;\n                } catch (error) {\n                    if (TaskCancelledError.isMatching(error as Error)) {\n                        if (throwTaskCanceledError) {\n                            throw error;\n                        }\n                    } else {\n                        throw error;\n                    }\n                }\n            }\n        }\n\n        return localMicroThreadId === this.microThreadId;\n    }\n\n    // Cancels the currently running task, if any.\n    // throwTaskCanceledError: Pass true allow to throw a TaskCancelledError.\n    // Returns a Promise that completes when the current job is fully cancelled.\n    public async cancel(throwTaskCanceledError: boolean = false): Promise<void> {\n        await this.cancelInternal(throwTaskCanceledError);\n    }\n\n    // Cancels the current task if any, and runs a new one.\n    // T: Type of value returned by the task to run.\n    // taskFactory: A task producer that receives a CancellationToken.\n    // throwTaskCanceledError: Pass true allow to throw a TaskCancelledError.\n    // Returns the task produced by the taskFactory.\n    public async cancelAndExecute(taskFactory: TaskFactory<TValue>, throwTaskCanceledError: boolean = false): Promise<TValue | undefined> {\n        if (await this.cancelInternal(throwTaskCanceledError) === false) {\n            if (throwTaskCanceledError === false) {\n                return undefined;\n            }\n            throw new TaskCancelledError();\n        }\n\n        var localToken = new CancellationTokenSource();\n        this.currentTokenSource = localToken;\n\n        try {\n            this.currentTask = taskFactory(this.currentTokenSource.token);\n            return await this.currentTask;\n        } catch (error) {\n            if (TaskCancelledError.isMatching(error as Error) && throwTaskCanceledError === false) {\n                return undefined;\n            }\n            throw error;\n        } finally {\n            this.currentTask = null;\n        }\n    }\n}\n","import * as arrayUtils from './arrayUtils';\nimport { CancellationToken, ensureNotCancelled } from './asyncUtils';\n\nexport const BASE62_ALPHABET: string = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\n\nexport interface IPasswordGenerator {\n    readonly version: number;\n    readonly description: string;\n    generatePassword(privatePart: ArrayBuffer, publicPart: ArrayBuffer, cancellationToken: CancellationToken): Promise<ArrayBuffer>;\n}\n\nexport interface ICipher {\n    readonly version: number;\n    readonly description: string;\n    encrypt(input: ArrayBuffer, password: ArrayBuffer, cancellationToken: CancellationToken): Promise<ArrayBuffer>;\n    decrypt(input: ArrayBuffer, password: ArrayBuffer, cancellationToken: CancellationToken): Promise<ArrayBuffer>;\n}\n\nexport async function getDerivedBytes(password: ArrayBuffer, salt: ArrayBuffer, iterations: number, cancellationToken: CancellationToken): Promise<ArrayBuffer> {\n    const baseKey: CryptoKey = await window.crypto.subtle.importKey(\n        'raw',\n        password,\n        'PBKDF2',\n        false,\n        ['deriveKey']\n    );\n\n    ensureNotCancelled(cancellationToken);\n\n    const algorithm: Pbkdf2Params = {\n        name: 'PBKDF2',\n        hash: 'SHA-512',\n        iterations: iterations,\n        salt\n    };\n\n    const derivedKeyType: AesDerivedKeyParams = {\n        name: 'AES-GCM', // Using AES-CBC or AES-GCM here produces the same result.\n        length: 256\n    };\n\n    const result: CryptoKey = await window.crypto.subtle.deriveKey(\n        algorithm,\n        baseKey,\n        derivedKeyType,\n        true,\n        ['encrypt']\n    );\n\n    ensureNotCancelled(cancellationToken);\n\n    const key: ArrayBuffer = await window.crypto.subtle.exportKey('raw', result);\n\n    ensureNotCancelled(cancellationToken);\n\n    return key;\n}\n\nexport function generateRandomBytes(byteCount: number = 64): ArrayBuffer {\n    const array: Uint8Array = new Uint8Array(byteCount);\n    return crypto.getRandomValues(array).buffer;\n}\n\nexport function generateRandomString(byteCount: number = 64, alphabet: string = BASE62_ALPHABET): string {\n    const array: ArrayBuffer = generateRandomBytes(byteCount);\n    return arrayUtils.toCustomBaseOneWay(array, alphabet);\n}\n","function findNonCharFromStart(value: string, chars: string[]): number {\n    for (let i = 0; i < value.length; i += 1) {\n        if (chars.includes(value[i]) === false) {\n            return i;\n        }\n    }\n\n    return value.length;\n}\n\nfunction findNonCharFromEnd(value: string, chars: string[]): number {\n    for (let i = value.length - 1; i >= 0; i -= 1) {\n        if (chars.includes(value[i]) === false) {\n            return i + 1;\n        }\n    }\n\n    return value.length;\n}\n\nexport function trim(value: string, ...chars: string[]): string {\n    const start: number = findNonCharFromStart(value, chars);\n    const end: number = findNonCharFromEnd(value, chars);\n\n    return value.substring(start, end);\n}\n\nexport function truncate(input: string, length: number): string {\n    if (input.length <= length) {\n        return input;\n    }\n\n    return input.substring(0, length);\n}\n\nexport function stringToArray(str: string): ArrayBuffer {\n    const encoder = new TextEncoder(/*'utf-8'*/);\n    return encoder.encode(str).buffer;\n}\n\nexport function fromBase16(str: string): ArrayBuffer {\n    if (str.length % 2 !== 0) {\n        str = '0' + str;\n    }\n\n    const result: Uint8Array = new Uint8Array(str.length / 2);\n\n    for (let i = 0; i < result.byteLength; i += 1) {\n        const position = i * 2;\n        result[i] = parseInt(str.substring(position, position + 2), 16);\n    }\n\n    return result.buffer;\n}\n","export type PlainObject = { [key: string]: any };\n\nexport function isPlainObject(value: any): boolean {\n    return value !== undefined &&\n        value !== null &&\n        value.hasOwnProperty('constructor') === false &&\n        value.constructor.name === 'Object';\n}\n\nexport function objectDeepSort(object: PlainObject): PlainObject {\n    const output: PlainObject = {};\n\n    for (const [key, value] of Object.entries(object).sort((a, b) => a[0].localeCompare(b[0]))) {\n        output[key] = isPlainObject(value) ? objectDeepSort(value) : value;\n    }\n\n    return output;\n}\n","type ServiceContainer = { [key: string]: any };\n\nconst services: ServiceContainer = {};\n\nexport function listServices(): string[] {\n    return Object.keys(services);\n}\n\nexport function getService(serviceName: string): any {\n    if (!serviceName) {\n        throw new TypeError(`Argument 'serviceName' is mandatory.`);\n    }\n\n    const service = services[serviceName];\n\n    if (service === undefined) {\n        throw new Error(`Service '${serviceName}' is not registered.`);\n    }\n\n    return service;\n}\n\nexport function registerService(serviceName: string, instance: any): void {\n    if (!serviceName) {\n        throw new TypeError(`Argument 'serviceName' is mandatory.`);\n    }\n    if (instance === undefined) {\n        throw new TypeError(`Argument 'instance' cannot be undefined.`);\n    }\n\n    if (services[serviceName] !== undefined) {\n        throw new Error(`Service '${serviceName}' is already registered.`);\n    }\n\n    services[serviceName] = instance;\n}\n","import { SecureLocalStorage } from './SecureLocalStorage';\nimport { IVaultStorage } from './IVaultStorage';\nimport { PlainObject } from '../PlainObject';\n\ninterface IApp {\n    name: string;\n}\n\ninterface IAuthorization {\n    id: number;\n    app: IApp;\n}\n\ninterface IGitHubContent {\n    sha: string;\n    content: string;\n}\n\nabstract class GitHubVaultStorageBase implements IVaultStorage {\n    static BASE_URL: string = 'https://api.github.com';\n    static AUTH_TOKEN_KEY_NAME: string = 'GitHubVaultStorageBase.AuthToken';\n\n    static LOCAL_STORAGE_KEY_USERNAME: string = 'GitHubVaultStorageBase.Username';\n    static LOCAL_STORAGE_KEY_REPO: string = 'GitHubVaultStorageBase.Repository';\n    static LOCAL_STORAGE_KEY_FILENAME: string = 'GitHubVaultStorageBase.Filename';\n\n    private token: string | null = null;\n    private oneTimePassword: string | null = null;\n    private currentVaultContentHash: string | null = null;\n\n    private username: string | null = null;\n    private repositoryName: string | null = null;\n    private vaultFilename: string | null = null;\n\n\n\n    protected getUsername(): string | null {\n        return this.username;\n    }\n\n    protected getRepositoryName(): string | null {\n        return this.repositoryName;\n    }\n\n    protected getVaultFilename(): string | null {\n        return this.vaultFilename;\n    }\n\n    public constructor(protected secureLocalStorage: SecureLocalStorage) {\n    }\n\n    public clear(): void {\n        this.secureLocalStorage.removeItem(GitHubVaultStorageBase.LOCAL_STORAGE_KEY_USERNAME);\n        this.secureLocalStorage.removeItem(GitHubVaultStorageBase.LOCAL_STORAGE_KEY_REPO);\n        this.secureLocalStorage.removeItem(GitHubVaultStorageBase.LOCAL_STORAGE_KEY_FILENAME);\n\n        this.secureLocalStorage.removeItem(GitHubVaultStorageBase.AUTH_TOKEN_KEY_NAME);\n    }\n\n    private constructTokenAuthString(): string {\n        return `token ${this.token}`;\n    }\n\n    private constructFetchRequest(method: string, authHeader: string, body: any): RequestInit {\n        const headers: PlainObject = {\n            'Accept': 'application/vnd.github.v3+json',\n            'Content-Type': 'application/json',\n            'Authorization': authHeader\n        };\n\n        if (this.oneTimePassword) {\n            headers['x-github-otp'] = this.oneTimePassword;\n        }\n\n        return {\n            method,\n            headers,\n            body: body ? JSON.stringify(body) : undefined\n        };\n    }\n\n    private constructUrl(relativeUrl: string): string {\n        return `${GitHubVaultStorageBase.BASE_URL}${relativeUrl}`;\n    }\n\n    protected async request(retryOnUnauthorized: boolean, method: string, relativeUrl: string, authHeader: string, body: any = undefined): Promise<Response | null> {\n        const url: string = this.constructUrl(relativeUrl);\n        const requestInfo: RequestInit = this.constructFetchRequest(method, authHeader, body);\n\n        let response: Response = await fetch(url, requestInfo);\n\n        if (response.status === 401 && retryOnUnauthorized) {\n            this.oneTimePassword = prompt('Input your 2FA code:');\n\n            if (!this.oneTimePassword) {\n                return null;\n            }\n\n            return await this.request(retryOnUnauthorized, method, relativeUrl, authHeader, body);\n        }\n\n        return response;\n    }\n\n    protected getSetVaultParameter(key: string, promptText: string, defaultValue?: string): string | null {\n        let value: string | null = window.localStorage.getItem(key);\n\n        if (value) {\n            return value;\n        }\n\n        value = prompt(promptText, defaultValue);\n\n        if (!value) {\n            return null;\n        }\n\n        window.localStorage.setItem(key, value);\n\n        return value;\n    }\n\n    protected ensureVaultParameters(): Promise<boolean> {\n        const url = new URL(window.location.toString());\n\n        let defaultAccountUsername = '';\n        let defaultRepo = '';\n\n        if (url.hostname === 'github.com') {\n            const pathElements = url.pathname.split('/');\n            if (pathElements.length >= 3) {\n                defaultAccountUsername = pathElements[1];\n                defaultRepo = `${pathElements[2]}Vault`;\n            }\n        }\n\n        if (!defaultRepo) {\n            defaultRepo = 'ItchyPasswordVault';\n        }\n\n        const username = this.getSetVaultParameter(GitHubVaultStorageBase.LOCAL_STORAGE_KEY_USERNAME, 'GitHub account username:', defaultAccountUsername);\n        if (!username) {\n            return Promise.resolve(false);\n        }\n        this.username = username;\n\n        const repositoryName: string | null = this.getSetVaultParameter(GitHubVaultStorageBase.LOCAL_STORAGE_KEY_REPO, 'Vault GitHub repository name:', defaultRepo);\n        if (!repositoryName) {\n            return Promise.resolve(false);\n        }\n        this.repositoryName = repositoryName;\n\n        const vaultFilename: string | null = this.getSetVaultParameter(GitHubVaultStorageBase.LOCAL_STORAGE_KEY_FILENAME, 'Vault filename:', 'vault.json');\n        if (!vaultFilename) {\n            return Promise.resolve(false);\n        }\n        this.vaultFilename = vaultFilename;\n\n        return Promise.resolve(true);\n    }\n\n    protected abstract getToken(): Promise<string | null>;\n\n    private async ensureToken(): Promise<boolean> {\n        let token: string | null = await this.secureLocalStorage.getItem(GitHubVaultStorageBase.AUTH_TOKEN_KEY_NAME);\n\n        if (token === null) {\n            token = await this.getToken();\n\n            if (token === null) {\n                return false;\n            }\n        }\n\n        await this.secureLocalStorage.setItem(GitHubVaultStorageBase.AUTH_TOKEN_KEY_NAME, token);\n\n        this.token = token;\n\n        return true;\n    }\n\n    private constructVaultFileUrl() {\n        return `/repos/${this.username}/${this.repositoryName}/contents/${this.vaultFilename}`;\n    }\n\n    public async getVaultContent(): Promise<string | null> {\n        if (await this.ensureVaultParameters() === false) {\n            return null;\n        }\n        if (await this.ensureToken() === false) {\n            return null;\n        }\n\n        const url: string = this.constructVaultFileUrl();\n        const response: Response | null = await this.request(false, 'GET', url, this.constructTokenAuthString());\n\n        if (response === null) {\n            console.warn('Fetching vault content aborted.');\n            return null;\n        }\n\n        if (response.ok === false) {\n            if (response.status === 401) {\n                this.secureLocalStorage.removeItem(GitHubVaultStorageBase.AUTH_TOKEN_KEY_NAME);\n                this.token = null;\n                this.oneTimePassword = null;\n\n                return await this.getVaultContent();\n            } else if (response.status === 404) {\n                if (await this.setVaultContent('{}', '[ItchyPassword] Creation of vault file')) {\n                    return '{}';\n                }\n                return null;\n            }\n\n            console.error(`Failed to fetch vault file '${this.vaultFilename}'.`, response);\n\n            return null;\n        }\n\n        const responseContent: IGitHubContent = await response.json();\n\n        this.currentVaultContentHash = responseContent.sha;\n\n        const decodedContent = atob(responseContent.content);\n\n        if (decodedContent.trim() === '') {\n            return '{}';\n        }\n\n        return decodedContent;\n    }\n\n    public async setVaultContent(newContent: string, updateMessage: string): Promise<boolean> {\n        if (await this.ensureVaultParameters() === false) {\n            return false;\n        }\n        if (await this.ensureToken() === false) {\n            return false;\n        }\n\n        const body = {\n            message: updateMessage,\n            content: btoa(newContent),\n            sha: this.currentVaultContentHash\n        };\n\n        const url: string = this.constructVaultFileUrl();\n        const response: Response | null = await this.request(false, 'PUT', url, this.constructTokenAuthString(), body);\n\n        if (response === null) {\n            console.warn('Push new vault content aborted.');\n            return false;\n        }\n\n        const responseContent: any = await response.json();\n\n        if (response.ok === false) {\n            console.error(`Failed to create/update vault file '${this.vaultFilename}'.`, response, responseContent);\n            return false;\n        }\n\n        this.currentVaultContentHash = (responseContent.content as IGitHubContent).sha;\n\n        return true;\n    }\n\n    public getVaultSettings(): string {\n        const username = window.localStorage.getItem(GitHubVaultStorageBase.LOCAL_STORAGE_KEY_USERNAME);\n        const repositoryName = window.localStorage.getItem(GitHubVaultStorageBase.LOCAL_STORAGE_KEY_REPO);\n        const vaultFilename = window.localStorage.getItem(GitHubVaultStorageBase.LOCAL_STORAGE_KEY_FILENAME);\n\n        const usernameDisplay = username == null ? '<null>' : `'${username}'`;\n        const repositoryNameDisplay = repositoryName == null ? '<null>' : `'${repositoryName}'`;\n        const vaultFilenameDisplay = vaultFilename == null ? '<null>' : `'${vaultFilename}'`;\n\n        return `username: ${usernameDisplay}\\nrepository name: ${repositoryNameDisplay}\\nvault filename: ${vaultFilenameDisplay}`;\n    }\n}\n\n// ================================================================================================\n\nexport class GitHubPersonalAccessTokenVaultStorage extends GitHubVaultStorageBase {\n    protected getToken(): Promise<string | null> {\n        const authToken: string | null = prompt('Personal access token:');\n        return Promise.resolve(authToken);\n    }\n}\n","import { ICipher, getDerivedBytes } from '../crypto';\nimport { CancellationToken, ensureNotCancelled } from '../asyncUtils';\n\nexport class CipherV2 implements ICipher {\n    private iterations: number = 100_000;\n\n    public get version(): number {\n        return 2;\n    }\n\n    public get description(): string {\n        return 'PBKDF2 + AES-GCM 256';\n    }\n\n    async encrypt(input: ArrayBuffer, password: ArrayBuffer, cancellationToken: CancellationToken): Promise<ArrayBuffer> {\n        const output: ArrayBuffer = new ArrayBuffer(12 + 16 + 16 + input.byteLength);\n\n        const nonce: Uint8Array = crypto.getRandomValues(new Uint8Array(output, 0, 12));\n        const passwordSalt: Uint8Array = crypto.getRandomValues(new Uint8Array(output, 12, 16));\n\n        const aesGcmParams: AesGcmParams = {\n            name: 'AES-GCM',\n            iv: nonce\n        };\n\n        const aesKeyAlgorithm: AesKeyAlgorithm = {\n            name: 'AES-GCM',\n            length: 256\n        };\n\n        const passwordKey: CryptoKey = await window.crypto.subtle.importKey(\n            'raw',\n            await getDerivedBytes(password, passwordSalt, this.iterations, cancellationToken),\n            aesKeyAlgorithm,\n            false,\n            ['encrypt']\n        );\n\n        ensureNotCancelled(cancellationToken);\n\n        const result: ArrayBuffer = await window.crypto.subtle.encrypt(aesGcmParams, passwordKey, input);\n\n        ensureNotCancelled(cancellationToken);\n\n        new Uint8Array(output).set(new Uint8Array(result), 12 + 16);\n\n        return output;\n    }\n\n    async decrypt(input: ArrayBuffer, password: ArrayBuffer, cancellationToken: CancellationToken): Promise<ArrayBuffer> {\n        const nonce: Uint8Array = new Uint8Array(input, 0, 12);\n        const passwordSalt: Uint8Array = new Uint8Array(input, 12, 16);\n        const payload: Uint8Array = new Uint8Array(input, 12 + 16);\n\n        const aesGcmParams: AesGcmParams = {\n            name: 'AES-GCM',\n            iv: nonce\n        };\n\n        const aesKeyAlgorithm: AesKeyAlgorithm = {\n            name: 'AES-GCM',\n            length: 256\n        };\n\n        const derivedKey: ArrayBuffer = await getDerivedBytes(password, passwordSalt, this.iterations, cancellationToken);\n\n        ensureNotCancelled(cancellationToken);\n\n        const passwordKey: CryptoKey = await window.crypto.subtle.importKey(\n            'raw',\n            derivedKey,\n            aesKeyAlgorithm,\n            false,\n            ['decrypt']\n        );\n\n        ensureNotCancelled(cancellationToken);\n\n        const result: ArrayBuffer = await window.crypto.subtle.decrypt(aesGcmParams, passwordKey, payload);\n\n        ensureNotCancelled(cancellationToken);\n\n        return result;\n    }\n}\n","import { ICipher, getDerivedBytes } from '../crypto';\nimport { CancellationToken, ensureNotCancelled } from '../asyncUtils';\n\n// TODO: Should refactor v2 and v3 common code into a reusable component instead of shamelessly copy/pasting...\n\nexport class CipherV3 implements ICipher {\n    private iterations: number = 400_000;\n\n    public get version(): number {\n        return 3;\n    }\n\n    public get description(): string {\n        return 'PBKDF2 + AES-GCM 512';\n    }\n\n    async encrypt(input: ArrayBuffer, password: ArrayBuffer, cancellationToken: CancellationToken): Promise<ArrayBuffer> {\n        const output: ArrayBuffer = new ArrayBuffer(12 + 16 + 16 + input.byteLength);\n\n        const nonce: Uint8Array = crypto.getRandomValues(new Uint8Array(output, 0, 12));\n        const passwordSalt: Uint8Array = crypto.getRandomValues(new Uint8Array(output, 12, 16));\n\n        const aesGcmParams: AesGcmParams = {\n            name: 'AES-GCM',\n            iv: nonce\n        };\n\n        const aesKeyAlgorithm: AesKeyAlgorithm = {\n            name: 'AES-GCM',\n            length: 512\n        };\n\n        const passwordKey: CryptoKey = await window.crypto.subtle.importKey(\n            'raw',\n            await getDerivedBytes(password, passwordSalt, this.iterations, cancellationToken),\n            aesKeyAlgorithm,\n            false,\n            ['encrypt']\n        );\n\n        ensureNotCancelled(cancellationToken);\n\n        const result: ArrayBuffer = await window.crypto.subtle.encrypt(aesGcmParams, passwordKey, input);\n\n        ensureNotCancelled(cancellationToken);\n\n        new Uint8Array(output).set(new Uint8Array(result), 12 + 16);\n\n        return output;\n    }\n\n    async decrypt(input: ArrayBuffer, password: ArrayBuffer, cancellationToken: CancellationToken): Promise<ArrayBuffer> {\n        const nonce: Uint8Array = new Uint8Array(input, 0, 12);\n        const passwordSalt: Uint8Array = new Uint8Array(input, 12, 16);\n        const payload: Uint8Array = new Uint8Array(input, 12 + 16);\n\n        const aesGcmParams: AesGcmParams = {\n            name: 'AES-GCM',\n            iv: nonce\n        };\n\n        const aesKeyAlgorithm: AesKeyAlgorithm = {\n            name: 'AES-GCM',\n            length: 512\n        };\n\n        const derivedKey: ArrayBuffer = await getDerivedBytes(password, passwordSalt, this.iterations, cancellationToken);\n\n        ensureNotCancelled(cancellationToken);\n\n        const passwordKey: CryptoKey = await window.crypto.subtle.importKey(\n            'raw',\n            derivedKey,\n            aesKeyAlgorithm,\n            false,\n            ['decrypt']\n        );\n\n        ensureNotCancelled(cancellationToken);\n\n        const result: ArrayBuffer = await window.crypto.subtle.decrypt(aesGcmParams, passwordKey, payload);\n\n        ensureNotCancelled(cancellationToken);\n\n        return result;\n    }\n}\n","import { PlainObject } from 'PlainObject';\nimport { CipherComponent, findLatestCipher } from '../components/cipherComponent';\n\nexport class CipherService {\n    private latestVersion: number;\n\n    public constructor(private readonly cipherComponent: CipherComponent) {\n        this.latestVersion = findLatestCipher().version\n    }\n\n    public isLatestVersion(version: number): boolean {\n        return version === this.getLatestVersion();\n    }\n\n    public getLatestVersion(): number {\n        return this.latestVersion;\n    }\n\n    public async activate(storageFullPath: string, cipherName: string, parameterKeys: PlainObject): Promise<boolean> {\n        if (await this.cipherComponent.setParameters(cipherName, parameterKeys, storageFullPath) === false) {\n            return false;\n        }\n\n        this.cipherComponent.getTabButton().click();\n\n        return true;\n    }\n}\n","import * as crypto from '../crypto';\nimport * as stringUtils from '../stringUtils';\nimport * as arrayUtils from '../arrayUtils';\n\nimport * as ui from '../ui';\nimport { getPrivatePart } from './privatePartComponent';\n\nimport { CipherV2 } from '../ciphers/v2';\nimport { CipherV3 } from '../ciphers/v3';\nimport { ITabInfo } from '../TabControl';\nimport { IComponent } from './IComponent';\n\nimport * as storageOutputComponent from './storageOutputComponent';\n\nimport * as serviceManager from '../services/serviceManger';\nimport { CipherService } from '../services/cipherService';\n\nimport { CancellationToken, ensureNotCancelled, rethrowCancelled } from '../asyncUtils';\nimport { PlainObject } from '../PlainObject';\n\nconst btnTabCiphers = ui.getElementById('btnTabCiphers') as HTMLButtonElement;\nconst divTabCiphers = ui.getElementById('divTabCiphers');\n\nexport const ciphers: crypto.ICipher[] = [\n    new CipherV2(),\n    new CipherV3(),\n];\n\nconst btnClearAllCipherInfo = ui.getElementById('btnClearAllCipherInfo') as HTMLButtonElement;\n\nconst txtCipherName = ui.getElementById('txtCipherName') as HTMLInputElement;\nconst txtCipherSource = ui.getElementById('txtCipherSource') as HTMLInputElement;\nconst txtCipherTarget = ui.getElementById('txtCipherTarget') as HTMLInputElement;\n\nconst cboCipherVersion = ui.getElementById('cboCipherVersion') as HTMLSelectElement;\nconst btnEncrypt = ui.getElementById('btnEncrypt') as HTMLButtonElement;\nconst btnDecrypt = ui.getElementById('btnDecrypt') as HTMLButtonElement;\n\nconst btnCopyCipherSource = ui.getElementById('btnCopyCipherSource') as HTMLButtonElement;\nconst btnClearCipherSource = ui.getElementById('btnClearCipherSource') as HTMLButtonElement;\nconst btnCopyCipherTarget = ui.getElementById('btnCopyCipherTarget') as HTMLButtonElement;\nconst btnClearCipherTarget = ui.getElementById('btnClearCipherTarget') as HTMLButtonElement;\n\nlet cipherTargetLastChange: string | undefined;\n\nexport function findCipherByVersion(version: number): crypto.ICipher | null {\n    for (const cipher of ciphers) {\n        if (cipher.version === version) {\n            return cipher;\n        }\n    }\n\n    return null;\n}\n\nexport function findLatestCipher(): crypto.ICipher {\n    if (ciphers.length === 0) {\n        throw new Error('No ciphers registered.');\n    }\n\n    let bestCipher: crypto.ICipher = ciphers[0];\n\n    for (const cipher of ciphers) {\n        if (cipher.version > bestCipher.version) {\n            bestCipher = cipher;\n        }\n    }\n\n    return bestCipher;\n}\n\nfunction findCipherDropdownIndexByVersion(version: number): number {\n    for (let i = 0; i < ciphers.length; i++) {\n        if (ciphers[i].version === version) {\n            return i;\n        }\n    }\n\n    return -1;\n}\n\nfunction clearSourceVisualCue(): void {\n    txtCipherSource.style.removeProperty('background-color');\n}\n\nfunction clearTargetVisualCue(): void {\n    txtCipherTarget.style.removeProperty('background-color');\n}\n\nfunction setSourceVisualCueError() {\n    txtCipherSource.style.setProperty('background-color', ui.ERROR_COLOR);\n}\n\nfunction setTargetVisualCueError() {\n    txtCipherTarget.style.setProperty('background-color', ui.ERROR_COLOR);\n}\n\nfunction clearAllVisualCues(): void {\n    clearSourceVisualCue();\n    clearTargetVisualCue();\n}\n\nfunction clearCipherTargetLastUpdate(): void {\n    cipherTargetLastChange = undefined;\n}\n\nfunction updateCipherTargetLastUpdate(): void {\n    cipherTargetLastChange = new Date().toISOString();\n}\n\nfunction setCipherTargetValue(value: string, isEncrypt: boolean): void {\n    const needDateTimeUpdate = value.length > 0 && txtCipherTarget.value !== value;\n\n    txtCipherTarget.value = value;\n\n    if (needDateTimeUpdate && isEncrypt) {\n        updateCipherTargetLastUpdate();\n    } else {\n        clearCipherTargetLastUpdate();\n    }\n\n    onCipherTargetChanged();\n}\n\nfunction onCipherTargetChanged(): void {\n    updateCipherParameters();\n}\n\nfunction updateCipherParameters(): void {\n    if (txtCipherTarget.value === '' || txtCipherName.value === '') {\n        storageOutputComponent.clearOutputs();\n        return;\n    }\n\n    const cipherParameters = {\n        datetime: cipherTargetLastChange,\n        version: ciphers[cboCipherVersion.selectedIndex].version,\n        value: txtCipherTarget.value\n    }\n\n    const path = `ciphers/${txtCipherName.value}`;\n\n    storageOutputComponent.setParameters(cipherParameters, path);\n}\n\nexport async function encryptString(value: string, cancellationToken: CancellationToken): Promise<string | null> {\n    const privatePart: string = getPrivatePart();\n\n    if (privatePart.length === 0) {\n        console.warn('Private part is empty');\n        return null;\n    }\n\n    const input: ArrayBuffer = stringUtils.stringToArray(value);\n    const password: ArrayBuffer = stringUtils.stringToArray(privatePart);\n\n    const encrypted: ArrayBuffer = await findLatestCipher().encrypt(input, password, cancellationToken);\n\n    ensureNotCancelled(cancellationToken);\n\n    return arrayUtils.toCustomBase(encrypted, crypto.BASE62_ALPHABET);\n}\n\nexport async function decryptStringWithCipher(value: string, cipher: crypto.ICipher, cancellationToken: CancellationToken): Promise<string | null> {\n    const privatePart: string = getPrivatePart();\n\n    if (privatePart.length === 0) {\n        console.warn('Private part is empty');\n        return null;\n    }\n\n    try {\n        const input: ArrayBuffer = arrayUtils.fromCustomBase(value, crypto.BASE62_ALPHABET);\n        const password: ArrayBuffer = stringUtils.stringToArray(privatePart);\n\n        const decrypted: ArrayBuffer = await cipher.decrypt(input, password, cancellationToken);\n\n        ensureNotCancelled(cancellationToken);\n\n        return arrayUtils.arrayToString(decrypted);\n    } catch (error) {\n        const typedError = error as Error;\n\n        rethrowCancelled(typedError);\n\n        console.warn(`Failed to decrypt${typedError.message ? `, error: ${typedError.message}` : ', no error message'}`);\n        return null;\n    }\n}\n\nexport async function decryptStringWithVersion(value: string, version: number, cancellationToken: CancellationToken): Promise<string | null> {\n    const cipher = findCipherByVersion(version);\n\n    if (cipher === null) {\n        throw new Error(`Failed to find cip[her for version ${version}.`);\n    }\n\n    return decryptStringWithCipher(value, cipher, cancellationToken);\n}\n\nasync function onEncryptButtonClick(): Promise<boolean> {\n    txtCipherSource.focus();\n    setCipherTargetValue('', true);\n    clearAllVisualCues();\n\n    if (txtCipherSource.value.length === 0) {\n        setSourceVisualCueError();\n        return false;\n    }\n\n    const encryptedString: string | null = await encryptString(txtCipherSource.value, CancellationToken.none);\n\n    if (encryptedString === null) {\n        return false;\n    }\n\n    setCipherTargetValue(encryptedString, true);\n    updateCipherParameters();\n\n    return true;\n}\n\nasync function onDecryptButtonClick(): Promise<boolean> {\n    txtCipherSource.focus();\n    setCipherTargetValue('', false);\n    clearAllVisualCues();\n\n    if (txtCipherSource.value.length === 0) {\n        setSourceVisualCueError();\n        return false;\n    }\n\n    const decryptedString: string | null = await decryptStringWithCipher(\n        txtCipherSource.value,\n        ciphers[cboCipherVersion.selectedIndex],\n        CancellationToken.none\n    );\n\n    if (decryptedString === null) {\n        setTargetVisualCueError();\n        return false;\n    }\n\n    setCipherTargetValue(decryptedString, false);\n\n    return true;\n}\n\nfunction setupCipherVersionsDropdown() {\n    for (const cipher of ciphers) {\n        const option = document.createElement('option');\n        option.text = `v${cipher.version}`;\n        cboCipherVersion.appendChild(option);\n    }\n\n    cboCipherVersion.selectedIndex = cboCipherVersion.options.length - 1;\n}\n\nexport class CipherComponent implements IComponent, ITabInfo {\n    public readonly name: string = 'Cipher';\n\n    public getTabButton(): HTMLButtonElement {\n        return btnTabCiphers;\n    }\n\n    public getTabContent(): HTMLElement {\n        return divTabCiphers;\n    }\n\n    public onTabSelected(): void {\n        storageOutputComponent.show();\n        updateCipherParameters();\n        txtCipherName.focus();\n    }\n\n    private static fullPathToStoragePath(fullPath: string, cipherName: string): string | null {\n        const prefix = '<root>/';\n        const suffix = `/ciphers/${cipherName}`;\n\n        if (fullPath.startsWith(prefix) === false) {\n            return null;\n        }\n\n        if (fullPath.endsWith(suffix) === false) {\n            return null;\n        }\n\n        return fullPath.substring(prefix.length, fullPath.length - suffix.length);\n    }\n\n    public async setParameters(cipherName: string, parameterKeys: PlainObject, storageFullPath: string): Promise<boolean> {\n        txtCipherName.value = '';\n        txtCipherSource.value = '';\n        txtCipherTarget.value = '';\n        cboCipherVersion.selectedIndex = cboCipherVersion.options.length - 1;\n        storageOutputComponent.setPathUI('');\n        storageOutputComponent.setCustomKeysUI('');\n\n        const decrypted: string | null = await decryptStringWithVersion(\n            parameterKeys.value,\n            parameterKeys.version,\n            CancellationToken.none\n        );\n\n        if (decrypted === null) {\n            alert(`Failed to decrypt cipher '${cipherName}'.`);\n            return false;\n        }\n\n        const storagePath: string | null = CipherComponent.fullPathToStoragePath(storageFullPath, cipherName);\n\n        if (storagePath === null) {\n            console.error(`Failed to retrieve storage path from full path '${storageFullPath}'.`);\n            alert('Failed to retrieve storage path from full path.');\n            return false;\n        }\n\n        if (parameterKeys.customKeys) {\n            storageOutputComponent.setCustomKeysUI(JSON.stringify(parameterKeys.customKeys, null, 4));\n        }\n\n        delete parameterKeys.customKeys;\n\n        txtCipherName.value = cipherName;\n        txtCipherSource.value = decrypted;\n        cboCipherVersion.selectedIndex = findCipherDropdownIndexByVersion(parameterKeys.version);\n\n        storageOutputComponent.setPathUI(storagePath);\n        storageOutputComponent.setParameters(parameterKeys, `ciphers/${cipherName}`);\n\n        return true;\n    }\n\n    public getVaultHint(): string {\n        return `${this.name.toLowerCase()} '${txtCipherName.value}'`;\n    }\n\n    public init(): void {\n        const errorLogsService = serviceManager.getService('errorLogs');\n        const logFunc = errorLogsService.createLogErrorMessageFunction();\n\n        ui.setupCopyButton(txtCipherSource, btnCopyCipherSource, logFunc);\n        ui.setupCopyButton(txtCipherTarget, btnCopyCipherTarget, logFunc);\n\n        ui.setupFeedbackButton(btnEncrypt, onEncryptButtonClick, logFunc);\n        ui.setupFeedbackButton(btnDecrypt, onDecryptButtonClick, logFunc);\n\n        txtCipherName.addEventListener('input', () => {\n            updateCipherParameters();\n        });\n\n        txtCipherSource.addEventListener('input', () => {\n            if (txtCipherSource.value.length > 0) {\n                clearSourceVisualCue();\n            }\n        });\n\n        cboCipherVersion.addEventListener('input', () => {\n            updateCipherParameters();\n        });\n\n        btnClearAllCipherInfo.addEventListener('click', () => {\n            txtCipherName.value = '';\n            txtCipherSource.value = '';\n            txtCipherTarget.value = '';\n            cboCipherVersion.selectedIndex = cboCipherVersion.options.length - 1;\n            storageOutputComponent.clearMatchingPath();\n            clearCipherTargetLastUpdate();\n            clearAllVisualCues();\n\n            storageOutputComponent.clearUI();\n        });\n\n        btnClearCipherSource.addEventListener('click', () => {\n            ui.clearText(txtCipherSource, true);\n        });\n\n        btnClearCipherTarget.addEventListener('click', () => {\n            setCipherTargetValue('', false);\n        });\n\n        setupCipherVersionsDropdown();\n\n        serviceManager.registerService('cipher', new CipherService(this));\n    }\n}\n","import * as cipherComponent from '../components/cipherComponent';\nimport { CancellationToken } from '../asyncUtils';\n\nexport interface IAsyncStorage {\n    readonly length: number;\n    clear(): void;\n    getItem(key: string): Promise<string | null>;\n    key(index: number): string | null;\n    removeItem(key: string): void;\n    setItem(key: string, value: string): Promise<void>;\n}\n\nexport class SecureLocalStorage implements IAsyncStorage {\n    get length(): number {\n        return window.localStorage.length;\n    }\n\n    clear(): void {\n        window.localStorage.clear();\n    }\n\n    key(index: number): string | null {\n        return window.localStorage.key(index);\n    }\n\n    removeItem(key: string): void {\n        window.localStorage.removeItem(key);\n    }\n\n    async getItem(key: string): Promise<string | null> {\n        const encryptedItem: string | null = window.localStorage.getItem(key);\n\n        if (encryptedItem === null) {\n            return null;\n        }\n\n        const sortedCiphers = cipherComponent.ciphers.map(x => x).sort((a, b) => b.version - a.version);\n\n        for (const cipher of sortedCiphers) {\n            const result: string | null = await cipherComponent.decryptStringWithCipher(encryptedItem, cipher, CancellationToken.none);\n            if (result !== null) {\n                return result;\n            }\n        }\n\n        return null;\n    }\n\n    async setItem(key: string, value: string): Promise<void> {\n        const encrypted: string | null = await cipherComponent.encryptString(value, CancellationToken.none);\n\n        if (encrypted === null) {\n            console.error('Failed to encrypt value. (nothing stored)');\n            return;\n        }\n\n        window.localStorage.setItem(key, encrypted);\n    }\n}\n","import * as ui from '../ui';\nimport * as stringUtils from '../stringUtils';\nimport { PlainObject, objectDeepSort } from '../PlainObject';\nimport { IComponent } from './IComponent';\nimport { rootComponent, RootComponent } from './rootComponent';\nimport * as serviceManager from '../services/serviceManger';\nimport { VaultService } from '../services/vaultService';\n\nimport { IVaultStorage } from '../storages/IVaultStorage';\nimport { GitHubPersonalAccessTokenVaultStorage } from '../storages/GitHubVaultStorage';\nimport { SecureLocalStorage } from '../storages/SecureLocalStorage';\n\nconst divStorageOutput: HTMLElement = ui.getElementById('divStorageOutput');\n\nconst txtPath: HTMLInputElement = ui.getElementById('txtPath') as HTMLInputElement;\nconst lblMatchingPath: HTMLElement = ui.getElementById('lblMatchingPath');\n\nconst txtParameters: HTMLInputElement = ui.getElementById('txtParameters') as HTMLInputElement;\nconst btnPushToVault: HTMLButtonElement = ui.getElementById('btnPushToVault') as HTMLButtonElement;\nconst txtCustomKeys: HTMLInputElement = ui.getElementById('txtCustomKeys') as HTMLInputElement;\n\nlet vaultStorage: IVaultStorage = new GitHubPersonalAccessTokenVaultStorage(new SecureLocalStorage());\n\ntype IChainInfo = {\n    head: PlainObject,\n    tailParent: PlainObject,\n    tail: PlainObject\n};\n\n// Transforms a path like \"a/b/c/d\" into a hierarchy of objects like { \"a\": { \"b\": { \"c\": { \"d\": {} } } } }\n// From the result object, head is the root object that contains \"a\", tail is the value of \"d\", and tailParent is the value of \"c\"\nfunction pathToObjectChain(path: string, chainInfo: IChainInfo | undefined = undefined): IChainInfo {\n    const separatorIndex: number = path.indexOf('/');\n\n    const tail: PlainObject = {};\n\n    const firstPath: string = separatorIndex >= 0 ? path.substring(0, separatorIndex) : path;\n    const remainingPath: string | undefined = separatorIndex >= 0 ? path.substring(separatorIndex + 1) : undefined;\n\n    if (chainInfo === undefined) {\n        const node: PlainObject = {};\n        node[firstPath] = tail;\n        chainInfo = {\n            head: node,\n            tailParent: node,\n            tail\n        };\n    } else {\n        chainInfo.tail[firstPath] = tail;\n        chainInfo.tailParent = chainInfo.tail;\n        chainInfo.tail = tail;\n    }\n\n    if (remainingPath) {\n        return pathToObjectChain(remainingPath, chainInfo);\n    }\n\n    return chainInfo;\n}\n\nfunction createMatchingPath(path: string, depth: number): string {\n    let position = 0;\n\n    for (let i = 0; i < depth; i += 1) {\n        position = path.indexOf('/', position);\n        if (position < 0) {\n            position = path.length + 1;\n            break;\n        }\n        position += 1;\n    }\n\n    return path.substring(0, position - 1);\n}\n\nfunction updateMatchingPath(): void {\n    const vaultService: VaultService = serviceManager.getService('vault');\n\n    const depth = vaultService.computeUserPathMatchDepth(txtPath.value);\n\n    if (depth > 0) {\n        const matchingPath = createMatchingPath(txtPath.value, depth);\n        lblMatchingPath.innerText = matchingPath;\n    } else {\n        lblMatchingPath.innerText = '';\n    }\n}\n\nfunction onPathTextInput() {\n    updateMatchingPath();\n    update();\n}\n\nfunction onCustomKeysTextInput(): void {\n    update();\n}\n\nfunction updateCustomKeysDisplay(isValid: boolean): void {\n    if (isValid) {\n        txtCustomKeys.style.removeProperty('background');\n        return;\n    }\n\n    txtCustomKeys.style.setProperty('background', ui.ERROR_COLOR);\n}\n\nfunction parseCustomKeys(): PlainObject | null {\n    if (txtCustomKeys.value === '') {\n        return null;\n    }\n\n    try {\n        const obj: any = JSON.parse(txtCustomKeys.value);\n        if (obj === null || obj.constructor.name !== 'Object') {\n            return null;\n        }\n        return obj as PlainObject;\n    } catch {\n        return null;\n    }\n}\n\nfunction update(): void {\n    if (_parameterKeys === undefined || _parameterPath === undefined) {\n        return;\n    }\n\n    const chainInfo: IChainInfo = pathToObjectChain(`${txtPath.value}/${_parameterPath}`);\n    const leaf: PlainObject = chainInfo.tail;\n\n    for (const [key, value] of Object.entries(_parameterKeys)) {\n        leaf[key] = value;\n    }\n\n    const customKeys: PlainObject | null = parseCustomKeys();\n\n    updateCustomKeysDisplay(txtCustomKeys.value === '' || customKeys !== null);\n\n    if (customKeys !== null) {\n        leaf.customKeys = customKeys;\n    }\n\n    if (Object.keys(leaf).length === 0) {\n        // Remove the leaf object.\n        chainInfo.tailParent[Object.keys(chainInfo.tailParent)[0]] = null;\n    }\n\n    txtParameters.value = JSON.stringify(objectDeepSort(chainInfo.head), undefined, 4);\n}\n\nfunction deepMerge(source: PlainObject, target: PlainObject): void {\n    for (const sourceKey of Object.keys(source)) {\n        const targetValue: any = target[sourceKey];\n        const sourceValue: any = source[sourceKey];\n\n        if (targetValue === undefined ||\n            targetValue === null ||\n            targetValue.constructor.name !== 'Object' ||\n            sourceValue.constructor.name !== 'Object') {\n            target[sourceKey] = sourceValue;\n            continue;\n        }\n\n        deepMerge(sourceValue, targetValue);\n    }\n}\n\nfunction generateUpdateMessage() {\n    const activeComponent: IComponent | null = (rootComponent as RootComponent).getActiveComponent();\n\n    if (activeComponent === null) {\n        throw new Error('Could not determine active component.');\n    }\n\n    let hint: string = activeComponent.getVaultHint();\n\n    const matchingPath: string = lblMatchingPath.innerText;\n    const fullPath: string = txtPath.value;\n\n    if (!matchingPath) {\n        return `Added ${hint} for '${fullPath}'`;\n    }\n\n    if (matchingPath === fullPath) {\n        return `Updated ${hint} for '${fullPath}'`;\n    }\n\n    const remainingPath: string = stringUtils.trim(fullPath.substring(matchingPath.length), '/');\n\n    return `Updated ${hint} for '${matchingPath}' adding '${remainingPath}'`;\n}\n\nasync function pushToVault(): Promise<boolean> {\n    const vaultContentData: string | null = await vaultStorage.getVaultContent();\n\n    if (vaultContentData === null) {\n        return false;\n    }\n\n    const newData = JSON.parse(txtParameters.value);\n    let vaultContent = JSON.parse(vaultContentData);\n\n    // Keep deepMerge despite now all properties are explicitly defined, because of\n    // the datetime property that really need to be overwritten only if it exists.\n    deepMerge(newData, vaultContent);\n\n    const message: string = generateUpdateMessage();\n\n    const newVaultContentData: string = JSON.stringify(objectDeepSort(vaultContent), undefined, 4) + '\\n';\n\n    await vaultStorage.setVaultContent(newVaultContentData, `[ItchyPassword] ${message}`);\n\n    return true;\n}\n\nexport function clearOutputs(): void {\n    _parameterKeys = undefined;\n    _parameterPath = undefined;\n    ui.clearText(txtParameters);\n}\n\nlet _parameterKeys: PlainObject | undefined;\nlet _parameterPath: string | undefined;\n\nexport function setParameters(parameterKeys: PlainObject, parameterPath: string) {\n    _parameterKeys = parameterKeys;\n    _parameterPath = parameterPath;\n    update();\n}\n\nexport function setPathUI(path: string) {\n    txtPath.value = path;\n    onPathTextInput();\n}\n\nexport function setCustomKeysUI(customKeys: string) {\n    txtCustomKeys.value = customKeys;\n}\n\nexport function show(): void {\n    divStorageOutput.style.setProperty('display', 'initial');\n}\n\nexport function hide(): void {\n    divStorageOutput.style.setProperty('display', 'none');\n}\n\nexport function clearUI(): void {\n    txtPath.value = '';\n    txtParameters.value = '';\n    txtCustomKeys.value = '';\n    _parameterKeys = undefined;\n    _parameterPath = undefined;\n    updateCustomKeysDisplay(true);\n}\n\nexport function clearMatchingPath(): void {\n    lblMatchingPath.innerText = '';\n}\n\nexport class StorageOutputComponent implements IComponent {\n    public readonly name: string = 'StorageOutput';\n\n    public getVaultHint(): string {\n        throw new Error('Not supported.');\n    }\n\n    public init(): void {\n        const errorLogsService = serviceManager.getService('errorLogs');\n        const logFunc = errorLogsService.createLogErrorMessageFunction();\n\n        txtCustomKeys.addEventListener('input', onCustomKeysTextInput);\n        ui.setupFeedbackButton(btnPushToVault, pushToVault, logFunc);\n        txtPath.addEventListener('input', onPathTextInput);\n    }\n}\n","import { CancellationToken } from '../asyncUtils';\nimport * as stringUtils from '../stringUtils';\nimport * as ui from '../ui';\nimport * as passwordComponent from '../components/passwordComponent';\nimport * as serviceManager from './serviceManger';\n\nexport class PasswordService {\n    isLatestVersion(version: number): boolean {\n        return version === this.getLatestVersion();\n    }\n\n    getLatestVersion(): number {\n        return passwordComponent.CURRENT_PASSWORD_GENERATOR_VERSION;\n    }\n\n    async generateAndCopyPasswordToClipboard(publicPart: string, alphabet?: string, length?: number, version?: number): Promise<boolean> {\n        alphabet = alphabet !== undefined ? alphabet : passwordComponent.DEFAULT_ALPHABET;\n        length = length !== undefined ? length : passwordComponent.DEFAULT_LENGTH;\n        version = version !== undefined ? version : passwordComponent.CURRENT_PASSWORD_GENERATOR_VERSION;\n\n        const keyString: string | null = await passwordComponent.generatePasswordString(publicPart, alphabet, version, CancellationToken.none);\n\n        if (keyString === null) {\n            return false;\n        }\n\n        const password = stringUtils.truncate(keyString, Math.max(4, length));\n\n        const errorLogsService = serviceManager.getService('errorLogs');\n        const logFunc = errorLogsService.createLogErrorMessageFunction();\n\n        return await ui.writeToClipboard(password, logFunc);\n    }\n}\n","import * as ui from '../ui';\nimport * as privatePartComponent from './privatePartComponent';\n\nimport * as crypto from '../crypto';\nimport * as stringUtils from '../stringUtils';\nimport * as arrayUtils from '../arrayUtils';\n\nimport { PlainObject } from '../PlainObject';\nimport { PasswordGeneratorV1 } from '../passwordGenerators/v1';\nimport { PasswordGeneratorV2 } from '../passwordGenerators/v2';\nimport { ITabInfo } from '../TabControl';\nimport { IComponent } from './IComponent';\n\nimport * as storageOutputComponent from './storageOutputComponent';\n\nimport { CancellationToken, TaskRunner } from '../asyncUtils';\n\nimport * as serviceManager from '../services/serviceManger';\nimport { PasswordService } from '../services/passwordService';\n\nconst btnTabPasswords = ui.getElementById('btnTabPasswords') as HTMLButtonElement;\nconst divTabPasswords = ui.getElementById('divTabPasswords');\n\nconst passwordGenerators: crypto.IPasswordGenerator[] = [\n    new PasswordGeneratorV1('Password'),\n    new PasswordGeneratorV2('Password'),\n];\n\nexport const CURRENT_PASSWORD_GENERATOR_VERSION = 2;\n\nconst btnClearAllPasswordInfo = ui.getElementById('btnClearAllPasswordInfo') as HTMLButtonElement;\n\nconst txtPublicPart = ui.getElementById('txtPublicPart') as HTMLInputElement;\nconst spnPublicPartSize = ui.getElementById('spnPublicPartSize');\nconst btnGeneratePublicPart = ui.getElementById('btnGeneratePublicPart') as HTMLButtonElement;\nconst btnClearPublicPart = ui.getElementById('btnClearPublicPart') as HTMLButtonElement;\nconst btnCopyPublicPart = ui.getElementById('btnCopyPublicPart') as HTMLButtonElement;\nconst btnShowHidePasswordOptionalFeatures = ui.getElementById('btnShowHidePasswordOptionalFeatures') as HTMLButtonElement;\n\nconst lblAlphabetLength = ui.getElementById('lblAlphabetLength');\nconst numOutputSizeRange = ui.getElementById('numOutputSizeRange') as HTMLInputElement;\nconst numOutputSizeNum = ui.getElementById('numOutputSizeNum') as HTMLInputElement;\n\nconst lblAlphabet = ui.getElementById('lblAlphabet');\nconst txtAlphabet = ui.getElementById('txtAlphabet') as HTMLInputElement;\nconst spnAlphabetSize = ui.getElementById('spnAlphabetSize');\nconst divPasswordAlphabetActions = ui.getElementById('divPasswordAlphabetActions');\nconst btnResetAlphabet = ui.getElementById('btnResetAlphabet') as HTMLButtonElement;\n\nconst lblPasswordVersion = ui.getElementById('lblPasswordVersion');\nconst cboPasswordVersion = ui.getElementById('cboPasswordVersion') as HTMLSelectElement;\n\nconst txtResultPassword = ui.getElementById('txtResultPassword') as HTMLInputElement;\nconst spnResultPasswordLength = ui.getElementById('spnResultPasswordLength');\nconst btnViewResultPassword = ui.getElementById('btnViewResultPassword') as HTMLButtonElement;\nconst btnCopyResultPassword = ui.getElementById('btnCopyResultPassword') as HTMLButtonElement;\nconst lblGeneratingPassword = ui.getElementById('lblGeneratingPassword');\n\nexport const DEFAULT_LENGTH: number = 64;\nexport const DEFAULT_ALPHABET: string = '!\"#$%&\\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[]^_`abcdefghijklmnopqrstuvwxyz{|}~';\n\nlet passwordPublicPartLastChange: string | undefined;\nlet copyPasswordFunction: () => void;\n\nfunction findPasswordGeneratorByVersion(version: number): crypto.IPasswordGenerator {\n    for (const passwordGenerator of passwordGenerators) {\n        if (passwordGenerator?.version === version) {\n            return passwordGenerator;\n        }\n    }\n\n    throw new Error(`Failed to find password generator version ${version}`);\n}\n\nfunction findPasswordGeneratorFromUserInterface(): crypto.IPasswordGenerator {\n    const passwordGenerator = passwordGenerators[cboPasswordVersion.selectedIndex];\n\n    if (!passwordGenerator) {\n        throw new Error(`Failed to find password generator version from index ${cboPasswordVersion.selectedIndex}`);\n    }\n\n    return passwordGenerator;\n}\n\nfunction onClearPublicPartButtonClick(): boolean {\n    if (txtPublicPart.value.length > 0) {\n        if (prompt('Are you sure you want to clear the public part ?\\nType \\'y\\' to accept', '') !== 'y') {\n            return false;\n        }\n    }\n\n    ui.clearText(txtPublicPart, true);\n\n    updatePublicPartSize();\n\n    updatePasswordPublicPartLastUpdate();\n    updatePasswordGenerationParameters();\n\n    return true;\n}\n\nfunction onGeneratePublicPartButtonClick(): boolean {\n    if (txtPublicPart.value.length > 0) {\n        if (prompt('Are you sure you want to generate a new public part ?\\nType \\'y\\' to accept', '') !== 'y') {\n            return false;\n        }\n    }\n\n    const randomString: string = crypto.generateRandomString();\n    txtPublicPart.value = randomString;\n    updatePublicPartSize();\n\n    updatePasswordPublicPartLastUpdate();\n\n    run();\n\n    return true;\n}\n\nfunction updatePasswordPublicPartLastUpdate(): void {\n    if (txtPublicPart.value.length > 0) {\n        passwordPublicPartLastChange = new Date().toISOString();\n    } else {\n        passwordPublicPartLastChange = undefined;\n    }\n}\n\nfunction updateResultPasswordLength(): void {\n    spnResultPasswordLength.innerHTML = txtResultPassword.value.length.toString();\n}\n\nfunction isAlphabetValid(alphabet: string): boolean {\n    const sortedAlphabet: string[] = alphabet.split('');\n    sortedAlphabet.sort();\n\n    for (let i: number = 1; i < sortedAlphabet.length; i += 1) {\n        if (sortedAlphabet[i - 1] === sortedAlphabet[i]) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nfunction updatePasswordGenerationParameters(): void {\n    if (canRun() === false) {\n        clearOutputs();\n        return;\n    }\n\n    const passwordGenerator = passwordGenerators[cboPasswordVersion.selectedIndex];\n\n    if (!passwordGenerator) {\n        throw new Error('Invalid selected password generator version.');\n    }\n\n    const passwordParamters: PlainObject = {\n        public: txtPublicPart.value,\n        datetime: passwordPublicPartLastChange,\n        version: passwordGenerator.version,\n        length: txtResultPassword.value.length,\n        alphabet: txtAlphabet.value\n    };\n\n    storageOutputComponent.setParameters(passwordParamters, 'password');\n}\n\nfunction updateOutputSizeRangeToNum(): void {\n    numOutputSizeNum.value = numOutputSizeRange.value;\n}\n\nfunction updateOutputSizeNumToRange(): boolean {\n    const min: number = parseInt(numOutputSizeRange.min, 10);\n    const val: number = parseInt(numOutputSizeNum.value, 10);\n    const max: number = parseInt(numOutputSizeRange.max, 10);\n\n    if (isNaN(val) === false) {\n        numOutputSizeRange.value = Math.max(min, Math.min(val, max)).toString();\n        return true;\n    }\n\n    return false;\n}\n\nasync function onOutputSizeRangeInput(): Promise<void> {\n    updateOutputSizeRangeToNum();\n    await run();\n}\n\nasync function onOutputSizeNumInput(): Promise<void> {\n    if (updateOutputSizeNumToRange()) {\n        updateOutputSizeRangeToNum();\n    }\n    await run();\n}\n\nfunction updatePublicPartSize(): void {\n    spnPublicPartSize.innerHTML = txtPublicPart.value.length.toString();\n}\n\nfunction updateAlphabetSize(): void {\n    spnAlphabetSize.innerHTML = txtAlphabet.value.length.toString();\n}\n\nfunction updateAlphabetValidityDisplay(isAlphabetValid: boolean): void {\n    if (isAlphabetValid) {\n        txtAlphabet.style.removeProperty('background');\n    } else {\n        txtAlphabet.style.setProperty('background', ui.ERROR_COLOR);\n    }\n}\n\nasync function onAlphabetTextInput(): Promise<void> {\n    const isAlphabetValidResult: boolean = isAlphabetValid(txtAlphabet.value);\n\n    updateAlphabetValidityDisplay(isAlphabetValidResult);\n\n    if (isAlphabetValidResult === false) {\n        return;\n    }\n\n    updateAlphabetSize();\n    await run();\n}\n\nasync function onResetAlphabetButtonClick(): Promise<boolean> {\n    if (resetAlphabet() === false) {\n        return false;\n    }\n\n    await run();\n\n    return true;\n}\n\nasync function onPasswordVersionChanged(): Promise<void> {\n    const passwordGenerator = passwordGenerators[cboPasswordVersion.selectedIndex];\n\n    if (!passwordGenerator) {\n        return;\n    }\n\n    await run();\n}\n\nfunction clearOutputs(): void {\n    ui.clearText(txtResultPassword);\n    storageOutputComponent.clearOutputs();\n    updateResultPasswordLength();\n}\n\nfunction canRun(publicPart?: string): boolean {\n    const alphabet: string = txtAlphabet.value;\n\n    if (isAlphabetValid(alphabet) === false) {\n        return false;\n    }\n\n    publicPart = publicPart || txtPublicPart.value;\n\n    if (privatePartComponent.getPrivatePart().length <= 0 || publicPart.length < 8 || alphabet.length < 2) {\n        return false;\n    }\n\n    return true;\n}\n\nexport async function generatePasswordString(publicPart: string, alphabet: string, version: number, cancellationToken: CancellationToken): Promise<string | null> {\n    if (canRun(publicPart) === false) {\n        return null;\n    }\n\n    const passwordGenerator = findPasswordGeneratorByVersion(version);\n\n    const privatePartString: string = privatePartComponent.getPrivatePart();\n    const privatePrivateBytes: ArrayBuffer = stringUtils.stringToArray(privatePartString);\n    const publicPartBytes: ArrayBuffer = stringUtils.stringToArray(publicPart);\n    const keyBytes: ArrayBuffer = await passwordGenerator.generatePassword(privatePrivateBytes, publicPartBytes, cancellationToken);\n\n    return arrayUtils.toCustomBaseOneWay(keyBytes, alphabet);\n}\n\nconst passwordTaskRunner: TaskRunner<void> = new TaskRunner<void>();\n\nexport async function run(): Promise<void> {\n    if (canRun() === false) {\n        clearOutputs();\n        return;\n    }\n\n    ui.showHide(lblGeneratingPassword, true);\n\n    try {\n        await passwordTaskRunner.cancelAndExecute(runCore);\n    } finally {\n        ui.showHide(lblGeneratingPassword, false);\n    }\n}\n\nasync function runCore(cancellationToken: CancellationToken): Promise<void> {\n    const passwordGenerator = findPasswordGeneratorFromUserInterface();\n\n    const keyString: string | null = await generatePasswordString(txtPublicPart.value, txtAlphabet.value, passwordGenerator.version, cancellationToken);\n    if (keyString === null) {\n        return;\n    }\n\n    txtResultPassword.value = stringUtils.truncate(keyString, Math.max(4, parseInt(numOutputSizeRange.value, 10)));\n\n    updateResultPasswordLength();\n    updatePasswordGenerationParameters();\n\n    copyPasswordFunction();\n}\n\nfunction resetAlphabet(): boolean {\n    txtAlphabet.value = DEFAULT_ALPHABET;\n    updateAlphabetSize();\n\n    const isAlphabetValidResult: boolean = isAlphabetValid(txtAlphabet.value);\n\n    updateAlphabetValidityDisplay(isAlphabetValidResult);\n\n    return isAlphabetValidResult;\n}\n\nasync function onPublicPartTextInput(): Promise<void> {\n    updatePublicPartSize();\n    updatePasswordPublicPartLastUpdate();\n    await run();\n}\n\nfunction setupPasswordGeneratorsDropdown(): void {\n    for (const passwordGenerator of passwordGenerators) {\n        const option = document.createElement('option');\n\n        option.text = `v${passwordGenerator.version}`;\n\n        cboPasswordVersion.appendChild(option);\n    }\n\n    cboPasswordVersion.selectedIndex = cboPasswordVersion.options.length - 1;\n}\n\nexport class PasswordComponent implements IComponent, ITabInfo {\n    public readonly name: string = 'Password';\n\n    public getTabButton(): HTMLButtonElement {\n        return btnTabPasswords;\n    }\n\n    public getTabContent(): HTMLElement {\n        return divTabPasswords;\n    }\n\n    public onTabSelected(): void {\n        storageOutputComponent.show();\n        updatePasswordGenerationParameters();\n        txtPublicPart.focus();\n    }\n\n    public getVaultHint(): string {\n        return this.name.toLowerCase();\n    }\n\n    public init(): void {\n        const errorLogsService = serviceManager.getService('errorLogs');\n        const logFunc = errorLogsService.createLogErrorMessageFunction();\n\n        privatePartComponent.registerOnChanged(run);\n\n        // dafuq!?\n        numOutputSizeRange.max = DEFAULT_LENGTH.toString();\n        numOutputSizeRange.value = DEFAULT_LENGTH.toString();\n\n        ui.setupFeedbackButton(btnClearPublicPart, onClearPublicPartButtonClick, logFunc);\n        ui.setupFeedbackButton(btnGeneratePublicPart, onGeneratePublicPartButtonClick, logFunc);\n\n        ui.setupViewButton(txtResultPassword, btnViewResultPassword);\n\n        ui.setupCopyButton(txtPublicPart, btnCopyPublicPart, logFunc);\n        copyPasswordFunction = ui.setupCopyButton(txtResultPassword, btnCopyResultPassword, logFunc);\n\n        numOutputSizeRange.addEventListener('input', onOutputSizeRangeInput);\n        numOutputSizeNum.addEventListener('input', onOutputSizeNumInput);\n\n        txtAlphabet.addEventListener('input', onAlphabetTextInput);\n        ui.setupFeedbackButton(btnResetAlphabet, onResetAlphabetButtonClick, logFunc);\n\n        cboPasswordVersion.addEventListener('input', onPasswordVersionChanged);\n\n        txtPublicPart.addEventListener('input', onPublicPartTextInput);\n\n        ui.showHide(lblGeneratingPassword, false);\n\n        ui.setupShowHideButton(btnShowHidePasswordOptionalFeatures, false, [\n            lblAlphabet,\n            txtAlphabet,\n            spnAlphabetSize,\n            divPasswordAlphabetActions,\n            lblAlphabetLength,\n            numOutputSizeRange,\n            numOutputSizeNum,\n            lblPasswordVersion,\n            cboPasswordVersion,\n        ]);\n\n        updatePublicPartSize();\n        updateOutputSizeRangeToNum();\n        resetAlphabet();\n\n        setupPasswordGeneratorsDropdown();\n\n        btnClearAllPasswordInfo.addEventListener('click', () => {\n            if (onClearPublicPartButtonClick() === false) {\n                return;\n            }\n\n            txtResultPassword.value = '';\n            updateResultPasswordLength();\n            cboPasswordVersion.selectedIndex = cboPasswordVersion.options.length - 1;\n\n            storageOutputComponent.clearMatchingPath();\n            storageOutputComponent.clearUI();\n        });\n\n        serviceManager.registerService('password', new PasswordService());\n    }\n};\n","import { stringToArray } from '../stringUtils';\nimport { IPasswordGenerator, getDerivedBytes } from '../crypto';\nimport { CancellationToken, ensureNotCancelled } from '../asyncUtils';\n\nexport class PasswordGeneratorV1 implements IPasswordGenerator {\n    private hkdfPurpose: ArrayBuffer;\n    private _description: string;\n\n    public constructor(hkdfPurpose: string) {\n        this.hkdfPurpose = stringToArray(hkdfPurpose);\n        this._description = `HKDF(PBKDF2, HMAC512) [purpose: ${hkdfPurpose}]`;\n    }\n\n    public get version(): number {\n        return 1;\n    }\n\n    public get description(): string {\n        return this._description;\n    }\n\n    public async generatePassword(privatePart: ArrayBuffer, publicPart: ArrayBuffer, cancellationToken: CancellationToken): Promise<ArrayBuffer> {\n        const derivedKey: ArrayBuffer = await getDerivedBytes(privatePart, publicPart, 100000, cancellationToken);\n\n        ensureNotCancelled(cancellationToken);\n\n        const hmacParameters: HmacImportParams = {\n            name: 'HMAC',\n            hash: { name: 'SHA-512' }\n        };\n\n        const hkdfKey: CryptoKey = await window.crypto.subtle.importKey(\n            'raw',\n            derivedKey,\n            hmacParameters,\n            false,\n            ['sign']\n        );\n\n        ensureNotCancelled(cancellationToken);\n\n        const result: ArrayBuffer = await window.crypto.subtle.sign('HMAC', hkdfKey, this.hkdfPurpose);\n\n        ensureNotCancelled(cancellationToken);\n\n        return result;\n    }\n}\n","import { stringToArray } from '../stringUtils';\nimport { IPasswordGenerator, getDerivedBytes } from '../crypto';\nimport { CancellationToken, ensureNotCancelled } from '../asyncUtils';\n\nexport class PasswordGeneratorV2 implements IPasswordGenerator {\n    private hkdfPurpose: ArrayBuffer;\n    private _description: string;\n\n    public constructor(hkdfPurpose: string) {\n        this.hkdfPurpose = stringToArray(hkdfPurpose);\n        this._description = `HKDF(PBKDF2, HMAC512) [purpose: ${hkdfPurpose}]`;\n    }\n\n    public get version(): number {\n        return 2;\n    }\n\n    public get description(): string {\n        return this._description;\n    }\n\n    public async generatePassword(privatePart: ArrayBuffer, publicPart: ArrayBuffer, cancellationToken: CancellationToken): Promise<ArrayBuffer> {\n        const derivedKey: ArrayBuffer = await getDerivedBytes(privatePart, publicPart, 400_000, cancellationToken);\n\n        ensureNotCancelled(cancellationToken);\n\n        const hmacParameters: HmacImportParams = {\n            name: 'HMAC',\n            hash: { name: 'SHA-512' }\n        };\n\n        const hkdfKey: CryptoKey = await window.crypto.subtle.importKey(\n            'raw',\n            derivedKey,\n            hmacParameters,\n            false,\n            ['sign']\n        );\n\n        ensureNotCancelled(cancellationToken);\n\n        const result: ArrayBuffer = await window.crypto.subtle.sign('HMAC', hkdfKey, this.hkdfPurpose);\n\n        ensureNotCancelled(cancellationToken);\n\n        return result;\n    }\n}\n","import { ICipher } from '../crypto';\nimport * as stringUtils from '../stringUtils';\nimport * as arrayUtils from '../arrayUtils';\nimport { ITabInfo } from '../TabControl';\nimport * as ui from '../ui';\nimport { getPrivatePart } from './privatePartComponent';\nimport * as serviceManager from '../services/serviceManger';\n\nimport { CipherV2 } from '../ciphers/v2';\nimport { CipherV3 } from '../ciphers/v3';\nimport { IComponent } from './IComponent';\n\nimport * as storageOutputComponent from './storageOutputComponent';\n\nimport { CancellationToken } from '../asyncUtils';\n\nconst ciphers: ICipher[] = [\n    new CipherV2(),\n    new CipherV3(),\n];\n\nconst btnTabReEncrypt: HTMLButtonElement = ui.getElementById('btnTabReEncrypt') as HTMLButtonElement;\nconst divTabReEncrypt: HTMLElement = ui.getElementById('divTabReEncrypt');\n\nconst txtReEncryptSource: HTMLInputElement = ui.getElementById('txtReEncryptSource') as HTMLInputElement;\nconst txtReEncryptTarget: HTMLInputElement = ui.getElementById('txtReEncryptTarget') as HTMLInputElement;\n\nconst cboReEncryptFrom: HTMLSelectElement = ui.getElementById('cboReEncryptFrom') as HTMLSelectElement;\nconst cboReEncryptTo: HTMLSelectElement = ui.getElementById('cboReEncryptTo') as HTMLSelectElement;\nconst btnReEncrypt: HTMLButtonElement = ui.getElementById('btnReEncrypt') as HTMLButtonElement;\n\nconst btnClearReEncryptSource: HTMLButtonElement = ui.getElementById('btnClearReEncryptSource') as HTMLButtonElement;\nconst btnCopyReEncryptTarget: HTMLButtonElement = ui.getElementById('btnCopyReEncryptTarget') as HTMLButtonElement;\nconst btnClearReEncryptTarget: HTMLButtonElement = ui.getElementById('btnClearReEncryptTarget') as HTMLButtonElement;\n\nfunction fillCipherComboBox(cbo: HTMLSelectElement, initialValue: number): void {\n    let cipher: ICipher;\n\n    for (cipher of ciphers) {\n        const item: HTMLOptionElement = document.createElement('option');\n        item.value = cbo.childNodes.length.toString();\n        item.text = `${cipher.description} (v${cipher.version})`;\n        cbo.add(item);\n    }\n\n    cbo.value = initialValue.toString();\n}\n\nfunction clearSourceVisualCue(): void {\n    txtReEncryptSource.style.removeProperty('background-color');\n}\n\nfunction clearTargetVisualCue(): void {\n    txtReEncryptTarget.style.removeProperty('background-color');\n}\n\nfunction setSourceVisualCueError() {\n    txtReEncryptSource.style.setProperty('background-color', ui.ERROR_COLOR);\n}\n\nfunction setTargetVisualCueError() {\n    txtReEncryptTarget.style.setProperty('background-color', ui.ERROR_COLOR);\n}\n\nfunction clearAllVisualCues(): void {\n    clearSourceVisualCue();\n    clearTargetVisualCue();\n}\n\nasync function onReEncryptButtonClick(): Promise<boolean> {\n    ui.clearText(txtReEncryptTarget, true);\n    clearAllVisualCues();\n\n    if (txtReEncryptSource.value.length === 0) {\n        setSourceVisualCueError();\n        return false;\n    }\n\n    if (cboReEncryptFrom.value === cboReEncryptTo.value) {\n        setTargetVisualCueError();\n        return false;\n    }\n\n    const privatePart: string = getPrivatePart();\n    if (privatePart.length === 0) {\n        console.warn('Private part is empty');\n        return false;\n    }\n\n    const sourceCipherIndex = parseInt(cboReEncryptFrom.value, 10);\n    const targetCipherIndex = parseInt(cboReEncryptTo.value, 10);\n\n    const password: ArrayBuffer = stringUtils.stringToArray(privatePart);\n\n    const input: ArrayBuffer = stringUtils.fromBase16(txtReEncryptSource.value);\n    const decrypted: ArrayBuffer = await ciphers[sourceCipherIndex].decrypt(input, password, CancellationToken.none);\n    const reEncrypted: ArrayBuffer = await ciphers[targetCipherIndex].encrypt(decrypted, password, CancellationToken.none);\n\n    txtReEncryptTarget.value = arrayUtils.toBase16(reEncrypted);\n\n    return true;\n}\n\nexport class ReEncryptComponent implements IComponent, ITabInfo {\n    public readonly name: string = 'ReEncrypt';\n\n    public getTabButton(): HTMLButtonElement {\n        return btnTabReEncrypt;\n    }\n\n    public getTabContent(): HTMLElement {\n        return divTabReEncrypt;\n    }\n\n    public onTabSelected() {\n        storageOutputComponent.hide();\n        txtReEncryptSource.focus();\n    }\n\n    public getVaultHint(): string {\n        throw new Error('Not supported.');\n    }\n\n    public init(): void {\n        const errorLogsService = serviceManager.getService('errorLogs');\n        const logFunc = errorLogsService.createLogErrorMessageFunction();\n\n        ui.setupCopyButton(txtReEncryptTarget, btnCopyReEncryptTarget, logFunc);\n\n        // Mais est-ce que ce monde est serieux?\n        fillCipherComboBox(<HTMLSelectElement><any>cboReEncryptFrom, ciphers.length - 2);\n        fillCipherComboBox(<HTMLSelectElement><any>cboReEncryptTo, ciphers.length - 1);\n\n        txtReEncryptSource.addEventListener('input', () => {\n            if (txtReEncryptSource.value.length > 0) {\n                clearSourceVisualCue();\n            }\n        });\n\n        btnClearReEncryptSource.addEventListener('click', () => {\n            ui.clearText(txtReEncryptSource, true);\n        });\n\n        btnClearReEncryptTarget.addEventListener('click', () => {\n            ui.clearText(txtReEncryptTarget, true);\n        });\n\n        ui.setupFeedbackButton(btnReEncrypt, onReEncryptButtonClick, logFunc);\n    }\n}\n","import * as plainObject from '../../PlainObject';\nimport { SearchMatchFunction, PositionMarker } from '../../searchMatchFunctions';\n\nexport const DEEP_MODE_NONE = 0;\nexport const DEEP_MODE_UP = 1;\nexport const DEEP_MODE_DOWN = 2;\n\nconst TREE_ELEMENT_HEIGHT = 30;\n\nconst HORIZONTAL_LINE_VERTICAL_OFFSET = Math.floor(TREE_ELEMENT_HEIGHT / 2);\nconst HORIZONTAL_LINE_LENGTH = 12;\nconst VERTICAL_BAR_OFFSET = 6;\n\nexport interface TreeNodeCreationController {\n    isLeaf(path: string, key: string, value: any): boolean;\n    createTreeNodeContentElement(path: string, key: string, value: any): HTMLElement;\n}\n\nexport class TreeNode {\n    protected readonly parent: TreeNode | null;\n    protected readonly children: TreeNode[] = [];\n\n    protected readonly rootElement: HTMLElement;\n    protected readonly titleElement: HTMLElement;\n    protected readonly childrenContainerElement: HTMLElement;\n\n    protected readonly treeNodeCreationController: TreeNodeCreationController;\n\n    protected readonly path: string;\n    protected readonly key: string;\n    protected readonly value: any;\n\n    public get element(): HTMLElement {\n        return this.rootElement;\n    }\n\n    public get isVisible(): boolean {\n        return this.rootElement.style.display !== 'none';\n    }\n\n    public getVisibleChildCount(): number {\n        let visibleChildCount = 0;\n\n        for (const child of this.children) {\n            if (child.isVisible) {\n                visibleChildCount += 1;\n            }\n        }\n\n        return visibleChildCount;\n    }\n\n    public getVisibleLeafCount(): number {\n        if (this.isVisible === false) {\n            return 0;\n        }\n\n        let visibleLeafCount = 1;\n\n        for (const child of this.children) {\n            visibleLeafCount += child.getVisibleLeafCount();\n        }\n\n        return visibleLeafCount;\n    }\n\n    private addChild(child: TreeNode) {\n        this.childrenContainerElement.appendChild(child.rootElement);\n        this.children.push(child);\n    }\n\n    private createChildNodes(object: plainObject.PlainObject) {\n        for (const [childKey, childValue] of Object.entries(object)) {\n            const child = new TreeNode(this, `${this.path}/${childKey}`, childKey, childValue, this.treeNodeCreationController);\n            this.addChild(child);\n        }\n}\n\n    constructor(parent: TreeNode | null, path: string, key: string, value: any, treeNodeCreationController: TreeNodeCreationController) {\n        this.parent = parent;\n        this.path = path;\n        this.key = key;\n        this.value = value;\n        this.treeNodeCreationController = treeNodeCreationController;\n\n        this.rootElement = document.createElement('div');\n        this.setRootElementStyle();\n\n        // Construct title DOM element.\n        this.titleElement = document.createElement('div');\n        this.setTitleElementStyle();\n\n        this.titleElement.appendChild(this.createTreeNodeContentElement());\n\n        this.rootElement.appendChild(this.titleElement);\n\n        // Construct children container DOM element.\n        this.childrenContainerElement = document.createElement('div');\n        this.rootElement.appendChild(this.childrenContainerElement);\n        this.setChildrenContainerElementStyle();\n\n        const isLeaf = treeNodeCreationController.isLeaf(path, key, value);\n\n        if (isLeaf === false && plainObject.isPlainObject(value)) {\n            this.createChildNodes(value);\n        } else if (isLeaf && value.customKeys) {\n            this.createChildNodes(value.customKeys);\n        }\n\n        if (parent) {\n            // Construct lines DOM elements.\n            this.setupLinesElements('#D0D0D0');\n        }\n    }\n\n    private createTreeNodeContentElement(): HTMLElement {\n        return this.treeNodeCreationController.createTreeNodeContentElement(this.path, this.key, this.value);\n    }\n\n    private setRootElementStyle(): void {\n        this.rootElement.classList.add('treenode-root');\n        this.rootElement.style.display = 'grid';\n\n        let height = 4; // Gives a bit of top spacing.\n        let childrenOffset = 0;\n\n        if (this.parent) {\n            height = TREE_ELEMENT_HEIGHT;\n        }\n        if (this.parent && this.parent.parent) {\n            childrenOffset = HORIZONTAL_LINE_LENGTH;\n        }\n\n        this.rootElement.style.gridTemplateRows = `${height}px 1fr`;\n        this.rootElement.style.gridTemplateColumns = `${childrenOffset}px ${VERTICAL_BAR_OFFSET}px 1fr`;\n    }\n\n    private verticalLineElement: HTMLElement | null = null;\n\n    private setupLinesElements(color: string): void {\n        const verticalLineElement = document.createElement('div');\n        verticalLineElement.classList.add('treenode-vertical-line');\n        verticalLineElement.style.gridColumn = '2';\n        verticalLineElement.style.gridRow = '2';\n        verticalLineElement.style.width = '100%';\n        verticalLineElement.style.borderRight = `1px solid ${color}`;\n        this.verticalLineElement = verticalLineElement;\n        this.rootElement.appendChild(verticalLineElement);\n\n        if (this.parent && this.parent.parent) {\n            const horizontalLineElement = document.createElement('div');\n            horizontalLineElement.classList.add('treenode-horizontal-line');\n            horizontalLineElement.style.gridColumn = '1';\n            horizontalLineElement.style.gridRow = '1';\n            horizontalLineElement.style.width = '100%';\n            horizontalLineElement.style.height = `${HORIZONTAL_LINE_VERTICAL_OFFSET}px`;\n            horizontalLineElement.style.borderBottom = `1px solid ${color}`;\n            this.rootElement.appendChild(horizontalLineElement);\n        }\n\n        this.updateLines();\n    }\n\n    private updateLines(): void {\n        if (this.verticalLineElement === null) {\n            return;\n        }\n\n        const visibleChildCount = this.getVisibleChildCount();\n\n        if (visibleChildCount === 0) {\n            this.verticalLineElement.style.height = '0px';\n            return;\n        }\n\n        let totalVisibleLeafCount = 1;\n\n        for (let i = 0; i < visibleChildCount - 1; i += 1) {\n            if (this.children[i].isVisible) {\n                totalVisibleLeafCount += this.children[i].getVisibleLeafCount();\n            }\n        }\n\n        const bottomPosition = (totalVisibleLeafCount * TREE_ELEMENT_HEIGHT) - TREE_ELEMENT_HEIGHT + HORIZONTAL_LINE_VERTICAL_OFFSET + 1;\n\n        this.verticalLineElement.style.height = `${bottomPosition}px`;\n    }\n\n    private setTitleElementStyle(): void {\n        if (!this.titleElement) {\n            return;\n        }\n\n        this.titleElement.classList.add('treenode-title');\n        this.titleElement.style.gridColumn = '2 / span 2';\n        this.titleElement.style.gridRow = '1';\n        this.titleElement.style.marginLeft = '3px';\n        this.titleElement.style.alignSelf = 'center';\n    }\n\n    private setChildrenContainerElementStyle(): void {\n        this.childrenContainerElement.classList.add('treenode-children-container');\n        this.childrenContainerElement.style.gridColumn = '3';\n        this.childrenContainerElement.style.gridRow = '2';\n    }\n\n    private resetTitle(deepMode: number): void {\n        if (this.titleElement) {\n            this.titleElement.innerHTML = '';\n            this.titleElement.appendChild(this.createTreeNodeContentElement());\n        }\n\n        if (deepMode === DEEP_MODE_UP && this.parent) {\n            this.parent.resetTitle(deepMode);\n        }\n\n        if (deepMode === DEEP_MODE_DOWN) {\n            for (const child of this.children) {\n                child.resetTitle(deepMode);\n            }\n        }\n    }\n\n    public show(deepMode: number): void {\n        this.rootElement.style.display = 'grid';\n\n        if (deepMode === DEEP_MODE_UP && this.parent) {\n            this.parent.show(deepMode);\n        }\n\n        if (deepMode === DEEP_MODE_DOWN) {\n            for (const child of this.children) {\n                child.show(deepMode);\n            }\n        }\n\n        this.updateLines();\n    }\n\n    public hide(deepMode: number): void {\n        this.rootElement.style.display = 'none';\n\n        if (deepMode === DEEP_MODE_UP && this.parent) {\n            this.parent.hide(deepMode);\n        }\n\n        if (deepMode === DEEP_MODE_DOWN) {\n            for (const child of this.children) {\n                child.hide(deepMode);\n            }\n        }\n\n        this.updateLines();\n    }\n\n    private static createSpan(text: string, color?: string): HTMLElement {\n        const element = document.createElement('span');\n        if (color) {\n            element.style.backgroundColor = color;\n            element.style.borderRadius = '2px';\n        }\n        element.innerText = text;\n        return element;\n    }\n\n    private static createColoredSpan(text: string, markers: PositionMarker[]): HTMLElement {\n        const root = document.createElement('span');\n\n        let pos = 0;\n\n        for (const marker of markers) {\n            if (marker.pos !== pos) {\n                root.appendChild(TreeNode.createSpan(text.substring(pos, marker.pos)));\n            }\n\n            root.appendChild(TreeNode.createSpan(text.substring(marker.pos, marker.pos + marker.len), '#80C0FF'));\n\n            pos = marker.pos + marker.len;\n        }\n\n        if (pos < text.length) {\n            root.appendChild(TreeNode.createSpan(text.substring(pos, text.length)));\n        }\n\n        return root;\n    }\n\n    private static findLeafElement(element: Element): Element {\n        if (element.children.length === 0) {\n            return element;\n        }\n\n        return TreeNode.findLeafElement(element.children[0]);\n    }\n\n    public filter(searchText: string, matchFunction: SearchMatchFunction): void {\n        if (!searchText) {\n            this.resetTitle(DEEP_MODE_DOWN);\n            this.show(DEEP_MODE_DOWN);\n            this.updateLines();\n            return;\n        }\n\n        const markers: PositionMarker[] = [];\n        const isMatch = matchFunction(this.titleElement.innerText, searchText, markers);\n\n        if (isMatch) {\n            if (this.titleElement) {\n                const element = TreeNode.findLeafElement(this.titleElement);\n                element.innerHTML = '';\n                const title = this.createTreeNodeContentElement();\n                element.appendChild(TreeNode.createColoredSpan(title.innerText, markers));\n            }\n\n            this.show(DEEP_MODE_UP);\n            this.show(DEEP_MODE_DOWN);\n        } else {\n            this.resetTitle(DEEP_MODE_DOWN);\n        }\n\n        for (const child of this.children) {\n            child.filter(searchText, matchFunction);\n        }\n\n        this.updateLines();\n    }\n}\n","export interface PositionMarker {\n    pos: number;\n    len: number;\n}\n\nexport type SearchMatchFunction = (lhs: string, rhs: string, markers: PositionMarker[]) => boolean;\n\nfunction indexedAggresiveSearchMatchFunction(lhs: string, lhsIndex: number, rhs: string, markers: PositionMarker[]): boolean {\n    if (!rhs) {\n        return true;\n    }\n\n    lhs = lhs.toLowerCase();\n    rhs = rhs.toLowerCase();\n\n    for (let len = rhs.length; len >= 1; len -= 1) {\n        const subWord = rhs.substring(0, len);\n        const foundPos = lhs.indexOf(subWord, lhsIndex);\n\n        if (foundPos >= 0) {\n            markers.push({\n                pos: foundPos,\n                len: subWord.length\n            });\n\n            return indexedAggresiveSearchMatchFunction(lhs, foundPos + subWord.length, rhs.substring(len), markers);\n        }\n    }\n\n    return false;\n}\n\nexport function aggresiveSearchMatchFunction(lhs: string, rhs: string, markers: PositionMarker[]): boolean {\n    return indexedAggresiveSearchMatchFunction(lhs, 0, rhs, markers);\n}\n\nexport function containsSearchMatchFunction(lhs: string, rhs: string, markers: PositionMarker[]): boolean {\n    const index = lhs.toLowerCase().indexOf(rhs.toLowerCase());\n\n    if (index < 0) {\n        return false;\n    }\n\n    markers.push({\n        pos: index,\n        len: rhs.length\n    });\n\n    return true;\n}\n","import { getElementById } from '../../ui';\nimport { IComponent } from '../IComponent';\nimport { ITabInfo } from '../../TabControl';\nimport { IVaultComponent } from '../vaultComponent';\nimport { TreeNode, TreeNodeCreationController, DEEP_MODE_DOWN } from './TreeNode';\nimport * as plainObject from '../../PlainObject';\nimport * as ui from '../../ui';\nimport { aggresiveSearchMatchFunction, containsSearchMatchFunction, SearchMatchFunction } from '../../searchMatchFunctions';\nimport * as serviceManager from '../../services/serviceManger';\nimport { PasswordService } from '../../services/passwordService';\nimport { CipherService } from 'services/cipherService';\n\nconst ONE_YEAR_IN_MILLISECONDS = 365 * 24 * 3600 * 1000;\n\nconst btnTabVaultTabTreeView = getElementById('btnTabVaultTabTreeView') as HTMLButtonElement;\nconst divTabVaultTabTreeView = getElementById('divTabVaultTabTreeView');\n\nconst trvVaultTreeView = getElementById('trvVaultTreeView');\nconst txtVaultTreeViewSearch = getElementById('txtVaultTreeViewSearch') as HTMLInputElement;\nconst cboVaultTreeViewSearchType = getElementById('cboVaultTreeViewSearchType') as HTMLSelectElement;\n\nlet rootTreeNode: TreeNode;\n\ninterface SearchMatchFunctionDescription {\n    text: string,\n    function: SearchMatchFunction\n}\n\nconst searchMatchFunctionDescriptions: SearchMatchFunctionDescription[] = [\n    { text: 'Aggresive', function: aggresiveSearchMatchFunction },\n    { text: 'Regular', function: containsSearchMatchFunction },\n];\n\nfunction onSearchVaultInputChanged(): void {\n    if (!rootTreeNode) {\n        return;\n    }\n\n    const index: number = cboVaultTreeViewSearchType.selectedIndex;\n    const searchMatchFunction: SearchMatchFunction = searchMatchFunctionDescriptions[index].function;\n\n    rootTreeNode.hide(DEEP_MODE_DOWN);\n    rootTreeNode.filter(txtVaultTreeViewSearch.value.toLocaleLowerCase(), searchMatchFunction);\n}\n\nfunction populateSearchFunctions(): void {\n    cboVaultTreeViewSearchType.innerHTML = '';\n\n    for (let description of searchMatchFunctionDescriptions) {\n        const option = document.createElement('option');\n        option.text = description.text;\n        cboVaultTreeViewSearchType.appendChild(option);\n    }\n}\n\nclass VaultTreeNodeCreationController implements TreeNodeCreationController {\n    private readonly passwordService: PasswordService;\n    private readonly cipherService: CipherService;\n    private readonly buttonBackgroundColor: string;\n\n    public constructor(private readonly maxTimestampInMilliseconds: number) {\n        this.passwordService = serviceManager.getService('password');\n        this.cipherService = serviceManager.getService('cipher');\n\n        const buttonStyle = window.getComputedStyle(btnTabVaultTabTreeView);\n\n        this.buttonBackgroundColor = buttonStyle.backgroundColor;\n    }\n\n    private async runPassword(value: any): Promise<void> {\n        await this.passwordService.generateAndCopyPasswordToClipboard(\n            value.public,\n            value.alphabet,\n            value.length,\n            value.version,\n        );\n    }\n\n    private async runCipher(path: string, key: string, value: any): Promise<boolean> {\n        return await this.cipherService.activate(path, key, value);\n    }\n\n    private static isPasswordObject(key: string, obj: plainObject.PlainObject): boolean {\n        if (key !== 'password') {\n            return false;\n        }\n\n        if (!obj || !plainObject.isPlainObject(obj) || typeof obj.public !== 'string' || obj.public.length < 4) {\n            return false;\n        }\n\n        return true;\n    }\n\n    private static isCipherObject(obj: plainObject.PlainObject): boolean {\n        if (!obj || !plainObject.isPlainObject(obj)) {\n            return false;\n        }\n\n        if (typeof obj.value !== 'string' || obj.value.length <= 0) {\n            return false;\n        }\n\n        if (typeof obj.version !== 'number' || obj.version < 0) {\n            return false;\n        }\n\n        return true;\n    }\n\n    private static isCiphersObject(key: string, obj: plainObject.PlainObject): boolean {\n        if (key !== 'ciphers') {\n            return false;\n        }\n\n        if (!obj || !plainObject.isPlainObject(obj)) {\n            return false;\n        }\n\n        for (const sub of Object.values(obj)) {\n            if (!VaultTreeNodeCreationController.isCipherObject(sub)) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    private static isHint(key: string, value: any) {\n        if (VaultTreeNodeCreationController.isCiphersObject(key, value) ||\n            VaultTreeNodeCreationController.isCipherObject(value) ||\n            VaultTreeNodeCreationController.isPasswordObject(key, value) ||\n            plainObject.isPlainObject(value)) {\n            return false;\n        }\n\n        return true;\n    }\n\n    public isLeaf(path: string, key: string, value: any): boolean {\n        if (VaultTreeNodeCreationController.isCipherObject(value) ||\n            VaultTreeNodeCreationController.isPasswordObject(key, value)) {\n            return true;\n        }\n\n        return plainObject.isPlainObject(value) === false;\n    }\n\n    private computeTimestampProgress(timestamp: Date): number {\n        const now = Date.now()\n        const then = timestamp.getTime();\n        const diff = now - then;\n\n        const timespan = Math.max(0, Math.min(diff, this.maxTimestampInMilliseconds));\n\n        return timespan / this.maxTimestampInMilliseconds;\n    }\n\n    private static dateToString(date: Date): string {\n        return `${date.getFullYear()}-${date.getMonth() + 1}-${date.getDate()}`;\n    }\n\n    private createButton(text: string, timestamp: Date) {\n        const button = document.createElement('button');\n\n        button.title = `Last modified: ${VaultTreeNodeCreationController.dateToString(timestamp)}`;\n\n        const grid = document.createElement('div');\n        grid.classList.add('content-container');\n\n        const textSpan = document.createElement('span');\n        textSpan.innerText = text;\n        textSpan.classList.add('text');\n        grid.appendChild(textSpan);\n\n        const timestampDiv = document.createElement('div');\n        timestampDiv.classList.add('timestamp');\n        timestampDiv.style.backgroundColor = this.buttonBackgroundColor;\n        timestampDiv.style.width = `${Math.round((1 - this.computeTimestampProgress(timestamp)) * 100)}%`;\n        grid.appendChild(timestampDiv);\n\n        button.appendChild(grid);\n\n        return button;\n    }\n\n    public createTreeNodeContentElement(path: string, key: string, value: any): HTMLElement {\n        if (VaultTreeNodeCreationController.isPasswordObject(key, value)) {\n            const version: number = value.version;\n            const isLatest = this.passwordService.isLatestVersion(version);\n\n            const lastModified = new Date(value.datetime);\n\n            const button = this.createButton('Password', lastModified);\n            button.style.justifySelf = 'start';\n            button.style.minWidth = '80px';\n\n            if (isLatest === false) {\n                button.setAttribute('not-latest', `⚠️ Password version ${version}, latest is ${this.passwordService.getLatestVersion()}`);\n                button.classList.add('not-latest');\n            }\n\n            const errorLogsService = serviceManager.getService('errorLogs');\n            const logFunc = errorLogsService.createLogErrorMessageFunction();\n\n            ui.setupFeedbackButton(button, async () => await this.runPassword(value), logFunc);\n\n            return button;\n        } else if (VaultTreeNodeCreationController.isCipherObject(value)) {\n            const version: number = value.version;\n            const isLatest = this.cipherService.isLatestVersion(version);\n\n            const lastModified = new Date(value.datetime);\n\n            const button = this.createButton(key, lastModified);\n            button.style.justifySelf = 'start';\n\n            if (isLatest === false) {\n                button.setAttribute('not-latest', `⚠️ Cipher version ${version}, latest is ${this.cipherService.getLatestVersion()}`);\n                button.classList.add('not-latest');\n            }\n\n            const errorLogsService = serviceManager.getService('errorLogs');\n            const logFunc = errorLogsService.createLogErrorMessageFunction();\n\n            ui.setupFeedbackButton(button, async () => await this.runCipher(path, key, value), logFunc);\n\n            return button;\n        } else if (VaultTreeNodeCreationController.isHint(key, value)) {\n            const label = document.createElement('span');\n            label.style.justifySelf = 'start';\n            label.innerText = `${key}: ${value}`;\n\n            return label;\n        }\n\n        const div = document.createElement('div');\n        div.innerText = key;\n        return div;\n    }\n}\n\nexport class VaultTreeViewComponent implements IComponent, ITabInfo, IVaultComponent {\n    public readonly name: string = 'VaultTreeView';\n\n    public onVaultLoaded(vault: plainObject.PlainObject): void {\n        const maxTimespan = 3 * ONE_YEAR_IN_MILLISECONDS;\n\n        rootTreeNode = new TreeNode(null, '<root>', '', vault, new VaultTreeNodeCreationController(maxTimespan));\n\n        trvVaultTreeView.innerHTML = '';\n        trvVaultTreeView.appendChild(rootTreeNode.element);\n\n        onSearchVaultInputChanged();\n    }\n\n    public getTabButton(): HTMLButtonElement {\n        return btnTabVaultTabTreeView;\n    }\n\n    public getTabContent(): HTMLElement {\n        return divTabVaultTabTreeView;\n    }\n\n    public onTabSelected(): void {\n        txtVaultTreeViewSearch.focus();\n    }\n\n    public getVaultHint(): string {\n        throw new Error('Not supported.');\n    }\n\n    public init(): void {\n        populateSearchFunctions();\n\n        txtVaultTreeViewSearch.addEventListener('input', onSearchVaultInputChanged);\n        cboVaultTreeViewSearchType.addEventListener('change', onSearchVaultInputChanged);\n    }\n}\n","import { getElementById } from '../../ui';\nimport { IComponent } from '../IComponent';\nimport { ITabInfo } from '../../TabControl';\nimport { IVaultComponent } from '../vaultComponent';\nimport * as plainObject from '../../PlainObject';\n\nconst btnTabVaultTabTextView = getElementById('btnTabVaultTabTextView') as HTMLButtonElement;\nconst divTabVaultTabTextView = getElementById('divTabVaultTabTextView');\n\nconst txtVault = getElementById('txtVault') as HTMLInputElement;\n\nexport class VaultTextViewComponent implements IComponent, ITabInfo, IVaultComponent {\n    public readonly name: string = 'VaultTextView';\n\n    public onVaultLoaded(vault: plainObject.PlainObject): void {\n        txtVault.value = JSON.stringify(vault, undefined, 4);\n    }\n\n    public getTabButton(): HTMLButtonElement {\n        return btnTabVaultTabTextView;\n    }\n\n    public getTabContent(): HTMLElement {\n        return divTabVaultTabTextView;\n    }\n\n    public onTabSelected(): void {\n    }\n\n    public getVaultHint(): string {\n        throw new Error('Not supported.');\n    }\n\n    public init(): void {\n    }\n}\n","import { VaultComponent } from '../components/vaultComponent';\n\nexport class VaultService {\n    private readonly vaultComponent: VaultComponent;\n\n    public constructor(vaultComponent: VaultComponent) {\n        this.vaultComponent = vaultComponent;\n    }\n\n    public computeUserPathMatchDepth(path: string): number {\n        return this.vaultComponent.computeUserPathMatchDepth(path);\n    }\n}\n","import { getElementById, setupFeedbackButton } from '../ui';\n\nimport { IComponent } from './IComponent';\nimport { ITabInfo, TabControl } from '../TabControl';\n\nimport * as storageOutputComponent from './storageOutputComponent';\n\nimport { SecureLocalStorage } from '../storages/SecureLocalStorage';\nimport { IVaultStorage } from '../storages/IVaultStorage';\nimport { GitHubPersonalAccessTokenVaultStorage } from '../storages/GitHubVaultStorage';\nimport { hasPrivatePart, protectAndLockPrivatePart } from './privatePartComponent';\nimport * as plainObject from '../PlainObject';\nimport { VaultTreeViewComponent } from './vaultComponents/treeViewComponent';\nimport { VaultTextViewComponent } from './vaultComponents/textViewComponent';\n\nimport * as serviceManager from '../services/serviceManger';\nimport { VaultService } from '../services/vaultService';\n\nexport interface IVaultComponent {\n    onVaultLoaded(vault: plainObject.PlainObject): void;\n}\n\nconst divTabVault = getElementById('divTabVault');\nconst btnTabVault = getElementById('btnTabVault') as HTMLButtonElement;\n\nconst btnRefreshVault = getElementById('btnRefreshVault') as HTMLButtonElement;\nconst btnClearVaultSettings = getElementById('btnClearVaultSettings') as HTMLButtonElement;\nconst btnViewVaultSettings = getElementById('btnViewVaultSettings') as HTMLButtonElement;\n\nconst elements: any[] = [\n    new VaultTreeViewComponent(),\n    new VaultTextViewComponent(),\n];\n\nconst tabs: ITabInfo[] = elements.filter(e => (e as ITabInfo).getTabButton !== undefined);\nconst components: (IComponent & IVaultComponent)[] = elements.filter(e => (e as IComponent).init !== undefined);\n\nconst subTabs = new TabControl(tabs);\n\nlet vaultStorage: IVaultStorage = new GitHubPersonalAccessTokenVaultStorage(new SecureLocalStorage());\n\nlet vaultObject: plainObject.PlainObject | null = null;\n\nfunction computeUserPathMatchDepth(path: string): number {\n    if (vaultObject === null) {\n        return 0;\n    }\n\n    let obj = vaultObject;\n\n    const pathArray = path.split('/');\n\n    for (let i = 0; i < pathArray.length; i += 1) {\n        if (!obj[pathArray[i]]) {\n            return i;\n        }\n\n        // TODO: Filter here to not go further down ItchyObjects.\n\n        obj = obj[pathArray[i]];\n    }\n\n    return pathArray.length;\n}\n\nasync function reloadVault(): Promise<boolean> {\n    let content: string | null = await vaultStorage.getVaultContent();\n\n    if (content === null) {\n        return false;\n    }\n\n    try {\n        let obj = JSON.parse(content) as plainObject.PlainObject;\n        obj = plainObject.objectDeepSort(obj);\n\n        vaultObject = obj;\n\n        let component: IVaultComponent;\n        for (component of components) {\n            component.onVaultLoaded(obj);\n        }\n\n        return true;\n    } catch (error) {\n        vaultObject = null;\n        alert('Failed to parse vault content, it needs to be fixed and be valid JSON data.');\n        const message = (error as Error).message;\n        if (message) {\n            alert(message);\n            console.error(message);\n        }\n        return false;\n    }\n}\n\nasync function onRefreshVaultButtonClick(): Promise<boolean> {\n    if (hasPrivatePart() === false) {\n        alert('You must enter a master key first.');\n        return false;\n    }\n\n    const result: boolean = await reloadVault();\n\n    if (result) {\n        protectAndLockPrivatePart();\n    }\n\n    return result;\n}\n\nfunction onClearVaultSettingsButtonClick(): void {\n    if (prompt('Are you sure you want to clear the vault settings ?\\nType \\'y\\' to accept', '') !== 'y') {\n        return;\n    }\n\n    vaultStorage.clear();\n}\n\nfunction onViewVaultSettingsButtonClick(): void {\n    alert(vaultStorage.getVaultSettings());\n}\n\nexport class VaultComponent implements IComponent, ITabInfo {\n    public readonly name: string = 'Vault';\n\n    public computeUserPathMatchDepth(path: string) {\n        return computeUserPathMatchDepth(path);\n    }\n\n    public getTabButton(): HTMLButtonElement {\n        return btnTabVault;\n    }\n\n    public getTabContent(): HTMLElement {\n        return divTabVault;\n    }\n\n    public onTabSelected(): void {\n        storageOutputComponent.hide();\n        tabs[subTabs.activeTabIndex].onTabSelected();\n    }\n\n    public getVaultHint(): string {\n        throw new Error('Not supported.');\n    }\n\n    public init(): void {\n        const errorLogsService = serviceManager.getService('errorLogs');\n        const logFunc = errorLogsService.createLogErrorMessageFunction();\n\n        setupFeedbackButton(btnRefreshVault, onRefreshVaultButtonClick, logFunc);\n        btnClearVaultSettings.addEventListener('click', onClearVaultSettingsButtonClick);\n        btnViewVaultSettings.addEventListener('click', onViewVaultSettingsButtonClick);\n\n        const vaultService = new VaultService(this);\n        serviceManager.registerService('vault', vaultService);\n\n        let component: IComponent;\n        for (component of components) {\n            component.init();\n        }\n    }\n}\n","import { ErrorLogsComponent } from 'components/errorLogsComponent';\n\nexport class ErrorLogsService {\n    constructor(private errorLogsComponent: ErrorLogsComponent) {\n    }\n\n    public createLogErrorMessageFunction(): (...args: any[]) => void {\n        return (args) => this.logErrorMessage(args);\n    }\n\n    public logErrorMessage(...args: any[]): void {\n        this.errorLogsComponent.logErrorMessage(...args);\n    }\n}\n","import { getElementById } from '../ui';\nimport { ITabInfo } from '../TabControl';\nimport * as serviceManager from '../services/serviceManger';\nimport { ErrorLogsService } from '../services/errorLogsService';\nimport * as storageOutputComponent from './storageOutputComponent';\n\nconst divErrorLogs = getElementById('divErrorLogs');\nconst btnTabErrorLogs = getElementById('btnTabErrorLogs') as HTMLButtonElement;\n\nconst btnClearErrorLogs = getElementById('btnClearErrorLogs') as HTMLButtonElement;\nconst txtErrorLogs = getElementById('txtErrorLogs') as HTMLTextAreaElement;\n\nexport class ErrorLogsComponent implements ITabInfo {\n    constructor() {\n        window.addEventListener('error', (e) => this.onError(e), true);\n        window.addEventListener('unhandledrejection', (e) => this.onUnhandledRejection(e), true);\n\n        btnClearErrorLogs.addEventListener('click', () => {\n            txtErrorLogs.value = '';\n        });\n\n        serviceManager.registerService('errorLogs', new ErrorLogsService(this));\n    }\n\n    public logErrorMessage(...args: any[]): void {\n        if (args.length == 0) {\n            return;\n        }\n\n        const now = new Date().toISOString();\n\n        let message = args[0].toString();\n\n        for (let i = 1; i < args.length; i++) {\n            message += ` ${args[i].toString()}`;\n        }\n\n        txtErrorLogs.value += `[${now}] ${message}\\n\\n`;\n    }\n\n    public onUnhandledRejection(errorEvent: PromiseRejectionEvent): void {\n        this.logErrorMessage(`Promise rejected, reason: ${errorEvent.reason}`);\n    }\n\n    public onError(errorEvent: ErrorEvent): void {\n        this.logErrorMessage(`${errorEvent.message}\\n${errorEvent.toString()}`);\n    }\n\n    getTabButton(): HTMLButtonElement {\n        return btnTabErrorLogs;\n    }\n\n    getTabContent(): HTMLElement {\n        return divErrorLogs;\n    }\n\n    onTabSelected(): void {\n        storageOutputComponent.hide();\n    }\n}\n","import { getElementById } from '../ui';\nimport { TabControl, ITabInfo } from '../TabControl';\n\nimport { IComponent } from './IComponent';\nimport { PrivatePartComponent } from './privatePartComponent';\nimport { PasswordComponent } from './passwordComponent';\nimport { CipherComponent } from './cipherComponent';\nimport { ReEncryptComponent } from './reEncryptComponent';\nimport { VaultComponent } from './vaultComponent';\n\nimport * as storageOutputComponent from './storageOutputComponent';\nimport { ErrorLogsComponent } from './errorLogsComponent';\n\nconst nothingTabInfo: ITabInfo = {\n    getTabButton(): HTMLButtonElement {\n        return getElementById('btnTabNothing') as HTMLButtonElement;\n    },\n    getTabContent(): HTMLElement {\n        return getElementById('divTabNothing');\n    },\n    onTabSelected(): void {\n        storageOutputComponent.hide();\n    }\n}\n\nconst elements: any[] = [\n    nothingTabInfo,\n    new PrivatePartComponent(),\n    new PasswordComponent(),\n    new CipherComponent(),\n    new ReEncryptComponent(),\n    new ErrorLogsComponent(),\n    new storageOutputComponent.StorageOutputComponent(),\n    new VaultComponent(),\n];\n\nconst tabs: ITabInfo[] = elements.filter(e => (e as ITabInfo).getTabButton !== undefined);\nconst components: IComponent[] = elements.filter(e => (e as IComponent).init !== undefined);\n\nconst tabControl = new TabControl(tabs);\n\nexport class RootComponent implements IComponent {\n    public readonly name: string = 'Root';\n\n    public constructor() {\n    }\n\n    public getVaultHint(): string {\n        throw new Error('Not supported.');\n    }\n\n    public init(): void {\n        let component: IComponent;\n        for (component of components) {\n            component.init();\n        }\n    }\n\n    public getActiveComponent(): IComponent | null {\n        const component = tabs[tabControl.activeTabIndex] as any;\n\n        if (component.init !== undefined) {\n            return component as IComponent;\n        }\n\n        return null;\n    }\n}\n\nexport const rootComponent = new RootComponent();\n","import { getElementById } from './ui';\nimport { rootComponent } from './components/rootComponent';\n\ndeclare const COMMITHASH: string;\n\nconst version = COMMITHASH.substring(0, 11);\nconst githubLink = '<a href=\"https://github.com/TanukiSharp/ItchyPassword\" target=\"_blank\">github</a>';\n\ngetElementById('divInfo').innerHTML = `${version}<br/>${githubLink}`;\n\nrootComponent.init();\n"],"names":["ERROR_COLOR","getElementById","elementName","element","document","Error","async","writeToClipboard","text","logFunc","navigator","clipboard","writeText","error","typedError","console","stack","clearText","txt","refocus","value","focus","setupFeedbackButton","button","action","logError","throttleTimeout","clearFunc","duration","timeout","start","undefined","clearTimeout","end","setTimeout","createThrottleTimeout","classList","remove","clickFunction","disabled","actionResult","result","Promise","add","addEventListener","setupCopyButton","showHide","isVisible","style","removeProperty","setProperty","showHideMany","elements","TabControl","tabs","_activeTabIndex","activeTabIndex","this","index","length","setActiveTab","i","getTabButton","tabInfo","getTabContent","onTabSelected","btnProtectTitleForProtect","txtPrivatePart","txtPrivatePartConfirmation","btnProtect","spnProtectedConfirmation","spnPrivatePartSize","spnPrivatePartSizeConfirmation","privatePart","onChangedHandlers","getPrivatePart","protectAndLockPrivatePart","innerHTML","title","updatePrivatePartsMatching","onProtectButtonClick","protectPrivatePartAction","delay","reset","overrideDelay","window","onPrivatePartTextInput","onChangedHandler","toString","onPrivatePartConfirmationTextInput","toCustomBaseOneWay","bytes","alphabet","alphabetLength","BigInt","number","arrayBuffer","byteLength","arrayView","DataView","multiplier","getUint8","arrayBufferToUnsignedBigIntWithoutHeader","remainder","asUintN","TaskCancelledError","_name","name","constructor","message","super","ERROR_NAME","Object","setPrototypeOf","prototype","static","CancellationTokenSource","_isCancelled","_token","CancellationToken","isCancelled","token","cancel","source","none","_none","ensureNotCancelled","cancellationToken","BASE62_ALPHABET","getDerivedBytes","password","salt","iterations","baseKey","crypto","subtle","importKey","algorithm","hash","deriveKey","key","exportKey","truncate","input","substring","stringToArray","str","TextEncoder","encode","buffer","isPlainObject","hasOwnProperty","objectDeepSort","object","output","entries","sort","a","b","localeCompare","services","getService","serviceName","TypeError","service","registerService","instance","GitHubVaultStorageBase","secureLocalStorage","oneTimePassword","currentVaultContentHash","username","repositoryName","vaultFilename","getUsername","getRepositoryName","getVaultFilename","clear","removeItem","LOCAL_STORAGE_KEY_USERNAME","LOCAL_STORAGE_KEY_REPO","LOCAL_STORAGE_KEY_FILENAME","AUTH_TOKEN_KEY_NAME","constructTokenAuthString","constructFetchRequest","method","authHeader","body","headers","JSON","stringify","constructUrl","relativeUrl","BASE_URL","retryOnUnauthorized","url","requestInfo","response","fetch","status","prompt","request","getSetVaultParameter","promptText","defaultValue","localStorage","getItem","setItem","ensureVaultParameters","URL","location","defaultAccountUsername","defaultRepo","hostname","pathElements","pathname","split","resolve","getToken","constructVaultFileUrl","ensureToken","warn","ok","getVaultContent","setVaultContent","responseContent","json","sha","decodedContent","atob","content","trim","newContent","updateMessage","btoa","getVaultSettings","GitHubPersonalAccessTokenVaultStorage","authToken","CipherV2","version","description","ArrayBuffer","nonce","getRandomValues","Uint8Array","passwordSalt","aesGcmParams","iv","passwordKey","encrypt","set","payload","derivedKey","decrypt","CipherV3","CipherService","cipherComponent","latestVersion","findLatestCipher","isLatestVersion","getLatestVersion","storageFullPath","cipherName","parameterKeys","setParameters","click","btnTabCiphers","divTabCiphers","ciphers","btnClearAllCipherInfo","txtCipherName","txtCipherSource","txtCipherTarget","cboCipherVersion","btnEncrypt","btnDecrypt","btnCopyCipherSource","btnClearCipherSource","btnCopyCipherTarget","btnClearCipherTarget","cipherTargetLastChange","bestCipher","cipher","clearSourceVisualCue","setSourceVisualCueError","clearAllVisualCues","clearCipherTargetLastUpdate","setCipherTargetValue","isEncrypt","needDateTimeUpdate","Date","toISOString","updateCipherParameters","datetime","selectedIndex","encryptString","encrypted","headeredBuffer","createHeaderedBuffer","arrayBufferToUnsignedBigInt","decryptStringWithCipher","indexOf","byteValue","Number","push","totalLength","diff","slice","unsignedBigIntToArrayBuffer","decrypted","array","TextDecoder","decode","isMatching","rethrowCancelled","onEncryptButtonClick","encryptedString","onDecryptButtonClick","decryptedString","CipherComponent","fullPath","prefix","suffix","startsWith","endsWith","options","findCipherByVersion","decryptStringWithVersion","alert","storagePath","fullPathToStoragePath","customKeys","findCipherDropdownIndexByVersion","getVaultHint","toLowerCase","init","createLogErrorMessageFunction","option","createElement","appendChild","setupCipherVersionsDropdown","SecureLocalStorage","encryptedItem","sortedCiphers","x","divStorageOutput","txtPath","lblMatchingPath","txtParameters","btnPushToVault","txtCustomKeys","_parameterKeys","_parameterPath","vaultStorage","pathToObjectChain","path","chainInfo","separatorIndex","tail","firstPath","remainingPath","node","head","tailParent","onPathTextInput","depth","computeUserPathMatchDepth","matchingPath","position","createMatchingPath","innerText","updateMatchingPath","update","onCustomKeysTextInput","updateCustomKeysDisplay","isValid","leaf","obj","parse","parseCustomKeys","keys","deepMerge","target","sourceKey","targetValue","sourceValue","pushToVault","vaultContentData","newData","vaultContent","activeComponent","rootComponent","hint","chars","includes","findNonCharFromStart","findNonCharFromEnd","generateUpdateMessage","newVaultContentData","clearOutputs","parameterPath","setPathUI","setCustomKeysUI","show","hide","clearUI","clearMatchingPath","PasswordService","publicPart","keyString","Math","max","btnTabPasswords","divTabPasswords","passwordGenerators","hkdfPurpose","_description","hkdfKey","sign","CURRENT_PASSWORD_GENERATOR_VERSION","btnClearAllPasswordInfo","txtPublicPart","spnPublicPartSize","btnGeneratePublicPart","btnClearPublicPart","btnCopyPublicPart","btnShowHidePasswordOptionalFeatures","lblAlphabetLength","numOutputSizeRange","numOutputSizeNum","lblAlphabet","txtAlphabet","spnAlphabetSize","divPasswordAlphabetActions","btnResetAlphabet","lblPasswordVersion","cboPasswordVersion","txtResultPassword","spnResultPasswordLength","btnViewResultPassword","btnCopyResultPassword","lblGeneratingPassword","DEFAULT_LENGTH","DEFAULT_ALPHABET","passwordPublicPartLastChange","copyPasswordFunction","onClearPublicPartButtonClick","updatePublicPartSize","updatePasswordPublicPartLastUpdate","updatePasswordGenerationParameters","onGeneratePublicPartButtonClick","randomString","byteCount","generateRandomBytes","run","updateResultPasswordLength","isAlphabetValid","sortedAlphabet","canRun","passwordGenerator","public","updateOutputSizeRangeToNum","onOutputSizeRangeInput","onOutputSizeNumInput","min","parseInt","val","isNaN","updateOutputSizeNumToRange","updateAlphabetSize","updateAlphabetValidityDisplay","onAlphabetTextInput","isAlphabetValidResult","onResetAlphabetButtonClick","resetAlphabet","onPasswordVersionChanged","generatePasswordString","findPasswordGeneratorByVersion","privatePrivateBytes","publicPartBytes","generatePassword","passwordTaskRunner","currentTokenSource","currentTask","microThreadId","isRunning","throwTaskCanceledError","MAX_SAFE_INTEGER","localMicroThreadId","cancelInternal","taskFactory","localToken","cancelAndExecute","runCore","findPasswordGeneratorFromUserInterface","onPublicPartTextInput","btnTabReEncrypt","divTabReEncrypt","txtReEncryptSource","txtReEncryptTarget","cboReEncryptFrom","cboReEncryptTo","btnReEncrypt","btnClearReEncryptSource","btnCopyReEncryptTarget","btnClearReEncryptTarget","fillCipherComboBox","cbo","initialValue","item","childNodes","onReEncryptButtonClick","sourceCipherIndex","targetCipherIndex","reEncrypted","Array","map","call","join","HORIZONTAL_LINE_VERTICAL_OFFSET","floor","TREE_ELEMENT_HEIGHT","TreeNode","parent","children","rootElement","titleElement","childrenContainerElement","treeNodeCreationController","display","getVisibleChildCount","visibleChildCount","child","getVisibleLeafCount","visibleLeafCount","addChild","createChildNodes","childKey","childValue","setRootElementStyle","setTitleElementStyle","createTreeNodeContentElement","setChildrenContainerElementStyle","isLeaf","setupLinesElements","height","childrenOffset","gridTemplateRows","gridTemplateColumns","verticalLineElement","color","gridColumn","gridRow","width","borderRight","horizontalLineElement","borderBottom","updateLines","totalVisibleLeafCount","bottomPosition","marginLeft","alignSelf","resetTitle","deepMode","backgroundColor","borderRadius","markers","root","pos","marker","createSpan","len","findLeafElement","filter","searchText","matchFunction","createColoredSpan","indexedAggresiveSearchMatchFunction","lhs","lhsIndex","rhs","subWord","foundPos","btnTabVaultTabTreeView","divTabVaultTabTreeView","trvVaultTreeView","txtVaultTreeViewSearch","cboVaultTreeViewSearchType","rootTreeNode","searchMatchFunctionDescriptions","function","onSearchVaultInputChanged","searchMatchFunction","toLocaleLowerCase","VaultTreeNodeCreationController","maxTimestampInMilliseconds","passwordService","cipherService","buttonBackgroundColor","buttonStyle","getComputedStyle","generateAndCopyPasswordToClipboard","activate","sub","values","isCipherObject","isCiphersObject","isPasswordObject","computeTimestampProgress","timestamp","now","getTime","date","getFullYear","getMonth","getDate","createButton","dateToString","grid","textSpan","timestampDiv","round","isLatest","lastModified","justifySelf","minWidth","setAttribute","runPassword","runCipher","isHint","label","div","btnTabVaultTabTextView","divTabVaultTabTextView","txtVault","VaultService","vaultComponent","divTabVault","btnTabVault","btnRefreshVault","btnClearVaultSettings","btnViewVaultSettings","onVaultLoaded","vault","populateSearchFunctions","e","components","subTabs","vaultObject","onRefreshVaultButtonClick","component","reloadVault","onClearVaultSettingsButtonClick","onViewVaultSettingsButtonClick","ErrorLogsService","errorLogsComponent","args","logErrorMessage","divErrorLogs","btnTabErrorLogs","btnClearErrorLogs","txtErrorLogs","onChanged","type","startVisible","setupPasswordGeneratorsDropdown","onError","onUnhandledRejection","errorEvent","reason","pathArray","vaultService","tabControl","getActiveComponent"],"sourceRoot":""}