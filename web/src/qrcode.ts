export interface QRCodeBits {
    width: number;
    height: number;
    bits: (boolean|number)[][];
}

export class QRCodeWriter {
    static CELL_WIDTH: number = 32;
    static CELL_HEIGHT: number = 32;

    static svgns = 'http://www.w3.org/2000/svg';

    static write(content: QRCodeBits, output: HTMLElement) {
        const offsetX: number = 0;
        const offsetY: number = 0;
        const width: number = content.width;
        const height: number = content.height;

        output.setAttribute('width', (width * QRCodeWriter.CELL_WIDTH).toString());
        output.setAttribute('height', (height * QRCodeWriter.CELL_HEIGHT).toString());

        for (let x = offsetX; x < width; x += 1) {
            for (let y = offsetY; y < height; y += 1) {
                const value = content.bits[y][x];

                const shape = document.createElementNS(QRCodeWriter.svgns, 'rect');
                // The +0.5 below are here to avoid sub-pixel glitches when zooming.
                shape.setAttributeNS(null, 'x', (x * QRCodeWriter.CELL_WIDTH + 0.5).toString());
                shape.setAttributeNS(null, 'y', (y * QRCodeWriter.CELL_HEIGHT + 0.5).toString());
                shape.setAttributeNS(null, 'width',  (QRCodeWriter.CELL_WIDTH + 0.5).toString());
                shape.setAttributeNS(null, 'height', (QRCodeWriter.CELL_HEIGHT + 0.5).toString());
                shape.setAttributeNS(null, 'fill', value ? 'white' : 'black');

                output.appendChild(shape);
            }
        }
    }
}

const QRCodeVersion: number = 9;

const MatrixX: Int8Array = new Int8Array([
    0x34, 0x33, 0x34, 0x33, 0x34, 0x33, 0x34, 0x33, 0x34, 0x33, 0x34, 0x33, 0x34, 0x33, 0x34, 0x33, 0x34, 0x33, 0x34, 0x33,
    0x34, 0x33, 0x34, 0x33, 0x34, 0x33, 0x34, 0x33, 0x34, 0x33, 0x34, 0x33, 0x34, 0x33, 0x34, 0x33, 0x34, 0x33, 0x34, 0x33,
    0x34, 0x33, 0x34, 0x33, 0x34, 0x33, 0x34, 0x33, 0x32, 0x31, 0x32, 0x31, 0x32, 0x31, 0x32, 0x31, 0x32, 0x31, 0x32, 0x31,
    0x32, 0x31, 0x32, 0x31, 0x32, 0x31, 0x32, 0x31, 0x32, 0x31, 0x32, 0x31, 0x32, 0x31, 0x32, 0x31, 0x32, 0x31, 0x32, 0x31,
    0x32, 0x31, 0x32, 0x31, 0x32, 0x31, 0x32, 0x31, 0x30, 0x2F, 0x30, 0x2F, 0x30, 0x2F, 0x30, 0x2F, 0x30, 0x2F, 0x30, 0x2F,
    0x30, 0x2F, 0x30, 0x2F, 0x30, 0x2F, 0x30, 0x2F, 0x30, 0x2F, 0x30, 0x2F, 0x30, 0x2F, 0x30, 0x2F, 0x30, 0x2F, 0x30, 0x2F,
    0x30, 0x2F, 0x30, 0x2F, 0x2E, 0x2D, 0x2E, 0x2D, 0x2E, 0x2D, 0x2E, 0x2D, 0x2E, 0x2D, 0x2E, 0x2D, 0x2E, 0x2D, 0x2E, 0x2D,
    0x2E, 0x2D, 0x2E, 0x2D, 0x2E, 0x2D, 0x2E, 0x2D, 0x2E, 0x2D, 0x2E, 0x2D, 0x2E, 0x2D, 0x2E, 0x2D, 0x2E, 0x2D, 0x2E, 0x2D,
    0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2C, 0x2B, 0x2C, 0x2B, 0x2C, 0x2B, 0x2C, 0x2B, 0x2C, 0x2B, 0x2C, 0x2B, 0x2C, 0x2B, 0x2B,
    0x2B, 0x2B, 0x2B, 0x2B, 0x2C, 0x2B, 0x2C, 0x2B, 0x2C, 0x2B, 0x2C, 0x2B, 0x2C, 0x2B, 0x2C, 0x2B, 0x2C, 0x2B, 0x2C, 0x2B,
    0x2A, 0x29, 0x2A, 0x29, 0x2A, 0x29, 0x2A, 0x29, 0x2A, 0x29, 0x2A, 0x29, 0x2A, 0x29, 0x2A, 0x29, 0x2A, 0x29, 0x2A, 0x29,
    0x2A, 0x29, 0x2A, 0x29, 0x2A, 0x29, 0x2A, 0x29, 0x2A, 0x29, 0x2A, 0x29, 0x2A, 0x29, 0x2A, 0x29, 0x2A, 0x29, 0x2A, 0x29,
    0x2A, 0x29, 0x2A, 0x29, 0x2A, 0x29, 0x2A, 0x29, 0x28, 0x27, 0x28, 0x27, 0x28, 0x27, 0x28, 0x27, 0x28, 0x27, 0x28, 0x27,
    0x28, 0x27, 0x28, 0x27, 0x28, 0x27, 0x28, 0x27, 0x28, 0x27, 0x28, 0x27, 0x28, 0x27, 0x28, 0x27, 0x28, 0x27, 0x28, 0x27,
    0x28, 0x27, 0x28, 0x27, 0x28, 0x27, 0x28, 0x27, 0x28, 0x27, 0x28, 0x27, 0x28, 0x27, 0x28, 0x27, 0x28, 0x27, 0x28, 0x27,
    0x26, 0x25, 0x26, 0x25, 0x26, 0x25, 0x26, 0x25, 0x26, 0x25, 0x26, 0x25, 0x26, 0x25, 0x26, 0x25, 0x26, 0x25, 0x26, 0x25,
    0x26, 0x25, 0x26, 0x25, 0x26, 0x25, 0x26, 0x25, 0x26, 0x25, 0x26, 0x25, 0x26, 0x25, 0x26, 0x25, 0x26, 0x25, 0x26, 0x25,
    0x26, 0x25, 0x26, 0x25, 0x26, 0x25, 0x26, 0x25, 0x26, 0x25, 0x26, 0x25, 0x24, 0x23, 0x24, 0x23, 0x24, 0x23, 0x24, 0x23,
    0x24, 0x23, 0x24, 0x23, 0x24, 0x23, 0x24, 0x23, 0x24, 0x23, 0x24, 0x23, 0x24, 0x23, 0x24, 0x23, 0x24, 0x23, 0x24, 0x23,
    0x24, 0x23, 0x24, 0x23, 0x24, 0x23, 0x24, 0x23, 0x24, 0x23, 0x24, 0x23, 0x24, 0x23, 0x24, 0x23, 0x24, 0x23, 0x24, 0x23,
    0x24, 0x23, 0x24, 0x23, 0x22, 0x21, 0x22, 0x21, 0x22, 0x21, 0x22, 0x21, 0x22, 0x21, 0x22, 0x21, 0x22, 0x21, 0x22, 0x21,
    0x22, 0x21, 0x22, 0x21, 0x22, 0x21, 0x22, 0x21, 0x22, 0x21, 0x22, 0x21, 0x22, 0x21, 0x22, 0x21, 0x22, 0x21, 0x22, 0x21,
    0x22, 0x21, 0x22, 0x21, 0x22, 0x21, 0x22, 0x21, 0x22, 0x21, 0x22, 0x21, 0x22, 0x21, 0x22, 0x21, 0x20, 0x1F, 0x20, 0x1F,
    0x20, 0x1F, 0x20, 0x1F, 0x20, 0x1F, 0x20, 0x1F, 0x20, 0x1F, 0x20, 0x1F, 0x20, 0x1F, 0x20, 0x1F, 0x20, 0x1F, 0x20, 0x1F,
    0x20, 0x1F, 0x20, 0x1F, 0x20, 0x1F, 0x20, 0x1F, 0x20, 0x1F, 0x20, 0x1F, 0x20, 0x1F, 0x20, 0x1F, 0x20, 0x1F, 0x20, 0x1F,
    0x20, 0x1F, 0x20, 0x1F, 0x20, 0x1F, 0x20, 0x1F, 0x1E, 0x1D, 0x1E, 0x1D, 0x1E, 0x1D, 0x1E, 0x1D, 0x1E, 0x1D, 0x1E, 0x1D,
    0x1E, 0x1D, 0x1E, 0x1D, 0x1E, 0x1D, 0x1E, 0x1D, 0x1E, 0x1D, 0x1E, 0x1D, 0x1E, 0x1D, 0x1E, 0x1D, 0x1E, 0x1D, 0x1E, 0x1D,
    0x1E, 0x1D, 0x1E, 0x1D, 0x1E, 0x1D, 0x1E, 0x1D, 0x1E, 0x1D, 0x1E, 0x1D, 0x1E, 0x1D, 0x1E, 0x1D, 0x1E, 0x1D, 0x1E, 0x1D,
    0x1C, 0x1B, 0x1C, 0x1B, 0x1C, 0x1B, 0x1C, 0x1B, 0x1C, 0x1B, 0x1C, 0x1B, 0x1C, 0x1B, 0x1C, 0x1B, 0x1C, 0x1B, 0x1C, 0x1B,
    0x1C, 0x1B, 0x1C, 0x1B, 0x1C, 0x1B, 0x1C, 0x1B, 0x1C, 0x1B, 0x1C, 0x1B, 0x1C, 0x1B, 0x1C, 0x1B, 0x1C, 0x1B, 0x1C, 0x1B,
    0x1A, 0x19, 0x1A, 0x19, 0x1A, 0x19, 0x1A, 0x19, 0x1A, 0x19, 0x1A, 0x19, 0x1A, 0x19, 0x1A, 0x19, 0x1A, 0x19, 0x1A, 0x19,
    0x1A, 0x19, 0x1A, 0x19, 0x1A, 0x19, 0x1A, 0x19, 0x1A, 0x19, 0x1A, 0x19, 0x1A, 0x19, 0x1A, 0x19, 0x18, 0x17, 0x18, 0x17,
    0x17, 0x18, 0x17, 0x18, 0x17, 0x18, 0x17, 0x18, 0x17, 0x18, 0x17, 0x18, 0x17, 0x18, 0x17, 0x18, 0x17, 0x17, 0x17, 0x17,
    0x18, 0x17, 0x18, 0x17, 0x18, 0x17, 0x18, 0x17, 0x18, 0x17, 0x18, 0x17, 0x18, 0x17, 0x17, 0x17, 0x17, 0x17, 0x18, 0x17,
    0x16, 0x15, 0x16, 0x15, 0x16, 0x15, 0x16, 0x15, 0x16, 0x15, 0x16, 0x15, 0x16, 0x15, 0x16, 0x15, 0x16, 0x15, 0x16, 0x15,
    0x16, 0x15, 0x16, 0x15, 0x16, 0x15, 0x16, 0x15, 0x16, 0x15, 0x16, 0x15, 0x16, 0x15, 0x16, 0x15, 0x16, 0x15, 0x16, 0x15,
    0x16, 0x15, 0x16, 0x15, 0x16, 0x15, 0x16, 0x15, 0x16, 0x15, 0x16, 0x15, 0x16, 0x15, 0x14, 0x13, 0x14, 0x13, 0x14, 0x13,
    0x14, 0x13, 0x14, 0x13, 0x14, 0x13, 0x14, 0x13, 0x14, 0x13, 0x14, 0x13, 0x14, 0x13, 0x14, 0x13, 0x14, 0x13, 0x14, 0x13,
    0x14, 0x13, 0x14, 0x13, 0x14, 0x13, 0x14, 0x13, 0x14, 0x13, 0x14, 0x13, 0x14, 0x13, 0x14, 0x13, 0x14, 0x13, 0x14, 0x13,
    0x14, 0x13, 0x14, 0x13, 0x12, 0x11, 0x12, 0x11, 0x12, 0x11, 0x12, 0x11, 0x12, 0x11, 0x12, 0x11, 0x12, 0x11, 0x12, 0x11,
    0x12, 0x11, 0x12, 0x11, 0x12, 0x11, 0x12, 0x11, 0x12, 0x11, 0x12, 0x11, 0x12, 0x11, 0x12, 0x11, 0x12, 0x11, 0x12, 0x11,
    0x12, 0x11, 0x12, 0x11, 0x12, 0x11, 0x12, 0x11, 0x12, 0x11, 0x12, 0x11, 0x12, 0x11, 0x12, 0x11, 0x12, 0x11, 0x10, 0x0F,
    0x10, 0x0F, 0x10, 0x0F, 0x10, 0x0F, 0x10, 0x0F, 0x10, 0x0F, 0x10, 0x0F, 0x10, 0x0F, 0x10, 0x0F, 0x10, 0x0F, 0x10, 0x0F,
    0x10, 0x0F, 0x10, 0x0F, 0x10, 0x0F, 0x10, 0x0F, 0x10, 0x0F, 0x10, 0x0F, 0x10, 0x0F, 0x10, 0x0F, 0x10, 0x0F, 0x10, 0x0F,
    0x10, 0x0F, 0x10, 0x0F, 0x10, 0x0F, 0x10, 0x0F, 0x0E, 0x0D, 0x0E, 0x0D, 0x0E, 0x0D, 0x0E, 0x0D, 0x0E, 0x0D, 0x0E, 0x0D,
    0x0E, 0x0D, 0x0E, 0x0D, 0x0E, 0x0D, 0x0E, 0x0D, 0x0E, 0x0D, 0x0E, 0x0D, 0x0E, 0x0D, 0x0E, 0x0D, 0x0E, 0x0D, 0x0E, 0x0D,
    0x0E, 0x0D, 0x0E, 0x0D, 0x0E, 0x0D, 0x0E, 0x0D, 0x34, 0x33, 0x34, 0x33, 0x34, 0x33, 0x34, 0x33, 0x34, 0x33, 0x34, 0x33,
    0x34, 0x33, 0x34, 0x33, 0x34, 0x33, 0x34, 0x33, 0x34, 0x33, 0x34, 0x33, 0x34, 0x33, 0x34, 0x33, 0x34, 0x33, 0x34, 0x33,
    0x34, 0x33, 0x34, 0x33, 0x34, 0x33, 0x34, 0x33, 0x32, 0x31, 0x32, 0x31, 0x32, 0x31, 0x32, 0x31, 0x32, 0x31, 0x32, 0x31,
    0x32, 0x31, 0x32, 0x31, 0x32, 0x31, 0x32, 0x31, 0x32, 0x31, 0x32, 0x31, 0x32, 0x31, 0x32, 0x31, 0x32, 0x31, 0x32, 0x31,
    0x32, 0x31, 0x32, 0x31, 0x32, 0x31, 0x32, 0x31, 0x32, 0x31, 0x32, 0x31, 0x32, 0x31, 0x32, 0x31, 0x30, 0x2F, 0x30, 0x2F,
    0x30, 0x2F, 0x30, 0x2F, 0x30, 0x2F, 0x30, 0x2F, 0x30, 0x2F, 0x30, 0x2F, 0x30, 0x2F, 0x30, 0x2F, 0x30, 0x2F, 0x30, 0x2F,
    0x30, 0x2F, 0x30, 0x2F, 0x30, 0x2F, 0x30, 0x2F, 0x2E, 0x2D, 0x2E, 0x2D, 0x2E, 0x2D, 0x2E, 0x2D, 0x2E, 0x2D, 0x2E, 0x2D,
    0x2E, 0x2D, 0x2E, 0x2D, 0x2E, 0x2D, 0x2E, 0x2D, 0x2E, 0x2D, 0x2E, 0x2D, 0x2E, 0x2D, 0x2E, 0x2D, 0x2E, 0x2D, 0x2E, 0x2D,
    0x2C, 0x2B, 0x2C, 0x2B, 0x2C, 0x2B, 0x2C, 0x2B, 0x2B, 0x2C, 0x2B, 0x2C, 0x2B, 0x2C, 0x2B, 0x2C, 0x2B, 0x2C, 0x2B, 0x2C,
    0x2B, 0x2C, 0x2B, 0x2C, 0x2C, 0x2B, 0x2C, 0x2B, 0x2C, 0x2B, 0x2C, 0x2B, 0x2C, 0x2B, 0x2C, 0x2B, 0x2C, 0x2B, 0x2C, 0x2B,
    0x2C, 0x2B, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x2A, 0x29, 0x2A, 0x29, 0x2A, 0x29, 0x2A, 0x29, 0x2A, 0x29, 0x2A, 0x29,
    0x2A, 0x29, 0x2A, 0x29, 0x2A, 0x29, 0x2A, 0x29, 0x2A, 0x29, 0x2A, 0x29, 0x2A, 0x29, 0x2A, 0x29, 0x2A, 0x29, 0x2A, 0x29,
    0x2A, 0x29, 0x2A, 0x29, 0x2A, 0x29, 0x2A, 0x29, 0x2A, 0x29, 0x2A, 0x29, 0x28, 0x27, 0x28, 0x27, 0x28, 0x27, 0x28, 0x27,
    0x28, 0x27, 0x28, 0x27, 0x28, 0x27, 0x28, 0x27, 0x28, 0x27, 0x28, 0x27, 0x28, 0x27, 0x28, 0x27, 0x28, 0x27, 0x28, 0x27,
    0x28, 0x27, 0x28, 0x27, 0x28, 0x27, 0x28, 0x27, 0x28, 0x27, 0x28, 0x27, 0x28, 0x27, 0x28, 0x27, 0x28, 0x27, 0x28, 0x27,
    0x28, 0x27, 0x28, 0x27, 0x26, 0x25, 0x26, 0x25, 0x26, 0x25, 0x26, 0x25, 0x26, 0x25, 0x26, 0x25, 0x26, 0x25, 0x26, 0x25,
    0x26, 0x25, 0x26, 0x25, 0x26, 0x25, 0x26, 0x25, 0x26, 0x25, 0x26, 0x25, 0x26, 0x25, 0x26, 0x25, 0x26, 0x25, 0x26, 0x25,
    0x26, 0x25, 0x26, 0x25, 0x26, 0x25, 0x26, 0x25, 0x26, 0x25, 0x26, 0x25, 0x26, 0x25, 0x26, 0x25, 0x24, 0x23, 0x24, 0x23,
    0x24, 0x23, 0x24, 0x23, 0x24, 0x23, 0x24, 0x23, 0x24, 0x23, 0x24, 0x23, 0x24, 0x23, 0x24, 0x23, 0x24, 0x23, 0x24, 0x23,
    0x24, 0x23, 0x24, 0x23, 0x24, 0x23, 0x24, 0x23, 0x24, 0x23, 0x24, 0x23, 0x24, 0x23, 0x24, 0x23, 0x24, 0x23, 0x24, 0x23,
    0x24, 0x23, 0x24, 0x23, 0x24, 0x23, 0x24, 0x23, 0x22, 0x21, 0x22, 0x21, 0x22, 0x21, 0x22, 0x21, 0x22, 0x21, 0x22, 0x21,
    0x22, 0x21, 0x22, 0x21, 0x22, 0x21, 0x22, 0x21, 0x22, 0x21, 0x22, 0x21, 0x22, 0x21, 0x22, 0x21, 0x22, 0x21, 0x22, 0x21,
    0x22, 0x21, 0x22, 0x21, 0x22, 0x21, 0x22, 0x21, 0x22, 0x21, 0x22, 0x21, 0x22, 0x21, 0x22, 0x21, 0x22, 0x21, 0x22, 0x21,
    0x20, 0x1F, 0x20, 0x1F, 0x20, 0x1F, 0x20, 0x1F, 0x20, 0x1F, 0x20, 0x1F, 0x20, 0x1F, 0x20, 0x1F, 0x20, 0x1F, 0x20, 0x1F,
    0x20, 0x1F, 0x20, 0x1F, 0x20, 0x1F, 0x20, 0x1F, 0x20, 0x1F, 0x20, 0x1F, 0x20, 0x1F, 0x20, 0x1F, 0x20, 0x1F, 0x20, 0x1F,
    0x20, 0x1F, 0x20, 0x1F, 0x20, 0x1F, 0x20, 0x1F, 0x20, 0x1F, 0x20, 0x1F, 0x1E, 0x1D, 0x1E, 0x1D, 0x1E, 0x1D, 0x1E, 0x1D,
    0x1E, 0x1D, 0x1E, 0x1D, 0x1E, 0x1D, 0x1E, 0x1D, 0x1E, 0x1D, 0x1E, 0x1D, 0x1E, 0x1D, 0x1E, 0x1D, 0x1E, 0x1D, 0x1E, 0x1D,
    0x1E, 0x1D, 0x1E, 0x1D, 0x1E, 0x1D, 0x1E, 0x1D, 0x1E, 0x1D, 0x1E, 0x1D, 0x1E, 0x1D, 0x1E, 0x1D, 0x1E, 0x1D, 0x1E, 0x1D,
    0x1E, 0x1D, 0x1E, 0x1D, 0x1C, 0x1B, 0x1C, 0x1B, 0x1C, 0x1B, 0x1C, 0x1B, 0x1C, 0x1B, 0x1C, 0x1B, 0x1C, 0x1B, 0x1C, 0x1B,
    0x1C, 0x1B, 0x1C, 0x1B, 0x1C, 0x1B, 0x1C, 0x1B, 0x1C, 0x1B, 0x1C, 0x1B, 0x1C, 0x1B, 0x1C, 0x1B, 0x1C, 0x1B, 0x1C, 0x1B,
    0x1A, 0x19, 0x1A, 0x19, 0x1A, 0x19, 0x1A, 0x19, 0x1A, 0x19, 0x1A, 0x19, 0x1A, 0x19, 0x1A, 0x19, 0x1A, 0x19, 0x1A, 0x19,
    0x1A, 0x19, 0x1A, 0x19, 0x1A, 0x19, 0x1A, 0x19, 0x1A, 0x19, 0x1A, 0x19, 0x1A, 0x19, 0x1A, 0x19, 0x1A, 0x19, 0x1A, 0x19,
    0x18, 0x17, 0x18, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x18, 0x17, 0x18, 0x17, 0x18, 0x17, 0x18, 0x17, 0x18, 0x17, 0x18,
    0x17, 0x18, 0x17, 0x17, 0x18, 0x17, 0x18, 0x17, 0x18, 0x17, 0x18, 0x17, 0x18, 0x17, 0x18, 0x17, 0x18, 0x17, 0x18, 0x17,
    0x18, 0x17, 0x18, 0x17, 0x18, 0x17, 0x16, 0x15, 0x16, 0x15, 0x16, 0x15, 0x16, 0x15, 0x16, 0x15, 0x16, 0x15, 0x16, 0x15,
    0x16, 0x15, 0x16, 0x15, 0x16, 0x15, 0x16, 0x15, 0x16, 0x15, 0x16, 0x15, 0x16, 0x15, 0x16, 0x15, 0x16, 0x15, 0x16, 0x15,
    0x16, 0x15, 0x16, 0x15, 0x16, 0x15, 0x16, 0x15, 0x16, 0x15, 0x16, 0x15, 0x16, 0x15, 0x16, 0x15, 0x14, 0x13, 0x14, 0x13,
    0x14, 0x13, 0x14, 0x13, 0x14, 0x13, 0x14, 0x13, 0x14, 0x13, 0x14, 0x13, 0x14, 0x13, 0x14, 0x13, 0x14, 0x13, 0x14, 0x13,
    0x14, 0x13, 0x14, 0x13, 0x14, 0x13, 0x14, 0x13, 0x14, 0x13, 0x14, 0x13, 0x14, 0x13, 0x14, 0x13, 0x14, 0x13, 0x14, 0x13,
    0x14, 0x13, 0x14, 0x13, 0x14, 0x13, 0x14, 0x13, 0x14, 0x13, 0x12, 0x11, 0x12, 0x11, 0x12, 0x11, 0x12, 0x11, 0x12, 0x11,
    0x12, 0x11, 0x12, 0x11, 0x12, 0x11, 0x12, 0x11, 0x12, 0x11, 0x12, 0x11, 0x12, 0x11, 0x12, 0x11, 0x12, 0x11, 0x12, 0x11,
    0x12, 0x11, 0x12, 0x11, 0x12, 0x11, 0x12, 0x11, 0x12, 0x11, 0x12, 0x11, 0x12, 0x11, 0x12, 0x11, 0x12, 0x11, 0x12, 0x11,
    0x10, 0x0F, 0x10, 0x0F, 0x10, 0x0F, 0x10, 0x0F, 0x10, 0x0F, 0x10, 0x0F, 0x10, 0x0F, 0x10, 0x0F, 0x10, 0x0F, 0x10, 0x0F,
    0x10, 0x0F, 0x10, 0x0F, 0x10, 0x0F, 0x10, 0x0F, 0x10, 0x0F, 0x10, 0x0F, 0x10, 0x0F, 0x10, 0x0F, 0x10, 0x0F, 0x10, 0x0F,
    0x10, 0x0F, 0x10, 0x0F, 0x10, 0x0F, 0x10, 0x0F, 0x10, 0x0F, 0x10, 0x0F, 0x10, 0x0F, 0x0E, 0x0D, 0x0E, 0x0D, 0x0E, 0x0D,
    0x0E, 0x0D, 0x0E, 0x0D, 0x0E, 0x0D, 0x0E, 0x0D, 0x0E, 0x0D, 0x0E, 0x0D, 0x0E, 0x0D, 0x0E, 0x0D, 0x0E, 0x0D, 0x0E, 0x0D,
    0x0E, 0x0D, 0x0E, 0x0D, 0x0E, 0x0D, 0x0E, 0x0D, 0x0E, 0x0D, 0x0E, 0x0D, 0x0E, 0x0D, 0x0E, 0x0D, 0x0E, 0x0D, 0x0E, 0x0D,
    0x0E, 0x0D, 0x0E, 0x0D, 0x0E, 0x0D, 0x0E, 0x0D, 0x0E, 0x0D, 0x0C, 0x0B, 0x0C, 0x0B, 0x0C, 0x0B, 0x0C, 0x0B, 0x0C, 0x0B,
    0x0C, 0x0B, 0x0C, 0x0B, 0x0C, 0x0B, 0x0C, 0x0B, 0x0C, 0x0B, 0x0C, 0x0B, 0x0C, 0x0B, 0x0C, 0x0B, 0x0C, 0x0B, 0x0C, 0x0B,
    0x0C, 0x0B, 0x0C, 0x0B, 0x0C, 0x0B, 0x0C, 0x0B, 0x0C, 0x0B, 0x0C, 0x0B, 0x0C, 0x0B, 0x0C, 0x0B, 0x0C, 0x0B, 0x0C, 0x0B,
    0x0A, 0x09, 0x0A, 0x09, 0x0A, 0x09, 0x0A, 0x09, 0x0A, 0x09, 0x0A, 0x09, 0x0A, 0x09, 0x0A, 0x09, 0x0A, 0x09, 0x0A, 0x09,
    0x0A, 0x09, 0x0A, 0x09, 0x0A, 0x09, 0x0A, 0x09, 0x0A, 0x09, 0x0A, 0x09, 0x0A, 0x09, 0x0A, 0x09, 0x0A, 0x09, 0x0A, 0x09,
    0x0A, 0x09, 0x0A, 0x09, 0x0A, 0x09, 0x0A, 0x09, 0x0A, 0x09, 0x0A, 0x09, 0x0A, 0x09, 0x08, 0x07, 0x08, 0x07, 0x08, 0x07,
    0x08, 0x07, 0x08, 0x07, 0x08, 0x07, 0x08, 0x07, 0x08, 0x07, 0x08, 0x07, 0x08, 0x07, 0x08, 0x07, 0x08, 0x07, 0x08, 0x07,
    0x08, 0x07, 0x08, 0x07, 0x05, 0x04, 0x05, 0x04, 0x05, 0x04, 0x05, 0x04, 0x05, 0x04, 0x05, 0x04, 0x05, 0x04, 0x05, 0x04,
    0x05, 0x04, 0x05, 0x04, 0x05, 0x04, 0x05, 0x04, 0x05, 0x04, 0x05, 0x04, 0x03, 0x02, 0x03, 0x02, 0x03, 0x02, 0x03, 0x02,
    0x03, 0x02, 0x03, 0x02, 0x03, 0x02, 0x03, 0x02, 0x03, 0x02, 0x03, 0x02, 0x03, 0x02, 0x03, 0x02, 0x03, 0x02, 0x03, 0x02,
    0x03, 0x02, 0x03, 0x02, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00,
    0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x0E, 0x0D, 0x0E, 0x0D,
    0x0E, 0x0D, 0x0E, 0x0D, 0x0C, 0x0B, 0x0C, 0x0B, 0x0C, 0x0B, 0x0C, 0x0B, 0x0C, 0x0B, 0x0C, 0x0B, 0x0C, 0x0B, 0x0C, 0x0B,
    0x0C, 0x0B, 0x0C, 0x0B, 0x0C, 0x0B, 0x0C, 0x0B, 0x0C, 0x0B, 0x0C, 0x0B, 0x0C, 0x0B, 0x0C, 0x0B, 0x0C, 0x0B, 0x0C, 0x0B,
    0x0C, 0x0B, 0x0C, 0x0B, 0x0C, 0x0B, 0x0C, 0x0B, 0x0C, 0x0B, 0x0C, 0x0B, 0x0C, 0x0B, 0x0C, 0x0B, 0x0C, 0x0B, 0x0A, 0x09,
    0x0A, 0x09, 0x0A, 0x09, 0x0A, 0x09, 0x0A, 0x09, 0x0A, 0x09, 0x0A, 0x09, 0x0A, 0x09, 0x0A, 0x09, 0x0A, 0x09, 0x0A, 0x09,
    0x0A, 0x09, 0x0A, 0x09, 0x0A, 0x09, 0x0A, 0x09, 0x0A, 0x09, 0x0A, 0x09, 0x0A, 0x09, 0x0A, 0x09, 0x0A, 0x09, 0x0A, 0x09,
    0x0A, 0x09, 0x0A, 0x09, 0x0A, 0x09, 0x0A, 0x09, 0x08, 0x07, 0x08, 0x07, 0x08, 0x07, 0x08, 0x07, 0x08, 0x07, 0x08, 0x07,
    0x08, 0x07, 0x08, 0x07, 0x08, 0x07, 0x08, 0x07, 0x08, 0x07, 0x08, 0x07, 0x08, 0x07, 0x08, 0x07, 0x08, 0x07, 0x08, 0x07,
    0x05, 0x04, 0x05, 0x04, 0x05, 0x04, 0x05, 0x04, 0x05, 0x04, 0x05, 0x04, 0x05, 0x04, 0x05, 0x04, 0x05, 0x04, 0x05, 0x04,
    0x05, 0x04, 0x05, 0x04, 0x05, 0x04, 0x05, 0x04, 0x03, 0x02, 0x03, 0x02, 0x03, 0x02, 0x03, 0x02, 0x03, 0x02, 0x03, 0x02,
    0x03, 0x02, 0x03, 0x02, 0x03, 0x02, 0x03, 0x02, 0x03, 0x02, 0x03, 0x02, 0x03, 0x02, 0x03, 0x02, 0x03, 0x02, 0x03, 0x02,
    0x03, 0x02, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00,
    0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00
]);

const MatrixY: Int8Array = new Int8Array([
    0x34, 0x34, 0x33, 0x33, 0x32, 0x32, 0x31, 0x31, 0x2C, 0x2C, 0x2B, 0x2B, 0x2A, 0x2A, 0x29, 0x29, 0x24, 0x24, 0x23, 0x23,
    0x22, 0x22, 0x21, 0x21, 0x1C, 0x1C, 0x1B, 0x1B, 0x1A, 0x1A, 0x19, 0x19, 0x14, 0x14, 0x13, 0x13, 0x12, 0x12, 0x11, 0x11,
    0x0C, 0x0C, 0x0B, 0x0B, 0x0A, 0x0A, 0x09, 0x09, 0x0D, 0x0D, 0x0E, 0x0E, 0x0F, 0x0F, 0x10, 0x10, 0x15, 0x15, 0x16, 0x16,
    0x17, 0x17, 0x18, 0x18, 0x1D, 0x1D, 0x1E, 0x1E, 0x1F, 0x1F, 0x20, 0x20, 0x25, 0x25, 0x26, 0x26, 0x27, 0x27, 0x28, 0x28,
    0x2D, 0x2D, 0x2E, 0x2E, 0x2F, 0x2F, 0x30, 0x30, 0x34, 0x34, 0x33, 0x33, 0x32, 0x32, 0x31, 0x31, 0x27, 0x27, 0x26, 0x26,
    0x25, 0x25, 0x24, 0x24, 0x1F, 0x1F, 0x1E, 0x1E, 0x1D, 0x1D, 0x17, 0x17, 0x12, 0x12, 0x11, 0x11, 0x10, 0x10, 0x0F, 0x0F,
    0x0A, 0x0A, 0x09, 0x09, 0x09, 0x09, 0x0A, 0x0A, 0x0F, 0x0F, 0x10, 0x10, 0x11, 0x11, 0x12, 0x12, 0x17, 0x17, 0x1D, 0x1D,
    0x1E, 0x1E, 0x1F, 0x1F, 0x24, 0x24, 0x25, 0x25, 0x26, 0x26, 0x27, 0x27, 0x31, 0x31, 0x32, 0x32, 0x33, 0x33, 0x34, 0x34,
    0x30, 0x2F, 0x2E, 0x2D, 0x2C, 0x2B, 0x2B, 0x2A, 0x26, 0x25, 0x25, 0x24, 0x24, 0x23, 0x23, 0x22, 0x1E, 0x1D, 0x1D, 0x1C,
    0x1B, 0x1A, 0x19, 0x18, 0x13, 0x13, 0x12, 0x12, 0x11, 0x11, 0x10, 0x10, 0x0B, 0x0B, 0x0A, 0x0A, 0x09, 0x09, 0x08, 0x08,
    0x07, 0x07, 0x08, 0x08, 0x09, 0x09, 0x0A, 0x0A, 0x0F, 0x0F, 0x10, 0x10, 0x11, 0x11, 0x12, 0x12, 0x17, 0x17, 0x18, 0x18,
    0x19, 0x19, 0x1A, 0x1A, 0x1F, 0x1F, 0x20, 0x20, 0x21, 0x21, 0x22, 0x22, 0x27, 0x27, 0x28, 0x28, 0x29, 0x29, 0x2A, 0x2A,
    0x2F, 0x2F, 0x30, 0x30, 0x31, 0x31, 0x32, 0x32, 0x32, 0x32, 0x31, 0x31, 0x30, 0x30, 0x2F, 0x2F, 0x2A, 0x2A, 0x29, 0x29,
    0x28, 0x28, 0x27, 0x27, 0x22, 0x22, 0x21, 0x21, 0x20, 0x20, 0x1F, 0x1F, 0x1A, 0x1A, 0x19, 0x19, 0x18, 0x18, 0x17, 0x17,
    0x12, 0x12, 0x11, 0x11, 0x10, 0x10, 0x0F, 0x0F, 0x0A, 0x0A, 0x09, 0x09, 0x08, 0x08, 0x07, 0x07, 0x01, 0x01, 0x00, 0x00,
    0x00, 0x00, 0x01, 0x01, 0x07, 0x07, 0x08, 0x08, 0x09, 0x09, 0x0A, 0x0A, 0x0F, 0x0F, 0x10, 0x10, 0x11, 0x11, 0x12, 0x12,
    0x17, 0x17, 0x18, 0x18, 0x19, 0x19, 0x1A, 0x1A, 0x1F, 0x1F, 0x20, 0x20, 0x21, 0x21, 0x22, 0x22, 0x27, 0x27, 0x28, 0x28,
    0x29, 0x29, 0x2A, 0x2A, 0x2F, 0x2F, 0x30, 0x30, 0x31, 0x31, 0x32, 0x32, 0x32, 0x32, 0x31, 0x31, 0x30, 0x30, 0x2F, 0x2F,
    0x2A, 0x2A, 0x29, 0x29, 0x28, 0x28, 0x27, 0x27, 0x22, 0x22, 0x21, 0x21, 0x20, 0x20, 0x1F, 0x1F, 0x1A, 0x1A, 0x19, 0x19,
    0x18, 0x18, 0x17, 0x17, 0x12, 0x12, 0x11, 0x11, 0x10, 0x10, 0x0F, 0x0F, 0x0A, 0x0A, 0x09, 0x09, 0x08, 0x08, 0x07, 0x07,
    0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x07, 0x07, 0x08, 0x08, 0x09, 0x09, 0x0A, 0x0A, 0x0F, 0x0F, 0x10, 0x10,
    0x11, 0x11, 0x12, 0x12, 0x17, 0x17, 0x18, 0x18, 0x19, 0x19, 0x1A, 0x1A, 0x1F, 0x1F, 0x20, 0x20, 0x21, 0x21, 0x22, 0x22,
    0x27, 0x27, 0x28, 0x28, 0x29, 0x29, 0x2A, 0x2A, 0x2F, 0x2F, 0x30, 0x30, 0x31, 0x31, 0x32, 0x32, 0x32, 0x32, 0x31, 0x31,
    0x30, 0x30, 0x2F, 0x2F, 0x2A, 0x2A, 0x29, 0x29, 0x28, 0x28, 0x27, 0x27, 0x22, 0x22, 0x21, 0x21, 0x20, 0x20, 0x1F, 0x1F,
    0x1A, 0x1A, 0x19, 0x19, 0x18, 0x18, 0x17, 0x17, 0x12, 0x12, 0x11, 0x11, 0x10, 0x10, 0x0F, 0x0F, 0x0A, 0x0A, 0x09, 0x09,
    0x08, 0x08, 0x07, 0x07, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x07, 0x07, 0x08, 0x08, 0x09, 0x09, 0x0A, 0x0A,
    0x0F, 0x0F, 0x10, 0x10, 0x11, 0x11, 0x12, 0x12, 0x17, 0x17, 0x18, 0x18, 0x19, 0x19, 0x1A, 0x1A, 0x1F, 0x1F, 0x20, 0x20,
    0x21, 0x21, 0x22, 0x22, 0x27, 0x27, 0x28, 0x28, 0x29, 0x29, 0x2A, 0x2A, 0x2F, 0x2F, 0x30, 0x30, 0x31, 0x31, 0x32, 0x32,
    0x32, 0x32, 0x31, 0x31, 0x2B, 0x2B, 0x2A, 0x2A, 0x25, 0x25, 0x24, 0x24, 0x23, 0x23, 0x22, 0x22, 0x1D, 0x1D, 0x17, 0x17,
    0x16, 0x16, 0x15, 0x15, 0x10, 0x10, 0x0F, 0x0F, 0x0E, 0x0E, 0x0D, 0x0D, 0x03, 0x03, 0x02, 0x02, 0x01, 0x01, 0x00, 0x00,
    0x09, 0x09, 0x0A, 0x0A, 0x0B, 0x0B, 0x0C, 0x0C, 0x11, 0x11, 0x12, 0x12, 0x13, 0x13, 0x14, 0x14, 0x1E, 0x1E, 0x1F, 0x1F,
    0x20, 0x20, 0x21, 0x21, 0x26, 0x26, 0x27, 0x27, 0x28, 0x28, 0x29, 0x29, 0x33, 0x33, 0x34, 0x34, 0x34, 0x34, 0x33, 0x33,
    0x2C, 0x2B, 0x2B, 0x2A, 0x2A, 0x29, 0x29, 0x28, 0x24, 0x23, 0x23, 0x22, 0x22, 0x21, 0x21, 0x20, 0x1B, 0x1A, 0x19, 0x18,
    0x17, 0x17, 0x16, 0x16, 0x11, 0x11, 0x10, 0x10, 0x0F, 0x0F, 0x0E, 0x0E, 0x09, 0x09, 0x08, 0x07, 0x05, 0x04, 0x03, 0x03,
    0x01, 0x01, 0x02, 0x02, 0x03, 0x03, 0x04, 0x04, 0x0A, 0x0A, 0x0B, 0x0B, 0x0C, 0x0C, 0x0D, 0x0D, 0x12, 0x12, 0x13, 0x13,
    0x14, 0x14, 0x15, 0x15, 0x1A, 0x1A, 0x1B, 0x1B, 0x1C, 0x1C, 0x1D, 0x1D, 0x22, 0x22, 0x23, 0x23, 0x24, 0x24, 0x25, 0x25,
    0x2A, 0x2A, 0x2B, 0x2B, 0x2C, 0x2C, 0x2D, 0x2D, 0x32, 0x32, 0x33, 0x33, 0x34, 0x34, 0x34, 0x34, 0x2F, 0x2F, 0x2E, 0x2E,
    0x2D, 0x2D, 0x2C, 0x2C, 0x27, 0x27, 0x26, 0x26, 0x25, 0x25, 0x24, 0x24, 0x1F, 0x1F, 0x1E, 0x1E, 0x1D, 0x1D, 0x1C, 0x1C,
    0x17, 0x17, 0x16, 0x16, 0x15, 0x15, 0x14, 0x14, 0x0F, 0x0F, 0x0E, 0x0E, 0x0D, 0x0D, 0x0C, 0x0C, 0x07, 0x07, 0x05, 0x05,
    0x04, 0x04, 0x03, 0x03, 0x01, 0x01, 0x02, 0x02, 0x03, 0x03, 0x04, 0x04, 0x0A, 0x0A, 0x0B, 0x0B, 0x0C, 0x0C, 0x0D, 0x0D,
    0x12, 0x12, 0x13, 0x13, 0x14, 0x14, 0x15, 0x15, 0x1A, 0x1A, 0x1B, 0x1B, 0x1C, 0x1C, 0x1D, 0x1D, 0x22, 0x22, 0x23, 0x23,
    0x24, 0x24, 0x25, 0x25, 0x2A, 0x2A, 0x2B, 0x2B, 0x2C, 0x2C, 0x2D, 0x2D, 0x32, 0x32, 0x33, 0x33, 0x34, 0x34, 0x34, 0x34,
    0x2F, 0x2F, 0x2E, 0x2E, 0x2D, 0x2D, 0x2C, 0x2C, 0x27, 0x27, 0x26, 0x26, 0x25, 0x25, 0x24, 0x24, 0x1F, 0x1F, 0x1E, 0x1E,
    0x1D, 0x1D, 0x1C, 0x1C, 0x17, 0x17, 0x16, 0x16, 0x15, 0x15, 0x14, 0x14, 0x0F, 0x0F, 0x0E, 0x0E, 0x0D, 0x0D, 0x0C, 0x0C,
    0x07, 0x07, 0x05, 0x05, 0x04, 0x04, 0x03, 0x03, 0x01, 0x01, 0x02, 0x02, 0x03, 0x03, 0x04, 0x04, 0x0A, 0x0A, 0x0B, 0x0B,
    0x0C, 0x0C, 0x0D, 0x0D, 0x12, 0x12, 0x13, 0x13, 0x14, 0x14, 0x15, 0x15, 0x1A, 0x1A, 0x1B, 0x1B, 0x1C, 0x1C, 0x1D, 0x1D,
    0x22, 0x22, 0x23, 0x23, 0x24, 0x24, 0x25, 0x25, 0x30, 0x30, 0x2F, 0x2F, 0x2E, 0x2E, 0x2D, 0x2D, 0x28, 0x28, 0x27, 0x27,
    0x26, 0x26, 0x25, 0x25, 0x20, 0x20, 0x1F, 0x1F, 0x1E, 0x1E, 0x1D, 0x1D, 0x18, 0x18, 0x17, 0x17, 0x16, 0x16, 0x15, 0x15,
    0x10, 0x10, 0x0F, 0x0F, 0x0E, 0x0E, 0x0D, 0x0D, 0x09, 0x09, 0x0A, 0x0A, 0x0B, 0x0B, 0x0C, 0x0C, 0x11, 0x11, 0x12, 0x12,
    0x13, 0x13, 0x14, 0x14, 0x19, 0x19, 0x1A, 0x1A, 0x1B, 0x1B, 0x1C, 0x1C, 0x21, 0x21, 0x22, 0x22, 0x23, 0x23, 0x24, 0x24,
    0x29, 0x29, 0x2A, 0x2A, 0x2B, 0x2B, 0x2C, 0x2C, 0x31, 0x31, 0x32, 0x32, 0x33, 0x33, 0x34, 0x34, 0x2B, 0x2B, 0x2A, 0x2A,
    0x29, 0x29, 0x28, 0x28, 0x23, 0x23, 0x22, 0x22, 0x21, 0x21, 0x20, 0x20, 0x16, 0x16, 0x15, 0x15, 0x14, 0x14, 0x13, 0x13,
    0x0E, 0x0E, 0x0D, 0x0D, 0x0C, 0x0C, 0x0B, 0x0B, 0x0B, 0x0B, 0x0C, 0x0C, 0x0D, 0x0D, 0x0E, 0x0E, 0x13, 0x13, 0x14, 0x14,
    0x15, 0x15, 0x16, 0x16, 0x20, 0x20, 0x21, 0x21, 0x22, 0x22, 0x23, 0x23, 0x28, 0x28, 0x29, 0x29, 0x2A, 0x2A, 0x2B, 0x2B,
    0x34, 0x34, 0x33, 0x33, 0x32, 0x32, 0x31, 0x31, 0x2A, 0x29, 0x29, 0x28, 0x28, 0x27, 0x27, 0x26, 0x22, 0x21, 0x21, 0x20,
    0x20, 0x1F, 0x1F, 0x1E, 0x17, 0x17, 0x16, 0x16, 0x15, 0x15, 0x14, 0x14, 0x0F, 0x0F, 0x0E, 0x0E, 0x0D, 0x0D, 0x0C, 0x0C,
    0x07, 0x07, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x0B, 0x0B, 0x0C, 0x0C, 0x0D, 0x0D, 0x0E, 0x0E, 0x13, 0x13, 0x14, 0x14,
    0x15, 0x15, 0x16, 0x16, 0x1B, 0x1B, 0x1C, 0x1C, 0x1D, 0x1D, 0x1E, 0x1E, 0x23, 0x23, 0x24, 0x24, 0x25, 0x25, 0x26, 0x26,
    0x2B, 0x2B, 0x2C, 0x2C, 0x2D, 0x2D, 0x2E, 0x2E, 0x33, 0x33, 0x34, 0x34, 0x34, 0x34, 0x33, 0x33, 0x2E, 0x2E, 0x2D, 0x2D,
    0x2C, 0x2C, 0x2B, 0x2B, 0x26, 0x26, 0x25, 0x25, 0x24, 0x24, 0x23, 0x23, 0x1E, 0x1E, 0x1D, 0x1D, 0x1C, 0x1C, 0x1B, 0x1B,
    0x16, 0x16, 0x15, 0x15, 0x14, 0x14, 0x13, 0x13, 0x0E, 0x0E, 0x0D, 0x0D, 0x0C, 0x0C, 0x0B, 0x0B, 0x05, 0x05, 0x04, 0x04,
    0x03, 0x03, 0x02, 0x02, 0x02, 0x02, 0x03, 0x03, 0x04, 0x04, 0x05, 0x05, 0x0B, 0x0B, 0x0C, 0x0C, 0x0D, 0x0D, 0x0E, 0x0E,
    0x13, 0x13, 0x14, 0x14, 0x15, 0x15, 0x16, 0x16, 0x1B, 0x1B, 0x1C, 0x1C, 0x1D, 0x1D, 0x1E, 0x1E, 0x23, 0x23, 0x24, 0x24,
    0x25, 0x25, 0x26, 0x26, 0x2B, 0x2B, 0x2C, 0x2C, 0x2D, 0x2D, 0x2E, 0x2E, 0x33, 0x33, 0x34, 0x34, 0x34, 0x34, 0x33, 0x33,
    0x2E, 0x2E, 0x2D, 0x2D, 0x2C, 0x2C, 0x2B, 0x2B, 0x26, 0x26, 0x25, 0x25, 0x24, 0x24, 0x23, 0x23, 0x1E, 0x1E, 0x1D, 0x1D,
    0x1C, 0x1C, 0x1B, 0x1B, 0x16, 0x16, 0x15, 0x15, 0x14, 0x14, 0x13, 0x13, 0x0E, 0x0E, 0x0D, 0x0D, 0x0C, 0x0C, 0x0B, 0x0B,
    0x05, 0x05, 0x04, 0x04, 0x03, 0x03, 0x02, 0x02, 0x02, 0x02, 0x03, 0x03, 0x04, 0x04, 0x05, 0x05, 0x0B, 0x0B, 0x0C, 0x0C,
    0x0D, 0x0D, 0x0E, 0x0E, 0x13, 0x13, 0x14, 0x14, 0x15, 0x15, 0x16, 0x16, 0x1B, 0x1B, 0x1C, 0x1C, 0x1D, 0x1D, 0x1E, 0x1E,
    0x23, 0x23, 0x24, 0x24, 0x25, 0x25, 0x26, 0x26, 0x2B, 0x2B, 0x2C, 0x2C, 0x2D, 0x2D, 0x2E, 0x2E, 0x33, 0x33, 0x34, 0x34,
    0x34, 0x34, 0x33, 0x33, 0x2E, 0x2E, 0x2D, 0x2D, 0x2C, 0x2C, 0x2B, 0x2B, 0x26, 0x26, 0x25, 0x25, 0x24, 0x24, 0x23, 0x23,
    0x1E, 0x1E, 0x1D, 0x1D, 0x1C, 0x1C, 0x1B, 0x1B, 0x16, 0x16, 0x15, 0x15, 0x14, 0x14, 0x13, 0x13, 0x0E, 0x0E, 0x0D, 0x0D,
    0x0C, 0x0C, 0x0B, 0x0B, 0x05, 0x05, 0x04, 0x04, 0x03, 0x03, 0x02, 0x02, 0x02, 0x02, 0x03, 0x03, 0x04, 0x04, 0x05, 0x05,
    0x0B, 0x0B, 0x0C, 0x0C, 0x0D, 0x0D, 0x0E, 0x0E, 0x13, 0x13, 0x14, 0x14, 0x15, 0x15, 0x16, 0x16, 0x1B, 0x1B, 0x1C, 0x1C,
    0x1D, 0x1D, 0x1E, 0x1E, 0x23, 0x23, 0x24, 0x24, 0x25, 0x25, 0x26, 0x26, 0x2B, 0x2B, 0x2C, 0x2C, 0x2D, 0x2D, 0x2E, 0x2E,
    0x33, 0x33, 0x34, 0x34, 0x34, 0x34, 0x33, 0x33, 0x29, 0x29, 0x28, 0x28, 0x27, 0x27, 0x26, 0x26, 0x21, 0x21, 0x20, 0x20,
    0x1F, 0x1F, 0x1E, 0x1E, 0x14, 0x14, 0x13, 0x13, 0x12, 0x12, 0x11, 0x11, 0x0C, 0x0C, 0x0B, 0x0B, 0x0A, 0x0A, 0x09, 0x09,
    0x00, 0x00, 0x01, 0x01, 0x02, 0x02, 0x03, 0x03, 0x0D, 0x0D, 0x0E, 0x0E, 0x0F, 0x0F, 0x10, 0x10, 0x15, 0x15, 0x16, 0x16,
    0x17, 0x17, 0x1D, 0x1D, 0x22, 0x22, 0x23, 0x23, 0x24, 0x24, 0x25, 0x25, 0x2A, 0x2A, 0x2B, 0x2B, 0x31, 0x31, 0x32, 0x32,
    0x32, 0x32, 0x31, 0x31, 0x30, 0x2F, 0x2E, 0x2D, 0x28, 0x27, 0x27, 0x26, 0x26, 0x25, 0x25, 0x24, 0x20, 0x1F, 0x1F, 0x1E,
    0x1E, 0x1D, 0x1D, 0x1C, 0x15, 0x15, 0x14, 0x14, 0x13, 0x13, 0x12, 0x12, 0x0D, 0x0D, 0x0C, 0x0C, 0x0B, 0x0B, 0x0A, 0x0A,
    0x02, 0x02, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x05, 0x05, 0x07, 0x07, 0x08, 0x08, 0x09, 0x09, 0x0E, 0x0E, 0x0F, 0x0F,
    0x10, 0x10, 0x11, 0x11, 0x16, 0x16, 0x17, 0x17, 0x18, 0x18, 0x19, 0x19, 0x1E, 0x1E, 0x1F, 0x1F, 0x20, 0x20, 0x21, 0x21,
    0x26, 0x26, 0x27, 0x27, 0x28, 0x28, 0x29, 0x29, 0x2E, 0x2E, 0x2F, 0x2F, 0x30, 0x30, 0x31, 0x31, 0x33, 0x33, 0x32, 0x32,
    0x31, 0x31, 0x30, 0x30, 0x2B, 0x2B, 0x2A, 0x2A, 0x29, 0x29, 0x28, 0x28, 0x23, 0x23, 0x22, 0x22, 0x21, 0x21, 0x20, 0x20,
    0x1B, 0x1B, 0x1A, 0x1A, 0x19, 0x19, 0x18, 0x18, 0x13, 0x13, 0x12, 0x12, 0x11, 0x11, 0x10, 0x10, 0x0B, 0x0B, 0x0A, 0x0A,
    0x09, 0x09, 0x08, 0x08, 0x02, 0x02, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x05, 0x05, 0x07, 0x07, 0x08, 0x08, 0x09, 0x09,
    0x0E, 0x0E, 0x0F, 0x0F, 0x10, 0x10, 0x11, 0x11, 0x16, 0x16, 0x17, 0x17, 0x18, 0x18, 0x19, 0x19, 0x1E, 0x1E, 0x1F, 0x1F,
    0x20, 0x20, 0x21, 0x21, 0x26, 0x26, 0x27, 0x27, 0x28, 0x28, 0x29, 0x29, 0x2E, 0x2E, 0x2F, 0x2F, 0x30, 0x30, 0x31, 0x31,
    0x33, 0x33, 0x32, 0x32, 0x31, 0x31, 0x30, 0x30, 0x2B, 0x2B, 0x2A, 0x2A, 0x29, 0x29, 0x28, 0x28, 0x23, 0x23, 0x22, 0x22,
    0x21, 0x21, 0x20, 0x20, 0x1B, 0x1B, 0x1A, 0x1A, 0x19, 0x19, 0x18, 0x18, 0x13, 0x13, 0x12, 0x12, 0x11, 0x11, 0x10, 0x10,
    0x0B, 0x0B, 0x0A, 0x0A, 0x09, 0x09, 0x08, 0x08, 0x02, 0x02, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x05, 0x05, 0x07, 0x07,
    0x08, 0x08, 0x09, 0x09, 0x0E, 0x0E, 0x0F, 0x0F, 0x10, 0x10, 0x11, 0x11, 0x16, 0x16, 0x17, 0x17, 0x18, 0x18, 0x19, 0x19,
    0x1E, 0x1E, 0x1F, 0x1F, 0x20, 0x20, 0x21, 0x21, 0x26, 0x26, 0x27, 0x27, 0x28, 0x28, 0x29, 0x29, 0x2A, 0x2A, 0x2B, 0x2B,
    0x2C, 0x2C, 0x2D, 0x2D, 0x32, 0x32, 0x33, 0x33, 0x34, 0x34, 0x34, 0x34, 0x2F, 0x2F, 0x2E, 0x2E, 0x2D, 0x2D, 0x2C, 0x2C,
    0x27, 0x27, 0x26, 0x26, 0x25, 0x25, 0x24, 0x24, 0x1F, 0x1F, 0x1E, 0x1E, 0x1D, 0x1D, 0x1C, 0x1C, 0x17, 0x17, 0x16, 0x16,
    0x15, 0x15, 0x14, 0x14, 0x0F, 0x0F, 0x0E, 0x0E, 0x0D, 0x0D, 0x0C, 0x0C, 0x07, 0x07, 0x05, 0x05, 0x04, 0x04, 0x03, 0x03,
    0x01, 0x01, 0x02, 0x02, 0x03, 0x03, 0x04, 0x04, 0x0A, 0x0A, 0x0B, 0x0B, 0x0C, 0x0C, 0x0D, 0x0D, 0x12, 0x12, 0x13, 0x13,
    0x14, 0x14, 0x15, 0x15, 0x1A, 0x1A, 0x1B, 0x1B, 0x1C, 0x1C, 0x1D, 0x1D, 0x22, 0x22, 0x23, 0x23, 0x24, 0x24, 0x25, 0x25,
    0x2A, 0x2A, 0x2B, 0x2B, 0x2C, 0x2C, 0x2D, 0x2D, 0x32, 0x32, 0x33, 0x33, 0x34, 0x34, 0x2C, 0x2C, 0x27, 0x27, 0x26, 0x26,
    0x25, 0x25, 0x24, 0x24, 0x1F, 0x1F, 0x1E, 0x1E, 0x1D, 0x1D, 0x17, 0x17, 0x12, 0x12, 0x11, 0x11, 0x10, 0x10, 0x0F, 0x0F,
    0x0A, 0x0A, 0x09, 0x09, 0x09, 0x09, 0x0A, 0x0A, 0x0F, 0x0F, 0x10, 0x10, 0x11, 0x11, 0x12, 0x12, 0x17, 0x17, 0x1D, 0x1D,
    0x1E, 0x1E, 0x1F, 0x1F, 0x24, 0x24, 0x25, 0x25, 0x26, 0x26, 0x27, 0x27, 0x27, 0x27, 0x26, 0x26, 0x25, 0x25, 0x24, 0x24,
    0x1F, 0x1F, 0x1E, 0x1E, 0x1D, 0x1D, 0x1C, 0x1C, 0x17, 0x17, 0x16, 0x16, 0x15, 0x15, 0x14, 0x14, 0x0F, 0x0F, 0x0E, 0x0E,
    0x0D, 0x0D, 0x0C, 0x0C, 0x0A, 0x0A, 0x0B, 0x0B, 0x0C, 0x0C, 0x0D, 0x0D, 0x12, 0x12, 0x13, 0x13, 0x14, 0x14, 0x15, 0x15,
    0x1A, 0x1A, 0x1B, 0x1B, 0x1C, 0x1C, 0x1D, 0x1D, 0x22, 0x22, 0x23, 0x23, 0x24, 0x24, 0x25, 0x25, 0x2E, 0x2E, 0x2F, 0x2F,
    0x30, 0x30, 0x31, 0x31, 0x33, 0x33, 0x32, 0x32, 0x31, 0x31, 0x30, 0x30, 0x2B, 0x2B, 0x2A, 0x2A, 0x29, 0x29, 0x28, 0x28,
    0x23, 0x23, 0x22, 0x22, 0x21, 0x21, 0x20, 0x20, 0x1B, 0x1B, 0x1A, 0x1A, 0x19, 0x19, 0x18, 0x18, 0x13, 0x13, 0x12, 0x12,
    0x11, 0x11, 0x10, 0x10, 0x0B, 0x0B, 0x0A, 0x0A, 0x09, 0x09, 0x08, 0x08, 0x02, 0x02, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00,
    0x05, 0x05, 0x07, 0x07, 0x08, 0x08, 0x09, 0x09, 0x0E, 0x0E, 0x0F, 0x0F, 0x10, 0x10, 0x11, 0x11, 0x16, 0x16, 0x17, 0x17,
    0x18, 0x18, 0x19, 0x19, 0x1E, 0x1E, 0x1F, 0x1F, 0x20, 0x20, 0x21, 0x21, 0x26, 0x26, 0x27, 0x27, 0x28, 0x28, 0x29, 0x29,
    0x2E, 0x2E, 0x2F, 0x2F, 0x30, 0x30, 0x31, 0x31, 0x2B, 0x2B, 0x2A, 0x2A, 0x29, 0x29, 0x28, 0x28, 0x23, 0x23, 0x22, 0x22,
    0x21, 0x21, 0x20, 0x20, 0x16, 0x16, 0x15, 0x15, 0x14, 0x14, 0x13, 0x13, 0x0E, 0x0E, 0x0D, 0x0D, 0x0C, 0x0C, 0x0B, 0x0B,
    0x0B, 0x0B, 0x0C, 0x0C, 0x0D, 0x0D, 0x0E, 0x0E, 0x13, 0x13, 0x14, 0x14, 0x15, 0x15, 0x16, 0x16, 0x20, 0x20, 0x21, 0x21,
    0x22, 0x22, 0x23, 0x23, 0x28, 0x28, 0x29, 0x29, 0x29, 0x29, 0x28, 0x28, 0x23, 0x23, 0x22, 0x22, 0x21, 0x21, 0x20, 0x20,
    0x1B, 0x1B, 0x1A, 0x1A, 0x19, 0x19, 0x18, 0x18, 0x13, 0x13, 0x12, 0x12, 0x11, 0x11, 0x10, 0x10, 0x0B, 0x0B, 0x0A, 0x0A,
    0x09, 0x09, 0x09, 0x09, 0x0E, 0x0E, 0x0F, 0x0F, 0x10, 0x10, 0x11, 0x11, 0x16, 0x16, 0x17, 0x17, 0x18, 0x18, 0x19, 0x19,
    0x1E, 0x1E, 0x1F, 0x1F, 0x20, 0x20, 0x21, 0x21, 0x26, 0x26, 0x27, 0x27, 0x28, 0x28, 0x29, 0x29
]);

const MaskArray: Int8Array = new Int8Array([
    3,102,112,-99,-37,118,-128,-123,-53,102,-112,-107,-13,126,72,-123,-29,110,88,-107,
    19,118,96,-115,3,102,112,-99,-37,118,-128,-123,-53,102,-112,-107,-13,126,72,-123,
    -29,110,88,-107,19,118,96,-115,88,81,3,74,96,-127,-37,-110,112,-111,-53,-126,
    -128,-119,-13,114,-112,-103,-29,98,72,65,19,90,88,81,3,74,96,-127,-37,-110,
    112,-111,-53,-126,-128,-119,-13,114,-9,74,108,-111,-25,-110,116,-119,108,-111,-25,-110,
    116,-119,-1,98,100,-103,-17,114,116,65,100,81,-17,114,116,65,-9,74,108,-111,
    -25,90,124,-127,96,-115,19,118,112,-99,3,102,72,-123,-13,126,88,-107,72,-123,
    -13,126,-112,-107,-29,110,-128,-123,-37,118,112,-99,-128,-123,-37,118,112,-99,3,102,
    114,-119,-126,-111,90,72,65,-29,74,88,81,-13,114,-128,-119,-53,98,-112,-103,-110,
    -127,74,81,114,72,65,-29,98,-112,-103,-37,-110,-128,-119,-53,-126,112,-111,19,90,
    100,-103,-9,-126,124,-127,-25,90,108,-111,-9,74,116,65,-17,114,100,81,-1,98,
    116,-119,-25,-110,100,-103,-9,-126,124,-127,-25,90,108,-111,-9,74,116,65,-17,114,
    100,81,-1,98,116,-119,-25,-110,-37,118,-128,-123,-29,110,88,-107,-13,126,72,-123,
    3,102,112,-99,19,118,96,-115,-53,102,-112,-107,-37,118,-128,-123,-29,110,88,-107,
    -13,126,72,-123,3,102,112,-99,19,118,96,-115,-53,102,-112,-107,-128,-123,-29,110,
    -13,114,88,81,72,65,19,90,112,-111,-53,-126,96,-127,-37,-110,-112,-103,-29,98,
    -128,-119,-13,114,88,81,3,74,72,65,19,90,112,-111,-53,-126,96,-127,-37,-110,
    -112,-103,-29,98,-128,-119,-13,114,88,81,3,74,-25,-110,116,-119,-1,98,100,81,
    -17,114,116,65,-9,74,108,-111,-25,90,124,-127,-9,-126,100,-103,-25,-110,116,-119,
    -1,98,100,81,-17,114,116,65,-9,74,108,-111,-25,90,124,-127,-9,-126,100,-103,
    116,-119,-1,98,-29,110,-128,-123,-112,-107,-53,102,96,-115,19,118,112,-99,3,102,
    72,-123,-13,126,88,-107,-29,110,-128,-123,-37,118,-112,-107,-53,102,96,-115,19,118,
    112,-99,3,102,72,-123,-13,126,88,-107,-29,110,-128,-123,-37,118,3,74,88,81,
    -13,114,-128,-119,-29,98,-112,-103,-37,-110,96,-127,-53,-126,112,-111,19,90,72,65,
    3,74,88,81,-13,114,-128,-119,-29,98,-112,-103,-37,-110,96,-127,-53,-126,112,-111,
    19,90,72,65,88,81,-13,114,-1,98,116,-119,100,-103,-9,-126,124,-127,-25,90,
    108,-111,-9,74,116,65,-17,114,100,81,-1,98,116,-119,-25,-110,100,-103,-9,-126,
    124,-127,-25,90,108,-111,-9,74,116,65,-17,114,100,81,-1,98,116,-119,-25,-110,
    -37,118,-128,-123,-112,-107,-13,126,-128,-123,-29,110,88,-107,19,118,72,-123,88,-107,
    19,118,96,-115,3,102,112,-99,-37,118,-128,-123,112,-99,-37,118,-128,-123,-29,110,
    112,-111,-53,-126,-128,-119,-13,114,-112,-103,-29,98,72,65,19,90,-29,98,72,65,
    19,90,112,-111,3,74,96,-127,-37,-110,-112,-103,96,-127,-37,-110,-9,74,108,-111,
    -126,100,-103,-17,114,116,65,-9,98,100,81,-25,90,124,-127,-9,-111,-110,-119,98,
    100,81,-25,90,116,65,-9,74,108,-111,-25,-110,124,-127,-126,-103,65,74,108,-111,
    -128,-123,-37,118,112,-99,3,102,19,118,88,-107,-29,110,-128,-123,-13,126,-112,-107,
    -53,102,96,-115,-37,118,112,-99,3,102,72,-123,19,118,88,-107,-29,110,-128,-123,
    -13,126,-112,-107,-53,102,96,-115,-37,118,112,-99,3,102,-37,-110,-128,-119,-53,-126,
    112,-111,19,90,96,-127,3,74,88,81,-13,114,72,65,-29,98,-112,-103,-37,-110,
    -128,-119,-53,-126,112,-111,19,90,96,-127,3,74,88,81,-13,114,72,65,-112,-103,
    -37,-110,96,-127,116,-119,-25,-110,108,-111,-9,74,-25,90,100,81,-1,98,116,-119,
    -17,114,100,-103,-9,-126,124,-127,-25,-110,108,-111,-9,74,116,65,-25,90,100,81,
    -1,98,116,-119,-17,114,100,-103,-9,-126,124,-127,-25,-110,108,-111,-9,74,3,102,
    88,-107,19,118,96,-115,-53,102,112,-99,-37,118,-128,-123,-29,110,-112,-107,-13,126,
    72,-123,3,102,88,-107,19,118,96,-115,-53,102,112,-99,-37,118,-128,-123,-29,110,
    -112,-107,72,-123,3,102,112,-99,88,81,3,74,96,-127,-37,-110,-53,-126,-128,-119,
    -13,114,88,81,-29,98,72,65,19,90,112,-111,3,74,96,-127,-37,-110,-112,-103,
    -53,-126,-128,-119,-13,114,88,81,-29,110,88,-107,19,118,96,-115,3,102,112,-99,
    -37,118,-128,-123,-53,102,-112,-107,-13,126,72,-123,-29,110,88,-107,19,118,96,-115,
    3,102,112,-99,-37,118,-128,-123,112,-111,-53,-126,-128,-119,-13,114,-112,-103,-29,98,
    72,65,19,90,88,81,3,74,96,-127,-37,-110,112,-111,-53,-126,-128,-119,-13,114,
    -112,-103,-29,98,72,65,19,90,88,81,3,74,96,-127,-37,-110,100,-103,-17,114,
    116,65,-9,74,100,81,-25,90,124,-127,-9,-126,-25,90,124,-127,-9,-126,100,-103,
    -25,-110,116,-119,-1,98,100,81,88,-107,-29,110,-128,-123,-37,118,-112,-107,-53,102,
    96,-115,19,118,-53,102,96,-115,19,118,88,-107,3,102,72,-123,-13,126,-112,-107,
    -37,-110,96,-127,3,74,88,81,98,-112,-103,-37,-110,96,-127,3,-126,112,-111,19,
    90,72,65,-29,-128,-119,-53,-126,112,-111,19,90,96,-127,3,74,88,81,-13,114,
    72,65,98,-119,-110,-111,74,65,100,81,-1,98,116,-119,-25,-110,100,-103,-9,-126,
    124,-127,-25,90,108,-111,-9,74,116,65,-17,114,100,81,-1,98,116,-119,-25,-110,
    100,-103,-9,-126,124,-127,-25,90,108,-111,-9,74,3,102,112,-99,19,118,96,-115,
    -53,102,-112,-107,-37,118,-128,-123,-29,110,88,-107,-13,126,72,-123,3,102,112,-99,
    19,118,96,-115,-53,102,-112,-107,-37,118,-128,-123,-29,110,88,-107,72,-123,3,102,
    112,-99,-37,118,3,74,96,-127,-37,-110,-112,-103,-128,-119,-13,114,88,81,3,74,
    72,65,19,90,112,-111,-53,-126,96,-127,-37,-110,-112,-103,-29,98,-128,-119,-13,114,
    88,81,3,74,72,65,19,90,112,-111,-53,-126,96,-127,-37,-110,-9,74,108,-111,
    -25,90,124,-127,-9,-126,100,-103,-25,-110,116,-119,-1,98,100,81,-17,114,116,65,
    -9,74,108,-111,-25,90,124,-127,-9,-126,100,-103,-25,-110,116,-119,-1,98,100,81,
    116,65,-9,74,108,-111,-25,-110,-37,118,112,-99,3,102,72,-123,88,-107,-29,110,
    -128,-123,-37,118,-112,-107,-53,102,96,-115,19,118,112,-99,3,102,72,-123,-13,126,
    88,-107,-29,110,-128,-123,-37,118,-112,-107,-53,102,96,-115,19,118,112,-99,3,102,
    -37,-110,96,-127,-53,-126,112,-111,19,90,72,65,3,74,88,81,-13,114,-128,-119,
    -29,98,-112,-103,-37,-110,96,-127,-53,-126,112,-111,19,90,72,65,3,74,88,81,
    -13,114,-128,-119,-112,-103,-37,-110,96,-127,3,74,-25,-110,108,-111,-9,74,116,65,
    100,81,-1,98,116,-119,-25,-110,100,-103,-9,-126,124,-127,-25,90,108,-111,-9,74,
    116,65,-17,114,100,81,-1,98,116,-119,-25,-110,100,-103,-9,-126,124,-127,-25,90,
    108,-111,-9,74,3,102,112,-99,72,-123,3,102,112,-99,-37,118,96,-115,-53,102,
    -112,-107,-13,126,-53,102,-112,-107,-13,126,72,-123,-29,110,88,-107,19,118,96,-115,
    -13,114,88,81,3,74,96,-127,88,81,3,74,96,-127,-37,-110,112,-111,-53,-126,
    -128,-119,-112,-103,-53,-126,-128,-119,-13,114,88,81,-29,98,72,65,88,81,3,74,
    -25,-110,116,-119,98,81,90,-127,74,108,-111,-25,-110,116,-119,-1,-126,100,-103,-17,
    114,116,65,74,124,-127,-9,-126,100,-103,-17,114,116,-119,-1,98,100,81,-25,90,
    -25,-110,116,-119,-1,98,-29,110,72,-123,-112,-107,-53,102,96,-115,-37,118,112,-99,
    3,102,72,-123,19,118,88,-107,-29,110,-128,-123,-13,126,-112,-107,-53,102,96,-115,
    -37,118,112,-99,3,102,72,-123,19,118,88,-107,-29,110,-128,-123,96,-127,3,74,
    88,81,-13,114,72,65,-29,98,-112,-103,-37,-110,-128,-119,-53,-126,112,-111,19,90,
    96,-127,3,74,88,81,-13,114,72,65,-29,98,-112,-103,-37,-110,-128,-119,-53,-126,
    112,-111,19,90,3,74,88,81,-13,114,-1,98,116,65,100,-103,-9,-126,124,-127,
    -25,-110,108,-111,-9,74,116,65,-25,90,100,81,-1,98,116,-119,-17,114,100,-103,
    -9,-126,124,-127,-25,-110,108,-111,-9,74,116,65,-25,90,100,81,-1,98,116,-119,
    112,-99,-37,118,-128,-123,-29,110,-112,-107,-13,126,72,-123,3,102,88,-107,19,118,
    96,-115,-53,102,112,-99,-37,118,-128,-123,-29,110,-112,-107,-13,126,72,-123,3,102,
    88,-107,19,118,96,-115,-53,102,-37,118,-128,-123,-29,110,-13,114,-112,-103,72,65,
    19,90,112,-111,3,74,96,-127,-37,-110,-112,-103,-53,-126,-128,-119,-13,114,88,81,
    -29,98,72,65,19,90,112,-111,3,74,96,-127,-37,-110,-112,-103,-29,98,72,65,
    19,90,112,-111,3,74,96,-127,-37,-110,-9,74,100,81,-25,90,124,-127,-9,-126,
    108,-111,-25,-110,116,-119,-1,98,100,-103,-17,114,116,65,-9,74,100,81,-25,90,
    124,-127,-9,-126,108,-111,-25,-110,116,-119,-1,98,100,-103,116,65,-9,74,108,-111,
    -128,-123,-37,118,112,-99,3,102,19,118,88,-107,-29,110,-128,-123,-13,126,-112,-107,
    -53,102,96,-115,-37,118,112,-99,3,102,72,-123,19,118,88,-107,-29,110,-128,-123,
    -13,126,-112,-107,-53,102,96,-115,-37,118,112,-99,3,102,19,90,96,-127,3,74,
    88,81,-13,114,72,65,-29,98,-112,-103,-128,-119,-29,98,-112,-103,-37,-110,96,-127,
    -53,-126,112,-111,-127,96,90,19,-111,112,74,3,65,72,114,-13,81,88,65,72,
    114,-13,-103,-112,98,-29,-119,-128,-110,-37,-111,112,-99,96,118,3,-123,88,110,-13,
    -107,72,126,-29,-123,-112,102,-37,-107,-128,118,-53,-115,112,102,19,-99,96,118,3,
    -123,88,110,-13,-126,-25,-119,100,114,-1,81,116,98,-17,65,100,90,-9,-111,124,
    74,-25,-127,108,-110,-9,-103,116,-126,-25,-119,100,114,-1,81,116,-53,-126,-128,-119,
    -13,114,88,81,108,-111,-25,-110,116,-119,-1,98,100,-103,-17,114,116,65,-9,74,
    100,81,-25,90,124,-127,-9,-126,108,-111,-25,-110,116,-119,-1,98,100,-103,-17,114,
    116,65,-9,74,100,81,-25,90,124,-127,-9,-126,-25,-110,116,-119,-1,98,-29,110,
    72,-123,-112,-107,-53,102,96,-115,-37,118,112,-99,3,102,72,-123,19,118,88,-107,
    -29,110,-128,-123,-13,126,-112,-107,-53,102,96,-115,-37,118,112,-99,3,102,72,-123,
    19,118,88,-107,-29,110,-128,-123,72,65,-29,98,-112,-103,-37,-110,-128,-119,-53,-126,
    112,-111,19,90,-53,-126,112,-111,19,90,72,65,3,74,88,81,-13,114,-128,-119,
    81,88,98,-29,-119,-128,-110,-37,-103,-112,-126,-53,-127,96,90,19,-126,-53,-127,96,
    90,19,81,88,74,3,65,72,-123,-112,102,-37,-107,-128,118,-53,-115,112,102,19,
    -99,96,118,3,-123,88,110,-13,-107,72,126,-29,-123,-112,102,-37,-107,-128,118,-53,
    -115,112,-111,124,74,-25,-127,108,-110,-9,-103,116,-126,-25,-119,100,114,-1,81,116,
    98,-17,65,100,90,-9,-111,124,74,-25,-127,108,-110,-9,-103,116
]);

const FrameData: Int8Array = new Int8Array([
    0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x31, 0x30, 0x30, 0x30, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x0A, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x31, 0x30, 0x30,
    0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x0A, 0x31, 0x30, 0x31, 0x31, 0x31, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x30, 0x31, 0x30, 0x31, 0x31, 0x31, 0x30,
    0x31, 0x0A, 0x31, 0x30, 0x31, 0x31, 0x31, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x31, 0x30, 0x31, 0x30, 0x31, 0x31, 0x31, 0x30, 0x31, 0x0A, 0x31, 0x30, 0x31, 0x31,
    0x31, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x31, 0x31, 0x31, 0x31, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30,
    0x30, 0x30, 0x31, 0x30, 0x31, 0x31, 0x31, 0x30, 0x31, 0x0A, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x30, 0x30, 0x31, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x30, 0x30, 0x31, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x31, 0x0A, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x30, 0x31, 0x30, 0x31, 0x30, 0x31, 0x30, 0x31, 0x30,
    0x31, 0x30, 0x31, 0x30, 0x31, 0x30, 0x31, 0x30, 0x31, 0x30, 0x31, 0x30, 0x31, 0x30, 0x31, 0x30, 0x31, 0x30, 0x31, 0x30,
    0x31, 0x30, 0x31, 0x30, 0x31, 0x30, 0x31, 0x30, 0x31, 0x30, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x0A, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x31, 0x30, 0x30, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x0A, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x31, 0x31, 0x31,
    0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x0A, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x0A,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x0A, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x0A, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x0A, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x0A, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x0A, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x0A, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x0A, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x0A, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x0A, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x0A,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x0A, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x0A, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x0A, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x0A, 0x30, 0x30, 0x30, 0x30,
    0x31, 0x31, 0x31, 0x31, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x31, 0x31, 0x31, 0x31, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x31, 0x31, 0x31, 0x31, 0x31, 0x30, 0x30, 0x30, 0x30, 0x0A, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x30, 0x30, 0x31, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x30, 0x30, 0x31, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x30, 0x30, 0x31, 0x30,
    0x30, 0x30, 0x30, 0x0A, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x31, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x31, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x31, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x0A, 0x30, 0x30,
    0x30, 0x30, 0x31, 0x30, 0x30, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x31, 0x30, 0x30, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x31, 0x30, 0x30, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x0A, 0x30, 0x30, 0x30, 0x30, 0x31, 0x31, 0x31, 0x31,
    0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x31, 0x31, 0x31,
    0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x31, 0x31, 0x31,
    0x31, 0x30, 0x30, 0x30, 0x30, 0x0A, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x0A,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x0A, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x0A, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x0A, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x0A, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x0A, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x0A, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x0A, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x0A, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x0A, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x0A,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x0A, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x0A, 0x31, 0x31, 0x30, 0x31, 0x31, 0x31, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x0A, 0x30, 0x31, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x0A, 0x30, 0x30, 0x30, 0x31,
    0x30, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x31, 0x31, 0x31, 0x31, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x31, 0x31, 0x31, 0x31, 0x31, 0x30, 0x30, 0x30, 0x30, 0x0A, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x30, 0x30, 0x31, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x30, 0x30, 0x31, 0x30,
    0x30, 0x30, 0x30, 0x0A, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x31, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x31, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x0A, 0x31, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x31, 0x30, 0x30, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x31, 0x30, 0x30, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x0A, 0x31, 0x30, 0x31, 0x31, 0x31, 0x30, 0x31, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x31, 0x31, 0x31,
    0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x31, 0x31, 0x31,
    0x31, 0x30, 0x30, 0x30, 0x30, 0x0A, 0x31, 0x30, 0x31, 0x31, 0x31, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x0A,
    0x31, 0x30, 0x31, 0x31, 0x31, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x0A, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x0A, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x0A
]);

const RSTableArray: Int8Array[] = [
    new Int8Array([-44, -10, 77, 73, -61, -64, 75, 98, 5, 70, 103, -79, 22, -39, -118, 51, -75, -10, 72, 25, 18, 46, -28, 74, -40, -61, 11, 106, -126, -106]),
    new Int8Array([-44, -10, 77, 73, -61, -64, 75, 98, 5, 70, 103, -79, 22, -39, -118, 51, -75, -10, 72, 25, 18, 46, -28, 74, -40, -61, 11, 106, -126, -106]),
    new Int8Array([-75, -15, -102, -110, -101, -99, -106, -60, 10, -116, -50, 127, 44, -81, 9, 102, 119, -15, -112, 50, 36, 92, -43, -108, -83, -101, 22, -44, 25, 49]),
    new Int8Array([97, 7, -41, -37, 88, 93, -35, -90, 15, -54, -87, -50, 58, 118, -125, 85, -62, 7, -40, 43, 54, 114, 49, -34, 117, 88, 29, -66, -101, -89]),
    new Int8Array([119, -1, 41, 57, 43, 39, 49, -107, 20, 5, -127, -2, 88, 67, 18, -52, -18, -1, 61, 100, 72, -72, -73, 53, 71, 43, 44, -75, 50, 98]),
    new Int8Array([-93, 9, 100, 112, -24, -25, 122, -9, 17, 67, -26, 79, 78, -102, -104, -1, 91, 9, 117, 125, 90, -106, 83, 127, -97, -24, 39, -33, -80, -12]),
    new Int8Array([-62, 14, -77, -85, -80, -70, -89, 81, 30, -119, 79, -127, 116, -20, 27, -86, -103, 14, -83, 86, 108, -28, 98, -95, -22, -80, 58, 97, 43, 83]),
    new Int8Array([22, -8, -2, -30, 115, 122, -20, 51, 27, -49, 40, 48, 98, 53, -111, -103, 44, -8, -27, 79, 126, -54, -122, -21, 50, 115, 49, 11, -87, -59]),
    new Int8Array([-18, -29, 82, 114, 86, 78, 98, 55, 40, 10, 31, -31, -80, -122, 36, -123, -63, -29, 122, -56, -112, 109, 115, 106, -114, 86, 88, 119, 100, -60]),
    new Int8Array([58, 21, 31, 59, -107, -114, 41, 85, 45, 76, 120, 80, -90, 95, -82, -74, 116, 21, 50, -47, -126, 67, -105, 32, 86, -107, 83, 29, -26, 82]),
    new Int8Array([91, 18, -56, -32, -51, -45, -12, -13, 34, -122, -47, -98, -100, 41, 45, -29, -74, 18, -22, -6, -76, 49, -90, -2, 35, -51, 78, -93, 125, -11]),
    new Int8Array([-113, -28, -123, -87, 14, 19, -65, -111, 39, -64, -74, 47, -118, -16, -89, -48, 3, -28, -94, -29, -90, 31, 66, -76, -5, 14, 69, -55, -1, 99]),
    new Int8Array([-103, 28, 123, 75, 125, 105, 83, -94, 60, 15, -98, 31, -24, -59, 54, 73, 47, 28, 71, -84, -40, -43, -60, 95, -55, 125, 116, -62, 86, -90]),
    new Int8Array([77, -22, 54, 2, -66, -87, 24, -64, 57, 73, -7, -82, -2, 28, -68, 122, -102, -22, 15, -75, -54, -5, 32, 21, 17, -66, 127, -88, -44, 48]),
    new Int8Array([44, -19, -31, -39, -26, -12, -59, 102, 54, -125, 80, 96, -60, 106, 63, 47, 88, -19, -41, -98, -4, -119, 17, -53, 100, -26, 98, 22, 79, -105]),
    new Int8Array([-8, 27, -84, -112, 37, 52, -114, 4, 51, -59, 55, -47, -46, -77, -75, 28, -19, 27, -97, -121, -18, -89, -11, -127, -68, 37, 105, 124, -51, 1]),
    new Int8Array([-63, -37, -92, -28, -84, -100, -60, 110, 80, 20, 62, -33, 125, 17, 72, 23, -97, -37, -12, -115, 61, -38, -26, -44, 1, -84, -80, -18, -56, -107]),
    new Int8Array([21, 45, -23, -83, 111, 92, -113, 12, 85, 82, 89, 110, 107, -56, -62, 36, 42, 45, -68, -108, 47, -12, 2, -98, -39, 111, -69, -124, 74, 3]),
    new Int8Array([116, 42, 62, 118, 55, 1, 82, -86, 90, -104, -16, -96, 81, -66, 65, 113, -24, 42, 100, -65, 25, -122, 51, 64, -84, 55, -90, 58, -47, -92]),
    new Int8Array([-96, -36, 115, 63, -12, -63, 25, -56, 95, -34, -105, 17, 71, 103, -53, 66, 93, -36, 44, -90, 11, -88, -41, 10, 116, -12, -83, 80, 83, 50]),
    new Int8Array([-74, 36, -115, -35, -121, -69, -11, -5, 68, 17, -65, 33, 37, 82, 90, -37, 113, 36, -55, -23, 117, 98, 81, -31, 70, -121, -100, 91, -6, -9]),
    new Int8Array([98, -46, -64, -108, 68, 123, -66, -103, 65, 87, -40, -112, 51, -117, -48, -24, -60, -46, -127, -16, 103, 76, -75, -85, -98, 68, -105, 49, 120, 97]),
    new Int8Array([3, -43, 23, 79, 28, 38, 99, 63, 78, -99, 113, 94, 9, -3, 83, -67, 6, -43, 89, -37, 81, 62, -124, 117, -21, 28, -118, -113, -29, -58]),
    new Int8Array([-41, 35, 90, 6, -33, -26, 40, 93, 75, -37, 22, -17, 31, 36, -39, -114, -77, 35, 17, -62, 67, 16, 96, 63, 51, -33, -127, -27, 97, 80]),
    new Int8Array([47, 56, -10, -106, -6, -46, -90, 89, 120, 30, 33, 62, -51, -105, 108, -110, 94, 56, -114, 69, -83, -73, -107, -66, -113, -6, -24, -103, -84, 81]),
    new Int8Array([-5, -50, -69, -33, 57, 18, -19, 59, 125, 88, 70, -113, -37, 78, -26, -95, -21, -50, -58, 92, -65, -103, 113, -12, 87, 57, -29, -13, 46, -57]),
    new Int8Array([-102, -55, 108, 4, 97, 79, 48, -99, 114, -110, -17, 65, -31, 56, 101, -12, 41, -55, 30, 119, -119, -21, 64, 42, 34, 97, -2, 77, -75, 96]),
    new Int8Array([78, 63, 33, 77, -94, -113, 123, -1, 119, -44, -120, -16, -9, -31, -17, -57, -100, 63, 86, 110, -101, -59, -92, 96, -6, -94, -11, 39, 55, -10]),
    new Int8Array([88, -57, -33, -81, -47, -11, -105, -52, 108, 27, -96, -64, -107, -44, 126, 94, -80, -57, -77, 33, -27, 15, 34, -117, -56, -47, -60, 44, -98, 51]),
    new Int8Array([-116, 49, -110, -26, 18, 53, -36, -82, 105, 93, -57, 113, -125, 13, -12, 109, 5, 49, -5, 56, -9, 33, -58, -63, 16, 18, -49, 70, 28, -91]),
    new Int8Array([-19, 54, 69, 61, 74, 104, 1, 8, 102, -105, 110, -65, -71, 123, 119, 56, -57, 54, 35, 19, -63, 83, -9, 31, 101, 74, -46, -8, -121, 2]),
    new Int8Array([57, -64, 8, 116, -119, -88, 74, 106, 99, -47, 9, 14, -81, -94, -3, 11, 114, -64, 107, 10, -45, 125, 19, 85, -67, -119, -39, -110, 5, -108]),
    new Int8Array([-97, -85, 85, -43, 69, 37, -107, -36, -96, 40, 124, -93, -6, 34, -112, 46, 35, -85, -11, 7, 122, -87, -47, -75, 2, 69, 125, -63, -115, 55]),
    new Int8Array([75, 93, 24, -100, -122, -27, -34, -66, -91, 110, 27, 18, -20, -5, 26, 29, -106, 93, -67, 30, 104, -121, 53, -1, -38, -122, 118, -85, 15, -95]),
    new Int8Array([42, 90, -49, 71, -34, -72, 3, 24, -86, -92, -78, -36, -42, -115, -103, 72, 84, 90, 101, 53, 94, -11, 4, 33, -81, -34, 107, 21, -108, 6]),
    new Int8Array([-2, -84, -126, 14, 29, 120, 72, 122, -81, -30, -43, 109, -64, 84, 19, 123, -31, -84, 45, 44, 76, -37, -32, 107, 119, 29, 96, 127, 22, -112]),
    new Int8Array([-24, 84, 124, -20, 110, 2, -92, 73, -76, 45, -3, 93, -94, 97, -126, -30, -51, 84, -56, 99, 50, 17, 102, -128, 69, 110, 81, 116, -65, 85]),
    new Int8Array([60, -94, 49, -91, -83, -62, -17, 43, -79, 107, -102, -20, -76, -72, 8, -47, 120, -94, -128, 122, 32, 63, -126, -54, -99, -83, 90, 30, 61, -61]),
    new Int8Array([93, -91, -26, 126, -11, -97, 50, -115, -66, -95, 51, 34, -114, -50, -117, -124, -70, -91, 88, 81, 22, 77, -77, 20, -24, -11, 71, -96, -90, 100]),
    new Int8Array([-119, 83, -85, 55, 54, 95, 121, -17, -69, -25, 84, -109, -104, 23, 1, -73, 15, 83, 16, 72, 4, 99, 87, 94, 48, 54, 76, -54, 36, -14]),
    new Int8Array([113, 72, 7, -89, 19, 107, -9, -21, -120, 34, 99, 66, 74, -92, -76, -85, -30, 72, -113, -49, -22, -60, -94, -33, -116, 19, 37, -74, -23, -13]),
    new Int8Array([-91, -66, 74, -18, -48, -85, -68, -119, -115, 100, 4, -13, 92, 125, 62, -104, 87, -66, -57, -42, -8, -22, 70, -107, 84, -48, 46, -36, 107, 101]),
    new Int8Array([-60, -71, -99, 53, -120, -10, 97, 47, -126, -82, -83, 61, 102, 11, -67, -51, -107, -71, 31, -3, -50, -104, 119, 75, 33, -120, 51, 98, -16, -62]),
    new Int8Array([16, 79, -48, 124, 75, 54, 42, 77, -121, -24, -54, -116, 112, -46, 55, -2, 32, 79, 87, -28, -36, -74, -109, 1, -7, 75, 56, 8, 114, 84]),
    new Int8Array([6, -73, 46, -98, 56, 76, -58, 126, -100, 39, -30, -68, 18, -25, -90, 103, 12, -73, -78, -85, -94, 124, 21, -22, -53, 56, 9, 3, -37, -111]),
    new Int8Array([-46, 65, 99, -41, -5, -116, -115, 28, -103, 97, -123, 13, 4, 62, 44, 84, -71, 65, -6, -78, -80, 82, -15, -96, 19, -5, 2, 105, 89, 7]),
    new Int8Array([-77, 70, -76, 12, -93, -47, 80, -70, -106, -85, 44, -61, 62, 72, -81, 1, 123, 70, 34, -103, -122, 32, -64, 126, 102, -93, 31, -41, -62, -96]),
    new Int8Array([103, -80, -7, 69, 96, 17, 27, -40, -109, -19, 75, 114, 40, -111, 37, 50, -50, -80, 106, -128, -108, 14, 36, 52, -66, 96, 20, -67, 64, 54]),
    new Int8Array([94, 112, -15, 49, -23, -71, 81, -78, -16, 60, 66, 124, -121, 51, -40, 57, -68, 112, 1, -118, 71, 115, 55, 97, 3, -23, -51, 47, 69, -94]),
    new Int8Array([-118, -122, -68, 120, 42, 121, 26, -48, -11, 122, 37, -51, -111, -22, 82, 10, 9, -122, 73, -109, 85, 93, -45, 43, -37, 42, -58, 69, -57, 52]),
    new Int8Array([-21, -127, 107, -93, 114, 36, -57, 118, -6, -80, -116, 3, -85, -100, -47, 95, -53, -127, -111, -72, 99, 47, -30, -11, -82, 114, -37, -5, 92, -109]),
    new Int8Array([63, 119, 38, -22, -79, -28, -116, 20, -1, -10, -21, -78, -67, 69, 91, 108, 126, 119, -39, -95, 113, 1, 6, -65, 118, -79, -48, -111, -34, 5]),
    new Int8Array([41, -113, -40, 8, -62, -98, 96, 39, -28, 57, -61, -126, -33, 112, -54, -11, 82, -113, 60, -18, 15, -53, -128, 84, 68, -62, -31, -102, 119, -64]),
    new Int8Array([-3, 121, -107, 65, 1, 94, 43, 69, -31, 127, -92, 51, -55, -87, 64, -58, -25, 121, 116, -9, 29, -27, 100, 30, -100, 1, -22, -16, -11, 86]),
    new Int8Array([-100, 126, 66, -102, 89, 3, -10, -29, -18, -75, 13, -3, -13, -33, -61, -109, 37, 126, -84, -36, 43, -105, 85, -64, -23, 89, -9, 78, 110, -15]),
    new Int8Array([72, -120, 15, -45, -102, -61, -67, -127, -21, -13, 106, 76, -27, 6, 73, -96, -112, -120, -28, -59, 57, -71, -79, -118, 49, -102, -4, 36, -20, 103]),
    new Int8Array([-80, -109, -93, 67, -65, -9, 51, -123, -40, 54, 93, -99, 55, -75, -4, -68, 125, -109, 123, 66, -41, 30, 68, 11, -115, -65, -107, 88, 33, 102]),
    new Int8Array([100, 101, -18, 10, 124, 55, 120, -25, -35, 112, 58, 44, 33, 108, 118, -113, -56, 101, 51, 91, -59, 48, -96, 65, 85, 124, -98, 50, -93, -16]),
    new Int8Array([5, 98, 57, -47, 36, 106, -91, 65, -46, -70, -109, -30, 27, 26, -11, -38, 10, 98, -21, 112, -13, 66, -111, -97, 32, 36, -125, -116, 56, 87]),
    new Int8Array([-47, -108, 116, -104, -25, -86, -18, 35, -41, -4, -12, 83, 13, -61, 127, -23, -65, -108, -93, 105, -31, 108, 117, -43, -8, -25, -120, -26, -70, -63]),
    new Int8Array([-57, 108, -118, 122, -108, -48, 2, 16, -52, 51, -36, 99, 111, -10, -18, 112, -109, 108, 70, 38, -97, -90, -13, 62, -54, -108, -71, -19, 19, 4]),
    new Int8Array([19, -102, -57, 51, 87, 16, 73, 114, -55, 117, -69, -46, 121, 47, 100, 67, 38, -102, 14, 63, -115, -120, 23, 116, 18, 87, -78, -121, -111, -110]),
    new Int8Array([114, -99, 16, -24, 15, 77, -108, -44, -58, -65, 18, 28, 67, 89, -25, 22, -28, -99, -42, 20, -69, -6, 38, -86, 103, 15, -81, 57, 10, 53]),
    new Int8Array([-90, 107, 93, -95, -52, -115, -33, -74, -61, -7, 117, -83, 85, -128, 109, 37, 81, 107, -98, 13, -87, -44, -62, -32, -65, -52, -92, 83, -120, -93]),
    new Int8Array([35, 75, -86, -73, -118, 74, 55, -91, 93, 80, -8, 91, -23, 68, 61, 92, 70, 75, -9, 14, -12, 79, -65, 119, 4, -118, -6, -97, 7, 110]),
    new Int8Array([-9, -67, -25, -2, 73, -118, 124, -57, 88, 22, -97, -22, -1, -99, -73, 111, -13, -67, -65, 23, -26, 97, 91, 61, -36, 73, -15, -11, -123, -8]),
    new Int8Array([-106, -70, 48, 37, 17, -41, -95, 97, 87, -36, 54, 36, -59, -21, 52, 58, 49, -70, 103, 60, -48, 19, 106, -29, -87, 17, -20, 75, 30, 95]),
    new Int8Array([66, 76, 125, 108, -46, 23, -22, 3, 82, -102, 81, -107, -45, 50, -66, 9, -124, 76, 47, 37, -62, 61, -114, -87, 113, -46, -25, 33, -100, -55]),
    new Int8Array([84, -76, -125, -114, -95, 109, 6, 48, 73, 85, 121, -91, -79, 7, 47, -112, -88, -76, -54, 106, -68, -9, 8, 66, 67, -95, -42, 42, 53, 12]),
    new Int8Array([-128, 66, -50, -57, 98, -83, 77, 82, 76, 19, 30, 20, -89, -34, -91, -93, 29, 66, -126, 115, -82, -39, -20, 8, -101, 98, -35, 64, -73, -102]),
    new Int8Array([-31, 69, 25, 28, 58, -16, -112, -12, 67, -39, -73, -38, -99, -88, 38, -10, -33, 69, 90, 88, -104, -85, -35, -42, -18, 58, -64, -2, 44, 61]),
    new Int8Array([53, -77, 84, 85, -7, 48, -37, -106, 70, -97, -48, 107, -117, 113, -84, -59, 106, -77, 18, 65, -118, -123, 57, -100, 54, -7, -53, -108, -82, -85]),
    new Int8Array([-51, -88, -8, -59, -36, 4, 85, -110, 117, 90, -25, -70, 89, -62, 25, -39, -121, -88, -115, -58, 100, 34, -52, 29, -118, -36, -94, -24, 99, -86]),
    new Int8Array([25, 94, -75, -116, 31, -60, 30, -16, 112, 28, -128, 11, 79, 27, -109, -22, 50, 94, -59, -33, 118, 12, 40, 87, 82, 31, -87, -126, -31, 60]),
    new Int8Array([120, 89, 98, 87, 71, -103, -61, 86, 127, -42, 41, -59, 117, 109, 16, -65, -16, 89, 29, -12, 64, 126, 25, -119, 39, 71, -76, 60, 122, -101]),
    new Int8Array([-84, -81, 47, 30, -124, 89, -120, 52, 122, -112, 78, 116, 99, -76, -102, -116, 69, -81, 85, -19, 82, 80, -3, -61, -1, -124, -65, 86, -8, 13]),
    new Int8Array([-70, 87, -47, -4, -9, 35, 100, 7, 97, 95, 102, 68, 1, -127, 11, 21, 105, 87, -80, -94, 44, -102, 123, 40, -51, -9, -114, 93, 81, -56]),
    new Int8Array([110, -95, -100, -75, 52, -29, 47, 101, 100, 25, 1, -11, 23, 88, -127, 38, -36, -95, -8, -69, 62, -76, -97, 98, 21, 52, -123, 55, -45, 94]),
    new Int8Array([15, -90, 75, 110, 108, -66, -14, -61, 107, -45, -88, 59, 45, 46, 2, 115, 30, -90, 32, -112, 8, -58, -82, -68, 96, 108, -104, -119, 72, -7]),
    new Int8Array([-37, 80, 6, 39, -81, 126, -71, -95, 110, -107, -49, -118, 59, -9, -120, 64, -85, 80, 104, -119, 26, -24, 74, -10, -72, -81, -109, -29, -54, 111]),
    new Int8Array([-30, -112, 14, 83, 38, -42, -13, -53, 13, 68, -58, -124, -108, 85, 117, 75, -39, -112, 3, -125, -55, -107, 89, -93, 5, 38, 74, 113, -49, -5]),
    new Int8Array([54, 102, 67, 26, -27, 22, -72, -87, 8, 2, -95, 53, -126, -116, -1, 120, 108, 102, 75, -102, -37, -69, -67, -23, -35, -27, 65, 27, 77, 109]),
    new Int8Array([87, 97, -108, -63, -67, 75, 101, 15, 7, -56, 8, -5, -72, -6, 124, 45, -82, 97, -109, -79, -19, -55, -116, 55, -88, -67, 92, -91, -42, -54]),
    new Int8Array([-125, -105, -39, -120, 126, -117, 46, 109, 2, -114, 111, 74, -82, 35, -10, 30, 27, -105, -37, -88, -1, -25, 104, 125, 112, 126, 87, -49, 84, 92]),
    new Int8Array([-107, 111, 39, 106, 13, -15, -62, 94, 25, 65, 71, 122, -52, 22, 103, -121, 55, 111, 62, -25, -127, 45, -18, -106, 66, 13, 102, -60, -3, -103]),
    new Int8Array([65, -103, 106, 35, -50, 49, -119, 60, 28, 7, 32, -53, -38, -49, -19, -76, -126, -103, 118, -2, -109, 3, 10, -36, -102, -50, 109, -82, 127, 15]),
    new Int8Array([32, -98, -67, -8, -106, 108, 84, -102, 19, -51, -119, 5, -32, -71, 110, -31, 64, -98, -82, -43, -91, 113, 59, 2, -17, -106, 112, 16, -28, -88]),
    new Int8Array([-12, 104, -16, -79, 85, -84, 31, -8, 22, -117, -18, -76, -10, 96, -28, -46, -11, 104, -26, -52, -73, 95, -33, 72, 55, 85, 123, 122, 102, 62]),
    new Int8Array([12, 115, 92, 33, 112, -104, -111, -4, 37, 78, -39, 101, 36, -45, 81, -50, 24, 115, 121, 75, 89, -8, 42, -55, -117, 112, 18, 6, -85, 63]),
    new Int8Array([-40, -123, 17, 104, -77, 88, -38, -98, 32, 8, -66, -44, 50, 10, -37, -3, -83, -123, 49, 82, 75, -42, -50, -125, 83, -77, 25, 108, 41, -87]),
    new Int8Array([-71, -126, -58, -77, -21, 5, 7, 56, 47, -62, 23, 26, 8, 124, 88, -88, 111, -126, -23, 121, 125, -92, -1, 93, 38, -21, 4, -46, -78, 14]),
    new Int8Array([109, 116, -117, -6, 40, -59, 76, 90, 42, -124, 112, -85, 30, -91, -46, -101, -38, 116, -95, 96, 111, -118, 27, 23, -2, 40, 15, -72, 48, -104]),
    new Int8Array([123, -116, 117, 24, 91, -65, -96, 105, 49, 75, 88, -101, 124, -112, 67, 2, -10, -116, 68, 47, 17, 64, -99, -4, -52, 91, 62, -77, -103, 93]),
    new Int8Array([-81, 122, 56, 81, -104, 127, -21, 11, 52, 13, 63, 42, 106, 73, -55, 49, 67, 122, 12, 54, 3, 110, 121, -74, 20, -104, 53, -39, 27, -53]),
    new Int8Array([-50, 125, -17, -118, -64, 34, 54, -83, 59, -57, -106, -28, 80, 63, 74, 100, -127, 125, -44, 29, 53, 28, 72, 104, 97, -64, 40, 103, -128, 108]),
    new Int8Array([26, -117, -94, -61, 3, -30, 125, -49, 62, -127, -15, 85, 70, -26, -64, 87, 52, -117, -100, 4, 39, 50, -84, 34, -71, 3, 35, 13, 2, -6]),
    new Int8Array([-68, -32, -1, 98, -49, 111, -94, 121, -3, 120, -124, -8, 19, 102, -83, 114, 101, -32, 2, 9, -114, -26, 110, -62, 6, -49, -121, 94, -118, 89]),
    new Int8Array([104, 22, -78, 43, 12, -81, -23, 27, -8, 62, -29, 73, 5, -65, 39, 65, -48, 22, 74, 16, -100, -56, -118, -120, -34, 12, -116, 52, 8, -49]),
    new Int8Array([9, 17, 101, -16, 84, -14, 52, -67, -9, -12, 74, -121, 63, -55, -92, 20, 18, 17, -110, 59, -86, -70, -69, 86, -85, 84, -111, -118, -109, 104]),
    new Int8Array([-35, -25, 40, -71, -105, 50, 127, -33, -14, -78, 45, 54, 41, 16, 46, 39, -89, -25, -38, 34, -72, -108, 95, 28, 115, -105, -102, -32, 17, -2]),
    new Int8Array([-53, 31, -42, 91, -28, 72, -109, -20, -23, 125, 5, 6, 75, 37, -65, -66, -117, 31, 63, 109, -58, 94, -39, -9, 65, -28, -85, -21, -72, 59]),
    new Int8Array([31, -23, -101, 18, 39, -120, -40, -114, -20, 59, 98, -73, 93, -4, 53, -115, 62, -23, 119, 116, -44, 112, 61, -67, -103, 39, -96, -127, 58, -83]),
    new Int8Array([126, -18, 76, -55, 127, -43, 5, 40, -29, -15, -53, 121, 103, -118, -74, -40, -4, -18, -81, 95, -30, 2, 12, 99, -20, 127, -67, 63, -95, 10]),
    new Int8Array([-86, 24, 1, -128, -68, 21, 78, 74, -26, -73, -84, -56, 113, 83, 60, -21, 73, 24, -25, 70, -16, 44, -24, 41, 52, -68, -74, 85, 35, -100]),
    new Int8Array([82, 3, -83, 16, -103, 33, -64, 78, -43, 114, -101, 25, -93, -32, -119, -9, -92, 3, 120, -63, 30, -117, 29, -88, -120, -103, -33, 41, -18, -99]),
    new Int8Array([-122, -11, -32, 89, 90, -31, -117, 44, -48, 52, -4, -88, -75, 57, 3, -60, 17, -11, 48, -40, 12, -91, -7, -30, 80, 90, -44, 67, 108, 11]),
    new Int8Array([-25, -14, 55, -126, 2, -68, 86, -118, -33, -2, 85, 102, -113, 79, -128, -111, -45, -14, -24, -13, 58, -41, -56, 60, 37, 2, -55, -3, -9, -84]),
    new Int8Array([51, 4, 122, -53, -63, 124, 29, -24, -38, -72, 50, -41, -103, -106, 10, -94, 102, 4, -96, -22, 40, -7, 44, 118, -3, -63, -62, -105, 117, 58]),
    new Int8Array([37, -4, -124, 41, -78, 6, -15, -37, -63, 119, 26, -25, -5, -93, -101, 59, 74, -4, 69, -91, 86, 51, -86, -99, -49, -78, -13, -100, -36, -1]),
    new Int8Array([-15, 10, -55, 96, 113, -58, -70, -71, -60, 49, 125, 86, -19, 122, 17, 8, -1, 10, 13, -68, 68, 29, 78, -41, 23, 113, -8, -10, 94, 105]),
    new Int8Array([-112, 13, 30, -69, 41, -101, 103, 31, -53, -5, -44, -104, -41, 12, -110, 93, 61, 13, -43, -105, 114, 111, 127, 9, 98, 41, -27, 72, -59, -50]),
    new Int8Array([68, -5, 83, -14, -22, 91, 44, 125, -50, -67, -77, 41, -63, -43, 24, 110, -120, -5, -99, -114, 96, 65, -101, 67, -70, -22, -18, 34, 71, 88]),
    new Int8Array([125, 59, 91, -122, 99, -13, 102, 23, -83, 108, -70, 39, 110, 119, -27, 101, -6, 59, -10, -124, -77, 60, -120, 22, 7, 99, 55, -80, 66, -52]),
    new Int8Array([-87, -51, 22, -49, -96, 51, 45, 117, -88, 42, -35, -106, 120, -82, 111, 86, 79, -51, -66, -99, -95, 18, 108, 92, -33, -96, 60, -38, -64, 90]),
    new Int8Array([-56, -54, -63, 20, -8, 110, -16, -45, -89, -32, 116, 88, 66, -40, -20, 3, -115, -54, 102, -74, -105, 96, 93, -126, -86, -8, 33, 100, 91, -3]),
    new Int8Array([28, 60, -116, 93, 59, -82, -69, -79, -94, -90, 19, -23, 84, 1, 102, 48, 56, 60, 46, -81, -123, 78, -71, -56, 114, 59, 42, 14, -39, 107]),
    new Int8Array([10, -60, 114, -65, 72, -44, 87, -126, -71, 105, 59, -39, 54, 52, -9, -87, 20, -60, -53, -32, -5, -124, 63, 35, 64, 72, 27, 5, 112, -82]),
    new Int8Array([-34, 50, 63, -10, -117, 20, 28, -32, -68, 47, 92, 104, 32, -19, 125, -102, -95, 50, -125, -7, -23, -86, -37, 105, -104, -117, 16, 111, -14, 56]),
    new Int8Array([-65, 53, -24, 45, -45, 73, -63, 70, -77, -27, -11, -90, 26, -101, -2, -49, 99, 53, 91, -46, -33, -40, -22, -73, -19, -45, 13, -47, 105, -97]),
    new Int8Array([107, -61, -91, 100, 16, -119, -118, 36, -74, -93, -110, 23, 12, 66, 116, -4, -42, -61, 19, -53, -51, -10, 14, -3, 53, 16, 6, -69, -21, 9]),
    new Int8Array([-109, -40, 9, -12, 53, -67, 4, 32, -123, 102, -91, -58, -34, -15, -63, -32, 59, -40, -116, 76, 35, 81, -5, 124, -119, 53, 111, -57, 38, 8]),
    new Int8Array([71, 46, 68, -67, -10, 125, 79, 66, -128, 32, -62, 119, -56, 40, 75, -45, -114, 46, -60, 85, 49, 127, 31, 54, 81, -10, 100, -83, -92, -98]),
    new Int8Array([38, 41, -109, 102, -82, 32, -110, -28, -113, -22, 107, -71, -14, 94, -56, -122, 76, 41, 28, 126, 7, 13, 46, -24, 36, -82, 121, 19, 63, 57]),
    new Int8Array([-14, -33, -34, 47, 109, -32, -39, -122, -118, -84, 12, 8, -28, -121, 66, -75, -7, -33, 84, 103, 21, 35, -54, -94, -4, 109, 114, 121, -67, -81]),
    new Int8Array([-28, 39, 32, -51, 30, -102, 53, -75, -111, 99, 36, 56, -122, -78, -45, 44, -43, 39, -79, 40, 107, -23, 76, 73, -50, 30, 67, 114, 20, 106]),
    new Int8Array([48, -47, 109, -124, -35, 90, 126, -41, -108, 37, 67, -119, -112, 107, 89, 31, 96, -47, -7, 49, 121, -57, -88, 3, 22, -35, 72, 24, -106, -4]),
    new Int8Array([81, -42, -70, 95, -123, 7, -93, 113, -101, -17, -22, 71, -86, 29, -38, 74, -94, -42, 33, 26, 79, -75, -103, -35, 99, -123, 85, -90, 13, 91]),
    new Int8Array([-123, 32, -9, 22, 70, -57, -24, 19, -98, -87, -115, -10, -68, -60, 80, 121, 23, 32, 105, 3, 93, -101, 125, -105, -69, 70, 94, -52, -113, -51]),
    new Int8Array([70, -106, 73, 115, 9, -108, 110, 87, -70, -96, -19, -74, -49, -120, 122, -72, -116, -106, -13, 28, -11, -98, 99, -18, 8, 9, -23, 35, 14, -36]),
    new Int8Array([-110, 96, 4, 58, -54, 84, 37, 53, -65, -26, -118, 7, -39, 81, -16, -117, 57, 96, -69, 5, -25, -80, -121, -92, -48, -54, -30, 73, -116, 74]),
    new Int8Array([-13, 103, -45, -31, -110, 9, -8, -109, -80, 44, 35, -55, -29, 39, 115, -34, -5, 103, 99, 46, -47, -62, -74, 122, -91, -110, -1, -9, 23, -19]),
    new Int8Array([39, -111, -98, -88, 81, -55, -77, -15, -75, 106, 68, 120, -11, -2, -7, -19, 78, -111, 43, 55, -61, -20, 82, 48, 125, 81, -12, -99, -107, 123]),
    new Int8Array([49, 105, 96, 74, 34, -77, 95, -62, -82, -91, 108, 72, -105, -53, 104, 116, 98, 105, -50, 120, -67, 38, -44, -37, 79, 34, -59, -106, 60, -66]),
    new Int8Array([-27, -97, 45, 3, -31, 115, 20, -96, -85, -29, 11, -7, -127, 18, -30, 71, -41, -97, -122, 97, -81, 8, 48, -111, -105, -31, -50, -4, -66, 40]),
    new Int8Array([-124, -104, -6, -40, -71, 46, -55, 6, -92, 41, -94, 55, -69, 100, 97, 18, 21, -104, 94, 74, -103, 122, 1, 79, -30, -71, -45, 66, 37, -113]),
    new Int8Array([80, 110, -73, -111, 122, -18, -126, 100, -95, 111, -59, -122, -83, -67, -21, 33, -96, 110, 22, 83, -117, 84, -27, 5, 58, 122, -40, 40, -89, 25]),
    new Int8Array([-88, 117, 27, 1, 95, -38, 12, 96, -110, -86, -14, 87, 127, 14, 94, 61, 77, 117, -119, -44, 101, -13, 16, -124, -122, 95, -79, 84, 106, 24]),
    new Int8Array([124, -125, 86, 72, -100, 26, 71, 2, -105, -20, -107, -26, 105, -41, -44, 14, -8, -125, -63, -51, 119, -35, -12, -50, 94, -100, -70, 62, -24, -114]),
    new Int8Array([29, -124, -127, -109, -60, 71, -102, -92, -104, 38, 60, 40, 83, -95, 87, 91, 58, -124, 25, -26, 65, -81, -59, 16, 43, -60, -89, -128, 115, 41]),
    new Int8Array([-55, 114, -52, -38, 7, -121, -47, -58, -99, 96, 91, -103, 69, 120, -35, 104, -113, 114, 81, -1, 83, -127, 33, 90, -13, 7, -84, -22, -15, -65]),
    new Int8Array([-33, -118, 50, 56, 116, -3, 61, -11, -122, -81, 115, -87, 39, 77, 76, -15, -93, -118, -76, -80, 45, 75, -89, -79, -63, 116, -99, -31, 88, 122]),
    new Int8Array([11, 124, 127, 113, -73, 61, 118, -105, -125, -23, 20, 24, 49, -108, -58, -62, 22, 124, -4, -87, 63, 101, 67, -5, 25, -73, -106, -117, -38, -20]),
    new Int8Array([106, 123, -88, -86, -17, 96, -85, 49, -116, 35, -67, -42, 11, -30, 69, -105, -44, 123, 36, -126, 9, 23, 114, 37, 108, -17, -117, 53, 65, 75]),
    new Int8Array([-66, -115, -27, -29, 44, -96, -32, 83, -119, 101, -38, 103, 29, 59, -49, -92, 97, -115, 108, -101, 27, 57, -106, 111, -76, 44, -128, 95, -61, -35]),
    new Int8Array([-121, 77, -19, -105, -91, 8, -86, 57, -22, -76, -45, 105, -78, -103, 50, -81, 19, 77, 7, -111, -56, 68, -123, 58, 9, -91, 89, -51, -58, 73]),
    new Int8Array([83, -69, -96, -34, 102, -56, -31, 91, -17, -14, -76, -40, -92, 64, -72, -100, -90, -69, 79, -120, -38, 106, 97, 112, -47, 102, 82, -89, 68, -33]),
    new Int8Array([50, -68, 119, 5, 62, -107, 60, -3, -32, 56, 29, 22, -98, 54, 59, -55, 100, -68, -105, -93, -20, 24, 80, -82, -92, 62, 79, 25, -33, 120]),
    new Int8Array([-26, 74, 58, 76, -3, 85, 119, -97, -27, 126, 122, -89, -120, -17, -79, -6, -47, 74, -33, -70, -2, 54, -76, -28, 124, -3, 68, 115, 93, -18]),
    new Int8Array([-16, -78, -60, -82, -114, 47, -101, -84, -2, -79, 82, -105, -22, -38, 32, 99, -3, -78, 58, -11, -128, -4, 50, 15, 78, -114, 117, 120, -12, 43]),
    new Int8Array([36, 68, -119, -25, 77, -17, -48, -50, -5, -9, 53, 38, -4, 3, -86, 80, 72, 68, 114, -20, -110, -46, -42, 69, -106, 77, 126, 18, 118, -67]),
    new Int8Array([69, 67, 94, 60, 21, -78, 13, 104, -12, 61, -100, -24, -58, 117, 41, 5, -118, 67, -86, -57, -92, -96, -25, -101, -29, 21, 99, -84, -19, 26]),
    new Int8Array([-111, -75, 19, 117, -42, 114, 70, 10, -15, 123, -5, 89, -48, -84, -93, 54, 63, -75, -30, -34, -74, -114, 3, -47, 59, -42, 104, -58, 111, -116]),
    new Int8Array([105, -82, -65, -27, -13, 70, -56, 14, -62, -66, -52, -120, 2, 31, 22, 42, -46, -82, 125, 89, 88, 41, -10, 80, -121, -13, 1, -70, -94, -115]),
    new Int8Array([-67, 88, -14, -84, 48, -122, -125, 108, -57, -8, -85, 57, 20, -58, -100, 25, 103, 88, 53, 64, 74, 7, 18, 26, 95, 48, 10, -48, 32, 27]),
    new Int8Array([-36, 95, 37, 119, 104, -37, 94, -54, -56, 50, 2, -9, 46, -80, 31, 76, -91, 95, -19, 107, 124, 117, 35, -60, 42, 104, 23, 110, -69, -68]),
    new Int8Array([8, -87, 104, 62, -85, 27, 21, -88, -51, 116, 101, 70, 56, 105, -107, 127, 16, -87, -91, 114, 110, 91, -57, -114, -14, -85, 28, 4, 57, 42]),
    new Int8Array([30, 81, -106, -36, -40, 97, -7, -101, -42, -69, 77, 118, 90, 92, 4, -26, 60, 81, 64, 61, 16, -111, 65, 101, -64, -40, 45, 15, -112, -17]),
    new Int8Array([-54, -89, -37, -107, 27, -95, -78, -7, -45, -3, 42, -57, 76, -123, -114, -43, -119, -89, 8, 36, 2, -65, -91, 47, 24, 27, 38, 101, 18, 121]),
    new Int8Array([-85, -96, 12, 78, 67, -4, 111, 95, -36, 55, -125, 9, 118, -13, 13, -128, 75, -96, -48, 15, 52, -51, -108, -15, 109, 67, 59, -37, -119, -34]),
    new Int8Array([127, 86, 65, 7, -128, 60, 36, 61, -39, 113, -28, -72, 96, 42, -121, -77, -2, 86, -104, 22, 38, -29, 112, -69, -75, -128, 48, -79, 11, 72]),
    new Int8Array([-39, 61, 28, -90, 76, -79, -5, -117, 26, -120, -111, 21, 53, -86, -22, -106, -81, 61, 6, 27, -113, 55, -78, 91, 10, 76, -108, -30, -125, -21]),
    new Int8Array([13, -53, 81, -17, -113, 113, -80, -23, 31, -50, -10, -92, 35, 115, 96, -91, 26, -53, 78, 2, -99, 25, 86, 17, -46, -113, -97, -120, 1, 125]),
    new Int8Array([108, -52, -122, 52, -41, 44, 109, 79, 16, 4, 95, 106, 25, 5, -29, -16, -40, -52, -106, 41, -85, 107, 103, -49, -89, -41, -126, 54, -102, -38]),
    new Int8Array([-72, 58, -53, 125, 20, -20, 38, 45, 21, 66, 56, -37, 15, -36, 105, -61, 109, 58, -34, 48, -71, 69, -125, -123, 127, 20, -119, 92, 24, 76]),
    new Int8Array([-82, -62, 53, -97, 103, -106, -54, 30, 14, -115, 16, -21, 109, -23, -8, 90, 65, -62, 59, 127, -57, -113, 5, 110, 77, 103, -72, 87, -79, -119]),
    new Int8Array([122, 52, 120, -42, -92, 86, -127, 124, 11, -53, 119, 90, 123, 48, 114, 105, -12, 52, 115, 102, -43, -95, -31, 36, -107, -92, -77, 61, 51, 31]),
    new Int8Array([27, 51, -81, 13, -4, 11, 92, -38, 4, 1, -34, -108, 65, 70, -15, 60, 54, 51, -85, 77, -29, -45, -48, -6, -32, -4, -82, -125, -88, -72]),
    new Int8Array([-49, -59, -30, 68, 63, -53, 23, -72, 1, 71, -71, 37, 87, -97, 123, 15, -125, -59, -29, 84, -15, -3, 52, -80, 56, 63, -91, -23, 42, 46]),
    new Int8Array([55, -34, 78, -44, 26, -1, -103, -68, 50, -126, -114, -12, -123, 44, -50, 19, 110, -34, 124, -45, 31, 90, -63, 49, -124, 26, -52, -107, -25, 47]),
    new Int8Array([-29, 40, 3, -99, -39, 63, -46, -34, 55, -60, -23, 69, -109, -11, 68, 32, -37, 40, 52, -54, 13, 116, 37, 123, 92, -39, -57, -1, 101, -71]),
    new Int8Array([-126, 47, -44, 70, -127, 98, 15, 120, 56, 14, 64, -117, -87, -125, -57, 117, 25, 47, -20, -31, 59, 6, 20, -91, 41, -127, -38, 65, -2, 30]),
    new Int8Array([86, -39, -103, 15, 66, -94, 68, 26, 61, 72, 39, 58, -65, 90, 77, 70, -84, -39, -92, -8, 41, 40, -16, -17, -15, 66, -47, 43, 124, -120]),
    new Int8Array([64, 33, 103, -19, 49, -40, -88, 41, 38, -121, 15, 10, -35, 111, -36, -33, -128, 33, 65, -73, 87, -30, 118, 4, -61, 49, -32, 32, -43, 77]),
    new Int8Array([-108, -41, 42, -92, -14, 24, -29, 75, 35, -63, 104, -69, -53, -74, 86, -20, 53, -41, 9, -82, 69, -52, -110, 78, 27, -14, -21, 74, 87, -37]),
    new Int8Array([-11, -48, -3, 127, -86, 69, 62, -19, 44, 11, -63, 117, -15, -64, -43, -71, -9, -48, -47, -123, 115, -66, -93, -112, 110, -86, -10, -12, -52, 124]),
    new Int8Array([33, 38, -80, 54, 105, -123, 117, -113, 41, 77, -90, -60, -25, 25, 95, -118, 66, 38, -103, -100, 97, -112, 71, -38, -74, 105, -3, -98, 78, -22]),
    new Int8Array([24, -26, -72, 66, -32, 45, 63, -27, 74, -100, -81, -54, 72, -69, -94, -127, 48, -26, -14, -106, -78, -19, 84, -113, 11, -32, 36, 12, 75, 126]),
    new Int8Array([-52, 16, -11, 11, 35, -19, 116, -121, 79, -38, -56, 123, 94, 98, 40, -78, -123, 16, -70, -113, -96, -61, -80, -59, -45, 35, 47, 102, -55, -24]),
    new Int8Array([-83, 23, 34, -48, 123, -80, -87, 33, 64, 16, 97, -75, 100, 20, -85, -25, 71, 23, 98, -92, -106, -79, -127, 27, -90, 123, 50, -40, 82, 79]),
    new Int8Array([121, -31, 111, -103, -72, 112, -30, 67, 69, 86, 6, 4, 114, -51, 33, -44, -14, -31, 42, -67, -124, -97, 101, 81, 126, -72, 57, -78, -48, -39]),
    new Int8Array([111, 25, -111, 123, -53, 10, 14, 112, 94, -103, 46, 52, 16, -8, -80, 77, -34, 25, -49, -14, -6, 85, -29, -70, 76, -53, 8, -71, 121, 28]),
    new Int8Array([-69, -17, -36, 50, 8, -54, 69, 18, 91, -33, 73, -123, 6, 33, 58, 126, 107, -17, -121, -21, -24, 123, 7, -16, -108, 8, 3, -45, -5, -118]),
    new Int8Array([-38, -24, 11, -23, 80, -105, -104, -76, 84, 21, -32, 75, 60, 87, -71, 43, -87, -24, 95, -64, -34, 9, 54, 46, -31, 80, 30, 109, 96, 45]),
    new Int8Array([14, 30, 70, -96, -109, 87, -45, -42, 81, 83, -121, -6, 42, -114, 51, 24, 28, 30, 23, -39, -52, 39, -46, 100, 57, -109, 21, 7, -30, -69]),
    new Int8Array([-10, 5, -22, 48, -74, 99, 93, -46, 98, -106, -80, 43, -8, 61, -122, 4, -15, 5, -120, 94, 34, -128, 39, -27, -123, -74, 124, 123, 47, -70]),
    new Int8Array([34, -13, -89, 121, 117, -93, 22, -80, 103, -48, -41, -102, -18, -28, 12, 55, 68, -13, -64, 71, 48, -82, -61, -81, 93, 117, 119, 17, -83, 44]),
    new Int8Array([67, -12, 112, -94, 45, -2, -53, 22, 104, 26, 126, 84, -44, -110, -113, 98, -122, -12, 24, 108, 6, -36, -14, 113, 40, 45, 106, -81, 54, -117]),
    new Int8Array([-105, 2, 61, -21, -18, 62, -128, 116, 109, 92, 25, -27, -62, 75, 5, 81, 51, 2, 80, 117, 20, -14, 22, 59, -16, -18, 97, -59, -76, 29]),
    new Int8Array([-127, -6, -61, 9, -99, 68, 108, 71, 118, -109, 49, -43, -96, 126, -108, -56, 31, -6, -75, 58, 106, 56, -112, -48, -62, -99, 80, -50, 29, -40]),
    new Int8Array([85, 12, -114, 64, 94, -124, 39, 37, 115, -43, 86, 100, -74, -89, 30, -5, -86, 12, -3, 35, 120, 22, 116, -102, 26, 94, 91, -92, -97, 78]),
    new Int8Array([52, 11, 89, -101, 6, -39, -6, -125, 124, 31, -1, -86, -116, -47, -99, -82, 104, 11, 37, 8, 78, 100, 69, 68, 111, 6, 70, 26, 4, -23]),
    new Int8Array([-32, -3, 20, -46, -59, 25, -79, -31, 121, 89, -104, 27, -102, 8, 23, -99, -35, -3, 109, 17, 92, 74, -95, 14, -73, -59, 77, 112, -122, 127]),
    new Int8Array([101, -35, -29, -60, -125, -34, 89, -14, -25, -16, 21, -19, 38, -52, 71, -28, -54, -35, 4, 18, 1, -47, -36, -103, 12, -125, 19, -68, 9, -78]),
    new Int8Array([-79, 43, -82, -115, 64, 30, 18, -112, -30, -74, 114, 92, 48, 21, -51, -41, 127, 43, 76, 11, 19, -1, 56, -45, -44, 64, 24, -42, -117, 36]),
    new Int8Array([-48, 44, 121, 86, 24, 67, -49, 54, -19, 124, -37, -110, 10, 99, 78, -126, -67, 44, -108, 32, 37, -115, 9, 13, -95, 24, 5, 104, 16, -125]),
    new Int8Array([4, -38, 52, 31, -37, -125, -124, 84, -24, 58, -68, 35, 28, -70, -60, -79, 8, -38, -36, 57, 55, -93, -19, 71, 121, -37, 14, 2, -110, 21]),
    new Int8Array([18, 34, -54, -3, -88, -7, 104, 103, -13, -11, -108, 19, 126, -113, 85, 40, 36, 34, 57, 118, 73, 105, 107, -84, 75, -88, 63, 9, 59, -48]),
    new Int8Array([-58, -44, -121, -76, 107, 57, 35, 5, -10, -77, -13, -94, 104, 86, -33, 27, -111, -44, 113, 111, 91, 71, -113, -26, -109, 107, 52, 99, -71, 70]),
    new Int8Array([-89, -45, 80, 111, 51, 100, -2, -93, -7, 121, 90, 108, 82, 32, 92, 78, 83, -45, -87, 68, 109, 53, -66, 56, -26, 51, 41, -35, 34, -31]),
    new Int8Array([115, 37, 29, 38, -16, -92, -75, -63, -4, 63, 61, -35, 68, -7, -42, 125, -26, 37, -31, 93, 127, 27, 90, 114, 62, -16, 34, -73, -96, 119]),
    new Int8Array([-117, 62, -79, -74, -43, -112, 59, -59, -49, -6, 10, 12, -106, 74, 99, 97, 11, 62, 126, -38, -111, -68, -81, -13, -126, -43, 75, -53, 109, 118]),
    new Int8Array([95, -56, -4, -1, 22, 80, 112, -89, -54, -68, 109, -67, -128, -109, -23, 82, -66, -56, 54, -61, -125, -110, 75, -71, 90, 22, 64, -95, -17, -32]),
    new Int8Array([62, -49, 43, 36, 78, 13, -83, 1, -59, 118, -60, 115, -70, -27, 106, 7, 124, -49, -18, -24, -75, -32, 122, 103, 47, 78, 93, 31, 116, 71]),
    new Int8Array([-22, 57, 102, 109, -115, -51, -26, 99, -64, 48, -93, -62, -84, 60, -32, 52, -55, 57, -90, -15, -89, -50, -98, 45, -9, -115, 86, 117, -10, -47]),
    new Int8Array([-4, -63, -104, -113, -2, -73, 10, 80, -37, -1, -117, -14, -50, 9, 113, -83, -27, -63, 67, -66, -39, 4, 24, -58, -59, -2, 103, 126, 95, 20]),
    new Int8Array([40, 55, -43, -58, 61, 119, 65, 50, -34, -71, -20, 67, -40, -48, -5, -98, 80, 55, 11, -89, -53, 42, -4, -116, 29, 61, 108, 20, -35, -126]),
    new Int8Array([73, 48, 2, 29, 101, 42, -100, -108, -47, 115, 69, -115, -30, -90, 120, -53, -110, 48, -45, -116, -3, 88, -51, 82, 104, 101, 113, -86, 70, 37]),
    new Int8Array([-99, -58, 79, 84, -90, -22, -41, -10, -44, 53, 34, 60, -12, 127, -14, -8, 39, -58, -101, -107, -17, 118, 41, 24, -80, -90, 122, -64, -60, -77]),
    new Int8Array([-92, 6, 71, 32, 47, 66, -99, -100, -73, -28, 43, 50, 91, -35, 15, -13, 85, 6, -16, -97, 60, 11, 58, 77, 13, 47, -93, 82, -63, 39]),
    new Int8Array([112, -16, 10, 105, -20, -126, -42, -2, -78, -94, 76, -125, 77, 4, -123, -64, -32, -16, -72, -122, 46, 37, -34, 7, -43, -20, -88, 56, 67, -79]),
    new Int8Array([17, -9, -35, -78, -76, -33, 11, 88, -67, 104, -27, 77, 119, 114, 6, -107, 34, -9, 96, -83, 24, 87, -17, -39, -96, -76, -75, -122, -40, 22]),
    new Int8Array([-59, 1, -112, -5, 119, 31, 64, 58, -72, 46, -126, -4, 97, -85, -116, -90, -105, 1, 40, -76, 10, 121, 11, -109, 120, 119, -66, -20, 90, -128]),
    new Int8Array([-45, -7, 110, 25, 4, 101, -84, 9, -93, -31, -86, -52, 3, -98, 29, 63, -69, -7, -51, -5, 116, -77, -115, 120, 74, 4, -113, -25, -13, 69]),
    new Int8Array([7, 15, 35, 80, -57, -91, -25, 107, -90, -89, -51, 125, 21, 71, -105, 12, 14, 15, -123, -30, 102, -99, 105, 50, -110, -57, -124, -115, 113, -45]),
    new Int8Array([102, 8, -12, -117, -97, -8, 58, -51, -87, 109, 100, -77, 47, 49, 20, 89, -52, 8, 93, -55, 80, -17, 88, -20, -25, -97, -103, 51, -22, 116]),
    new Int8Array([-78, -2, -71, -62, 92, 56, 113, -81, -84, 43, 3, 2, 57, -24, -98, 106, 121, -2, 21, -48, 66, -63, -68, -90, 63, 92, -110, 89, 104, -30]),
    new Int8Array([74, -27, 21, 82, 121, 12, -1, -85, -97, -18, 52, -45, -21, 91, 43, 118, -108, -27, -118, 87, -84, 102, 73, 39, -125, 121, -5, 37, -91, -29]),
    new Int8Array([-98, 19, 88, 27, -70, -52, -76, -55, -102, -88, 83, 98, -3, -126, -95, 69, 33, 19, -62, 78, -66, 72, -83, 109, 91, -70, -16, 79, 39, 117]),
    new Int8Array([-1, 20, -113, -64, -30, -111, 105, 111, -107, 98, -6, -84, -57, -12, 34, 16, -29, 20, 26, 101, -120, 58, -100, -77, 46, -30, -19, -15, -68, -46]),
    new Int8Array([43, -30, -62, -119, 33, 81, 34, 13, -112, 36, -99, 29, -47, 45, -88, 35, 86, -30, 82, 124, -102, 20, 120, -7, -10, 33, -26, -101, 62, 68]),
    new Int8Array([61, 26, 60, 107, 82, 43, -50, 62, -117, -21, -75, 45, -77, 24, 57, -70, 122, 26, -73, 51, -28, -34, -2, 18, -60, 82, -41, -112, -105, -127]),
    new Int8Array([-23, -20, 113, 34, -111, -21, -123, 92, -114, -83, -46, -100, -91, -63, -77, -119, -49, -20, -1, 42, -10, -16, 26, 88, 28, -111, -36, -6, 21, 23]),
    new Int8Array([-120, -21, -90, -7, -55, -74, 88, -6, -127, 103, 123, 82, -97, -73, 48, -36, 13, -21, 39, 1, -64, -126, 43, -122, 105, -55, -63, 68, -114, -80]),
    new Int8Array([92, 29, -21, -80, 10, 118, 19, -104, -124, 33, 28, -29, -119, 110, -70, -17, -72, 29, 111, 24, -46, -84, -49, -52, -79, 10, -54, 46, 12, 38]),
    new Int8Array([-6, 118, -74, 17, -58, -5, -52, 46, 71, -40, 105, 78, -36, -18, -41, -54, -23, 118, -15, 21, 123, 120, 13, 44, 14, -58, 110, 125, -124, -123]),
    new Int8Array([46, -128, -5, 88, 5, 59, -121, 76, 66, -98, 14, -1, -54, 55, 93, -7, 92, -128, -71, 12, 105, 86, -23, 102, -42, 5, 101, 23, 6, 19]),
    new Int8Array([79, -121, 44, -125, 93, 102, 90, -22, 77, 84, -89, 49, -16, 65, -34, -84, -98, -121, 97, 39, 95, 36, -40, -72, -93, 93, 120, -87, -99, -76]),
    new Int8Array([-101, 113, 97, -54, -98, -90, 17, -120, 72, 18, -64, -128, -26, -104, 84, -97, 43, 113, 41, 62, 77, 10, 60, -14, 123, -98, 115, -61, 31, 34]),
    new Int8Array([-115, -119, -97, 40, -19, -36, -3, -69, 83, -35, -24, -80, -124, -83, -59, 6, 7, -119, -52, 113, 51, -64, -70, 25, 73, -19, 66, -56, -74, -25]),
    new Int8Array([89, 127, -46, 97, 46, 28, -74, -39, 86, -101, -113, 1, -110, 116, 79, 53, -78, 127, -124, 104, 33, -18, 94, 83, -111, 46, 73, -94, 52, 113]),
    new Int8Array([56, 120, 5, -70, 118, 65, 107, 127, 89, 81, 38, -49, -88, 2, -52, 96, 112, 120, 92, 67, 23, -100, 111, -115, -28, 118, 84, 28, -81, -42]),
    new Int8Array([-20, -114, 72, -13, -75, -127, 32, 29, 92, 23, 65, 126, -66, -37, 70, 83, -59, -114, 20, 90, 5, -78, -117, -57, 60, -75, 95, 118, 45, 64]),
    new Int8Array([20, -107, -28, 99, -112, -75, -82, 25, 111, -46, 118, -81, 108, 104, -13, 79, 40, -107, -117, -35, -21, 21, 126, 70, -128, -112, 54, 10, -32, 65]),
    new Int8Array([-64, 99, -87, 42, 83, 117, -27, 123, 106, -108, 17, 30, 122, -79, 121, 124, -99, 99, -61, -60, -7, 59, -102, 12, 88, 83, 61, 96, 98, -41]),
    new Int8Array([-95, 100, 126, -15, 11, 40, 56, -35, 101, 94, -72, -48, 64, -57, -6, 41, 95, 100, 27, -17, -49, 73, -85, -46, 45, 11, 32, -34, -7, 112]),
    new Int8Array([117, -110, 51, -72, -56, -24, 115, -65, 96, 24, -33, 97, 86, 30, 112, 26, -22, -110, 83, -10, -35, 103, 79, -104, -11, -56, 43, -76, 123, -26]),
    new Int8Array([99, 106, -51, 90, -69, -110, -97, -116, 123, -41, -9, 81, 52, 43, -31, -125, -58, 106, -74, -71, -93, -83, -55, 115, -57, -69, 26, -65, -46, 35]),
    new Int8Array([-73, -100, -128, 19, 120, 82, -44, -18, 126, -111, -112, -32, 34, -14, 107, -80, 115, -100, -2, -96, -79, -125, 45, 57, 31, 120, 17, -43, 80, -75]),
    new Int8Array([-42, -101, 87, -56, 32, 15, 9, 72, 113, 91, 57, 46, 24, -124, -24, -27, -79, -101, 38, -117, -121, -15, 28, -25, 106, 32, 12, 107, -53, 18]),
    new Int8Array([2, 109, 26, -127, -29, -49, 66, 42, 116, 29, 94, -97, 14, 93, 98, -42, 4, 109, 110, -110, -107, -33, -8, -83, -78, -29, 7, 1, 73, -124]),
    new Int8Array([59, -83, 18, -11, 106, 103, 8, 64, 23, -52, 87, -111, -95, -1, -97, -35, 118, -83, 5, -104, 70, -94, -21, -8, 15, 106, -34, -109, 76, 16]),
    new Int8Array([-17, 91, 95, -68, -87, -89, 67, 34, 18, -118, 48, 32, -73, 38, 21, -18, -61, 91, 77, -127, 84, -116, 15, -78, -41, -87, -43, -7, -50, -122]),
    new Int8Array([-114, 92, -120, 103, -15, -6, -98, -124, 29, 64, -103, -18, -115, 80, -106, -69, 1, 92, -107, -86, 98, -2, 62, 108, -94, -15, -56, 71, 85, 33]),
    new Int8Array([90, -86, -59, 46, 50, 58, -43, -26, 24, 6, -2, 95, -101, -119, 28, -120, -76, -86, -35, -77, 112, -48, -38, 38, 122, 50, -61, 45, -41, -73]),
    new Int8Array([76, 82, 59, -52, 65, 64, 57, -43, 3, -55, -42, 111, -7, -68, -115, 17, -104, 82, 56, -4, 14, 26, 92, -51, 72, 65, -14, 38, 126, 114]),
    new Int8Array([-104, -92, 118, -123, -126, -128, 114, -73, 6, -113, -79, -34, -17, 101, 7, 34, 45, -92, 112, -27, 28, 52, -72, -121, -112, -126, -7, 76, -4, -28]),
    new Int8Array([-7, -93, -95, 94, -38, -35, -81, 17, 9, 69, 24, 16, -43, 19, -124, 119, -17, -93, -88, -50, 42, 70, -119, 89, -27, -38, -28, -14, 103, 67]),
    new Int8Array([45, 85, -20, 23, 25, 29, -28, 115, 12, 3, 127, -95, -61, -54, 14, 68, 90, 85, -32, -41, 56, 104, 109, 19, 61, 25, -17, -104, -27, -43]),
    new Int8Array([-43, 78, 64, -121, 60, 41, 106, 119, 63, -58, 72, 112, 17, 121, -69, 88, -73, 78, 127, 80, -42, -49, -104, -110, -127, 60, -122, -28, 40, -44]),
    new Int8Array([1, -72, 13, -50, -1, -23, 33, 21, 58, -128, 47, -63, 7, -96, 49, 107, 2, -72, 55, 73, -60, -31, 124, -40, 89, -1, -115, -114, -86, 66]),
    new Int8Array([96, -65, -38, 21, -89, -76, -4, -77, 53, 74, -122, 15, 61, -42, -78, 62, -64, -65, -17, 98, -14, -109, 77, 6, 44, -89, -112, 48, 49, -27]),
    new Int8Array([-76, 73, -105, 92, 100, 116, -73, -47, 48, 12, -31, -66, 43, 15, 56, 13, 117, 73, -89, 123, -32, -67, -87, 76, -12, 100, -101, 90, -77, 115]),
    new Int8Array([-94, -79, 105, -66, 23, 14, 91, -30, 43, -61, -55, -114, 73, 58, -87, -108, 89, -79, 66, 52, -98, 119, 47, -89, -58, 23, -86, 81, 26, -74]),
    new Int8Array([118, 71, 36, -9, -44, -50, 16, -128, 46, -123, -82, 63, 95, -29, 35, -89, -20, 71, 10, 45, -116, 89, -53, -19, 30, -44, -95, 59, -104, 32]),
    new Int8Array([23, 64, -13, 44, -116, -109, -51, 38, 33, 79, 7, -15, 101, -107, -96, -14, 46, 64, -46, 6, -70, 43, -6, 51, 107, -116, -68, -123, 3, -121]),
    new Int8Array([-61, -74, -66, 101, 79, 83, -122, 68, 36, 9, 96, 64, 115, 76, 42, -63, -101, -74, -102, 31, -88, 5, 30, 121, -77, 79, -73, -17, -127, 17]),
];

const CodewordNumPlus: Int32Array = new Int32Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8]);

const FormatInformationArray: string[] = [
    '101010000010010',
    '101000100100101',
    '101111001111100',
    '101101101001011',
    '100010111111001',
    '100000011001110',
    '100111110010111',
    '100101010100000',
    '111011111000100',
    '111001011110011',
    '111110110101010',
    '111100010011101',
    '110011000101111',
    '110001100011000',
    '110110001000001',
    '110100101110110',
    '001011010001001',
    '001001110111110',
    '001110011100111',
    '001100111010000',
    '000011101100010',
    '000001001010101',
    '000110100001100',
    '000100000111011',
    '011010101011111',
    '011000001101000',
    '011111100110001',
    '011101000000110',
    '010010010110100',
    '010000110000011',
    '010111011011010',
    '010101111101101'
];

const MaxDataBitsArray: Int32Array = new Int32Array([0, 152, 272, 440, 640, 864, 1088, 1248, 1552, 1856, 2192, 2592, 2960, 3424, 3688, 4184, 4712, 5176, 5768, 6360, 6888, 7456, 8048, 8752, 9392, 10208, 10960, 11744, 12248, 13048, 13880, 14744, 15640, 16568, 17528, 18448, 19472, 20528, 21616, 22496, 23648]);

const MaxCodewordsArray: Int32Array = new Int32Array([0, 26, 44, 70, 100, 134, 172, 196, 242, 292, 346, 404, 466, 532, 581, 655, 733, 815, 901, 991, 1085, 1156, 1258, 1364, 1474, 1588, 1706, 1828, 1921, 2051, 2185, 2323, 2465, 2611, 2761, 2876, 3034, 3196, 3362, 3532, 3706]);

const MatrixRemainBit: Int32Array = new Int32Array([0, 0, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0]);

const FormatInformationX2: Int8Array = new Int8Array([8, 8, 8, 8, 8, 8, 8, 45, 46, 47, 48, 49, 50, 51, 52]);
const FormatInformationY2: Int8Array = new Int8Array([52, 51, 50, 49, 48, 47, 46, 8, 8, 8, 8, 8, 8, 8, 8]);

const FormatInformationX1: Int8Array = new Int8Array([0, 1, 2, 3, 4, 5, 7, 8, 8, 8, 8, 8, 8, 8, 8]);
const FormatInformationY1: Int8Array = new Int8Array([8, 8, 8, 8, 8, 8, 8, 8, 7, 5, 4, 3, 2, 1, 0]);

const D4Value: Int32Array = new Int32Array([90, 80, 70, 60, 50, 40, 30, 20, 10, 0, 0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 90]);

type sbyte = number;
type int = number;

function castToInt8(input: int): sbyte {
    input &= 0xFF;

    if ((input & 0x80) == 0)
        return input;

    return (input & 0x7F) - 128;
}

private static sbyte[] DivideDataBy8Bits(int[] data, sbyte[] bits, int maxDataCodewords)
{
    /* divide Data By 8bit and add padding char */
    int bitsLength = bits.Length;
    int codewordsCounter = 0;
    int remainingBits = 8;
    int max = 0;
    int buffer;
    int bufferBits;
    bool flag;

    for (int i = 0; i < bitsLength; i++)
        max += bits[i];

    sbyte[] codewords = new sbyte[maxDataCodewords];

    for (int i = 0; i < bitsLength; i++)
    {
        buffer = data[i];
        bufferBits = bits[i];
        flag = true;

        if (bufferBits == 0)
            break;

        while (flag)
        {
            if (remainingBits > bufferBits)
            {
                codewords[codewordsCounter] = (sbyte)((codewords[codewordsCounter] << bufferBits) | buffer);
                remainingBits -= bufferBits;
                flag = false;
            }
            else
            {
                bufferBits -= remainingBits;
                codewords[codewordsCounter] = (sbyte)((codewords[codewordsCounter] << remainingBits) | (buffer >> bufferBits));

                if (bufferBits == 0)
                    flag = false;
                else
                {
                    buffer &= (1 << bufferBits) - 1;
                    flag = true;
                }

                codewordsCounter++;
                remainingBits = 8;
            }
        }
    }

    if (remainingBits != 8)
        codewords[codewordsCounter] = (sbyte)(codewords[codewordsCounter] << remainingBits);
    else
        codewordsCounter--;

    if (codewordsCounter < maxDataCodewords - 1)
    {
        flag = true;

        while (codewordsCounter < maxDataCodewords - 1)
        {
            codewordsCounter++;
            if (flag)
                codewords[codewordsCounter] = -20;
            else
                codewords[codewordsCounter] = 17;

            flag = !(flag);
        }
    }

    return codewords;
}

private static sbyte[] ComputeRSECC(sbyte[] codewords, sbyte rsEccCodewords, sbyte[] rsBlockOrder, int maxDataCodewords, int maxCodewords)
{
    /* ---- RS-ECC prepare */

    int j = 0;
    int rsBlockNumber = 0;

    sbyte[][] rsTemp = new sbyte[rsBlockOrder.Length][];

    sbyte[] res = new sbyte[maxCodewords];
    Array.Copy(codewords, 0, res, 0, codewords.Length);

    for (int i = 0; i < rsBlockOrder.Length; i++)
        rsTemp[i] = new sbyte[(rsBlockOrder[i] & 0xFF) - rsEccCodewords];

    for (int i = 0; i < maxDataCodewords; i++)
    {
        rsTemp[rsBlockNumber][j] = codewords[i];
        j++;
        if (j >= (rsBlockOrder[rsBlockNumber] & 0xFF) - rsEccCodewords)
        {
            j = 0;
            rsBlockNumber++;
        }
    }

    /* ---  RS-ECC main --- */

    rsBlockNumber = 0;

    while (rsBlockNumber < rsBlockOrder.Length)
    {
        sbyte[] rsTempData;
        rsTempData = new sbyte[rsTemp[rsBlockNumber].Length];
        rsTemp[rsBlockNumber].CopyTo(rsTempData, 0);

        int rsCodewords = (rsBlockOrder[rsBlockNumber] & 0xFF);
        int rsDataCodewords = rsCodewords - rsEccCodewords;

        j = rsDataCodewords;
        while (j > 0)
        {
            sbyte first = rsTempData[0];
            if (first != 0)
            {
                sbyte[] leftChr = new sbyte[rsTempData.Length - 1];
                Array.Copy(rsTempData, 1, leftChr, 0, rsTempData.Length - 1);
                sbyte[] cal = RSTableArray[(first & 0xFF)];
                rsTempData = XorArrays(leftChr, cal);
            }
            else
            {
                if (rsEccCodewords < rsTempData.Length)
                {
                    sbyte[] rsTempNew = new sbyte[rsTempData.Length - 1];
                    Array.Copy(rsTempData, 1, rsTempNew, 0, rsTempData.Length - 1);
                    rsTempData = new sbyte[rsTempNew.Length];
                    rsTempNew.CopyTo(rsTempData, 0);
                }
                else
                {
                    sbyte[] rsTempNew = new sbyte[rsEccCodewords];
                    Array.Copy(rsTempData, 1, rsTempNew, 0, rsTempData.Length - 1);

                    rsTempNew[rsEccCodewords - 1] = 0;
                    rsTempData = new sbyte[rsTempNew.Length];
                    rsTempNew.CopyTo(rsTempData, 0);
                }
            }
            j--;
        }

        Array.Copy(rsTempData, 0, res, codewords.Length + rsBlockNumber * rsEccCodewords, (byte)rsEccCodewords);

        rsBlockNumber++;
    }

    return res;
}

private static sbyte[] XorArrays(sbyte[] xa, sbyte[] xb)
{
    sbyte[] result;

    sbyte[] longArray;
    sbyte[] shortArray;

    if (xa.Length > xb.Length)
    {
        longArray = xa;
        shortArray = xb;
    }
    else
    {
        longArray = xb;
        shortArray = xa;
    }

    int longLength = longArray.Length;
    int shortLength = shortArray.Length;

    result = new sbyte[longLength];

    for (int i = 0; i < longLength; i++)
    {
        if (i < shortLength)
            result[i] = (sbyte)(longArray[i] ^ shortArray[i]);
        else
            result[i] = longArray[i];
    }

    return result;
}

private static sbyte SelectMask(sbyte[][] matrixContent, int maxCodewordsBitWithRemain)
{
    int l = matrixContent.Length;
    int[] d1 = new int[] { 0, 0, 0, 0, 0, 0, 0, 0 };
    int[] d2 = new int[] { 0, 0, 0, 0, 0, 0, 0, 0 };
    int[] d3 = new int[] { 0, 0, 0, 0, 0, 0, 0, 0 };
    int[] d4 = new int[] { 0, 0, 0, 0, 0, 0, 0, 0 };

    int d2And = 0;
    int d2Or = 0;
    int[] d4Counter = new int[] { 0, 0, 0, 0, 0, 0, 0, 0 };

    for (int y = 0; y < l; y++)
    {
        int[] xData = new int[] { 0, 0, 0, 0, 0, 0, 0, 0 };
        int[] yData = new int[] { 0, 0, 0, 0, 0, 0, 0, 0 };
        bool[] xD1Flag = new bool[] { false, false, false, false, false, false, false, false };
        bool[] yD1Flag = new bool[] { false, false, false, false, false, false, false, false };

        for (int x = 0; x < l; x++)
        {
            if (x > 0 && y > 0)
            {
                d2And = matrixContent[x][y] & matrixContent[x - 1][y] & matrixContent[x][y - 1] & matrixContent[x - 1][y - 1] & 0xFF;
                d2Or = (matrixContent[x][y] & 0xFF) | (matrixContent[x - 1][y] & 0xFF) | (matrixContent[x][y - 1] & 0xFF) | (matrixContent[x - 1][y - 1] & 0xFF);
            }

            for (int maskNumber = 0; maskNumber < 8; maskNumber++)
            {
                xData[maskNumber] = ((xData[maskNumber] & 63) << 1) | (UnsignedRightShift((matrixContent[x][y] & 0xFF), maskNumber) & 1);
                yData[maskNumber] = ((yData[maskNumber] & 63) << 1) | (UnsignedRightShift((matrixContent[y][x] & 0xFF), maskNumber) & 1);

                if ((matrixContent[x][y] & (1 << maskNumber)) != 0)
                    d4Counter[maskNumber]++;

                if (xData[maskNumber] == 93)
                    d3[maskNumber] += 40;

                if (yData[maskNumber] == 93)
                    d3[maskNumber] += 40;

                if (x > 0 && y > 0)
                {
                    if (((d2And & 1) != 0) || ((d2Or & 1) == 0))
                        d2[maskNumber] += 3;

                    d2And >>= 1;
                    d2Or >>= 1;
                }

                if (((xData[maskNumber] & 0x1F) == 0) || ((xData[maskNumber] & 0x1F) == 0x1F))
                {
                    if (x > 3)
                    {
                        if (xD1Flag[maskNumber])
                            d1[maskNumber]++;
                        else
                        {
                            d1[maskNumber] += 3;
                            xD1Flag[maskNumber] = true;
                        }
                    }
                }
                else
                    xD1Flag[maskNumber] = false;

                if (((yData[maskNumber] & 0x1F) == 0) || ((yData[maskNumber] & 0x1F) == 0x1F))
                {
                    if (x > 3)
                    {
                        if (yD1Flag[maskNumber])
                            d1[maskNumber]++;
                        else
                        {
                            d1[maskNumber] += 3;
                            yD1Flag[maskNumber] = true;
                        }
                    }
                }
                else
                    yD1Flag[maskNumber] = false;
            }
        }
    }

    int minValue = 0;
    sbyte res = 0;

    for (int maskNumber = 0; maskNumber < 8; maskNumber++)
    {
        d4[maskNumber] = D4Value[(20 * d4Counter[maskNumber]) / maxCodewordsBitWithRemain];

        int demerit = d1[maskNumber] + d2[maskNumber] + d3[maskNumber] + d4[maskNumber];

        if (demerit < minValue || maskNumber == 0)
        {
            res = (sbyte)maskNumber;
            minValue = demerit;
        }
    }

    return res;
}

private static int UnsignedRightShift(int number, int bits)
{
    if (number >= 0)
        return number >> bits;
    else
        return (number >> bits) + (2 << ~bits);
}

public static bool[][] ComputeQRCode(byte[] qrcodeData)
{
    int dataLength;
    int dataCounter = 0;

    dataLength = qrcodeData.Length;

    int[] dataValue = new int[dataLength + 32];
    sbyte[] dataBits = new sbyte[dataLength + 32];

    if (dataLength <= 0)
        return null;

    dataBits[dataCounter] = 4;

    /*  --- determine encode mode --- */

    int codewordNumCounterValue;

    /* ---- 8bit byte ---- */

    dataValue[dataCounter] = 4;
    dataCounter++;
    dataValue[dataCounter] = dataLength;
    dataBits[dataCounter] = 8; /* #version 1-9 */
    codewordNumCounterValue = dataCounter;

    dataCounter++;

    for (int i = 0; i < dataLength; i++)
    {
        dataValue[i + dataCounter] = (qrcodeData[i] & 0xFF);
        dataBits[i + dataCounter] = 8;
    }

    dataCounter += dataLength;

    int totalDataBits = 0;
    for (int i = 0; i < dataCounter; i++)
        totalDataBits += dataBits[i];

    int maxDataBits = MaxDataBitsArray[QRCodeVersion];

    totalDataBits += CodewordNumPlus[QRCodeVersion];
    dataBits[codewordNumCounterValue] = (sbyte)(dataBits[codewordNumCounterValue] + CodewordNumPlus[QRCodeVersion]);

    int maxCodewords = MaxCodewordsArray[QRCodeVersion];

    /* ---- read version ECC data file */

    sbyte[] rsEccCodewords = new sbyte[] { 30 };
    sbyte[] rsBlockOrderTemp = new sbyte[128];
    rsBlockOrderTemp[0] = -110;
    rsBlockOrderTemp[1] = -110;

    sbyte rsBlockOrderLength = 2;
    sbyte[] rsBlockOrder = new sbyte[rsBlockOrderLength];
    Array.Copy(rsBlockOrderTemp, 0, rsBlockOrder, 0, (byte)rsBlockOrderLength);

    int maxDataCodewords = maxDataBits >> 3;

    /* -- read frame data  -- */

    int modules1Side = 4 * QRCodeVersion + 17;

    /*  --- set terminator */

    if (totalDataBits <= maxDataBits - 4)
    {
        dataValue[dataCounter] = 0;
        dataBits[dataCounter] = 4;
    }
    else
    {
        if (totalDataBits < maxDataBits)
        {
            dataValue[dataCounter] = 0;
            dataBits[dataCounter] = (sbyte)(maxDataBits - totalDataBits);
        }
        else
        {
            if (totalDataBits > maxDataBits)
                Console.Out.WriteLine("overflow");
        }
    }

    sbyte[] dataCodewords = DivideDataBy8Bits(dataValue, dataBits, maxDataCodewords);
    sbyte[] codewords = ComputeRSECC(dataCodewords, rsEccCodewords[0], rsBlockOrder, maxDataCodewords, maxCodewords);

    /* ---- flash matrix */

    sbyte[][] matrixContent = new sbyte[modules1Side][];

    for (int i = 0; i < modules1Side; i++)
        matrixContent[i] = new sbyte[modules1Side];

    /* --- attach data */
    for (int i = 0; i < maxCodewords; i++)
    {
        sbyte codeword_i = codewords[i];
        for (int j = 7; j >= 0; j--)
        {
            int codewordBitsNumber = (i * 8) + j;

            matrixContent[MatrixX[codewordBitsNumber] & 0xFF][MatrixY[codewordBitsNumber] & 0xFF] = (sbyte)((255 * (codeword_i & 1)) ^ MaskArray[codewordBitsNumber]);
            codeword_i = (sbyte)UnsignedRightShift((codeword_i & 0xFF), 1);
        }
    }

    for (int matrixRemain = MatrixRemainBit[QRCodeVersion]; matrixRemain > 0; matrixRemain--)
    {
        int remainBitTemp = matrixRemain + (maxCodewords * 8) - 1;
        matrixContent[MatrixX[remainBitTemp] & 0xFF][MatrixY[remainBitTemp] & 0xFF] = (sbyte)(255 ^ MaskArray[remainBitTemp]);
    }

    /* --- mask select --- */
    sbyte maskNumber = SelectMask(matrixContent, MatrixRemainBit[QRCodeVersion] + maxCodewords * 8);
    sbyte maskContent = (sbyte)(1 << maskNumber);

    /* --- format information --- */

    sbyte formatInformationValue = (sbyte)(8 | maskNumber);

    for (int i = 0; i < 15; i++)
    {
        int content = FormatInformationArray[formatInformationValue][i] == '0' ? 0 : 1;

        matrixContent[FormatInformationX1[i]][FormatInformationY1[i]] = (sbyte)(content * 255);
        matrixContent[FormatInformationX2[i]][FormatInformationY2[i]] = (sbyte)(content * 255);
    }

    bool[][] out_Renamed = new bool[modules1Side][];
    for (int i3 = 0; i3 < modules1Side; i3++)
        out_Renamed[i3] = new bool[modules1Side];

    int c = 0;

    for (int i = 0; i < modules1Side; i++)
    {
        for (int j = 0; j < modules1Side; j++)
        {
            if ((matrixContent[j][i] & maskContent) != 0 || FrameData[c] == (char)49)
                out_Renamed[j][i] = true;
            else
                out_Renamed[j][i] = false;
            c++;
        }
        c++;
    }

    return out_Renamed;
}
